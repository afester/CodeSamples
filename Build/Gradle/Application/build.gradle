/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'andreas' at '3/2/16 12:37 PM' with Gradle 2.11
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.11/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'

mainClassName = "com.example.Hello"

/*
// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}
*/


repositories {
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the Library project at compile time
    compile project(':Library')

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    // testCompile 'junit:junit:4.12'
}

task fxPrepare(type: Copy, dependsOn: [jar]) {
    from configurations.runtime
    from("build/libs")
    into("build/webstart/lib")
    include('*.jar')
}

task fxInit << {
  ant.typedef(name: 'fxApplication',
              classname: 'com.sun.javafx.tools.ant.Application',
              classpath: '/opt/jdk1.8.0_11/lib/ant-javafx.jar')
  ant.typedef(name: 'fxPlatform',
              classname: 'com.sun.javafx.tools.ant.Platform',
              classpath: '/opt/jdk1.8.0_11/lib/ant-javafx.jar')
  ant.typedef(name: 'fxResources',
              classname: 'com.sun.javafx.tools.ant.Resources',
              classpath: '/opt/jdk1.8.0_11/lib/ant-javafx.jar')
  ant.typedef(name: 'fxFileset',
              classname: 'com.sun.javafx.tools.ant.FileSet',
              classpath: '/opt/jdk1.8.0_11/lib/ant-javafx.jar')
  ant.typedef(name: 'fxFileset',
              classname: 'com.sun.javafx.tools.ant.Preferences',
              classpath: '/opt/jdk1.8.0_11/lib/ant-javafx.jar')

  ant.taskdef(name: 'fxJar',
              classname: 'com.sun.javafx.tools.ant.FXJar',
              classpath: '/opt/jdk1.8.0_11/lib/ant-javafx.jar')
  ant.taskdef(name: 'fxDeploy',
              classname: 'com.sun.javafx.tools.ant.DeployFXTask',
              classpath: '/opt/jdk1.8.0_11/lib/ant-javafx.jar')
  ant.taskdef(name: 'fxSignjar',
              classname: 'com.sun.javafx.tools.ant.FXSignJarTask',
              classpath: '/opt/jdk1.8.0_11/lib/ant-javafx.jar')
  ant.taskdef(name: 'fxCsstobin',
              classname: 'com.sun.javafx.tools.ant.CSSToBinTask',
              classpath: '/opt/jdk1.8.0_11/lib/ant-javafx.jar')
}


task fxSign(dependsOn: [fxInit, fxPrepare]) << {
  printf("Signing jar files ...\n")

  String keystorePass = project.properties['codesign.keystorePassword']
  if (keystorePass == null) {
     keystorePass = ""
  }
  String signingAlias = project.properties['codesign.signingAlias']
  if (signingAlias == null) {
     signingAlias = ""
  }

  // Sign files from Application/build/webstart/lib into the Application/build/signed/ directory
  ant.fxSignjar(destdir : "$buildDir/signed",
                keyStore : "/home/andreas/.keystore",
                storePass : keystorePass,
                alias : signingAlias) {
        fileset(dir : 'build/webstart/lib',
                includes : '*.jar')
  }
}


task fxDeploy(dependsOn: [fxInit, fxSign]) << {
  printf("Creating deployment files ...\n")

  // Create deployment package with all required jar files and the .jnlp and .html files
  // Note that the .html page pulls in the Deployment Toolkit's dtJava.js script which 
  // relies on Applet technology.
  ant.fxDeploy(
               width: 600,
               height: 600,
               outdir: "$buildDir/web-dist",  // destination directory for jar files, html file, jnlp file
               outfile: project.name,      // base name for .jnlp and .html file
               offlineAllowed: 'false') {   // nested elements are defined in closure
     info(title: 'Sample application',
          vendor: '1Trusted Vendor',
          description: 'Sample deployment of one JavaFX application') {
        splash(href: 'http://my.site/custom.gif')
     }
     resources {
        fileset(dir : "$buildDir/signed",
               includes : '*.jar')
     }
//     template (file: 'Sample.html.tpl',
//               toFile: "${buildDir}/web-dist/${project.name}-ws.html")
     application(name: 'Sample JavaFX application',
                 mainClass: 'com.example.Hello')
     permissions(elevated: 'true')
  }
}

task fxDist(type: Zip, dependsOn: [fxDeploy]) {
   from "$buildDir/web-dist"
   include '**/*'
   archiveName = "${project.name}Webstart.zip"   // default directory is "build/distributions"
   description = "Bundles the project as a WebStart application."

   doFirst {
      printf("  $buildDir/distributions/$archiveName\n")
   }
}

