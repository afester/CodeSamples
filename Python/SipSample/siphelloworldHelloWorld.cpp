/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Wed Mar 11 11:57:09 2015
 */

#include "sipAPIhelloworld.h"

#line 6 "HelloWorld.sip"
#include "HelloWorld.h"
#line 12 "./siphelloworldHelloWorld.cpp"



extern "C" {static PyObject *meth_HelloWorld_getGreeting(PyObject *, PyObject *);}
static PyObject *meth_HelloWorld_getGreeting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const HelloWorld *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_HelloWorld, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->getGreeting();

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HelloWorld, sipName_getGreeting, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_HelloWorld(void *, const sipTypeDef *);}
static void *cast_HelloWorld(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_HelloWorld)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_HelloWorld(void *, int);}
static void release_HelloWorld(void *sipCppV,int)
{
    delete reinterpret_cast<HelloWorld *>(sipCppV);
}


extern "C" {static void assign_HelloWorld(void *, SIP_SSIZE_T, const void *);}
static void assign_HelloWorld(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<HelloWorld *>(sipDst)[sipDstIdx] = *reinterpret_cast<const HelloWorld *>(sipSrc);
}


extern "C" {static void *array_HelloWorld(SIP_SSIZE_T);}
static void *array_HelloWorld(SIP_SSIZE_T sipNrElem)
{
    return new HelloWorld[sipNrElem];
}


extern "C" {static void *copy_HelloWorld(const void *, SIP_SSIZE_T);}
static void *copy_HelloWorld(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new HelloWorld(reinterpret_cast<const HelloWorld *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_HelloWorld(sipSimpleWrapper *);}
static void dealloc_HelloWorld(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_HelloWorld(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_HelloWorld(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_HelloWorld(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    HelloWorld *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new HelloWorld();

            return sipCpp;
        }
    }

    {
        const HelloWorld* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_HelloWorld, &a0))
        {
            sipCpp = new HelloWorld(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_HelloWorld[] = {
    {SIP_MLNAME_CAST(sipName_getGreeting), meth_HelloWorld_getGreeting, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef_helloworld_HelloWorld = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_HelloWorld,
        {0}
    },
    {
        sipNameNr_HelloWorld,
        {0, 0, 1},
        1, methods_HelloWorld,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_type_HelloWorld,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_HelloWorld,
    assign_HelloWorld,
    array_HelloWorld,
    copy_HelloWorld,
    release_HelloWorld,
    cast_HelloWorld,
    0,
    0,
    0,
    0,
    0,
    0
};
