// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: VISLIB.DLL

[
  uuid(00021A98-0000-0000-C000-000000000046),
  version(4.12),
  helpstring("Microsoft Visio 12.0 Type Library"),
  helpfile("Vis_SDR.CHM"),
  helpcontext(00000000),
  custom(DE77BA64-517C-11D1-A2DA-0000F8773CE9, 100663657),
  custom(DE77BA63-517C-11D1-A2DA-0000F8773CE9, 1362525862),
  custom(DE77BA65-517C-11D1-A2DA-0000F8773CE9, "Created by MIDL version 6.00.0361 at Tue Mar 05 15:24:21 2013"),
  custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, "Microsoft.Office.Interop.Visio.dll")

]
library Visio
{
    // TLib :     // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    // Forward declare all types defined in this typelib
    interface IVApplication;
    interface IVDocument;
    interface IVMasters;
    interface IVMaster;
    interface IVShapes;
    interface IVShape;
    interface IVCell;
    interface IVStyle;
    interface IVEventList;
    interface IVEvent;
    interface IVSection;
    interface IVRow;
    interface IVCharacters;
    interface IVConnects;
    interface IVConnect;
    interface IVPage;
    interface IVLayers;
    interface IVLayer;
    interface IVWindow;
    interface IVSelection;
    interface IVWindows;
    interface IVMasterShortcut;
    interface IVDataRecordset;
    interface IVDataConnection;
    interface IVDataColumns;
    interface IVDataColumn;
    interface IVOLEObjects;
    interface IVOLEObject;
    interface IVHyperlink;
    interface IVPaths;
    interface IVPath;
    interface IVCurve;
    interface IVHyperlinks;
    interface IVGraphicItems;
    interface IVGraphicItem;
    interface IVPages;
    interface IVStyles;
    interface IVUIObject;
    interface IVMenuSets;
    interface IVMenuSet;
    interface IVMenus;
    interface IVMenu;
    interface IVMenuItems;
    interface IVMenuItem;
    interface IVToolbarSets;
    interface IVToolbarSet;
    interface IVToolbars;
    interface IVToolbar;
    interface IVToolbarItems;
    interface IVToolbarItem;
    interface IVStatusBars;
    interface IVStatusBar;
    interface IVStatusBarItems;
    interface IVStatusBarItem;
    interface IVAccelTables;
    interface IVAccelTable;
    interface IVAccelItems;
    interface IVAccelItem;
    interface IVFonts;
    interface IVFont;
    interface IVColors;
    interface IVColor;
    interface IVMasterShortcuts;
    interface IVDataRecordsets;
    interface IVDocuments;
    interface IVAddons;
    interface IVAddon;
    interface IVApplicationSettings;
    interface IEnumVMenuItem;
    interface IEnumVMenu;
    interface IEnumVMenuSet;
    interface IEnumVToolbarItem;
    interface IEnumVToolbar;
    interface IEnumVToolbarSet;
    interface IEnumVStatusBarItem;
    interface IEnumVStatusBar;
    interface IEnumVAccelItem;
    interface IEnumVAccelTable;
    interface IVMSGWrap;
    interface IVMouseEvent;
    interface IVKeyboardEvent;
    interface IVInvisibleApp;
    interface IVDataRecordsetChangedEvent;
    interface IVGlobal;
    dispinterface EDocument;
    dispinterface EApplication;
    dispinterface EWindows;
    dispinterface EWindow;
    dispinterface EDocuments;
    dispinterface EStyles;
    dispinterface EStyle;
    dispinterface EMasters;
    dispinterface EMaster;
    dispinterface EPages;
    dispinterface EPage;
    dispinterface EShape;
    dispinterface ECharacters;
    dispinterface ECell;
    interface IVExtender;
    dispinterface IVDispExtender;
    interface IVAmbients;
    interface IVClientSite;
    interface IVBUndoManager;
    interface IVBUndoUnit;
    interface IVisEventProc;
    dispinterface ESection;
    dispinterface ERow;
    interface IVisLibOcxSupport;
    dispinterface EDataRecordset;
    dispinterface EDataRecordsets;

    typedef [uuid(000D0C00-0000-0000-C000-000000000046), helpstring("Unit codes to be used with cell.result and similar methods."), helpcontext(0x00011170)]
    enum {
        visNumber = 32,
        visPercent = 33,
        visAcre = 36,
        visHectare = 37,
        visDate = 40,
        visDurationUnits = 42,
        visElapsedWeek = 43,
        visElapsedDay = 44,
        visElapsedHour = 45,
        visElapsedMin = 46,
        visElapsedSec = 47,
        visTypeUnits = 48,
        visPicasAndPoints = 49,
        visPoints = 50,
        visPicas = 51,
        visCicerosAndDidots = 52,
        visDidots = 53,
        visCiceros = 54,
        visPageUnits = 63,
        visDrawingUnits = 64,
        visInches = 65,
        visFeet = 66,
        visFeetAndInches = 67,
        visMiles = 68,
        visCentimeters = 69,
        visMillimeters = 70,
        visMeters = 71,
        visKilometers = 72,
        visInchFrac = 73,
        visMileFrac = 74,
        visYards = 75,
        visNautMiles = 76,
        visAngleUnits = 80,
        visDegrees = 81,
        visDegreeMinSec = 82,
        visRadians = 83,
        visMin = 84,
        visSec = 85,
        visUnitsGUID = 95,
        visCurrency = 111,
        visUnitsNURBS = 138,
        visUnitsPolyline = 139,
        visUnitsPoint = 225,
        visUnitsString = 231,
        visUnitsColor = 251,
        visNoCast = 252,
        visUnitsInval = 255
    } VisUnitCodes;

    typedef [public]
    VisUnitCodes tagVisUnitCodes;

    typedef [uuid(000D0C01-0000-0000-C000-000000000046), helpstring("Type and id codes returned by Window.Type, SubType and ID."), helpcontext(0x00011175)]
    enum {
        visWinOther = 0,
        visDrawing = 1,
        visStencil = 2,
        visSheet = 3,
        visIcon = 4,
        visApplication = 5,
        visAnchorBarBuiltIn = 6,
        visDockedStencilBuiltIn = 7,
        visDrawingAddon = 8,
        visStencilAddon = 9,
        visAnchorBarAddon = 10,
        visDockedStencilAddon = 11,
        visPageWin = 128,
        visPageGroupWin = 160,
        visMasterWin = 64,
        visMasterGroupWin = 96,
        visInvalWinID = 0xffffffff,
        visWinIDCustProp = 1658,
        visWinIDPanZoom = 1653,
        visWinIDSizePos = 1670,
        visWinIDDrawingExplorer = 1721,
        visWinIDFormulaTracing = 1781,
        visWinIDStencilExplorer = 1796,
        visWinIDMasterExplorer = 1916,
        visWinIDShapeSearch = 1669,
        visWinIDExternalData = 2044
    } VisWinTypes;

    typedef [public]
    VisWinTypes tagVisWinTypes;

    typedef [uuid(000D0C02-0000-0000-C000-000000000046), helpstring("Type codes returned by shape.type and foreigntype. Also used with Event.Get/SetFilterObjects to filter events by object type."), helpcontext(0x0001117a)]
    enum {
        visTypeInval = 0,
        visTypePage = 1,
        visTypeGroup = 2,
        visTypeShape = 3,
        visTypeForeignObject = 4,
        visTypeGuide = 5,
        visTypeDoc = 6,
        visTypeMetafile = 16,
        visTypeBitmap = 32,
        visTypeIsLinked = 256,
        visTypeIsEmbedded = 512,
        visTypeIsControl = 1024,
        visTypeIsOLE2 = 32768,
        visTypeInk = 64
    } VisShapeTypes;

    typedef [public]
    VisShapeTypes tagVisShapeTypes;

    typedef [uuid(000D0C03-0000-0000-C000-000000000046), helpstring("Values related to IDs of Visio Shapes."), helpcontext(0x0001117f)]
    enum {
        visInvalShapeID = 0xffffffff,
        visPageSheetID = 0
    } VisShapeIDs;

    typedef [public]
    VisShapeIDs tagVisShapeIDs;

    typedef [uuid(000D0C04-0000-0000-C000-000000000046), helpstring("Logical indices of sections in shape or style objects."), helpcontext(0x00011182)]
    enum {
        visSectionInval = 255,
        visSectionFirst = 0,
        visSectionLast = 252,
        visSectionNone = 255,
        visSectionObject = 1,
        visSectionMember = 2,
        visSectionCharacter = 3,
        visSectionParagraph = 4,
        visSectionTab = 5,
        visSectionScratch = 6,
        visSectionConnectionPts = 7,
        visSectionExport = 7,
        visSectionTextField = 8,
        visSectionControls = 9,
        visSectionFirstComponent = 10,
        visSectionLastComponent = 239,
        visSectionAction = 240,
        visSectionLayer = 241,
        visSectionUser = 242,
        visSectionProp = 243,
        visSectionHyperlink = 244,
        visSectionReviewer = 245,
        visSectionAnnotation = 246,
        visSectionSmartTag = 247,
        visSectionLastReal = 247
    } VisSectionIndices;

    typedef [public]
    VisSectionIndices tagVisSectionIndices;

    typedef [uuid(000D0C05-0000-0000-C000-000000000046), helpstring("Logical indices of rows in shape or style object sections."), helpcontext(0x00011184)]
    enum {
        visRowInval = 0xffffffff,
        visRowFirst = 0,
        visRowLast = 0xfffffffe,
        visRowNone = 0xffffffff,
        visRowXFormOut = 1,
        visRowXFormIn = 1,
        visRowLine = 2,
        visRowFill = 3,
        visRowXForm1D = 4,
        visRowEvent = 5,
        visRowLayerMem = 6,
        visRowGuide = 7,
        visRowStyle = 8,
        visRowForeign = 9,
        visRowPage = 10,
        visRowText = 11,
        visRowTextXForm = 12,
        visRowAlign = 14,
        visRowLock = 15,
        visRowHelpCopyright = 16,
        visRowData123 = 16,
        visRowMisc = 17,
        visRowRulerGrid = 18,
        visRowHyperlink = 19,
        visRowDoc = 20,
        visRowImage = 21,
        visRowGroup = 22,
        visRowShapeLayout = 23,
        visRowPageLayout = 24,
        visRowPrintProperties = 25,
        visRowComponent = 0,
        visRowVertex = 1,
        visRowMember = 0,
        visRowCharacter = 0,
        visRowParagraph = 0,
        visRowTab = 0,
        visRowScratch = 0,
        visRowConnectionPts = 0,
        visRowExport = 0,
        visRowField = 0,
        visRowControl = 0,
        visRowAction = 0,
        visRowLayer = 0,
        visRowUser = 0,
        visRowProp = 0,
        visRow1stHyperlink = 0,
        visRowFormat = 0,
        visRowReviewer = 0,
        visRowAnnotation = 0,
        visRowSmartTag = 0
    } VisRowIndices;

    typedef [public]
    VisRowIndices tagVisRowIndices;

    typedef [uuid(000D0C06-0000-0000-C000-000000000046), helpstring("Row tags to be used with shape.rowtype and similar methods."), helpcontext(0x00011189)]
    enum {
        visTagDefault = 0,
        visTagBase = 130,
        visTagRowVoid = 180,
        visTagInvalid = 0xffffffff,
        visTagComponent = 137,
        visTagMoveTo = 138,
        visTagLineTo = 139,
        visTagArcTo = 140,
        visTagInfiniteLine = 141,
        visTagEllipse = 143,
        visTagEllipticalArcTo = 144,
        visTagSplineBeg = 165,
        visTagSplineSpan = 166,
        visTagPolylineTo = 193,
        visTagNURBSTo = 195,
        visTagTab0 = 136,
        visTagTab2 = 150,
        visTagTab10 = 151,
        visTagTab60 = 181,
        visTagCnnctPt = 153,
        visTagCnnctNamed = 185,
        visTagCnnctPtABCD = 186,
        visTagCnnctNamedABCD = 187,
        visTagCtlPt = 162,
        visTagCtlPtTip = 170
    } VisRowTags;

    typedef [public]
    VisRowTags tagVisRowTags;

    typedef [uuid(000D0C07-0000-0000-C000-000000000046), helpstring("Logical indices of cells in rows of shape or style objects."), helpcontext(0x0001118e)]
    enum {
        visCellInval = 255,
        visCellFirst = 0,
        visCellNone = 255,
        visXFormPinX = 0,
        visXFormPinY = 1,
        visXFormWidth = 2,
        visXFormHeight = 3,
        visXFormLocPinX = 4,
        visXFormLocPinY = 5,
        visXFormAngle = 6,
        visXFormFlipX = 7,
        visXFormFlipY = 8,
        visXFormResizeMode = 9,
        visLineWeight = 0,
        visLineColor = 1,
        visLinePattern = 2,
        visLineRounding = 3,
        visLineArrowSize = 4,
        visLineEndArrowSize = 4,
        visLineBeginArrow = 5,
        visLineEndArrow = 6,
        visLineEndCap = 7,
        visLineBeginArrowSize = 8,
        visLineColorTrans = 9,
        visFillForegnd = 0,
        visFillBkgnd = 1,
        visFillPattern = 2,
        visFillShdwForegnd = 3,
        visFillShdwBkgnd = 4,
        visFillShdwPattern = 5,
        visFillForegndTrans = 6,
        visFillBkgndTrans = 7,
        visFillShdwForegndTrans = 8,
        visFillShdwBkgndTrans = 9,
        visFillShdwType = 10,
        visFillShdwOffsetX = 11,
        visFillShdwOffsetY = 12,
        visFillShdwObliqueAngle = 13,
        visFillShdwScaleFactor = 14,
        vis1DBeginX = 0,
        vis1DBeginY = 1,
        vis1DEndX = 2,
        vis1DEndY = 3,
        visEvtCellTheData = 0,
        visEvtCellTheText = 1,
        visEvtCellDblClick = 2,
        visEvtCellXFMod = 3,
        visEvtCellDrop = 4,
        visLayerMember = 0,
        visGuideFlags = 2,
        visStyleIncludesLine = 0,
        visStyleIncludesFill = 1,
        visStyleIncludesText = 2,
        visStyleHidden = 3,
        visFrgnImgOffsetX = 0,
        visFrgnImgOffsetY = 1,
        visFrgnImgWidth = 2,
        visFrgnImgHeight = 3,
        visPageWidth = 0,
        visPageHeight = 1,
        visPageShdwOffsetX = 2,
        visPageShdwOffsetY = 3,
        visPageScale = 4,
        visPageDrawingScale = 5,
        visPageDrawSizeType = 6,
        visPageDrawScaleType = 7,
        visPageInhibitSnap = 26,
        visPageUIVisibility = 34,
        visPageShdwType = 35,
        visPageShdwObliqueAngle = 36,
        visPageShdwScaleFactor = 37,
        visTxtBlkLeftMargin = 0,
        visTxtBlkRightMargin = 1,
        visTxtBlkTopMargin = 2,
        visTxtBlkBottomMargin = 3,
        visTxtBlkVerticalAlign = 4,
        visTxtBlkBkgnd = 5,
        visTxtBlkDefaultTabStop = 6,
        visTxtBlkDirection = 10,
        visTxtBlkBkgndTrans = 11,
        visAlignLeft = 0,
        visAlignCenter = 1,
        visAlignRight = 2,
        visAlignTop = 3,
        visAlignMiddle = 4,
        visAlignBottom = 5,
        visLockWidth = 0,
        visLockHeight = 1,
        visLockMoveX = 2,
        visLockMoveY = 3,
        visLockAspect = 4,
        visLockDelete = 5,
        visLockBegin = 6,
        visLockEnd = 7,
        visLockRotate = 8,
        visLockCrop = 9,
        visLockVtxEdit = 10,
        visLockTextEdit = 11,
        visLockFormat = 12,
        visLockGroup = 13,
        visLockCalcWH = 14,
        visLockSelect = 15,
        visLockCustProp = 16,
        visObjHelp = 0,
        visCopyright = 1,
        visNoObjHandles = 0,
        visNonPrinting = 1,
        visNoCtlHandles = 2,
        visNoAlignBox = 3,
        visUpdateAlignBox = 4,
        visHideText = 5,
        visVerticalText = 6,
        visDynFeedback = 8,
        visGlueType = 9,
        visWalkPref = 10,
        visBegTrigger = 11,
        visEndTrigger = 12,
        visLOFlags = 13,
        visLOInteraction = 14,
        visLOBehavior = 15,
        visComment = 16,
        visDropSource = 17,
        visNoLiveDynamics = 18,
        visObjLocalizeMerge = 19,
        visObjCalendar = 25,
        visObjLangID = 26,
        visObjKeywords = 27,
        visObjDropOnPageScale = 28,
        visObjTheme = 29,
        visXRulerDensity = 0,
        visYRulerDensity = 1,
        visXRulerOrigin = 4,
        visYRulerOrigin = 5,
        visXGridDensity = 6,
        visYGridDensity = 7,
        visXGridSpacing = 8,
        visYGridSpacing = 9,
        visXGridOrigin = 10,
        visYGridOrigin = 11,
        visDocOutputFormat = 0,
        visDocLockPreview = 1,
        visDocMetric = 2,
        visDocAddMarkup = 3,
        visDocViewMarkup = 4,
        visDocPreviewQuality = 9,
        visDocPreviewScope = 10,
        visDocLangID = 19,
        visImageGamma = 0,
        visImageContrast = 1,
        visImageBrightness = 2,
        visImageSharpen = 3,
        visImageBlur = 4,
        visImageDenoise = 5,
        visImageTransparency = 6,
        visGroupSelectMode = 0,
        visGroupDisplayMode = 1,
        visGroupIsDropTarget = 2,
        visGroupIsSnapTarget = 3,
        visGroupIsTextEditTarget = 4,
        visGroupDontMoveChildren = 5,
        visSLOPermX = 0,
        visSLOPermY = 1,
        visSLOPermeablePlace = 2,
        visSLOFixedCode = 8,
        visSLOPlowCode = 9,
        visSLORouteStyle = 10,
        visSLOPlaceStyle = 11,
        visSLOConFixedCode = 12,
        visSLOJumpCode = 13,
        visSLOJumpStyle = 14,
        visSLOJumpDirX = 16,
        visSLOJumpDirY = 17,
        visSLOPlaceFlip = 18,
        visSLOLineRouteExt = 19,
        visSLOSplit = 20,
        visSLOSplittable = 21,
        visPLOResizePage = 0,
        visPLOEnableGrid = 1,
        visPLODynamicsOff = 2,
        visPLOCtrlAsInput = 3,
        visPLOPlaceStyle = 8,
        visPLORouteStyle = 9,
        visPLOPlaceDepth = 10,
        visPLOPlowCode = 11,
        visPLOJumpCode = 12,
        visPLOJumpStyle = 13,
        visPLOJumpDirX = 14,
        visPLOJumpDirY = 15,
        visPLOLineToNodeX = 16,
        visPLOLineToNodeY = 17,
        visPLOBlockSizeX = 18,
        visPLOBlockSizeY = 19,
        visPLOAvenueSizeX = 20,
        visPLOAvenueSizeY = 21,
        visPLOLineToLineX = 22,
        visPLOLineToLineY = 23,
        visPLOJumpFactorX = 24,
        visPLOJumpFactorY = 25,
        visPLOLineAdjustFrom = 26,
        visPLOLineAdjustTo = 27,
        visPLOPlaceFlip = 28,
        visPLOLineRouteExt = 29,
        visPLOSplit = 30,
        visCharacterFont = 0,
        visCharacterColor = 1,
        visCharacterStyle = 2,
        visCharacterCase = 3,
        visCharacterPos = 4,
        visCharacterFontScale = 5,
        visCharacterLocale = 6,
        visCharacterSize = 7,
        visCharacterDblUnderline = 8,
        visCharacterOverline = 9,
        visCharacterStrikethru = 10,
        visCharacterPerpendicular = 12,
        visCharacterDoubleStrikethrough = 13,
        visCharacterRTLText = 14,
        visCharacterUseVertical = 15,
        visCharacterLetterspace = 16,
        visCharacterColorTrans = 17,
        visCharacterAsianFont = 51,
        visCharacterComplexScriptFont = 52,
        visCharacterLocalizeFont = 53,
        visCharacterComplexScriptSize = 54,
        visCharacterLangID = 57,
        visIndentFirst = 0,
        visIndentLeft = 1,
        visIndentRight = 2,
        visSpaceLine = 3,
        visSpaceBefore = 4,
        visSpaceAfter = 5,
        visHorzAlign = 6,
        visBulletIndex = 7,
        visBulletString = 8,
        visBulletFont = 9,
        visLocalizeBulletFont = 10,
        visBulletFontSize = 11,
        visTextPosAfterBullet = 12,
        visFlags = 13,
        visTabStopCount = 0,
        visTabPos = 1,
        visTabAlign = 2,
        visScratchX = 0,
        visScratchY = 1,
        visScratchA = 2,
        visScratchB = 3,
        visScratchC = 4,
        visScratchD = 5,
        visCnnctX = 0,
        visCnnctY = 1,
        visCnnctDirX = 2,
        visCnnctDirY = 3,
        visCnnctType = 4,
        visCnnctAutoGen = 5,
        visCnnctA = 2,
        visCnnctB = 3,
        visCnnctC = 4,
        visCnnctD = 5,
        visFieldCell = 0,
        visFieldEditMode = 1,
        visFieldFormat = 2,
        visFieldType = 3,
        visFieldUICategory = 4,
        visFieldUICode = 5,
        visFieldUIFormat = 6,
        visFieldCalendar = 7,
        visFieldObjectKind = 10,
        visCtlX = 0,
        visCtlY = 1,
        visCtlXDyn = 2,
        visCtlYDyn = 3,
        visCtlXCon = 4,
        visCtlYCon = 5,
        visCtlGlue = 6,
        visCtlType = 7,
        visCtlTip = 8,
        visCompNoFill = 0,
        visCompNoLine = 1,
        visCompNoShow = 2,
        visCompNoSnap = 3,
        visCompPath = 4,
        visX = 0,
        visY = 1,
        visBow = 2,
        visInfiniteLineX1 = 0,
        visInfiniteLineY1 = 1,
        visInfiniteLineX2 = 2,
        visInfiniteLineY2 = 3,
        visEllipseCenterX = 0,
        visEllipseCenterY = 1,
        visEllipseMajorX = 2,
        visEllipseMajorY = 3,
        visEllipseMinorX = 4,
        visEllipseMinorY = 5,
        visControlX = 2,
        visControlY = 3,
        visEccentricityAngle = 4,
        visAspectRatio = 5,
        visSplineKnot = 2,
        visSplineKnot2 = 3,
        visSplineKnot3 = 4,
        visSplineDegree = 5,
        visPolylineData = 2,
        visNURBSKnot = 2,
        visNURBSWeight = 3,
        visNURBSKnotPrev = 4,
        visNURBSWeightPrev = 5,
        visNURBSData = 6,
        visActionMenu = 0,
        visActionPrompt = 1,
        visActionHelp = 2,
        visActionAction = 3,
        visActionChecked = 4,
        visActionDisabled = 5,
        visActionReadOnly = 6,
        visActionInvisible = 7,
        visActionBeginGroup = 8,
        visActionTagName = 14,
        visActionButtonFace = 15,
        visActionSortKey = 16,
        visLayerName = 0,
        visLayerColor = 2,
        visLayerStatus = 3,
        visLayerVisible = 4,
        visLayerPrint = 5,
        visLayerActive = 6,
        visLayerLock = 7,
        visLayerSnap = 8,
        visLayerGlue = 9,
        visLayerNameUniv = 10,
        visLayerColorTrans = 11,
        visUserValue = 0,
        visUserPrompt = 1,
        visCustPropsValue = 0,
        visCustPropsPrompt = 1,
        visCustPropsLabel = 2,
        visCustPropsFormat = 3,
        visCustPropsSortKey = 4,
        visCustPropsType = 5,
        visCustPropsInvis = 6,
        visCustPropsAsk = 7,
        visCustPropsLangID = 14,
        visCustPropsCalendar = 15,
        visHLinkDescription = 0,
        visHLinkAddress = 1,
        visHLinkSubAddress = 2,
        visHLinkExtraInfo = 3,
        visHLinkFrame = 4,
        visHLinkNewWin = 5,
        visHLinkDefault = 7,
        visHLinkInvisible = 8,
        visHLinkSortKey = 15,
        visReviewerName = 0,
        visReviewerInitials = 1,
        visReviewerColor = 2,
        visReviewerReviewerID = 3,
        visReviewerCurrentIndex = 4,
        visAnnotationX = 0,
        visAnnotationY = 1,
        visAnnotationReviewerID = 2,
        visAnnotationMarkerIndex = 3,
        visAnnotationDate = 4,
        visAnnotationComment = 5,
        visAnnotationLangID = 6,
        visSmartTagX = 0,
        visSmartTagY = 1,
        visSmartTagName = 2,
        visSmartTagXJustify = 3,
        visSmartTagYJustify = 4,
        visSmartTagDisplayMode = 5,
        visSmartTagButtonFace = 6,
        visSmartTagDisabled = 7,
        visSmartTagDescription = 15,
        visPrintPropertiesLeftMargin = 0,
        visPrintPropertiesRightMargin = 1,
        visPrintPropertiesTopMargin = 2,
        visPrintPropertiesBottomMargin = 3,
        visPrintPropertiesScaleX = 4,
        visPrintPropertiesScaleY = 5,
        visPrintPropertiesPagesX = 6,
        visPrintPropertiesPagesY = 7,
        visPrintPropertiesCenterX = 8,
        visPrintPropertiesCenterY = 9,
        visPrintPropertiesOnPage = 10,
        visPrintPropertiesPrintGrid = 11,
        visPrintPropertiesPageOrientation = 16,
        visPrintPropertiesPaperKind = 17,
        visPrintPropertiesPaperSource = 18,
        visLockFromGroupFormat = 17,
        visLockThemeColors = 18,
        visLockThemeEffects = 19,
        visEvtCellMultiDrop = 22
    } VisCellIndices;

    typedef [public]
    VisCellIndices tagVisCellIndices;

    typedef [uuid(000D0C08-0000-0000-C000-000000000046), helpstring("Symbolic values for certain cells."), helpcontext(0x00011193)]
    enum {
        visXFormResizeDontCare = 0,
        visXFormResizeSpread = 1,
        visXFormResizeScale = 2,
        visArrowSizeVerySmall = 0,
        visArrowSizeSmall = 1,
        visArrowSizeMedium = 2,
        visArrowSizeLarge = 3,
        visArrowSizeVeryLarge = 4,
        visArrowSizeJumbo = 5,
        visArrowSizeColossal = 6,
        visNoFill = 0,
        visSolid = 1,
        visWideUpDiagonal = 2,
        visWideCross = 3,
        visWideDiagonalCross = 4,
        visWideDownDiagonal = 5,
        visWideHorz = 6,
        visWideVert = 7,
        visBackDotsMini = 8,
        visHalfAndHalf = 9,
        visForeDotsMini = 10,
        visForeDotsNarrow = 11,
        visForeDotsWide = 12,
        visThickHorz = 13,
        visThickVertical = 14,
        visThickDownDiagonal = 15,
        visThickUpDiagonal = 16,
        visThickDiagonalCross = 17,
        visBackDotsWide = 18,
        visThinHorz = 19,
        visThinVert = 20,
        visThinDownDiagonal = 21,
        visThinUpDiagonal = 22,
        visThinCross = 23,
        visThinDiagonalCross = 24,
        visGuideXActive = 1024,
        visGuideYActive = 2048,
        visPrintSetup = 0,
        visTight = 1,
        visStandard = 2,
        visCustom = 3,
        visLogical = 4,
        visDSMetric = 5,
        visDSEngr = 6,
        visDSArch = 7,
        visNoScale = 0,
        visArchitectural = 1,
        visEngineering = 2,
        visScaleCustom = 3,
        visScaleMetric = 4,
        visScaleMechanical = 5,
        visVertTop = 0,
        visVertMiddle = 1,
        visVertBottom = 2,
        visTxtBlkOpaque = 255,
        visTxtBlkLeftToRight = 0,
        visTxtBlkTopToBottom = 1,
        visDynFBDefault = 0,
        visDynFBUCon3Leg = 1,
        visDynFBUCon5Leg = 2,
        visGlueTypeDefault = 0,
        visGlueTypeTrigger = 1,
        visGlueTypeWalking = 2,
        visGlueTypeNoWalking = 4,
        visGlueTypeNoWalkingTo = 8,
        visWalkPrefBegNS = 1,
        visWalkPrefEndNS = 2,
        visLOFlagsVisDecides = 0,
        visLOFlagsPlacable = 1,
        visLOFlagsRoutable = 2,
        visLOFlagsDont = 4,
        visLOFlagsPNRGroup = 8,
        visLOIPlaceNormal = 0,
        visLOIPlaceXPermeable = 2,
        visLOIPlaceYPermeable = 4,
        visLOIRouteNormal = 0,
        visLOBPlaceNormal = 0,
        visLOBRouteNormal = 0,
        visLOBRouteRightAng = 1,
        visLOBRouteStraight = 2,
        visLOBRouteFlowNS = 5,
        visLOBRouteFlowWE = 6,
        visLOBRouteTreeNS = 7,
        visLOBRouteTreeWE = 8,
        visLOBRouteManual = 1024,
        visRulerFine = 32,
        visRulerNormal = 16,
        visRulerCoarse = 8,
        visRulerFixed = 0,
        visGridFine = 8,
        visGridNormal = 4,
        visGridCoarse = 2,
        visGridFixed = 0,
        visDocPreviewQualityDraft = 0,
        visDocPreviewQualityDetailed = 1,
        visDocPreviewScope1stPage = 0,
        visDocPreviewScopeNone = 1,
        visDocPreviewScopeAllPages = 2,
        visPPOSameAsPrinter = 0,
        visPPOPortrait = 1,
        visPPOLandscape = 2,
        visGrpSelModeGroupOnly = 0,
        visGrpSelModeGroup1st = 1,
        visGrpSelModeMembers1st = 2,
        visGrpDispModeNone = 0,
        visGrpDispModeBack = 1,
        visGrpDispModeFront = 2,
        visLORouteDefault = 0,
        visLORouteRightAngle = 1,
        visLORouteStraight = 2,
        visLORouteOrgChartNS = 3,
        visLORouteOrgChartWE = 4,
        visLORouteFlowchartNS = 5,
        visLORouteFlowchartWE = 6,
        visLORouteTreeNS = 7,
        visLORouteTreeWE = 8,
        visLORouteNetwork = 9,
        visLORouteOrgChartSN = 10,
        visLORouteOrgChartEW = 11,
        visLORouteFlowchartSN = 12,
        visLORouteFlowchartEW = 13,
        visLORouteTreeSN = 14,
        visLORouteTreeEW = 15,
        visLORouteCenterToCenter = 16,
        visLORouteSimpleNS = 17,
        visLORouteSimpleWE = 18,
        visLORouteSimpleSN = 19,
        visLORouteSimpleEW = 20,
        visLORouteSimpleHV = 21,
        visLORouteSimpleVH = 22,
        visLOJumpStyleDefault = 0,
        visLOJumpStyleArc = 1,
        visLOJumpStyleGap = 2,
        visLOJumpStyleSquare = 3,
        visLOJumpStyleTriangle = 4,
        visLOJumpStyle2Point = 5,
        visLOJumpStyle3Point = 6,
        visLOJumpStyle4Point = 7,
        visLOJumpStyle5Point = 8,
        visLOJumpStyle6Point = 9,
        visLOJumpDirXDefault = 0,
        visLOJumpDirXUp = 1,
        visLOJumpDirXDown = 2,
        visLOJumpDirYDefault = 0,
        visLOJumpDirYLeft = 1,
        visLOJumpDirYRight = 2,
        visLOFlipDefault = 0,
        visLOFlipX = 1,
        visLOFlipY = 2,
        visLOFlipRotate = 4,
        visLOFlipNone = 8,
        visLORouteExtDefault = 0,
        visLORouteExtStraight = 1,
        visLORouteExtNURBS = 2,
        visSLOFixedPlacement = 1,
        visSLOFixedPlow = 2,
        visSLOFixedPermeablePlow = 4,
        visSLOFixedConnPtsIgnore = 32,
        visSLOFixedConnPtsOnly = 64,
        visSLOFixedNoFoldToShape = 128,
        visSLOPlowDefault = 0,
        visSLOPlowNever = 1,
        visSLOPlowAlways = 2,
        visSLOConFixedRerouteFreely = 0,
        visSLOConFixedRerouteAsNeeded = 1,
        visSLOConFixedRerouteNever = 2,
        visSLOConFixedRerouteOnCrossover = 3,
        visSLOConFixedByAlgFrom = 4,
        visSLOConFixedByAlgTo = 5,
        visSLOConFixedByAlgFromTo = 6,
        visSLOJumpDefault = 0,
        visSLOJumpNever = 1,
        visSLOJumpAlways = 2,
        visSLOJumpOther = 3,
        visSLOJumpNeither = 4,
        visPLOPlaceDefault = 0,
        visPLOPlaceTopToBottom = 1,
        visPLOPlaceLeftToRight = 2,
        visPLOPlaceRadial = 3,
        visPLOPlaceBottomToTop = 4,
        visPLOPlaceRightToLeft = 5,
        visPLOPlaceCircular = 6,
        visPLOPlaceCompactDownRight = 7,
        visPLOPlaceCompactRightDown = 8,
        visPLOPlaceCompactRightUp = 9,
        visPLOPlaceCompactUpRight = 10,
        visPLOPlaceCompactUpLeft = 11,
        visPLOPlaceCompactLeftUp = 12,
        visPLOPlaceCompactLeftDown = 13,
        visPLOPlaceCompactDownLeft = 14,
        visPLOPlaceParentDefault = 15,
        visPLOPlaceHierarchyTopToBottomLeft = 16,
        visPLOPlaceHierarchyTopToBottomCenter = 17,
        visPLOPlaceHierarchyTopToBottomRight = 18,
        visPLOPlaceHierarchyBottomToTopLeft = 19,
        visPLOPlaceHierarchyBottomToTopCenter = 20,
        visPLOPlaceHierarchyBottomToTopRight = 21,
        visPLOPlaceHierarchyLeftToRightTop = 22,
        visPLOPlaceHierarchyLeftToRightMiddle = 23,
        visPLOPlaceHierarchyLeftToRightBottom = 24,
        visPLOPlaceHierarchyRightToLeftTop = 25,
        visPLOPlaceHierarchyRightToLeftMiddle = 26,
        visPLOPlaceHierarchyRightToLeftBottom = 27,
        visLOPlaceDefault = 0,
        visLOPlaceTopToBottom = 1,
        visLOPlaceLeftToRight = 2,
        visLOPlaceRadial = 3,
        visLOPlaceBottomToTop = 4,
        visLOPlaceRightToLeft = 5,
        visLOPlaceCircular = 6,
        visLOPlaceCompactDownRight = 7,
        visLOPlaceCompactRightDown = 8,
        visLOPlaceCompactRightUp = 9,
        visLOPlaceCompactUpRight = 10,
        visLOPlaceCompactUpLeft = 11,
        visLOPlaceCompactLeftUp = 12,
        visLOPlaceCompactLeftDown = 13,
        visLOPlaceCompactDownLeft = 14,
        visLOPlaceParentDefault = 15,
        visLOPlaceHierarchyTopToBottomLeft = 16,
        visLOPlaceHierarchyTopToBottomCenter = 17,
        visLOPlaceHierarchyTopToBottomRight = 18,
        visLOPlaceHierarchyBottomToTopLeft = 19,
        visLOPlaceHierarchyBottomToTopCenter = 20,
        visLOPlaceHierarchyBottomToTopRight = 21,
        visLOPlaceHierarchyLeftToRightTop = 22,
        visLOPlaceHierarchyLeftToRightMiddle = 23,
        visLOPlaceHierarchyLeftToRightBottom = 24,
        visLOPlaceHierarchyRightToLeftTop = 25,
        visLOPlaceHierarchyRightToLeftMiddle = 26,
        visLOPlaceHierarchyRightToLeftBottom = 27,
        visPLOPlaceDepthDefault = 0,
        visPLOPlaceDepthMedium = 1,
        visPLOPlaceDepthDeep = 2,
        visPLOPlaceDepthShallow = 3,
        visPLOPlowNone = 0,
        visPLOPlowAll = 1,
        visPLOJumpNone = 0,
        visPLOJumpHorizontal = 1,
        visPLOJumpVertical = 2,
        visPLOJumpLastRouted = 3,
        visPLOJumpDisplayOrder = 4,
        visPLOJumpReverseDisplayOrder = 5,
        visPLOJumpProhibitAll = 6,
        visPLOLineAdjustFromNotRelated = 0,
        visPLOLineAdjustFromAll = 1,
        visPLOLineAdjustFromNone = 2,
        visPLOLineAdjustFromRoutingDefault = 3,
        visPLOLineAdjustToDefault = 0,
        visPLOLineAdjustToAll = 1,
        visPLOLineAdjustToNone = 2,
        visPLOLineAdjustToRelated = 3,
        visBold = 1,
        visItalic = 2,
        visUnderLine = 4,
        visSmallCaps = 8,
        visComplexBold = 16,
        visComplexItalic = 32,
        visCaseNormal = 0,
        visCaseAllCaps = 1,
        visCaseInitialCaps = 2,
        visPosNormal = 0,
        visPosSuper = 1,
        visPosSub = 2,
        visHorzLeft = 0,
        visHorzCenter = 1,
        visHorzRight = 2,
        visHorzJustify = 3,
        visHorzForce = 4,
        visHorzDistribute = 4,
        visHorzJustifyLow = 5,
        visHorzJustifyMedium = 6,
        visHorzJustifyHigh = 7,
        visTabStopLeft = 0,
        visTabStopCenter = 1,
        visTabStopRight = 2,
        visTabStopDecimal = 3,
        visTabStopComma = 4,
        visCnnctTypeInward = 0,
        visCnnctTypeOutward = 1,
        visCnnctTypeInwardOutward = 2,
        visCtlProportional = 0,
        visCtlLocked = 1,
        visCtlOffsetMin = 2,
        visCtlOffsetMid = 3,
        visCtlOffsetMax = 4,
        visCtlProportionalHidden = 5,
        visCtlLockedHidden = 6,
        visCtlOffsetMinHidden = 7,
        visCtlOffsetMidHidden = 8,
        visCtlOffsetMaxHidden = 9,
        visNoLayerColor = 255,
        visLayerValid = 0,
        visLayerDeleted = 1,
        visLayerAvailable = 2,
        visPropTypeString = 0,
        visPropTypeListFix = 1,
        visPropTypeNumber = 2,
        visPropTypeBool = 3,
        visPropTypeListVar = 4,
        visPropTypeDate = 5,
        visPropTypeDuration = 6,
        visPropTypeCurrency = 7,
        visCalWestern = 0,
        visCalArabicHijri = 1,
        visCalHebrewLunar = 2,
        visCalChineseTaiwan = 3,
        visCalJapaneseEmperor = 4,
        visCalThaiBuddhism = 5,
        visCalThaiBuddhist = 5,
        visCalKoreanDanki = 6,
        visCalSakaEra = 7,
        visCalTranslitEnglish = 8,
        visCalTranslitFrench = 9,
        visPLOSplitNone = 0,
        visPLOSplitAllow = 1,
        visSLOSplitNone = 0,
        visSLOSplitAllow = 1,
        visSLOSplittableNone = 0,
        visSLOSplittableAllow = 1,
        visFSTPageDefault = 0,
        visFSTSimple = 1,
        visFSTOblique = 2,
        visUIVNormal = 0,
        visUIVHidden = 1,
        visLocFontIfArialOrSym = 0,
        visLocFontAlways = 1,
        visLocFontNever = 2,
        visSmartTagXJustifyLeft = 0,
        visSmartTagXJustifyCenter = 1,
        visSmartTagXJustifyRight = 2,
        visSmartTagYJustifyTop = 0,
        visSmartTagYJustifyMiddle = 1,
        visSmartTagYJustifyBottom = 2,
        visSmartTagDispModeMouseOver = 0,
        visSmartTagDispModeShapeSelected = 1,
        visSmartTagDispModeAlways = 2,
        visTFOKStandard = 0,
        visTFOKHorizontalInVertical = 1,
        visPPFlagsRTLText = 1
    } VisCellVals;

    typedef [public]
    VisCellVals tagVisCellVals;

    typedef [uuid(000D0C09-0000-0000-C000-000000000046), helpstring("Indices of colors (in default palette)."), helpcontext(0x00011198)]
    enum {
        visTransparent = 0,
        visBlack = 0,
        visWhite = 1,
        visRed = 2,
        visGreen = 3,
        visBlue = 4,
        visYellow = 5,
        visMagenta = 6,
        visCyan = 7,
        visDarkRed = 8,
        visDarkGreen = 9,
        visDarkBlue = 10,
        visDarkYellow = 11,
        visPurple = 12,
        visDarkCyan = 13,
        visGray = 14,
        visGray10 = 15,
        visGray20 = 16,
        visGray30 = 17,
        visGray40 = 18,
        visDarkGray = 19,
        visGray50 = 19,
        visGray60 = 20,
        visGray70 = 21,
        visGray80 = 22,
        visGray90 = 23
    } VisDefaultColors;

    typedef [public]
    VisDefaultColors tagVisDefaultColors;

    typedef [uuid(000D0C0A-0000-0000-C000-000000000046), helpstring("Flags to be passed to Document.OpenEx, AddEx or SaveAsEx."), helpcontext(0x0001119d)]
    enum {
        visOpenCopy = 1,
        visOpenRO = 2,
        visOpenDocked = 4,
        visOpenDontList = 8,
        visOpenMinimized = 16,
        visOpenRW = 32,
        visOpenHidden = 64,
        visOpenMacrosDisabled = 128,
        visOpenNoWorkspace = 256,
        visOpenDeclineAutoRefresh = 1024,
        visAddDocked = 4,
        visAddMinimized = 16,
        visAddHidden = 64,
        visAddMacrosDisabled = 128,
        visAddNoWorkspace = 256,
        visAddStencil = 512,
        visAddDeclineAutoRefresh = 1024,
        visSaveAsRO = 1,
        visSaveAsWS = 2,
        visSaveAsListInMRU = 4,
        visSavePrevNone = 0,
        visSavePrevDraft1st = 1,
        visSavePrevDetailed1st = 2,
        visSavePrevDraftAll = 4,
        visSavePrevDetailedAll = 8
    } VisOpenSaveArgs;

    typedef [public]
    VisOpenSaveArgs tagVisOpenSaveArgs;

    typedef [uuid(000D0C0B-0000-0000-C000-000000000046), helpstring("Flags to be passed to InsertObject or InsertFromFile."), helpcontext(0x000111a2)]
    enum {
        visInsertLink = 8,
        visInsertIcon = 16,
        visInsertDontShow = 4096,
        visInsertAsControl = 8192,
        visInsertAsEmbed = 16384,
        visInsertNoDesignModeTransition = 256
    } VisInsertObjArgs;

    typedef [public]
    VisInsertObjArgs tagVisInsertObjArgs;

    typedef [uuid(000D0C0C-0000-0000-C000-000000000046), helpstring("Flags to be passed to GetResults or SetFormulas/Results."), helpcontext(0x000111a7)]
    enum {
        visGetFloats = 0,
        visGetTruncatedInts = 1,
        visGetRoundedInts = 2,
        visGetStrings = 3,
        visGetFormulas = 4,
        visGetFormulasU = 5,
        visSetFormulas = 1,
        visSetBlastGuards = 2,
        visSetTestCircular = 4,
        visSetUniversalSyntax = 8
    } VisGetSetArgs;

    typedef [public]
    VisGetSetArgs tagVisGetSetArgs;

    typedef [uuid(000D0C22-0000-0000-C000-000000000046), helpstring("Flags to be passed to BoundingBox."), helpcontext(0x000111ac)]
    enum {
        visBBoxUprightWH = 1,
        visBBoxUprightText = 2,
        visBBoxExtents = 4,
        visBBoxIncludeHidden = 16,
        visBBoxIgnoreVisible = 32,
        visBBoxIncludeDataGraphics = 64,
        visBBoxIncludeGuides = 4096,
        visBBoxDrawingCoords = 8192,
        visBBoxNoNonPrint = 16384
    } VisBoundingBoxArgs;

    typedef [public]
    VisBoundingBoxArgs tagVisBoundingBoxArgs;

    typedef [uuid(000D0C23-0000-0000-C000-000000000046), helpstring("Results returned from HitTest."), helpcontext(0x000111b1)]
    enum {
        visHitOutside = 0,
        visHitOnBoundary = 1,
        visHitInside = 2
    } VisHitTestResults;

    typedef [public]
    VisHitTestResults tagVisHitTestResults;

    typedef [uuid(000D0C0D-0000-0000-C000-000000000046), helpstring("Action codes used in conjunction with Select method."), helpcontext(0x000111b6)]
    enum {
        visDeselect = 1,
        visSelect = 2,
        visSubSelect = 3,
        visSelectAll = 4,
        visDeselectAll = 256
    } VisSelectArgs;

    typedef [public]
    VisSelectArgs tagVisSelectArgs;

    typedef [uuid(000D0C0E-0000-0000-C000-000000000046), helpstring("Action codes to be passed to Shape.UniqueID."), helpcontext(0x000111bb)]
    enum {
        visGetGUID = 0,
        visGetOrMakeGUID = 1,
        visDeleteGUID = 2
    } VisUniqueIDArgs;

    typedef [public]
    VisUniqueIDArgs tagVisUniqueIDArgs;

    typedef [uuid(000D0C0F-0000-0000-C000-000000000046), helpstring("Flag to be passed to Shape.SectionExists and similar methods."), helpcontext(0x000111c0)]
    enum {
        visExistsLocally = 1,
        visExistsAnywhere = 0
    } VisExistsFlags;

    typedef [public]
    VisExistsFlags tagVisExistsFlags;

    typedef [uuid(000D0C10-0000-0000-C000-000000000046), helpstring("Result codes returned by Cell.Error."), helpcontext(0x000111c5)]
    enum {
        visErrorSuccess = 0,
        visErrorDivideByZero = 39,
        visErrorValue = 47,
        visErrorReference = 55,
        visErrorName = 61,
        visErrorNumber = 68,
        visErrorNotAvailable = 74
    } VisCellError;

    typedef [public]
    VisCellError tagVisCellError;

    typedef [uuid(000D0C11-0000-0000-C000-000000000046), helpstring("Truncate vs Round arg passed to Cell.ResultInt."), helpcontext(0x000111ca)]
    enum {
        visTruncate = 0,
        visRound = 1
    } VisRoundFlags;

    typedef [public]
    VisRoundFlags tagVisRoundFlags;

    typedef [uuid(000D0C12-0000-0000-C000-000000000046), helpstring("Run types to be passed to Characters.RunBegin/End."), helpcontext(0x000111cf)]
    enum {
        visCharPropRow = 1,
        visParaPropRow = 2,
        visTabPropRow = 3,
        visWordRun = 10,
        visParaRun = 11,
        visFieldRun = 20
    } VisRunTypes;

    typedef [public]
    VisRunTypes tagVisRunTypes;

    typedef [uuid(000D0C13-0000-0000-C000-000000000046), helpstring("Bias to be passed to Characters.CharPropsRow, etc."), helpcontext(0x000111d4)]
    enum {
        visBiasLetVisioChoose = 0,
        visBiasLeft = 1,
        visBiasRight = 2
    } VisCharsBias;

    typedef [public]
    VisCharsBias tagVisCharsBias;

    typedef [uuid(000D0C14-0000-0000-C000-000000000046), helpstring("HIDDEN Values to be passed to ToolbarStyle.")]
    enum {
        visToolBarNone = 0xffffffff,
        visToolBarOn = 0,
        visToolBarMSOffice = 0,
        visToolBarLotusSS = 0
    } VisToolbarFlavors;

    typedef [public]
    VisToolbarFlavors tagVisToolbarFlavors;

    typedef [uuid(000D0C15-0000-0000-C000-000000000046), helpstring("Flags to pass to DrawSpline or DrawPolyline."), helpcontext(0x000111d9)]
    enum {
        visSplinePeriodic = 1,
        visSplineDoCircles = 2,
        visSplineAbrupt = 4,
        visSpline1D = 8,
        visPolyline1D = 8,
        visPolyarcs = 256
    } VisDrawSplineFlags;

    typedef [public]
    VisDrawSplineFlags tagVisDrawSplineFlags;

    typedef [uuid(000D0C16-0000-0000-C000-000000000046), helpstring("Type codes to be passed to Page.AddGuide."), helpcontext(0x000111de)]
    enum {
        visPoint = 1,
        visHorz = 2,
        visVert = 3
    } VisGuideTypes;

    typedef [public]
    VisGuideTypes tagVisGuideTypes;

    typedef [uuid(000D0C17-0000-0000-C000-000000000046), helpstring("Attribute codes returned by Font.Attributes."), helpcontext(0x000111e3)]
    enum {
        visFontRaster = 16,
        visFontDevice = 32,
        visFontScalable = 64,
        visFont0Alias = 128
    } VisFontAttributes;

    typedef [public]
    VisFontAttributes tagVisFontAttributes;

    typedef [uuid(000D0C18-0000-0000-C000-000000000046), helpstring("Result codes returned by Stat method."), helpcontext(0x000111e8)]
    enum {
        visStatNormal = 0,
        visStatAppHasShutdown = 1,
        visStatDeleted = 2,
        visStatTouched = 4,
        visStatClosed = 8,
        visStatSuspended = 16
    } VisStatCodes;

    typedef [public]
    VisStatCodes tagVisStatCodes;

    typedef [uuid(000D0C19-0000-0000-C000-000000000046), helpstring("Codes of Visio events, event actions and event ids."), helpcontext(0x000111ed)]
    enum {
        visEvtIDInval = 0xffffffff,
        visScopeIDInval = 0xffffffff,
        visEvtCodeInval = 0,
        visEvtCodeDocCreate = 1,
        visEvtCodeDocOpen = 2,
        visEvtCodeDocSave = 3,
        visEvtCodeDocSaveAs = 4,
        visEvtCodeDocRunning = 5,
        visEvtCodeDocDesign = 6,
        visEvtCodeBefDocSave = 7,
        visEvtCodeBefDocSaveAs = 8,
        visEvtCodeQueryCancelDocClose = 9,
        visEvtCodeCancelDocClose = 10,
        visEvtCodeBefForcedFlush = 200,
        visEvtCodeAfterForcedFlush = 201,
        visEvtCodeEnterScope = 202,
        visEvtCodeExitScope = 203,
        visEvtCodeQueryCancelQuit = 204,
        visEvtCodeCancelQuit = 205,
        visEvtCodeQueryCancelSuspend = 206,
        visEvtCodeCancelSuspend = 207,
        visEvtCodeBeforeSuspend = 208,
        visEvtCodeAfterResume = 209,
        visEvtCodeQueryCancelStyleDel = 300,
        visEvtCodeCancelStyleDel = 301,
        visEvtCodeQueryCancelMasterDel = 400,
        visEvtCodeCancelMasterDel = 401,
        visEvtCodeQueryCancelPageDel = 500,
        visEvtCodeCancelPageDel = 501,
        visEvtCodeWinSelChange = 701,
        visEvtCodeBefWinSelDel = 702,
        visEvtCodeBefWinPageTurn = 703,
        visEvtCodeWinPageTurn = 704,
        visEvtCodeViewChanged = 705,
        visEvtCodeQueryCancelWinClose = 706,
        visEvtCodeCancelWinClose = 707,
        visEvtCodeWinOnAddonKeyMSG = 708,
        visEvtCodeShapeDelete = 801,
        visEvtCodeShapeParentChange = 802,
        visEvtCodeShapeBeforeTextEdit = 803,
        visEvtCodeShapeExitTextEdit = 804,
        visEvtCodeBefSelDel = 901,
        visEvtCodeSelAdded = 902,
        visEvtCodeQueryCancelSelDel = 903,
        visEvtCodeCancelSelDel = 904,
        visEvtCodeQueryCancelUngroup = 905,
        visEvtCodeCancelUngroup = 906,
        visEvtCodeQueryCancelConvertToGroup = 907,
        visEvtCodeCancelConvertToGroup = 908,
        visEvtAdd = 32768,
        visEvtDel = 16384,
        visEvtMod = 8192,
        visEvtWindow = 1,
        visEvtDoc = 2,
        visEvtStyle = 4,
        visEvtMaster = 8,
        visEvtPage = 16,
        visEvtLayer = 32,
        visEvtShape = 64,
        visEvtText = 128,
        visEvtConnect = 256,
        visEvtSection = 512,
        visEvtRow = 1024,
        visEvtCell = 2048,
        visEvtFormula = 4096,
        visEvtApp = 4096,
        visEvtAppActivate = 1,
        visEvtAppDeactivate = 2,
        visEvtObjActivate = 4,
        visEvtObjDeactivate = 8,
        visEvtBeforeQuit = 16,
        visEvtBeforeModal = 32,
        visEvtAfterModal = 64,
        visEvtWinActivate = 128,
        visEvtMarker = 256,
        visEvtNonePending = 512,
        visEvtIdle = 1024,
        visEvtCode1stUser = 28672,
        visEvtCodeLastUser = 32767,
        visEvtCodeCreate = 1,
        visEvtCodeOpen = 2,
        visActCodeRunAddon = 1,
        visActCodeAdvise = 2,
        visEvtIdMostRecent = 0,
        visEvtCodeMouseDown = 709,
        visEvtCodeMouseMove = 710,
        visEvtCodeMouseUp = 711,
        visEvtCodeKeyDown = 712,
        visEvtCodeKeyPress = 713,
        visEvtCodeKeyUp = 714,
        visEvtDataRecordset = 32,
        visEvtShapeLinkAdded = 805,
        visEvtShapeLinkDeleted = 806,
        visEvtShapeDataGraphicChanged = 807,
        visEvtCodeQueryCancelSelGroup = 909,
        visEvtCodeCancelSelGroup = 910,
        visEvtRemoveHiddenInformation = 11,
        visEvtCodeQueryCancelSuspendEvents = 210,
        visEvtCodeCancelSuspendEvents = 211,
        visEvtCodeBeforeSuspendEvents = 212,
        visEvtCodeAfterResumeEvents = 213
    } VisEventCodes;

    typedef [public]
    VisEventCodes tagVisEventCodes;

    typedef [uuid(000D0C1A-0000-0000-C000-000000000046), helpstring("Codes returned by object.ObjectType."), helpcontext(0x000111f2)]
    enum {
        visObjTypeUnknown = 1,
        visObjTypeApp = 3,
        visObjTypeCell = 4,
        visObjTypeChars = 5,
        visObjTypeConnect = 8,
        visObjTypeConnects = 9,
        visObjTypeDoc = 10,
        visObjTypeDocs = 11,
        visObjTypeMaster = 12,
        visObjTypeMasters = 13,
        visObjTypePage = 14,
        visObjTypePages = 15,
        visObjTypeSelection = 16,
        visObjTypeShape = 17,
        visObjTypeShapes = 18,
        visObjTypeStyle = 19,
        visObjTypeStyles = 20,
        visObjTypeWindow = 21,
        visObjTypeWindows = 22,
        visObjTypeLayer = 25,
        visObjTypeLayers = 26,
        visObjTypeFont = 27,
        visObjTypeFonts = 28,
        visObjTypeColor = 29,
        visObjTypeColors = 30,
        visObjTypeAddon = 31,
        visObjTypeAddons = 32,
        visObjTypeEvent = 33,
        visObjTypeEventList = 34,
        visObjTypeGlobal = 36,
        visObjTypeHyperlink = 37,
        visObjTypeOLEObjects = 38,
        visObjTypeOLEObject = 39,
        visObjTypePaths = 40,
        visObjTypePath = 41,
        visObjTypeCurve = 42,
        visObjTypeHyperlinks = 43,
        visObjTypeSection = 44,
        visObjTypeRow = 45,
        visObjTypeMasterShortcuts = 46,
        visObjTypeMasterShortcut = 47,
        visObjTypeMSGWrap = 48,
        visObjTypeMouseEvent = 49,
        visObjTypeKeyboardEvent = 50,
        visObjTypeApplicationSettings = 51,
        visObjTypeDataRecordsets = 52,
        visObjTypeDataRecordset = 53,
        visObjTypeDataConnection = 54,
        visObjTypeDataColumns = 55,
        visObjTypeDataColumn = 56,
        visObjTypeDataRecordsetChangedEvent = 57,
        visObjTypeGraphicItems = 58,
        visObjTypeGraphicItem = 59
    } VisObjectTypes;

    typedef [public]
    VisObjectTypes tagVisObjectTypes;

    typedef [uuid(000D0C1B-0000-0000-C000-000000000046), helpstring("Text field categories."), helpcontext(0x000111f7)]
    enum {
        visFCatCustom = 0,
        visFCatDateTime = 1,
        visFCatDocument = 2,
        visFCatGeometry = 3,
        visFCatObject = 4,
        visFCatPage = 5,
        visFCatNotes = 6
    } VisFieldCategories;

    typedef [public]
    VisFieldCategories tagVisFieldCategories;

    typedef [uuid(000D0C1C-0000-0000-C000-000000000046), helpstring("Text field codes."), helpcontext(0x000111fc)]
    enum {
        visFCodeCreateDate = 0,
        visFCodeCreateTime = 1,
        visFCodeCurrentDate = 2,
        visFCodeCurrentTime = 3,
        visFCodeEditDate = 4,
        visFCodeEditTime = 5,
        visFCodePrintDate = 6,
        visFCodePrintTime = 7,
        visFCodeCreator = 0,
        visFCodeDescription = 1,
        visFCodeDirectory = 2,
        visFCodeFileName = 3,
        visFCodeKeyWords = 4,
        visFCodeSubject = 5,
        visFCodeTitle = 6,
        visFCodeManager = 7,
        visFCodeCompany = 8,
        visFCodeCategory = 9,
        visFCodeHyperlinkBase = 10,
        visFCodeWidth = 0,
        visFCodeHeight = 1,
        visFCodeAngle = 2,
        visFCodeData1 = 0,
        visFCodeData2 = 1,
        visFCodeData3 = 2,
        visFCodeObjectID = 3,
        visFCodeMasterName = 4,
        visFCodeObjectName = 5,
        visFCodeObjectType = 6,
        visFCodeBackgroundName = 0,
        visFCodePageName = 1,
        visFCodeNumberOfPages = 2,
        visFCodePageNumber = 3
    } VisFieldCodes;

    typedef [public]
    VisFieldCodes tagVisFieldCodes;

    typedef [uuid(000D0C1D-0000-0000-C000-000000000046), helpstring("Text field formats."), helpcontext(0x00011201)]
    enum {
        visFmtNumGenNoUnits = 0,
        visFmtNumGenDefUnits = 1,
        visFmt0PlNoUnits = 2,
        visFmt0PlDefUnits = 3,
        visFmt1PlNoUnits = 4,
        visFmt1PlDefUnits = 5,
        visFmt2PlNoUnits = 6,
        visFmt2PlDefUnits = 7,
        visFmt3PlNoUnits = 8,
        visFmt3PlDefUnits = 9,
        visFmtFeetAndInches = 10,
        visFmtRadians = 11,
        visFmtDegrees = 12,
        visFmtFeetAndInches1Pl = 13,
        visFmtFeetAndInches2Pl = 14,
        visFmtFraction1PlNoUnits = 15,
        visFmtFraction1PlDefUnits = 16,
        visFmtFraction2PlNoUnits = 17,
        visFmtFraction2PlDefUnits = 18,
        visFmtDateShort = 20,
        visFmtDateLong = 21,
        visFmtDateMDYY = 22,
        visFmtDateMMDDYY = 23,
        visFmtDateMmmDYYYY = 24,
        visFmtDateMmmmDYYYY = 25,
        visFmtDateDMYY = 26,
        visFmtDateDDMMYY = 27,
        visFmtDateDMMMYYYY = 28,
        visFmtDateDMMMMYYYY = 29,
        visFmtTimeGen = 30,
        visFmtTimeHMM = 31,
        visFmtTimeHHMM = 32,
        visFmtTimeHMM24 = 33,
        visFmtTimeHHMM24 = 34,
        visFmtTimeHMMAMPM = 35,
        visFmtTimeHHMMAMPM = 36,
        visFmtStrNormal = 37,
        visFmtStrLower = 38,
        visFmtStrUpper = 39,
        visFmtJDategggeXmXdXww = 40,
        visFmtJDateyyyyXmXdXww = 41,
        visFmtJDategggeXmXdX = 42,
        visFmtJDateyyyyXmXdX = 43,
        visFmtJDateyyyymd = 44,
        visFmtJDateyymmdd = 45,
        visFmtJDatehmmaxpx = 46,
        visFmtJDateaxpxhmm = 47,
        visFmtJDateaxpxhXmmX = 48,
        visFmtJDatehXmmX = 49,
        visFmtCDateiiieXmmmmXdddd = 50,
        visFmtCDateiieXmmmmXdddd = 51,
        visFmtCDateieXmmmmXddddXww = 52,
        visFmtCDateieXmmmmXdddd = 53,
        visFmtDateyyyymd = 44,
        visFmtDateyymmdd = 45,
        visFmtTimeAMPMhmm_J = 46,
        visFmtDateTWNfYYYYMMDDD_C = 50,
        visFmtDateTWNsYYYYMMDDD_C = 51,
        visFmtDateTWNfyyyymmddww_C = 52,
        visFmtDateTWNfyyyymmdd_C = 53,
        visFmtDategggemdww_J = 54,
        visFmtDateyyyymdww_J = 55,
        visFmtDategggemd_J = 56,
        visFmtDateyyyymd_J = 57,
        visFmtDateYYYYMMMDDDWWW_C = 58,
        visFmtDateYYYYMMMDDD_C = 59,
        visFmtDategeMMMMddddww_K = 60,
        visFmtDateyyyymdww_K = 61,
        visFmtDategeMMMMddd_K = 62,
        visFmtDateyyyymd_K = 63,
        visFmtDateyyyy_m_d = 64,
        visFmtDateyy_mm_dd = 65,
        visFmtTimeAMPMhmm_C = 66,
        visFmtTimeAMPMhmm_K = 67,
        visFmtTimeAMPM_hmm_J = 68,
        visFmtTimehmm_J = 69,
        visFmtTimeAMPM_hmm_C = 70,
        visFmtTimehmm_C = 71,
        visFmtTimeAMPM_hmm_K = 72,
        visFmtTimehmm_K = 73,
        visFmtTimeHMMAMPM_E = 74,
        visFmtTimeHHMMAMPM_E = 75,
        visFmtDateyyyymd_S = 76,
        visFmtDateyyyymmdd_S = 77,
        visFmtDatewwyyyymmdd_S = 78,
        visFmtDatewwyyyymd_S = 79,
        visFmtTimeAMPMhmm_S = 80,
        visFmtTimeAMPMhhmm_S = 81,
        visFmtMsoDateShort = 200,
        visFmtMsoDateLongDay = 201,
        visFmtMsoDateLong = 202,
        visFmtMsoDateShortAlt = 203,
        visFmtMsoDateISO = 204,
        visFmtMsoDateShortMon = 205,
        visFmtMsoDateShortSlash = 206,
        visFmtMsoDateShortAbb = 207,
        visFmtMsoDateEnglish = 208,
        visFmtMsoDateMonthYr = 209,
        visFmtMsoDateMon_Yr = 210,
        visFmtMsoTimeDatePM = 211,
        visFmtMsoTimeDateSecPM = 212,
        visFmtMsoTimePM = 213,
        visFmtMsoTimeSecPM = 214,
        visFmtMsoTime24 = 215,
        visFmtMsoTimeSec24 = 216,
        visFmtMsoFEExtra1 = 217,
        visFmtMsoFEExtra2 = 218,
        visFmtMsoFEExtra3 = 219,
        visFmtMsoFEExtra4 = 220,
        visFmtMsoFEExtra5 = 221
    } VisFieldFormats;

    typedef [public]
    VisFieldFormats tagVisFieldFormats;

    typedef [uuid(000D0C1E-0000-0000-C000-000000000046), helpstring("Document version codes."), helpcontext(0x00011206)]
    enum {
        visVersionUnsaved = 0,
        visVersion10 = 0x00010023,
        visVersion20 = 0x00020000,
        visVersion30 = 0x00030003,
        visVersion40 = 0x00040000,
        visVersion50 = 0x00050000,
        visVersion60 = 0x00060000,
        visVersion100 = 0x00060000,
        visVersion110 = 0x000b0000,
        visVersion120 = 0x000b0000
    } VisDocVersions;

    typedef [public]
    VisDocVersions tagVisDocVersions;

    typedef [uuid(000D0C1F-0000-0000-C000-000000000046), helpstring("Values for various properties of a Visio master."), helpcontext(0x0001120b)]
    enum {
        visLeft = 1,
        visCenter = 2,
        visRight = 3,
        visIconFormatVisio = 0,
        visIconFormatBMP = 2,
        visNormal = 1,
        visTall = 2,
        visWide = 3,
        visDouble = 4,
        visAutomatic = 1,
        visManual = 0,
        visMasIsLinePat = 1,
        visMasIsLineEnd = 2,
        visMasIsFillPat = 4,
        visMasLPTileDeform = 0,
        visMasLPTile = 16,
        visMasLPStretch = 32,
        visMasLPAnnotate = 48,
        visMasLPScale = 64,
        visMasLEDefault = 0,
        visMasLEUpright = 256,
        visMasLEScale = 1024,
        visMasFPTile = 0,
        visMasFPCenter = 4096,
        visMasFPStretch = 8192,
        visMasFPScale = 16384
    } VisMasterProperties;

    typedef [public]
    VisMasterProperties tagVisMasterProperties;

    typedef [uuid(000D0C20-0000-0000-C000-000000000046), helpstring("Codes returned by Connect.FromPart."), helpcontext(0x00011210)]
    enum {
        visConnectFromError = 0xffffffff,
        visFromNone = 0,
        visLeftEdge = 1,
        visCenterEdge = 2,
        visRightEdge = 3,
        visBottomEdge = 4,
        visMiddleEdge = 5,
        visTopEdge = 6,
        visBeginX = 7,
        visBeginY = 8,
        visBegin = 9,
        visEndX = 10,
        visEndY = 11,
        visEnd = 12,
        visFromAngle = 13,
        visFromPin = 14,
        visControlPoint = 100
    } VisFromParts;

    typedef [public]
    VisFromParts tagVisFromParts;

    typedef [uuid(000D0C21-0000-0000-C000-000000000046), helpstring("Codes returned by Connect.ToPart."), helpcontext(0x00011215)]
    enum {
        visConnectToError = 0xffffffff,
        visToNone = 0,
        visGuideX = 1,
        visGuideY = 2,
        visWholeShape = 3,
        visGuideIntersect = 4,
        visToAngle = 7,
        visConnectionPoint = 100,
        visConnectError = 0xffffffff,
        visNone = 0
    } VisToParts;

    typedef [public]
    VisToParts tagVisToParts;

    typedef [uuid(000D0C80-0000-0000-C000-000000000046), helpstring("UI Object Set identifiers."), helpcontext(0x0001121a)]
    enum {
        visUIObjSetNoDocument = 1,
        visUIObjSetDrawing = 2,
        visUIObjSetStencil = 3,
        visUIObjSetShapeSheet = 4,
        visUIObjSetIcon = 5,
        visUIObjSetInPlace = 6,
        visUIObjSetPrintPreview = 7,
        visUIObjSetText = 8,
        visUIObjSetCntx_DrawObjSel = 9,
        visUIObjSetCntx_DrawOleObjSel = 10,
        visUIObjSetCntx_DrawNoObjSel = 11,
        visUIObjSetCntx_InPlaceNoObj = 12,
        visUIObjSetCntx_TextEdit = 13,
        visUIObjSetCntx_StencilRO = 14,
        visUIObjSetCntx_ShapeSheet = 15,
        visUIObjSetCntx_Toolbar = 16,
        visUIObjSetCntx_FullScreen = 17,
        visUIObjSetBinderInPlace = 18,
        visUIObjSetActiveXDoc = 18,
        visUIObjSetCntx_Debug = 19,
        visUIObjSetCntx_StencilRW = 20,
        visUIObjSetCntx_StencilDocked = 21,
        visUIObjSetHostingInPlace = 22,
        visUIObjSetCntx_Hyperlink = 23,
        visUIObjSetPal_LineColors = 24,
        visUIObjSetPal_LineWeights = 25,
        visUIObjSetPal_LinePatterns = 26,
        visUIObjSetPal_FillColors = 27,
        visUIObjSetPal_FillPatterns = 28,
        visUIObjSetPal_TextColors = 29,
        visUIObjSetPal_AlignShapes = 30,
        visUIObjSetPal_DistributeShapes = 31,
        visUIObjSetPal_Shadow = 32,
        visUIObjSetPal_LineEnds = 33,
        visUIObjSetPal_CornerRounding = 34,
        visUIObjSetCntx_ToolbarInPlace = 35,
        visUIObjSetCntx_ToolbarHostingInPlace = 36,
        visUIObjSetPal_Rectangle_Tool = 37,
        visUIObjSetPopup_LineJumpCode = 38,
        visUIObjSetPopup_LineJumpStyle = 39,
        visUIObjSetPal_ConnectorTool = 40,
        visUIObjSetPal_TextTool = 41,
        visUIObjSetPal_LineTool = 42,
        visUIObjSetPal_RotationTool = 43,
        visUIObjSetCntx_ConnectPtType = 44,
        visUIObjSetPal_Undo = 45,
        visUIObjSetPal_Redo = 46,
        visUIObjSetCntx_PageTabs = 47,
        visUIObjSetPal_ShapeExt = 48,
        visUIObjSetCntx_DEDocument = 49,
        visUIObjSetCntx_DEPages = 50,
        visUIObjSetCntx_DEPage = 51,
        visUIObjSetCntx_DEShapes = 52,
        visUIObjSetCntx_DEShape = 53,
        visUIObjSetCntx_DELayers = 54,
        visUIObjSetCntx_DELayer = 55,
        visUIObjSetCntx_DEStyles = 56,
        visUIObjSetCntx_DEStyle = 57,
        visUIObjSetCntx_DEMasters = 58,
        visUIObjSetCntx_DEMaster = 59,
        visUIObjSetCntx_DEPatterns = 60,
        visUIObjSetCntx_AnchorBar_Base = 61,
        visUIObjSetCntx_AnchorBar_CustProp = 62,
        visUIObjSetCntx_AnchorBar_SizePos = 63,
        visUIObjSetCntx_Master = 14,
        visUIObjSetCntx_Stencil = 21,
        visUIObjSetCntx_AddCommands = 1000,
        visUIObjSetCntx_BuiltinMenus = 1010,
        visUIObjSetCntx_ShortcutMenus = 1011,
        visUIObjSetCntx_MEDocument = 66,
        visUIObjSetCntx_MEMasters = 67,
        visUIObjSetCntx_CommentMarker = 68,
        visUIObjSetCntx_AnchorBar_Shapes = 69,
        visUIObjSetCntx_DataExplorerTabs = 70,
        visUIObjSetCntx_DataExplorerList = 71
    } VisUIObjSets;

    typedef [public]
    VisUIObjSets tagVisUIObjSets;

    typedef [uuid(000D0C81-0000-0000-C000-000000000046), helpstring("Command numbers to be used with CmdNum property. These also correspond to scope id's passed with EnterScope and ExitScope events, and pass command ranges to Get/SetFilterCommands."), helpcontext(0x0001121f)]
    enum {
        visCmdFirst = 0,
        visCmdLast = 65535,
        visCmdHierarchical = 0,
        visCmdFileNew = 1001,
        visCmdFileOpen = 1002,
        visCmdFileClose = 1003,
        visCmdFileSave = 1004,
        visCmdFileSaveAs = 1005,
        visCmdFileSaveWorkspace = 1006,
        visCmdFileImport = 1007,
        visCmdFileSummaryInfoDlg = 1009,
        visCmdFilePrint = 1010,
        visCmdFileLastFile1 = 1012,
        visCmdFileLastFile2 = 1013,
        visCmdFileLastFile3 = 1014,
        visCmdFileLastFile4 = 1015,
        visCmdFileExit = 1016,
        visCmdEditUndo = 1017,
        visCmdEditRedo = 1018,
        visCmdEditRepeat = 1019,
        visCmdUFEditCut = 1020,
        visCmdUFEditCopy = 1021,
        visCmdUFEditPaste = 1022,
        visCmdUFEditClear = 1023,
        visCmdUFEditDuplicate = 1024,
        visCmdUFEditSelectAll = 1025,
        visCmdEditSelectSpecial = 1026,
        visCmdEditPasteSpecial = 1027,
        visCmdEditPasteLink = 1028,
        visCmdEditOpenObject = 1029,
        visCmdEditLinks = 1030,
        visCmdEditInsertObject = 1031,
        visCmdEditInsertField = 1032,
        visCmdViewFitInWindow = 1033,
        visCmdView75 = 1034,
        visCmdView100 = 1035,
        visCmdView150 = 1036,
        visCmdView200 = 1037,
        visCmdViewCustom = 1038,
        visCmdViewRulers = 1039,
        visCmdViewGrid = 1040,
        visCmdViewGuides = 1041,
        visCmdViewConnections = 1042,
        visCmdEditFind = 1043,
        visCmdViewStatusBar = 1044,
        visCmdObjectBringForward = 1045,
        visCmdObjectBringToFront = 1046,
        visCmdObjectSendBackward = 1047,
        visCmdObjectSendToBack = 1048,
        visCmdObjectAlignObjects = 1049,
        visCmdObjectConnectObjects = 1050,
        visCmdObjectGroup = 1051,
        visCmdObjectUngroup = 1052,
        visCmdObjectAddToGroup = 1053,
        visCmdObjectRemoveFromGroup = 1054,
        visCmdObjectConvertToGroup = 1055,
        visCmdObjectRotate90 = 1056,
        visCmdObjectFlipVertical = 1057,
        visCmdObjectFlipHorizontal = 1058,
        visCmdObjectReverse = 1059,
        visCmdObjectUnion = 1060,
        visCmdObjectCombine = 1061,
        visCmdObjectFragment = 1062,
        visCmdFormatStyle = 1063,
        visCmdFormatDefineStyles = 1064,
        visCmdFormatLine = 1065,
        visCmdFormatFill = 1066,
        visCmdFormatText = 1067,
        visCmdFormatParagraph = 1068,
        visCmdFormatTabs = 1069,
        visCmdFormatBlock = 1070,
        visCmdFormatBehavior = 1071,
        visCmdFormatProtection = 1072,
        visCmdFormatSpecial = 1073,
        visCmdOptionsEditDrawing = 1074,
        visCmdOptionsEditBackground = 1075,
        visCmdOptionsPageSetup = 1076,
        visCmdOptionsGoToDrawing = 1077,
        visCmdOptionsNewPage = 1078,
        visCmdOptionsDeletePages = 1079,
        visCmdOptionsReorderPages = 1080,
        visCmdOptionsPreferences = 1081,
        visCmdOptionsColorPaletteDlg = 1082,
        visCmdOptionsProtectDocument = 1083,
        visCmdOptionsSnapGlueSetup = 1084,
        visCmdWindowNewWindow = 1085,
        visCmdWindowCascadeAll = 1086,
        visCmdWindowTileAll = 1087,
        visCmdWindowShowShapeSheet = 1088,
        visCmdWindowShowMasterObjects = 1089,
        visCmdRunAddOnMenu = 1090,
        visCmdWindowShowDrawPage = 1091,
        visCmdHelpContents = 1092,
        visCmdDecreaseIndent = 1093,
        visCmdIncreaseIndent = 1094,
        visCmdDecreaseParaSpacing = 1095,
        visCmdIncreaseParaSpacing = 1096,
        visCmdHelpStencil = 1097,
        visCmdTextRotate90 = 1098,
        visCmdHelpQuickTour = 1099,
        visCmdHelpAboutVisio = 1100,
        visCmdStenEditIcon = 1101,
        visCmdStenEditDrawing = 1102,
        visCmdStenNameMaster = 1103,
        visCmdStenNewMaster = 1104,
        visCmdStenImageMaster = 1105,
        visCmdStenCleanup = 1106,
        visCmdSWShowValues = 1107,
        visCmdSWShowFormulas = 1108,
        visCmdSWShowSectionsDlg = 1109,
        visCmdSWPasteNameDlg = 1110,
        visCmdSWPasteFunctionDlg = 1111,
        visCmdSWInsertRow = 1112,
        visCmdSWInsertRowAfter = 1113,
        visCmdSWChangeRowTypeDlg = 1114,
        visCmdSWDeleteRow = 1115,
        visCmdSWAddSectionDlg = 1116,
        visCmdSWDeleteSection = 1117,
        visCmdFormatDoubleClick = 1118,
        visCmdDrawTextStyle = 1121,
        visCmdDrawLineStyle = 1122,
        visCmdDrawFillStyle = 1123,
        visCmdDrawSnap = 1124,
        visCmdDrawGlue = 1125,
        visCmdDrawZoom = 1126,
        visCmdTextStyle = 1128,
        visCmdTextFont = 1129,
        visCmdTextSize = 1130,
        visCmdTextBold = 1131,
        visCmdTextItalic = 1132,
        visCmdTextSmallCaps = 1133,
        visCmdTextSuperscript = 1134,
        visCmdTextSubscript = 1135,
        visCmdTextUline = 1136,
        visCmdSWCancel = 1139,
        visCmdSWAccept = 1140,
        visCmdSWFormula = 1141,
        visCmdSWShowToggle = 1142,
        visCmdIconLeftColor = 1143,
        visCmdIconRightColor = 1144,
        visCmdIconPencilTool = 1145,
        visCmdRecalcObjectWH = 1146,
        visCmdTurnToPrevPage = 1147,
        visCmdTurnToNextPage = 1148,
        visCmdEditReplace = 1179,
        visCmdDrawAddGuide = 1180,
        visCmdAddTextShape = 1181,
        visCmdDrawRect = 1182,
        visCmdDrawOval = 1183,
        visCmdDragDuplicate = 1184,
        visCmdMoveObject = 1185,
        visCmdMove1D = 1186,
        visCmdMove2D = 1187,
        visCmdSize1D = 1188,
        visCmdSize2D = 1189,
        visCmdRotateObject = 1190,
        visCmdCropObject = 1192,
        visCmdPanObject = 1193,
        visCmdSizeTextBlock = 1194,
        visCmdAlignObjectLeft = 1196,
        visCmdAlignObjectCenter = 1197,
        visCmdAlignObjectRight = 1198,
        visCmdAlignObjectTop = 1199,
        visCmdAlignObjectMiddle = 1200,
        visCmdAlignObjectBottom = 1201,
        visCmdCenterDrawing = 1202,
        visCmdDeselectAll = 1213,
        visCmdTextEditState = 1214,
        visCmdZoomPt = 1215,
        visCmdZoomIn = 1216,
        visCmdZoomOut = 1217,
        visCmdZoomArea = 1218,
        visCmdDRPointerTool = 1219,
        visCmdDRPencilTool = 1220,
        visCmdDRLineTool = 1221,
        visCmdDRQtrArcTool = 1222,
        visCmdDRRectTool = 1223,
        visCmdDROvalTool = 1224,
        visCmdDRConnectorTool = 1225,
        visCmdDRConnectionTool = 1226,
        visCmdDRTextTool = 1227,
        visCmdDRRotateTool = 1228,
        visCmdObjectDistributeDlg = 1230,
        visCmdDistributeHSpace = 1231,
        visCmdDistributeLeft = 1232,
        visCmdDistributeCenter = 1233,
        visCmdDistributeRight = 1234,
        visCmdDistributeVSpace = 1235,
        visCmdDistributeTop = 1236,
        visCmdDistributeMiddle = 1237,
        visCmdDistributeBottom = 1238,
        visCmdUpdateContentCache = 1241,
        visCmdDropOnText = 1243,
        visCmdDropOnStencil = 1244,
        visCmdDropOnPage = 1246,
        visCmdSSWindowCollapse = 1250,
        visCmdSSWindowExpand = 1251,
        visCmdSSWindowSelect = 1252,
        visCmdSSWindowDeselect = 1253,
        visCmdAddConnectPt = 1263,
        visCmdModConnectPt = 1264,
        visCmdDelConnectPt = 1265,
        visCmdAddControlPt = 1266,
        visCmdModControlPt = 1267,
        visCmdDelControlPt = 1268,
        visCmdMovConnectPt = 1269,
        visCmdToolsSpelling = 1270,
        visCmdFormatPainter = 1271,
        visCmdPageMeasureUnitsDlg = 1274,
        visCmdView50 = 1279,
        visCmdView400 = 1280,
        visCmdInsertDataMap = 1282,
        visCmdSendAsMail = 1292,
        visCmdShapeActions = 1309,
        visCmdDRSplineTool = 1311,
        visCmdFormatCustPropEdit = 1312,
        visCmdRulerGridDlg = 1318,
        visCmdFormatShadow = 1333,
        visCmdFormatCorners = 1334,
        visCmdToolsInventory = 1335,
        visCmdMasterSetup = 1343,
        visCmdToolsArrayShapesAddOn = 1354,
        visCmdSetLineWeight = 1355,
        visCmdSetLinePattern = 1356,
        visCmdSetLineEnds = 1357,
        visCmdSetLineCornerStyle = 1358,
        visCmdSetLineColor = 1359,
        visCmdCloseWindow = 1361,
        visCmdSetFillShadow = 1379,
        visCmdSSWindowShowSection = 1380,
        visCmdSSWindowPasteName = 1381,
        visCmdSSWindowPasteFunction = 1382,
        visCmdSSWindowChangeRowType = 1383,
        visCmdSSWindowAddSection = 1384,
        visCmdSetFillColor = 1385,
        visCmdHelpMode = 1386,
        visCmdOffsetDlg = 1387,
        visCmdDesignMode = 1388,
        visCmdShapeExplorer = 1389,
        visCmdSetFillPattern = 1399,
        visCmdSetCharColor = 1404,
        visCmdSetCharSizeUp = 1405,
        visCmdSetCharSizeDown = 1406,
        visCmdTextHAlignLeft = 1407,
        visCmdTextHAlignCenter = 1408,
        visCmdTextHAlignRight = 1409,
        visCmdTextHAlignJustify = 1412,
        visCmdTextVAlignTop = 1413,
        visCmdTextVAlignMiddle = 1414,
        visCmdTextVAlignBottom = 1422,
        visCmdStampTool = 1424,
        visCmdObjectInfoDlg = 1425,
        visCmdObjectHelp = 1428,
        visCmdEditConvertObject = 1439,
        visCmdFileOpenStencil = 1442,
        visCmdPrintPage = 1443,
        visCmdSWShapeActionDlg = 1444,
        visCmdLayerDlg = 1446,
        visCmdLayerSetupDlg = 1448,
        visCmdCropTool = 1449,
        visCmdTextBlockTool = 1451,
        visCmdStenClose = 1452,
        visCmdIntersect = 1453,
        visCmdSubtract = 1454,
        visCmdStenActivate = 1458,
        visCmdStenIconAndName = 1480,
        visCmdStenIconOnly = 1481,
        visCmdStenNameOnly = 1482,
        visCmdStenAutoArrange = 1483,
        visCmdRunAddOnDlg = 1484,
        visCmdPrintPreview = 1490,
        visCmdOpenInVisio = 1491,
        visCmdFullScreenMode = 1492,
        visCmdLayoutDynamic = 1493,
        visCmdRotate90Clockwise = 1494,
        visCmdZoomLast = 1495,
        visCmdZoomPageWidth = 1496,
        visCmdInsertClipArt = 1497,
        visCmdInsertWordArt = 1498,
        visCmdInsertMicrosoftGraph = 1499,
        visCmdToolbarsDlg = 1500,
        visCmdInsertComment = 1501,
        visCmdMoveComment = 1502,
        visCmdOpenCommentForEdit = 1503,
        visCmdMSOInsertSymbol = 1504,
        visCmdMSOInsertSymbolDlg = 1505,
        visCmdINETAddToFavorites = 1506,
        visCmdViewPageBreaks = 1509,
        visCmdZoomSingleTile = 1512,
        visCmdPreviousTile = 1513,
        visCmdNextTile = 1514,
        visCmdFirstTile = 1515,
        visCmdLastTile = 1516,
        visCmdInsertAutoCADAddOn = 1521,
        visCmdInsertControlDlg = 1522,
        visCmdJoin = 1533,
        visCmdTrim = 1534,
        visCmdDlgCustomFit = 1536,
        visCmdFitCurve = 1538,
        visCmdIconBucketTool = 1543,
        visCmdIconLassoTool = 1544,
        visCmdIconSelectNet = 1545,
        visCmdFileLastFile5 = 1561,
        visCmdFileLastFile6 = 1569,
        visCmdFileLastFile7 = 1570,
        visCmdFileLastFile8 = 1571,
        visCmdFileLastFile9 = 1572,
        visCmdToolsLayoutShapesDlg = 1574,
        visCmdToolsRunVBE = 1576,
        visCmdToolsMacroDlg = 1577,
        visCmdFileNewBlankDrawing = 1579,
        visCmdFileNewStencilDlg = 1580,
        visCmdFileNewBlankStencil = 1582,
        visCmdFileChooseTemplates = 1583,
        visCmdProgRefHelp = 1584,
        visCmdInsertHyperLink = 1585,
        visCmdHelpTemplates = 1586,
        visCmdEmailRouting = 1588,
        visCmdSendToExchange = 1589,
        visCmdRemoveVBAFromActiveDoc = 1590,
        visCmdINETUserSearchPage = 1595,
        visCmdINETVisioHomePage = 1596,
        visCmdINETGoForward = 1598,
        visCmdINETGoBack = 1599,
        visCmdOpenActiveObject = 1601,
        visCmdCancelInPlaceEditing = 1602,
        visCmdINETVisioSolutionsLibrary = 1604,
        visCmdINETKnowledgeBase = 1605,
        visCmdINETDiagrammingResources = 1606,
        visCmdINETOpenHlink = 1607,
        visCmdINETOpenHlinkNewWnd = 1608,
        visCmdINETDeleteHlink = 1609,
        visCmdINETCopyHyperlink = 1610,
        visCmdHyperlinkHier = 1611,
        visCmdINETEditHyperlink = 1619,
        visCmdINETPasteAsHyperlink = 1620,
        visCmdBullets = 1633,
        visCmdShapeLayerToolbar = 1634,
        visCmdGoToPageToolbar = 1635,
        visCmdFormatAllTextProps = 1642,
        visCmdBrowseSampleDrawings = 1645,
        visCmdMSOInsertEquation = 1646,
        visCmdABarHide = 1650,
        visCmdABarToggleFloat = 1651,
        visCmdABarAutohide = 1652,
        visCmdPanZoom = 1653,
        visCmdPagesList = 1654,
        visCmdCustProp = 1658,
        visCmdInkTool = 1661,
        visCmdInkCustomizePen = 1664,
        visCmdShapesWindow = 1669,
        visCmdSizePos = 1670,
        visCmdFileNewBlankDrawingMetric = 1671,
        visCmdFileNewBlankDrawingUS = 1672,
        visCmdFileNewBlankStencilMetric = 1673,
        visCmdFileNewBlankStencilUS = 1674,
        visCmdCustomPropertySets = 1675,
        visCmdStenSave = 1676,
        visCmdStenSaveAs = 1677,
        visCmdStenProperties = 1678,
        visCmdStenEditToggle = 1679,
        visCmdStenEditOn = 1680,
        visCmdStenEditOff = 1681,
        visCmdEditUndoMultiple = 1682,
        visCmdEditRedoMultiple = 1683,
        visCmdABarAutoHeight = 1684,
        visCmdShapeCommentDlg = 1685,
        visCmdShapeComment = 1686,
        visCmdFormatCustPropDef = 1687,
        visCmdShapeCommentDelete = 1688,
        visCmdHideDocumentStencil = 1689,
        visCmdToggleDocumentStencil = 1690,
        visCmdCustPropDefine = 1695,
        visCmdSetDynConnRerouteFreely = 1696,
        visCmdSetDynConnRerouteAsNeeded = 1697,
        visCmdSetDynConnRerouteNever = 1698,
        visCmdSetPagePlow = 1699,
        visCmdSetDynConnRoutingStyle = 1700,
        visCmdSetPlaceableShapeBehavior = 1702,
        visCmdSetPageLineJumpCode_Disp = 1703,
        visCmdSetPageLineJumpCode_None = 1704,
        visCmdSetPageLineJumpCode_Horz = 1705,
        visCmdSetPageLineJumpCode_Vert = 1706,
        visCmdSetPageLineJumpCode_Last = 1707,
        visCmdSetDynConnLineJumpStyle_Page = 1708,
        visCmdSetDynConnLineJumpStyle_Arc = 1709,
        visCmdSetDynConnLineJumpStyle_Gap = 1710,
        visCmdSetDynConnLineJumpStyle_Square = 1711,
        visCmdSetDynConnLineJumpStyle_Triangle = 1712,
        visCmdSetDynConnLineJumpStyle_2pt = 1713,
        visCmdSetDynConnLineJumpStyle_3pt = 1714,
        visCmdSetDynConnLineJumpStyle_4pt = 1715,
        visCmdSetDynConnLineJumpStyle_5pt = 1716,
        visCmdSetDynConnLineJumpStyle_6pt = 1717,
        visCmdSWExpandRow = 1718,
        visCmdHyperlinkList = 1719,
        visCmdHeaderFooter = 1720,
        visCmdDrawingExplorer = 1721,
        visCmdHideAllToolbars = 1726,
        visCmdTextStrikethrough = 1741,
        visCmdDrawRegion = 1742,
        visCmdSetAddMarkup = 1744,
        visCmdDynamicGrid = 1765,
        visCmdRulSub = 1766,
        visCmdGrid = 1767,
        visCmdAlignBox = 1768,
        visCmdShapeGeo = 1769,
        visCmdGuides = 1771,
        visCmdShapeHand = 1772,
        visCmdShapeVert = 1773,
        visCmdConnPoints = 1774,
        visCmdRecordNewMacro = 1775,
        visCmdStartRecordingMacro = 1776,
        visCmdStopRecordingMacro = 1777,
        visCmdPauseRecordingMacro = 1778,
        visCmdResumeRecordingMacro = 1779,
        visCmdSSWindowShowTraceWindow = 1781,
        visCmdFileSaveAsWebPage = 1785,
        visCmdFileCheckIn = 1787,
        visCmdFileCheckOut = 1788,
        visCmdPasteShortcut = 1790,
        visCmdCreateShortcut = 1791,
        visCmdReOrderPage = 1795,
        visCmdStenDrawingExplorer = 1796,
        visCmdINETOfficeOnTheWeb = 1802,
        visCmdToolSnapLines = 1807,
        visCmdHelpSearch = 1809,
        visCmdTextEditRuler = 1810,
        visCmdCreateNewDrawing = 1812,
        visCmdHelpShapeBasics = 1822,
        visCmdDynConnReroute = 1829,
        visCmdShapeIntersect = 1830,
        visCmdINETVisioOnTheWeb = 1831,
        visCmdReviewerVisibilityAll = 1836,
        visCmdSetDynConnRerouteOnCrossover = 1837,
        visCmdSaveForAutoRecover = 1857,
        visCmdSetHeaderFooter = 1858,
        visCmdMsoClipboard = 1859,
        visCmdMsoSearch = 1860,
        visCmdTextAllCaps = 1862,
        visCmdTextDoubleUline = 1863,
        visCmdAppMaximize = 1864,
        visCmdAppMinimize = 1865,
        visCmdMsoAutoCorrectDlg = 1866,
        visCmdShapeGalleryAddOn = 1867,
        visCmdAcquireImages = 1868,
        visCmdDropManyOnPage = 1869,
        visCmdObjectSwapEnds = 1870,
        visCmdSetIndexInStencil = 1871,
        visCmdMsoAutoCorrect = 1872,
        visCmdMsoAutoFormat = 1873,
        visCmdShapeTransparencyDlg = 1874,
        visCmdShapeTransparency = 1875,
        visCmdToolsShowAddins = 1876,
        visCmdLicenseVerification = 1877,
        visCmdRightDragMove = 1878,
        visCmdRightDragCopy = 1879,
        visCmdRightDragLink = 1880,
        visCmdRightDragCancel = 1881,
        visCmdNMMeetNow = 1882,
        visCmdImagePropertiesDlg = 1883,
        visCmdToolsSecurity = 1884,
        visCmdMsoMediaGallery = 1885,
        visCmdNextWindow = 1886,
        visCmdImageProperties = 1887,
        visCmdSetLanguageDlg = 1888,
        visCmdSpellingChange = 1889,
        visCmdDetectAndRepair = 1890,
        visCmdExportDatabaseAddOn = 1891,
        visCmdStenIconAndDetail = 1892,
        visCmdSetDynConnAppearanceDefault = 1893,
        visCmdSetDynConnAppearanceStraight = 1894,
        visCmdSetDynConnAppearanceCurved = 1895,
        visCmdTaskPaneToggle = 1896,
        visCmdNewFromExisting = 1897,
        visCmdMsoCustomItem = 1898,
        visCmdCreateEditMaster = 1899,
        visCmdBreakOLELink = 1900,
        visCmdMDIMaximize = 1901,
        visCmdMDIMinimize = 1902,
        visCmdMDIRestore = 1903,
        visCmdAppRestore = 1904,
        visCmdDeleteBackWord = 1905,
        visCmdNewDefDocBlankDrawing = 1906,
        visCmdSelectionModeRect = 1907,
        visCmdSelectionModeLasso = 1908,
        visCmdSelectionModeExtend = 1909,
        visCmdNextMarkup = 1914,
        visCmdPreviousMarkup = 1915,
        visCmdMasterExplorer = 1916,
        visCmdZoomInIgnoreSel = 1917,
        visCmdZoomOutIgnoreSel = 1918,
        visCmdReviewerVisibilityNone = 1919,
        visCmdDeleteComment = 1920,
        visCmdSizeObjects = 1925,
        visCmdReviewerPaneToggle = 1939,
        visCmdConnectorEffectRightAngle = 1943,
        visCmdConnectorEffectStraight = 1944,
        visCmdConnectorEffectCurved = 1945,
        visCmdDrawingTools = 1946,
        visCmdTextDoubleStrikethrough = 1951,
        visCmdTextHAlignDistribute = 1952,
        visCmdFormatInkDlg = 1955,
        visCmdCheckForUpdates = 1962,
        visCmdPrivacySettings = 1963,
        visCmdContactUs = 1964,
        visCmdResearchLookUp = 1967,
        visCmdResearchTranslate = 1968,
        visCmdResearchPaneToggle = 1969,
        visCmdInkEraser = 1970,
        visCmdInkReviewPen = 1971,
        visCmdSharedWorkspacePaneToggle = 1972,
        visCmdInkStockPen0 = 1973,
        visCmdInkStockPen1 = 1974,
        visCmdInkStockPen2 = 1975,
        visCmdInkStockPen3 = 1976,
        visCmdInkStockPen4 = 1977,
        visCmdDiagramGallery = 1982,
        visCmdShapeStudioAddon = 1985,
        visCmdLinkRowToShape = 1997,
        visCmdAddDataRecordset = 1998,
        visCmdDeleteDataRecordset = 1999,
        visCmdStenNamesUnderIcons = 2005,
        visCmdInsertTextBox = 2006,
        visCmdInsertVertTextBox = 2007,
        visCmdRHI = 2009,
        visCmdRHIDlg = 2010,
        visCmdDataSelectorDlg = 2011,
        visCmdViewDirectionToggle = 2012,
        visCmdViewLeftToRight = 2013,
        visCmdViewRightToLeft = 2014,
        visCmdApplyDataGraphic = 2017,
        visCmdDataRefreshDlg = 2019,
        visCmdDataRefresh = 2021,
        visCmdDataRefreshConfigDlg = 2022,
        visCmdTaskPaneDataGraphic = 2024,
        visCmdDataRecordsetSetCommand = 2037,
        visCmdDataRecordsetSetPrimaryKey = 2038,
        visCmdSpellingOptionsDlg = 2042,
        visCmdDataColumnSettingsDlg = 2043,
        visCmdDataExplorerWindow = 2044,
        visCmdDataAutoLinkWiz = 2045,
        visCmdDataAutoLink = 2046,
        visCmdApplyThemeToPage = 2047,
        visCmdApplyThemeToDoc = 2048,
        visCmdEditTheme = 2049,
        visCmdDuplicateTheme = 2050,
        visCmdDeleteTheme = 2052,
        visCmdTaskTogglePreviewSize = 2053,
        visCmdTaskPaneThemeColors = 2054,
        visCmdTaskPaneThemeEffects = 2055,
        visCmdAllowThemes = 2056,
        visCmdDataUnlinkShape = 2057,
        visCmdDataUnlinkRow = 2058,
        visCmdUpdateColumnsInLinkedShapes = 2061,
        visCmdNewThemeEffects = 2064,
        visCmdNewThemeColors = 2065,
        visCmdDeleteDataGraphic = 2067,
        visCmdRelayoutShapes = 2068,
        visCmdDataRecordsetProperties = 2072,
        visCmdAutoConnectToggle = 2091,
        visCmdApplyDataGraphicAfterLink = 2092,
        visCmdDataRefreshAddConflict = 2094,
        visCmdDataRefreshDeleteConflict = 2095,
        visCmdDataAutoConnect = 2098,
        visCmdDataRefreshResolveConflict = 2103,
        visCmdTrustCenterDlg = 2104,
        visCmdAutoGenerateDataGraphics = 2105,
        visCmdDuplicateDataGraphic = 2106,
        visCmdRemoveDataGraphicFromSel = 2107,
        visCmdDropManyLinked = 2108,
        visCmdFileUndoCheckout = 2109,
        visCmdDeleteForwardWord = 2114,
        visCmdSaveAsFixedFormatDlg = 2117,
        visCmdRemoveThemeFromSel = 2119,
        visCmdTaskPane = 1896,
        visCmdTaskPaneReviewer = 1939,
        visCmdTaskPaneResearch = 1969,
        visCmdTaskPaneDocumentManagement = 1972,
        visCmdOfficeDiagnostics = 1890
    } VisUICmds;

    typedef [public]
    VisUICmds tagVisUICmds;

    typedef [uuid(000D0C82-0000-0000-C000-000000000046), helpstring("Toolbar Bar constants for CtrlType property."), helpcontext(0x00011224)]
    enum {
        visCtrlTypeBUTTON = 2,
        visCtrlTypeBUTTON_OWNERDRAW = 33,
        visCtrlTypeOWNERDRAW_BUTTON = 33,
        visCtrlTypeSPLITBUTTON = 17,
        visCtrlTypePALETTEBUTTONNOMRU = 17,
        visCtrlTypeSPLITBUTTON_MRU_COLOR = 16,
        visCtrlTypePALETTEBUTTON = 16,
        visCtrlTypeSPINBUTTON = 16,
        visCtrlTypeSPLITBUTTON_MRU_COMMAND = 18,
        visCtrlTypePALETTEBUTTONICON = 18,
        visCtrlTypeEDITBOX = 64,
        visCtrlTypeCOMBOBOX = 128,
        visCtrlTypeCOMBOBOX_SORTED = 129,
        visCtrlTypeDROPDOWN = 272,
        visCtrlTypeDROPDOWN_SORTED = 273,
        visCtrlTypeDROPDOWN_OWNERDRAW = 256,
        visCtrlTypeCOMBODRAW = 256,
        visCtrlTypeDROPDOWN_SORTED_OWNERDRAW = 257,
        visCtrlTypeLABEL = 2048,
        visCtrlTypeSWATCH = 32768,
        visCtrlTypeSWATCH_COLORS = 32769,
        visCtrlTypeEND = 0,
        visCtrlTypeSTATE = 1,
        visCtrlTypeSTATE_BUTTON = 3,
        visCtrlTypeHIERBUTTON = 4,
        visCtrlTypeSTATE_HIERBUTTON = 5,
        visCtrlTypeDROPBUTTON = 8,
        visCtrlTypeSTATE_DROPBUTTON = 9,
        visCtrlTypePUSHBUTTON = 32,
        visCtrlTypeLISTBOX = 512,
        visCtrlTypeLISTBOXDRAW = 513,
        visCtrlTypeCOLORBOX = 1024,
        visCtrlTypeMESSAGE = 4096,
        visCtrlTypeSPACER = 16384
    } VisUICtrlTypes;

    typedef [public]
    VisUICtrlTypes tagVisUICtrlTypes;

    typedef [uuid(000D0C83-0000-0000-C000-000000000046), helpstring("Toolbar Bar constants for Spacing property. Obsolete as of Visio 2000."), helpcontext(0x00011229)]
    enum {
        visCtrlSpacingNONE = 0,
        visCtrlSpacingVARIABLE_BEFORE = 1,
        visCtrlSpacingVARIABLE_AFTER = 2,
        visCtrlSpacingFIXED_BEFORE = 4,
        visCtrlSpacingFIXED_AFTER = 8,
        visCtrlSpacingNEW_ROW = 16,
        visCtrlSpacingTB_NOTFIXED = 32,
        visCtrlSpacingPALETTERIGHT = 64,
        visCtrlSpacingNEW_ROW_PALETTERIGHT = 80
    } VisUISpacingTypes;

    typedef [public]
    VisUISpacingTypes tagVisUISpacingTypes;

    typedef [uuid(000D0C84-0000-0000-C000-000000000046), helpstring("Toolbar Bar constants for control alignment. Obsolete as of Visio 2003,"), helpcontext(0x0001122e)]
    enum {
        visCtrlAlignmentLEFT = 1,
        visCtrlAlignmentCENTER = 2,
        visCtrlAlignmentRIGHT = 4,
        visCtrlAlignmentBOX = 128,
        visCtrlAlignmentLEFTBOX = 129,
        visCtrlAlignmentCENTERBOX = 130,
        visCtrlAlignmentRIGHTBOX = 132
    } VisUICtrlAtts;

    typedef [public]
    VisUICtrlAtts tagVisUICtrlAtts;

    typedef [uuid(000D0C85-0000-0000-C000-000000000046), helpstring("Toolbar Bar constants for CntrlID property. Obsolete as of Visio 2003."), helpcontext(0x00011233)]
    enum {
        visCtrlIDNEW = 8383,
        visCtrlIDOPEN = 1,
        visCtrlIDOPENSTEN = 2,
        visCtrlIDSAVE = 3,
        visCtrlIDPRINT = 4,
        visCtrlIDPREVIEW = 5,
        visCtrlIDCUT = 6,
        visCtrlIDCOPY = 7,
        visCtrlIDPASTE = 8,
        visCtrlIDCLEAR = 9,
        visCtrlIDUNDO = 10,
        visCtrlIDREDO = 11,
        visCtrlIDREPEAT = 12,
        visCtrlIDPREVIOUSPAGE = 13,
        visCtrlIDNEXTPAGE = 14,
        visCtrlIDZOOMOUT = 15,
        visCtrlIDZOOMIN = 16,
        visCtrlIDZOOM100 = 17,
        visCtrlIDFLIPHORZ = 18,
        visCtrlIDFLIPVERT = 19,
        visCtrlIDPOINTERTOOL = 20,
        visCtrlIDPENCILTOOL = 21,
        visCtrlIDLINETOOL = 22,
        visCtrlIDQTRARCTOOL = 23,
        visCtrlIDRECTTOOL = 24,
        visCtrlIDOVALTOOL = 25,
        visCtrlIDSTAMPTOOL = 26,
        visCtrlIDTEXTTOOL = 27,
        visCtrlIDROTATETOOL = 28,
        visCtrlIDCROPTOOL = 29,
        visCtrlIDCONNECTIONPTTOOL = 30,
        visCtrlIDSNAP = 31,
        visCtrlIDGLUE = 32,
        visCtrlIDRULER = 33,
        visCtrlIDGRID = 34,
        visCtrlIDGUIDE = 35,
        visCtrlIDCONNECT = 36,
        visCtrlIDROTATECLOCKWISE = 37,
        visCtrlIDROTATECOUNTER = 38,
        visCtrlIDNEWWINDOW = 39,
        visCtrlIDCORNERSTYLE = 40,
        visCtrlIDLINEEND = 41,
        visCtrlIDSHADOWSTYLE = 42,
        visCtrlIDFILLCOLOR = 43,
        visCtrlIDLINECOLOR = 44,
        visCtrlIDLINEWEIGHT = 45,
        visCtrlIDLINEPATTERN = 46,
        visCtrlIDFILLPATTERN = 47,
        visCtrlIDPOINTSIZEDOWN = 48,
        visCtrlIDPOINTSIZEUP = 49,
        visCtrlIDBOLD = 50,
        visCtrlIDITALIC = 51,
        visCtrlIDULINE = 52,
        visCtrlIDSUPERSCRIPT = 53,
        visCtrlIDSUBSCRIPT = 54,
        visCtrlIDTEXTCOLOR = 55,
        visCtrlIDTEXTLEFT = 56,
        visCtrlIDTEXTCENTER = 57,
        visCtrlIDTEXTRIGHT = 58,
        visCtrlIDTEXTJUSTIFY = 59,
        visCtrlIDTEXTTOP = 60,
        visCtrlIDTEXTMIDDLE = 61,
        visCtrlIDTEXTBOTTOM = 62,
        visCtrlIDALIGN = 63,
        visCtrlIDALIGNLEFT = 64,
        visCtrlIDALIGNCENTER = 65,
        visCtrlIDALIGNRIGHT = 66,
        visCtrlIDALIGNTOP = 67,
        visCtrlIDALIGNMIDDLE = 68,
        visCtrlIDALIGNBOTTOM = 69,
        visCtrlIDDISTRIBUTE = 70,
        visCtrlIDDHORZ_EQSPACE = 71,
        visCtrlIDDHORZ_CENTER = 72,
        visCtrlIDDVERT_EQSPACE = 73,
        visCtrlIDDVERT_MIDDLE = 74,
        visCtrlIDCONNECTSHAPES = 75,
        visCtrlIDFIRSTPAGE = 76,
        visCtrlIDLASTPAGE = 77,
        visCtrlIDPAGEBREAKS = 78,
        visCtrlIDICONNAME = 80,
        visCtrlIDICONONLY = 81,
        visCtrlIDNAMEONLY = 82,
        visCtrlIDARRANGEICONS = 83,
        visCtrlIDCANCELFORMULA = 84,
        visCtrlIDACCEPTFORMULA = 85,
        visCtrlIDICONPENCIL = 86,
        visCtrlIDICONBUCKET = 87,
        visCtrlIDICONLASSO = 88,
        visCtrlIDICONSELNET = 89,
        visCtrlIDBRINGFRONT = 90,
        visCtrlIDSENDBACK = 91,
        visCtrlIDGROUP = 92,
        visCtrlIDUNGROUP = 93,
        visCtrlIDCASCADE = 94,
        visCtrlIDTILE = 95,
        visCtrlIDCONNECTORTOOL = 96,
        visCtrlIDTEXTBLOCKTOOL = 97,
        visCtrlIDWHOLEPAGE = 98,
        visCtrlIDSINGLETILE = 99,
        visCtrlIDFORMULA = 190,
        visCtrlIDSPACER = 191,
        visCtrlIDALLSTYLESCOMBO = 200,
        visCtrlIDTEXTSTYLECOMBO = 201,
        visCtrlIDLINESTYLECOMBO = 202,
        visCtrlIDFILLSTYLECOMBO = 203,
        visCtrlIDZOOMCOMBO = 204,
        visCtrlIDFONTCOMBO = 205,
        visCtrlIDPOINTSIZECOMBO = 206,
        visCtrlIDALLSTYLESLIST = 220,
        visCtrlIDTEXTSTYLELIST = 221,
        visCtrlIDLINESTYLELIST = 222,
        visCtrlIDFILLSTYLELIST = 223,
        visCtrlIDZOOMLIST = 224,
        visCtrlIDFONTLIST = 225,
        visCtrlIDPOINTSIZELIST = 226,
        visCtrlIDGOTOPAGELIST = 227,
        visCtrlIDCLOSE = 240,
        visCtrlIDLEFTCOLORBOX = 300,
        visCtrlIDRIGHTCOLORBOX = 301,
        visCtrlIDCOLOR1 = 302,
        visCtrlIDCOLOR2 = 303,
        visCtrlIDCOLOR3 = 304,
        visCtrlIDCOLOR4 = 305,
        visCtrlIDCOLOR5 = 306,
        visCtrlIDCOLOR6 = 307,
        visCtrlIDCOLOR7 = 308,
        visCtrlIDCOLOR8 = 309,
        visCtrlIDCOLOR9 = 310,
        visCtrlIDCOLOR10 = 311,
        visCtrlIDCOLOR11 = 312,
        visCtrlIDCOLOR12 = 313,
        visCtrlIDCOLOR13 = 314,
        visCtrlIDCOLOR14 = 315,
        visCtrlIDCOLOR15 = 316,
        visCtrlIDCOLOR16 = 317,
        visCtrlIDTRANSPARENT = 318,
        visCtrlIDALLSTYLESLABEL = 400,
        visCtrlIDTEXTSTYLELABEL = 401,
        visCtrlIDLINESTYLELABEL = 402,
        visCtrlIDFILLSTYLELABEL = 403,
        visCtrlIDZOOMLABEL = 404,
        visCtrlIDFONTLABEL = 405,
        visCtrlIDPOINTSIZELABEL = 406,
        visCtrlIDLEFTCOLORLABEL = 407,
        visCtrlIDRIGHTCOLORLABEL = 408,
        visCtrlIDSTATUSLABEL = 409,
        visCtrlIDPREVIEWLABEL = 410,
        visCtrlIDSTATUSREADOUT = 500,
        visCtrlIDSTATUSMSG_1 = 501,
        visCtrlIDSTATUSMSG_2 = 502,
        visCtrlIDSTATUSMSG_3 = 503,
        visCtrlIDSTATUSMSG_4 = 504,
        visCtrlIDSTATUSMSG_5 = 505,
        visCtrlIDSTATUSMSG_6 = 506,
        visCtrlIDSTATUSMSG_7 = 507,
        visCtrlIDSTATUSMSG_8 = 508,
        visCtrlIDSTATUSMSG_9 = 509,
        visCtrlIDSPLINETOOL = 79,
        visCtrlIDSPELLING = 100,
        visCtrlIDFORMATPAINTER = 101,
        visCtrlIDHELPMODE = 102,
        visCtrlIDLAYERPROPERTIES = 103,
        visCtrlIDLAYOUTSHAPES = 104,
        visCtrlIDINSERTHYPERLINK = 105,
        visCtrlIDSEARCHTHEWEB = 106,
        visCtrlIDGOBACK = 107,
        visCtrlIDGOFORWARD = 108,
        visCtrlIDWEBTOOLBAR = 109,
        visCtrlIDSHAPEEXPL = 110,
        visCtrlIDCUSTPROP = 111,
        visCtrlIDROTATETEXT = 112,
        visCtrlIDBULLETS = 113,
        visCtrlIDDECRINDENT = 114,
        visCtrlIDINCRINDENT = 115,
        visCtrlIDDECRPARA = 116,
        visCtrlIDINCRPARA = 117,
        visCtrlIDINSERTCONTROL = 118,
        visCtrlIDDESIGNMODE = 119,
        visCtrlIDSHAPESHEET = 120,
        visCtrlIDSHAPELAYER = 247,
        visCtrlIDGOTOPAGE = 207,
        visCtrlIDLINECOLORS = 241,
        visCtrlIDLINEWEIGHTS = 242,
        visCtrlIDLINEPATTERNS = 243,
        visCtrlIDFILLCOLORS = 244,
        visCtrlIDFILLPATTERNS = 245,
        visCtrlIDTEXTCOLORS = 246,
        visCtrlIDMACROS = 121,
        visCtrlIDVBEDITOR = 122,
        visCtrlIDSHAPELAYERCOMBO = 208,
        visCtrlIDSHAPELAYERLIST = 228,
        visCtrlIDALIGNSHAPES = 260,
        visCtrlIDDISTRIBUTESHAPES = 261,
        visCtrlIDMSG_PAGES = 510
    } VisUICtrlIDs;

    typedef [public]
    VisUICtrlIDs tagVisUICtrlIDs;

    typedef [uuid(000D0C86-0000-0000-C000-000000000046), helpstring("Toolbar Bar icon identifiers."), helpcontext(0x00011238)]
    enum {
        visIconIXNEW = 0,
        visIconIXOPEN = 1,
        visIconIXOPENSTENCIL = 2,
        visIconIXSAVE = 3,
        visIconIXPRINT = 4,
        visIconIXPRINTPREVIEW = 5,
        visIconIXCUT = 6,
        visIconIXCOPY = 7,
        visIconIXPASTE = 8,
        visIconIXCLEAR = 9,
        visIconIXUNDO = 10,
        visIconIXREDO = 11,
        visIconIXREPEAT = 12,
        visIconIXPREVIOUSPAGE = 13,
        visIconIXNEXTPAGE = 14,
        visIconIXZOOMOUT = 15,
        visIconIXZOOMIN = 16,
        visIconIXZOOM100 = 17,
        visIconIXFLIPHORIZONTAL = 18,
        visIconIXFLIPVERTICAL = 19,
        visIconIXPOINTERTOOL = 20,
        visIconIXPENCILTOOL = 21,
        visIconIXLINETOOL = 22,
        visIconIXQTRARCTOOL = 23,
        visIconIXRECTANGLETOOL = 24,
        visIconIXOVALTOOL = 25,
        visIconIXSTAMPTOOL = 26,
        visIconIXTEXTOOL = 27,
        visIconIXROTATETOOL = 28,
        visIconIXCROP = 29,
        visIconIXCONNECTIONPTTOOL = 30,
        visIconIXSNAP = 31,
        visIconIXGLUE = 32,
        visIconIXRULER = 33,
        visIconIXGRID = 34,
        visIconIXGUIDE = 35,
        visIconIXCONNECTIONPOINTS = 36,
        visIconIXROTATECLOCKWISE = 37,
        visIconIXROTATECOUNTERCLOCKWISE = 38,
        visIconIXNEWWINDOW = 39,
        visIconIXCORNERSTYLE = 40,
        visIconIXLINEEND = 41,
        visIconIXSHADOWSTYLE = 42,
        visIconIXFILLCOLOR = 43,
        visIconIXLINECOLOR = 44,
        visIconIXLINEWEIGHT = 45,
        visIconIXLINEPATTERN = 46,
        visIconIXFILLPATTERN = 47,
        visIconIXPOINTSIZEDOWN = 48,
        visIconIXPOINTSIZEUP = 49,
        visIconIXBOLD = 50,
        visIconIXITALIC = 51,
        visIconIXUNDERLINE = 52,
        visIconIXSUPERSCRIPT = 53,
        visIconIXSUBSCRIPT = 54,
        visIconIXTEXTCOLOR = 55,
        visIconIXTEXTALIGNLEFT = 56,
        visIconIXTEXTALIGNCENTER = 57,
        visIconIXTEXTALIGNRIGHT = 58,
        visIconIXTEXTALIGNJUSTIFY = 59,
        visIconIXTEXTALIGNTOP = 60,
        visIconIXTEXTALIGNMIDDLE = 61,
        visIconIXTEXTALIGNBOTTOM = 62,
        visIconIXALIGN = 63,
        visIconIXALIGNLEFT = 64,
        visIconIXALIGNCENTER = 65,
        visIconIXALIGNRIGHT = 66,
        visIconIXALIGNTOP = 67,
        visIconIXALIGNMIDDLE = 68,
        visIconIXALIGNBOTTOM = 69,
        visIconIXDISTRIBUTE = 70,
        visIconIXDHORZ_EQSPACE = 71,
        visIconIXDHORZ_CENTER = 72,
        visIconIXDVERT_EQSPACE = 73,
        visIconIXDVERT_MIDDLE = 74,
        visIconIXCONNECTSHAPES = 75,
        visIconIXFIRSTPAGE = 76,
        visIconIXLASTPAGE = 77,
        visIconIXPAGEBREAKS = 78,
        visIconIXSPLINETOOL = 79,
        visIconIXICONNAME = 80,
        visIconIXICONONLY = 81,
        visIconIXNAMEONLY = 82,
        visIconIXARRANGE = 83,
        visIconIXCANCEL = 84,
        visIconIXACCEPT = 85,
        visIconIXICONPENCIL = 86,
        visIconIXICONBUCKET = 87,
        visIconIXICONLASSO = 88,
        visIconIXICONSELNET = 89,
        visIconIXBRINGFRONT = 90,
        visIconIXSENDBACK = 91,
        visIconIXGROUP = 92,
        visIconIXUNGROUP = 93,
        visIconIXCASCADE = 94,
        visIconIXTILE = 95,
        visIconIXCONNECTORTOOL = 96,
        visIconIXTEXTBLOCKTOOL = 97,
        visIconIXWHOLEPAGE = 98,
        visIconIXSINGLETILE = 99,
        visIconIXSPELLING = 100,
        visIconIXFORMATPAINTER = 101,
        visIconIXHELPMODE = 102,
        visIconIXLAYERPROPERTIES = 103,
        visIconIXLAYOUTSHAPES = 104,
        visIconIXINSERTHYPERLINK = 105,
        visIconIXSEARCHTHEWEB = 106,
        visIconIXGOBACK = 107,
        visIconIXGOFORWARD = 108,
        visIconIXWEBTOOLBAR = 109,
        visIconIXSHAPEEXPL = 110,
        visIconIXCUSTPROP = 111,
        visIconIXROTATETEXT = 112,
        visIconIXBULLETS = 113,
        visIconIXDECRINDENT = 114,
        visIconIXINCRINDENT = 115,
        visIconIXDECRPARA = 116,
        visIconIXINCRPARA = 117,
        visIconIXINSERTCONTROL = 118,
        visIconIXDESIGNMODE = 119,
        visIconIXSHAPESHEET = 120,
        visIconIXMACROS = 121,
        visIconIXVBEDITOR = 122,
        visIconIXVERTICALTEXT = 123,
        visIconIXFULLSCREEN = 124,
        visIconIXHELPBOOK = 125,
        visIconIXSHAPEEXPLORER = 126,
        visIconIXWEBPAGE = 127,
        visIconIXCHECKMARK = 128,
        visIconIXCANTFIND = 129,
        visIconIXCLIPART = 130,
        visIconIXIMAGE = 131,
        visIconIXWORDART = 132,
        visIconIXHELPASSISTANT = 133,
        visIconIXCHART = 134,
        visIconIXMAILRECPT = 135,
        visIconIXROUTINGRECPT = 136,
        visIconIXEXCHANGEFOLDER = 137,
        visIconIXFIND = 138,
        visIconIXPANZOOM = 139,
        visIconIXRESTORE = 140,
        visIconIXMINIMIZE = 141,
        visIconIXMAXIMIZE = 142,
        visIconIXCLOSE = 143,
        visIconIXFOLDER = 144,
        visIconIXVSD = 145,
        visIconIXVSS = 146,
        visIconIXVST = 147,
        visIconIXVBAMACRO = 148,
        visIconIXADDIN = 149,
        visIconIXSIZEPOS = 150,
        visIconIXCUSTOM_SMILE = 151,
        visIconIXCUSTOM_FROWN = 152,
        visIconIXCUSTOM_BANK = 153,
        visIconIXCUSTOM_PASTE = 154,
        visIconIXCUSTOM_LOAD = 155,
        visIconIXCUSTOM_SAVE = 156,
        visIconIXCUSTOM_MIC = 157,
        visIconIXCUSTOM_SPEAKER = 158,
        visIconIXCUSTOM_BELL = 159,
        visIconIXCUSTOM_NOTE = 160,
        visIconIXCUSTOM_PHONE = 161,
        visIconIXCUSTOM_BALLOON = 162,
        visIconIXCUSTOM_CAMCORD = 163,
        visIconIXCUSTOM_CALC = 164,
        visIconIXCUSTOM_HEART = 165,
        visIconIXCUSTOM_DIAMOND = 166,
        visIconIXCUSTOM_SPADE = 167,
        visIconIXCUSTOM_CLUB = 168,
        visIconIXCUSTOM_CARDS = 169,
        visIconIXCUSTOM_MUG = 170,
        visIconIXCUSTOM_TRASH = 171,
        visIconIXCUSTOM_PENCIL = 172,
        visIconIXCUSTOM_BOX = 173,
        visIconIXCUSTOM_FEET = 174,
        visIconIXCUSTOM_LEFT = 175,
        visIconIXCUSTOM_RIGHT = 176,
        visIconIXCUSTOM_UP = 177,
        visIconIXCUSTOM_DOWN = 178,
        visIconIXCUSTOM_TACK = 179,
        visIconIXCUSTOM_KEYBOARD = 180,
        visIconIXCUSTOM_PAGES = 181,
        visIconIXCUSTOM_FISH = 182,
        visIconIXCUSTOM_KEY = 183,
        visIconIXCUSTOM_GEARS = 184,
        visIconIXCUSTOM_SCALES = 185,
        visIconIXCUSTOM_HOURGLASS = 186,
        visIconIXCUSTOM_MAN = 187,
        visIconIXCUSTOM_WOMAN = 188,
        visIconIXCUSTOM_RUN = 189,
        visIconIXCUSTOM_EYE = 190,
        visIconIXCUSTOM_EIGHTBALL = 191,
        visIconIXCUSTOM_QUESTION = 192,
        visIconIXINSERTCOMMENT = 193,
        visIconIXEDITCOMMENT = 194,
        visIconIXDELETECOMMENT = 195,
        visIconIXDELETE = 196,
        visIconIXEDITSTEN = 197,
        visIconIXNEWSTEN = 198,
        visIconIXSHOWDOCSTEN = 199,
        visIconIXPAGELINEJUMPCODE_NONE = 200,
        visIconIXPAGELINEJUMPCODE_HORZ = 201,
        visIconIXPAGELINEJUMPCODE_VERT = 202,
        visIconIXPAGELINEJUMPCODE_LASTROUTED = 203,
        visIconIXLINEJUMPSTYLE_ARC = 204,
        visIconIXLINEJUMPSTYLE_GAP = 205,
        visIconIXLINEJUMPSTYLE_SQUARE = 206,
        visIconIXLINEJUMPSTYLE_TRIANGLE = 207,
        visIconIXLINEJUMPSTYLE_2PT = 208,
        visIconIXLINEJUMPSTYLE_3PT = 209,
        visIconIXLINEJUMPSTYLE_4PT = 210,
        visIconIXLINEJUMPSTYLE_5PT = 211,
        visIconIXLINEJUMPSTYLE_6PT = 212,
        visIconIXDCREROUTE_FREELY = 213,
        visIconIXDCREROUTE_ASNEEDED = 214,
        visIconIXCUSTOMPROP_WINDOW = 215,
        visIconIXPAGEPLOW = 216,
        visIconIXPAGELINEJUMPCODE_DISP = 217,
        visIconIXLINEJUMPSTYLE_PAGE = 218,
        visIconIXDRAWINGEXPLORER = 219,
        visIconIXSHAPE_INTERSECT = 220,
        visIconIXDYNGRID = 221,
        visIconIXRULSUB = 222,
        visIconIXSNAPTOGRID = 223,
        visIconIXALIGNBOX = 224,
        visIconIXSHAPEGEO = 225,
        visIconIXGUIDES = 226,
        visIconIXSHAPEHAND = 227,
        visIconIXSHAPEVERT = 228,
        visIconIXCONNPOINTS = 229,
        visIconIXSHAPEEXT = 230,
        visIconIXPAGELINEJUMPCODE_RDISP = 231,
        visIconIXSNAP_LINES = 232,
        visIconIXSTRIKETHROUGH = 233,
        visIconIXSMALLCAPS = 234,
        visIconIXDCREROUTE_NEVER = 235,
        visIconIXDCREROUTE = 236,
        visIconIXBRING_FORWARD = 245,
        visIconIXSEND_BACKWARD = 246,
        visIconIXSMALL_PADLOCK = 247,
        visIconIXINSERT_OBJECT = 248,
        visIconIXLARGE_PADLOCK = 249,
        visIconIXINSERT_EQUATION = 250,
        visIconIXSTYLE = 251,
        visIconIXREPLACE = 252,
        visIconIXDOUBLE_UNDERLINE = 253
    } VisUIIconIDs;

    typedef [public]
    VisUIIconIDs tagVisUIIconIDs;

    typedef [uuid(000D0C87-0000-0000-C000-000000000046), helpstring("Toolbar Bar string identifiers. Obsolete as of Visio 2002."), helpcontext(0x0001123d)]
    enum {
        visStrIDPlaceHolder = 0
    } VisUIStringIDs;

    typedef [public]
    VisUIStringIDs tagVisUIStringIDs;

    typedef [uuid(000D0C26-0000-0000-C000-000000000046), helpstring("Values to use with Window.ShowScrollBars."), helpcontext(0x00011242)]
    enum {
        visScrollBarNeither = 0,
        visScrollBarHoriz = 1,
        visScrollBarVert = 4,
        visScrollBarBoth = 5
    } VisScrollbarStates;

    typedef [public]
    VisScrollbarStates tagVisScrollbarStates;

    typedef [uuid(000D0C24-0000-0000-C000-000000000046), helpstring("Flags passed to or returned by Document.Mode and IDs returned by Document.ID."), helpcontext(0x00011247)]
    enum {
        visInvalDocID = 0xffffffff,
        visDocModeRun = 0,
        visDocModeDesign = 1
    } VisDocModeArgs;

    typedef [public]
    VisDocModeArgs tagVisDocModeArgs;

    typedef [uuid(000D0C25-0000-0000-C000-000000000046), helpstring("Flags to use with App.TraceFlags."), helpcontext(0x0001124c)]
    enum {
        visTraceEvents = 1,
        visTraceAdvises = 2,
        visTraceAddonInvokes = 4,
        visTraceCallsToVBA = 8
    } VisTraceFlags;

    typedef [public]
    VisTraceFlags tagVisTraceFlags;

    typedef [uuid(000D0C27-0000-0000-C000-000000000046), helpstring("Codes for spatial shape relationships."), helpcontext(0x00011251)]
    enum {
        visSpatialOverlap = 1,
        visSpatialContain = 2,
        visSpatialContainedIn = 4,
        visSpatialTouching = 8
    } VisSpatialRelationCodes;

    typedef [public]
    VisSpatialRelationCodes tagVisSpatialRelationCodes;

    typedef [uuid(000D0C28-0000-0000-C000-000000000046), helpstring("Flags passed to spatial relation methods."), helpcontext(0x00011256)]
    enum {
        visSpatialIncludeGuides = 2,
        visSpatialFrontToBack = 4,
        visSpatialBackToFront = 8,
        visSpatialIncludeHidden = 16,
        visSpatialIgnoreVisible = 32,
        visSpatialIncludeDataGraphics = 64
    } VisSpatialRelationFlags;

    typedef [public]
    VisSpatialRelationFlags tagVisSpatialRelationFlags;

    typedef [uuid(000D0C2F-0000-0000-C000-000000000046), helpstring("Values used in conjunction with Selection.IterationMode."), helpcontext(0x0001125b)]
    enum {
        visSelModeSkipSuper = 256,
        visSelModeOnlySuper = 512,
        visSelModeSkipSub = 1024,
        visSelModeOnlySub = 2048
    } VisSelectMode;

    typedef [public]
    VisSelectMode tagVisSelectMode;

    typedef [uuid(000D0C30-0000-0000-C000-000000000046), helpstring("Values returned by Selection.ItemStatus."), helpcontext(0x00011260)]
    enum {
        visSelIsPrimaryItem = 1,
        visSelIsSubItem = 2,
        visSelIsSuperItem = 4
    } VisSelectItemStatus;

    typedef [public]
    VisSelectItemStatus tagVisSelectItemStatus;

    typedef [uuid(000D0C31-0000-0000-C000-000000000046), helpstring("Flags to pass to Row methods that get/put vertex arrays."), helpcontext(0x00011265)]
    enum {
        visGeomExcludeLastPoint = 1,
        visGeomWHPct = 16,
        visGeomXYLocal = 32
    } VisGeomFlags;

    typedef [public]
    VisGeomFlags tagVisGeomFlags;

    typedef [uuid(000D0C2E-0000-0000-C000-000000000046), helpstring("Flags to pass to Selection.DrawRegion."), helpcontext(0x0001126a)]
    enum {
        visDrawRegionDeleteInput = 4,
        visDrawRegionIncludeHidden = 16,
        visDrawRegionIgnoreVisible = 32,
        visDrawRegionIncludeDataGraphics = 64
    } VisDrawRegionFlags;

    typedef [public]
    VisDrawRegionFlags tagVisDrawRegionFlags;

    typedef [uuid(000D0C29-0000-0000-C000-000000000046), helpstring("State codes returned by Window.WindowState."), helpcontext(0x0001126f)]
    enum {
        visWSNone = 0,
        visWSMaximized = 0x40000000,
        visWSMinimized = 0x20000000,
        visWSRestored = 0x10000000,
        visWSVisible = 0x08000000,
        visWSDockedLeft = 1,
        visWSDockedTop = 2,
        visWSDockedRight = 4,
        visWSDockedBottom = 8,
        visWSFloating = 16,
        visWSAnchorLeft = 32,
        visWSAnchorTop = 64,
        visWSAnchorRight = 128,
        visWSAnchorBottom = 256,
        visWSAnchorAutoHide = 512,
        visWSAnchorMerged = 1024,
        visWSActive = 0x04000000
    } VisWindowStates;

    typedef [public]
    VisWindowStates tagVisWindowStates;

    typedef [uuid(000D0C2A-0000-0000-C000-000000000046), helpstring("Values returned by Window.ViewFit."), helpcontext(0x00011274)]
    enum {
        visFitNone = 0,
        visFitPage = 1,
        visFitWidth = 2
    } VisWindowFit;

    typedef [public]
    VisWindowFit tagVisWindowFit;

    typedef [uuid(000D0C2B-0000-0000-C000-000000000046), helpstring("X parameters to use with Window.Scroll."), helpcontext(0x00011279)]
    enum {
        visScrollNoneX = 9,
        visScrollLeft = 0,
        visScrollLeftPage = 2,
        visScrollRight = 1,
        visScrollRightPage = 3,
        visScrollToLeft = 6,
        visScrollToRight = 7
    } VisWindowScrollX;

    typedef [public]
    VisWindowScrollX tagVisWindowScrollX;

    typedef [uuid(000D0C2C-0000-0000-C000-000000000046), helpstring("Y parameters to use with Window.Scroll."), helpcontext(0x0001127e)]
    enum {
        visScrollNoneY = 9,
        visScrollUp = 0,
        visScrollUpPage = 2,
        visScrollDown = 1,
        visScrollDownPage = 3,
        visScrollToTop = 6,
        visScrollToBottom = 7
    } VisWindowScrollY;

    typedef [public]
    VisWindowScrollY tagVisWindowScrollY;

    typedef [uuid(000D0C2D-0000-0000-C000-000000000046), helpstring("Parameter values for Windows.Arrange."), helpcontext(0x00011283)]
    enum {
        visArrangeTileVertical = 1,
        visArrangeTileHorizontal = 2,
        visArrangeCascade = 3
    } VisWindowArrange;

    typedef [public]
    VisWindowArrange tagVisWindowArrange;

    typedef [uuid(000D0C88-0000-0000-C000-000000000046), helpstring("UIObject.MenuAnimationStyle Property values."), helpcontext(0x00011288)]
    enum {
        visMenuAnimationNone = 0,
        visMenuAnimationRandom = 1,
        visMenuAnimationUnfold = 2,
        visMenuAnimationSlide = 3
    } VisUIMenuAnimation;

    typedef [public]
    VisUIMenuAnimation tagVisUIMenuAnimation;

    typedef [uuid(000D0C89-0000-0000-C000-000000000046), helpstring("Position property values of command bars."), helpcontext(0x0001128d)]
    enum {
        visBarLeft = 0,
        visBarTop = 1,
        visBarRight = 2,
        visBarBottom = 3,
        visBarFloating = 4,
        visBarPopup = 5,
        visBarMenu = 6
    } VisUIBarPosition;

    typedef [public]
    VisUIBarPosition tagVisUIBarPosition;

    typedef [uuid(000D0C8A-0000-0000-C000-000000000046), helpstring("Protection Property values of command bars."), helpcontext(0x00011292)]
    enum {
        visBarNoProtection = 0,
        visBarNoCustomize = 1,
        visBarNoResize = 2,
        visBarNoMove = 4,
        visBarNoChangeDock = 16,
        visBarNoVerticalDock = 32,
        visBarNoHorizontalDock = 64
    } VisUIBarProtection;

    typedef [public]
    VisUIBarProtection tagVisUIBarProtection;

    typedef [uuid(000D0C8B-0000-0000-C000-000000000046), helpstring("States of buttons in command bars."), helpcontext(0x00011297)]
    enum {
        visButtonUp = 0,
        visButtonDown = 0xffffffff,
        visButtonMixed = 2
    } VisUIButtonState;

    typedef [public]
    VisUIButtonState tagVisUIButtonState;

    typedef [uuid(000D0C8C-0000-0000-C000-000000000046), helpstring("Styles of buttons in command bars."), helpcontext(0x0001129c)]
    enum {
        visButtonAutomatic = 0,
        visButtonIcon = 1,
        visButtonCaption = 2,
        visButtonIconandCaption = 3
    } VisUIButtonStyle;

    typedef [public]
    VisUIButtonStyle tagVisUIButtonStyle;

    typedef [uuid(000D0C8D-0000-0000-C000-000000000046), helpstring("Values to use with RowIndex Property of MenusSets and Toolbars."), helpcontext(0x0001129d)]
    enum {
        visBarRowFirst = 0,
        visBarRowLast = 0xffffffff
    } VisUIBarRow;

    typedef [public]
    VisUIBarRow tagVisUIBarRow;

    typedef [uuid(000D0C3C-0000-0000-C000-000000000046), helpstring("Flags passed to Document.Clean indicating what objects to examine."), helpcontext(0x000112a1)]
    enum {
        visDocCleanTargFPages = 1,
        visDocCleanTargBPages = 2,
        visDocCleanTargMasters = 4,
        visDocCleanTargStyles = 8,
        visDocCleanTargDoc = 16,
        visDocCleanTargRPages = 32,
        visDocCleanPageSheet = 256,
        visDocCleanTargAll = 255
    } VisDocCleanTargets;

    typedef [public]
    VisDocCleanTargets tagVisDocCleanTargets;

    typedef [uuid(000D0C3D-0000-0000-C000-000000000046), helpstring("Flags passed to Document.Clean indicating what to perform, report and fix."), helpcontext(0x000112a6)]
    enum {
        visDocCleanActLocalFormulas = 1,
        visDocCleanActEmptyRowsAndSects = 2,
        visDocCleanActNonDefaultFonts = 4,
        visDocCleanActStaleResults = 8,
        visDocCleanActMissingSubs = 16,
        visDocCleanActConstantFormulas = 32,
        visDocCleanActNearZero = 64,
        visDocCleanActDuplicateSubs = 128,
        visDocCleanActBadDisplayLists = 256,
        visDocCleanActBadFieldCounts = 512,
        visDocCleanActDeletedFields = 1024,
        visDocCleanActBadFieldFormulas = 2048,
        visDocCleanActBadFieldMarks = 4096,
        visDocCleanActBadReferences = 8192,
        visDocCleanActAll = 16383,
        visDocCleanActDefault = 8152,
        visDocCleanAlertDefault = 0,
        visDocCleanFixDefault = 984
    } VisDocCleanActions;

    typedef [public]
    VisDocCleanActions tagVisDocCleanActions;

    typedef [uuid(000D0C3B-0000-0000-C000-000000000046), helpstring("Flags passed to or returned by Application.DefaultZoomBehavior, Document.ZoomBehavior and Window.ZoomBehavior."), helpcontext(0x000112ab)]
    enum {
        visZoomNone = 0,
        visZoomInPlaceContainer = 1,
        visZoomVisio = 2,
        visZoomVisioExact = 4
    } VisZoomBehavior;

    typedef [public]
    VisZoomBehavior tagVisZoomBehavior;

    typedef [uuid(000D0C32-0000-0000-C000-000000000046), helpstring("Flags passed to or returned by Document.SnapSettings."), helpcontext(0x000112b0)]
    enum {
        visSnapToNone = 0,
        visSnapToRulerSubdivisions = 1,
        visSnapToGrid = 2,
        visSnapToGuides = 4,
        visSnapToHandles = 8,
        visSnapToVertices = 16,
        visSnapToConnectionPoints = 32,
        visSnapToGeometry = 256,
        visSnapToAlignmentBox = 512,
        visSnapToExtensions = 1024,
        visSnapToDisabled = 32768,
        visSnapToIntersections = 0x00010000
    } VisSnapSettings;

    typedef [public]
    VisSnapSettings tagVisSnapSettings;

    typedef [uuid(000D0C33-0000-0000-C000-000000000046), helpstring("Flags passed to or returned by Document.SnapExtensions."), helpcontext(0x000112b5)]
    enum {
        visSnapExtNone = 0,
        visSnapExtAlignmentBoxExtension = 1,
        visSnapExtCenterAxes = 2,
        visSnapExtCurveTangent = 4,
        visSnapExtEndpoint = 8,
        visSnapExtMidpoint = 16,
        visSnapExtLinearExtension = 32,
        visSnapExtCurveExtension = 64,
        visSnapExtEndpointPerpendicular = 128,
        visSnapExtMidpointPerpendicular = 256,
        visSnapExtEndpointHorizontal = 512,
        visSnapExtEndpointVertical = 1024,
        visSnapExtEllipseCenter = 2048,
        visSnapExtIsometricAngles = 4096
    } VisSnapExtensions;

    typedef [public]
    VisSnapExtensions tagVisSnapExtensions;

    typedef [uuid(000D0C34-0000-0000-C000-000000000046), helpstring("Flags passed to or returned by Document.GlueSettings."), helpcontext(0x000112ba)]
    enum {
        visGlueToNone = 0,
        visGlueToGuides = 1,
        visGlueToHandles = 2,
        visGlueToVertices = 4,
        visGlueToConnectionPoints = 8,
        visGlueToGeometry = 32,
        visGlueToDisabled = 32768
    } VisGlueSettings;

    typedef [public]
    VisGlueSettings tagVisGlueSettings;

    typedef [uuid(000D0C35-0000-0000-C000-000000000046), helpstring("Flags passed to or returned by Document.Protection."), helpcontext(0x000112bf)]
    enum {
        visProtectNone = 0,
        visProtectStyles = 1,
        visProtectShapes = 2,
        visProtectMasters = 4,
        visProtectBackgrounds = 8,
        visProtectPreviews = 16
    } VisProtection;

    typedef [public]
    VisProtection tagVisProtection;

    typedef [uuid(000D0C36-0000-0000-C000-000000000046), helpstring("Flags passed to or returned by Document.PaperSize."), helpcontext(0x000112c4)]
    enum {
        visPaperSizeUnknown = 0,
        visPaperSizeLetter = 1,
        visPaperSizeLegal = 5,
        visPaperSizeA3 = 8,
        visPaperSizeA4 = 9,
        visPaperSizeA5 = 11,
        visPaperSizeB4 = 12,
        visPaperSizeB5 = 13,
        visPaperSizeFolio = 14,
        visPaperSizeNote = 18,
        visPaperSizeC = 24,
        visPaperSizeD = 25,
        visPaperSizeE = 26
    } VisPaperSizes;

    typedef [public]
    VisPaperSizes tagVisPaperSizes;

    typedef [uuid(000D0C37-0000-0000-C000-000000000046), helpstring("Flags passed to or returned by Document.SavePreviewMode."), helpcontext(0x000112c9)]
    enum {
        visSavePreviewNone = 0,
        visSavePreviewDraft1st = 1,
        visSavePreviewDetailed1st = 2,
        visSavePreviewDraftAll = 4,
        visSavePreviewDetailedAll = 8
    } VisSavePreviewMode;

    typedef [public]
    VisSavePreviewMode tagVisSavePreviewMode;

    typedef [uuid(000D0C38-0000-0000-C000-000000000046), helpstring("Format codes to be passed to PasteSpecial."), helpcontext(0x000112ce)]
    enum {
        visPasteText = 1,
        visPasteBitmap = 2,
        visPasteMetafile = 3,
        visPasteOEMText = 7,
        visPasteDIB = 8,
        visPasteEMF = 14,
        visPasteOLEObject = 0x00010000,
        visPasteRichText = 0x00010001,
        visPasteHyperlink = 0x00010002,
        visPasteURL = 0x00010003,
        visPasteVisioShapes = 0x00010004,
        visPasteVisioMasters = 0x00010005,
        visPasteVisioText = 0x00010006,
        visPasteVisioIcon = 0x00010007,
        visPasteInk = 0x00010008,
        visPasteVisioShapesXML = 0x00010009,
        visPasteVisioMastersXML = 0x0001000a,
        visPasteVisioShapesWithoutDataLinks = 0x0001000c
    } VisPasteSpecialCodes;

    typedef [public]
    VisPasteSpecialCodes tagVisPasteSpecialCodes;

    typedef [uuid(000D0C39-0000-0000-C000-000000000046), helpstring("Flags to be passed to Cut, Copy or Paste."), helpcontext(0x000112d3)]
    enum {
        visCopyPasteNormal = 0,
        visCopyPasteNoTranslate = 1
    } VisCutCopyPasteCodes;

    typedef [public]
    VisCutCopyPasteCodes tagVisCutCopyPasteCodes;

    typedef [uuid(000D0C3A-0000-0000-C000-000000000046), helpstring("Flags to pass to App.OnComponentEnterState method."), helpcontext(0x000112d8)]
    enum {
        visComponentStateModal = 1,
        visModalDeferEvents = 0x00010000,
        visModalNoBeforeAfter = 0x00020000,
        visModalDontBlockMessages = 0x00040000,
        visModalDisableVisiosFrame = 0x00080000
    } VisOnComponentEnterCodes;

    typedef [public]
    VisOnComponentEnterCodes tagVisOnComponentEnterCodes;

    typedef [uuid(000D0C40-0000-0000-C000-000000000046), helpstring("Type codes returned by Document.Type."), helpcontext(0x000112dd)]
    enum {
        visDocTypeInval = 0,
        visTypeDrawing = 1,
        visTypeStencil = 2,
        visTypeTemplate = 3
    } VisDocumentTypes;

    typedef [uuid(000D0C41-0000-0000-C000-000000000046), helpstring("Selection types."), helpcontext(0x000112e2)]
    enum {
        visSelTypeEmpty = 0,
        visSelTypeAll = 1,
        visSelTypeSingle = 2,
        visSelTypeByLayer = 3,
        visSelTypeByType = 4,
        visSelTypeByMaster = 5,
        visSelTypeByDataGraphic = 6
    } VisSelectionTypes;

    typedef [uuid(000D0C3E-0000-0000-C000-000000000046), helpstring("Measurement system types."), helpcontext(0x000112e7)]
    enum {
        visMSDefault = 0,
        visMSMetric = 1,
        visMSUS = 2
    } VisMeasurementSystem;

    typedef [uuid(000D0C42-0000-0000-C000-000000000046), helpstring("Rotation types."), helpcontext(0x000112ec)]
    enum {
        visRotateSelection = 0,
        visRotateSelectionWithPin = 1,
        visRotateShapes = 2
    } VisRotationTypes;

    typedef [uuid(000D0C43-0000-0000-C000-000000000046), helpstring("Vertical Alignment types."), helpcontext(0x000112f1)]
    enum {
        visVertAlignNone = 0,
        visVertAlignTop = 1,
        visVertAlignMiddle = 2,
        visVertAlignBottom = 3
    } VisVerticalAlignTypes;

    typedef [uuid(000D0C44-0000-0000-C000-000000000046), helpstring("Horizontal Alignment types."), helpcontext(0x000112f6)]
    enum {
        visHorzAlignNone = 0,
        visHorzAlignLeft = 1,
        visHorzAlignCenter = 2,
        visHorzAlignRight = 3
    } VisHorizontalAlignTypes;

    typedef [uuid(000D0C45-0000-0000-C000-000000000046), helpstring("Distribute shape types."), helpcontext(0x000112fb)]
    enum {
        visDistHorzSpace = 0,
        visDistHorzLeft = 1,
        visDistHorzCenter = 2,
        visDistHorzRight = 3,
        visDistVertSpace = 4,
        visDistVertTop = 5,
        visDistVertMiddle = 6,
        visDistVertBottom = 7
    } VisDistributeTypes;

    typedef [uuid(000D0C46-0000-0000-C000-000000000046), helpstring("Flip directions."), helpcontext(0x00011300)]
    enum {
        visFlipHorizontal = 1,
        visFlipVertical = 2
    } VisFlipDirection;

    typedef [uuid(000D0C47-0000-0000-C000-000000000046), helpstring("Flip types."), helpcontext(0x00011305)]
    enum {
        visFlipSelection = 0,
        visFlipSelectionWithPin = 1,
        visFlipShapes = 2
    } VisFlipTypes;

    typedef [uuid(000D0C48-0000-0000-C000-000000000046), helpstring("Flags passed in parameters to MouseDown, MouseMove and MouseUp events."), helpcontext(0x0001130a)]
    enum {
        visMouseLeft = 1,
        visMouseMiddle = 16,
        visMouseRight = 2,
        visKeyShift = 4,
        visKeyControl = 8
    } VisKeyButtonFlags;

    typedef [uuid(000D0C49-0000-0000-C000-000000000046), helpstring("Default Save Format Options"), helpcontext(0x0001130f)]
    enum {
        visDefaultSaveCurrentBinary = 0,
        visDefaultSavePreviousBinary = 1,
        visDefaultSaveCurrentXML = 2
    } VisDefaultSaveFormats;

    typedef [uuid(000D0C50-0000-0000-C000-000000000046), helpstring("Text Display Quality Types"), helpcontext(0x00011314)]
    enum {
        visTextDisplayFaster = 0,
        visTextDisplayHigherQuality = 1,
        visTextDisplayClear = 2
    } VisTextDisplayQualityTypes;

    typedef [uuid(000D0C51-0000-0000-C000-000000000046), helpstring("Type codes returned by Page.Type."), helpcontext(0x00011319)]
    enum {
        visPageTypeInval = 0,
        visTypeForeground = 1,
        visTypeBackground = 2,
        visTypeMarkup = 3
    } VisPageTypes;

    typedef [uuid(000D0C52-0000-0000-C000-000000000046), helpstring("Regional UI options."), helpcontext(0x0001131e)]
    enum {
        VisRegionalUIOptionsUseSystemSettings = 65535,
        VisRegionalUIOptionsHide = 0,
        VisRegionalUIOptionsShow = 1
    } VisRegionalUIOptions;

    typedef [uuid(000D0C53-0000-0000-C000-000000000046), helpstring("Print Out range options"), helpcontext(0x00011323)]
    enum {
        visPrintAll = 0,
        visPrintFromTo = 1,
        visPrintCurrentPage = 2,
        visPrintSelection = 3,
        visPrintCurrentView = 4
    } VisPrintOutRange;

    typedef [uuid(000D0C54-0000-0000-C000-000000000046), helpstring("Values related to IDs of Visio Pages and Masters."), helpcontext(0x00011328)]
    enum {
        visInvalPageID = 0xffffffff,
        visInvalMasterID = 0xffffffff
    } VisPageAndMasterIDs;

    typedef [uuid(000D0C55-0000-0000-C000-000000000046), helpstring("Values for the PageSizingBehavior property."), helpcontext(0x0001132d)]
    enum {
        visNeverResizePages = 0,
        visResizePages = 1
    } VisPageSizingBehaviors;

    typedef [uuid(000D0C56-0000-0000-C000-000000000046), helpstring("Values passed to CreateSelection method when selecting by visSelTypeByType."), helpcontext(0x00011332)]
    enum {
        visTypeSelGroup = 1,
        visTypeSelShape = 2,
        visTypeSelGuide = 4,
        visTypeSelMetafile = 8,
        visTypeSelBitmap = 16,
        visTypeSelInk = 32,
        visTypeSelOLE = 64
    } VisTypeSelectionTypes;

    typedef [uuid(000D0C57-0000-0000-C000-000000000046), helpstring("Sweep flag values used in the DrawQuarterArc method."), helpcontext(0x00011337)]
    enum {
        visArcSweepFlagConcave = 0,
        visArcSweepFlagConvex = 1
    } VisArcSweepFlags;

    [
      odl,
      uuid(000D0700-0000-0000-C000-000000000046),
      helpcontext(0x00002738),
      hidden,
      dual,
      oleautomation
    ]
    interface IVApplication : IDispatch {
        [id(00000000), propget, helpcontext(0x0098c961)]
        HRESULT ActiveDocument([out, retval] IVDocument** lpdispRet);
        [id(0x00000001), propget, helpcontext(0x0098c966)]
        HRESULT ActivePage([out, retval] IVPage** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x0098c96b)]
        HRESULT ActiveWindow([out, retval] IVWindow** lpdispRet);
        [id(0x00000003), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x0098c9a2)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000004), propget, helpcontext(0x0098cafb)]
        HRESULT Documents([out, retval] IVDocuments** lpdispRet);
        [id(0x00000005), propget, helpstring("Returns visObjTypeApp (3)."), helpcontext(0x0098cd08)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000006), propget, helpcontext(0x0098cd12)]
        HRESULT OnDataChangeDelay([out, retval] long* lpi4Ret);
        [id(0x00000006), propput, helpcontext(0x0098cd12)]
        HRESULT OnDataChangeDelay([in] long lpi4Ret);
        [id(0x00000007), propget, helpcontext(0x0098cdc1)]
        HRESULT ProcessID([out, retval] long* lpi4Ret);
        [id(0x00000009), helpcontext(0x0098d6cc)]
        HRESULT Quit();
        [id(0x0000000a), helpcontext(0x0098d6d1)]
        HRESULT Redo();
        [id(0x0000000b), propget, helpcontext(0x0098ce57)]
        HRESULT ScreenUpdating([out, retval] short* lpi2Ret);
        [id(0x0000000b), propput, helpcontext(0x0098ce57)]
        HRESULT ScreenUpdating([in] short lpi2Ret);
        [id(0x0000000c), propget, helpcontext(0x0098ced4)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x0000000d), helpcontext(0x0098d76c)]
        HRESULT Undo();
        [id(0x0000000e), propget, helpcontext(0x0098cfb0)]
        HRESULT Version([out, retval] BSTR* lpbstrRet);
        [id(0x0000000f), propget, hidden, helpcontext(0x0098cfc4)]
        HRESULT WindowHandle([out, retval] short* lpi2Ret);
        [id(0x00000010), propget, helpcontext(0x0098cfc9)]
        HRESULT Windows([out, retval] IVWindows** lpdispRet);
        [id(0x00000008), propget, helpcontext(0x0098cc68)]
        HRESULT Language([out, retval] long* lpi4Ret);
        [id(0x00000011), propget, hidden, helpcontext(0x00989680)]
        HRESULT IsVisio16([out, retval] short* lpi2Ret);
        [id(0x00000012), propget, hidden, helpcontext(0x00989680)]
        HRESULT IsVisio32([out, retval] short* lpi2Ret);
        [id(0x00000013), propget, helpcontext(0x0098cfc4)]
        HRESULT WindowHandle32([out, retval] long* lpi4Ret);
        [id(0x00000014), propget, hidden, helpcontext(0x0098cc0e)]
        HRESULT InstanceHandle([out, retval] short* lpi2Ret);
        [id(0x00000015), propget, helpcontext(0x0098cc0e)]
        HRESULT InstanceHandle32([out, retval] long* lpi4Ret);
        [id(0x00000016), propget, helpcontext(0x0098c9e8)]
        HRESULT BuiltInMenus([out, retval] IVUIObject** lpdispRet);
        [id(0x00000017), propget, helpcontext(0x0098c9ed)]
        HRESULT BuiltInToolbars(
                        [in] short fIgnored, 
                        [out, retval] IVUIObject** lpdispRet);
        [id(0x00000018), propget, helpcontext(0x0098caa1)]
        HRESULT CustomMenus([out, retval] IVUIObject** lpdispRet);
        [id(0x00000019), helpcontext(0x0098d730)]
        HRESULT SetCustomMenus([in] IVUIObject* MenusObject);
        [id(0x0000001a), propget, helpcontext(0x0098caa6)]
        HRESULT CustomMenusFile([out, retval] BSTR* lpbstrRet);
        [id(0x0000001a), propput, helpcontext(0x0098caa6)]
        HRESULT CustomMenusFile([in] BSTR lpbstrRet);
        [id(0x0000001b), helpcontext(0x0098d56e)]
        HRESULT ClearCustomMenus();
        [id(0x0000001c), propget, helpcontext(0x0098caab)]
        HRESULT CustomToolbars([out, retval] IVUIObject** lpdispRet);
        [id(0x0000001d), helpcontext(0x0098d735)]
        HRESULT SetCustomToolbars([in] IVUIObject* ToolbarsObject);
        [id(0x0000001e), propget, helpcontext(0x0098cab0)]
        HRESULT CustomToolbarsFile([out, retval] BSTR* lpbstrRet);
        [id(0x0000001e), propput, helpcontext(0x0098cab0)]
        HRESULT CustomToolbarsFile([in] BSTR lpbstrRet);
        [id(0x0000001f), helpcontext(0x0098d573)]
        HRESULT ClearCustomToolbars();
        [id(0x00000020), propget, helpcontext(0x0098c97f)]
        HRESULT AddonPaths([out, retval] BSTR* lpbstrRet);
        [id(0x00000020), propput, helpcontext(0x0098c97f)]
        HRESULT AddonPaths([in] BSTR lpbstrRet);
        [id(0x00000021), propget, helpcontext(0x0098cb05)]
        HRESULT DrawingPaths([out, retval] BSTR* lpbstrRet);
        [id(0x00000021), propput, helpcontext(0x0098cb05)]
        HRESULT DrawingPaths([in] BSTR lpbstrRet);
        [id(0x00000022), propget, hidden, helpcontext(0x0098cb5f)]
        HRESULT FilterPaths([out, retval] BSTR* lpbstrRet);
        [id(0x00000022), propput, hidden, helpcontext(0x0098cb5f)]
        HRESULT FilterPaths([in] BSTR lpbstrRet);
        [id(0x00000023), propget, helpcontext(0x0098cbc3)]
        HRESULT HelpPaths([out, retval] BSTR* lpbstrRet);
        [id(0x00000023), propput, helpcontext(0x0098cbc3)]
        HRESULT HelpPaths([in] BSTR lpbstrRet);
        [id(0x00000024), propget, helpcontext(0x0098cecf)]
        HRESULT StartupPaths([out, retval] BSTR* lpbstrRet);
        [id(0x00000024), propput, helpcontext(0x0098cecf)]
        HRESULT StartupPaths([in] BSTR lpbstrRet);
        [id(0x00000025), propget, helpcontext(0x0098cee8)]
        HRESULT StencilPaths([out, retval] BSTR* lpbstrRet);
        [id(0x00000025), propput, helpcontext(0x0098cee8)]
        HRESULT StencilPaths([in] BSTR lpbstrRet);
        [id(0x00000026), propget, helpcontext(0x0098cf2e)]
        HRESULT TemplatePaths([out, retval] BSTR* lpbstrRet);
        [id(0x00000026), propput, helpcontext(0x0098cf2e)]
        HRESULT TemplatePaths([in] BSTR lpbstrRet);
        [id(0x00000027), propget, helpcontext(0x0098cfa1)]
        HRESULT UserName([out, retval] BSTR* lpbstrRet);
        [id(0x00000027), propput, helpcontext(0x0098cfa1)]
        HRESULT UserName([in] BSTR lpbstrRet);
        [id(0x00000028), propget, helpcontext(0x0098cdda)]
        HRESULT PromptForSummary([out, retval] short* lpi2Ret);
        [id(0x00000028), propput, helpcontext(0x0098cdda)]
        HRESULT PromptForSummary([in] short lpi2Ret);
        [id(0x00000029), propget, helpcontext(0x0098c984)]
        HRESULT Addons([out, retval] IVAddons** lpdispRet);
        [id(0x0000002a), hidden, helpcontext(0x0098d703)]
        HRESULT SaveWorkspaceAs([in] BSTR FileName);
        [id(0x0000002b), helpcontext(0x0098d5be)]
        HRESULT DoCmd([in] short CommandID);
        [id(0x0000002c), propget, hidden, helpstring("ProfileName is obsolete as of Visio 2000."), helpcontext(0x0098cdcb)]
        HRESULT ProfileName([out, retval] BSTR* lpbstrRet);
        [id(0x0000002d), propget, helpcontext(0x0098cb23)]
        HRESULT EventInfo(
                        [in] long eventSeqNum, 
                        [out, retval] BSTR* lpbstrRet);
        [id(0x0000002e), propget, helpcontext(0x0098cb28)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x0000002f), propget, helpcontext(0x0098cd80)]
        HRESULT PersistsEvents([out, retval] short* lpi2Ret);
        [id(0x00000030), propget, helpcontext(0x0098c95c)]
        HRESULT Active([out, retval] short* lpi2Ret);
        [id(0x00000031), propget, helpcontext(0x0098cad8)]
        HRESULT DeferRecalc([out, retval] short* lpi2Ret);
        [id(0x00000031), propput, helpcontext(0x0098cad8)]
        HRESULT DeferRecalc([in] short lpi2Ret);
        [id(0x00000032), propget, helpcontext(0x0098c98e)]
        HRESULT AlertResponse([out, retval] short* lpi2Ret);
        [id(0x00000032), propput, helpcontext(0x0098c98e)]
        HRESULT AlertResponse([in] short lpi2Ret);
        [id(0x00000033), propget, helpcontext(0x0098cea2)]
        HRESULT ShowProgress([out, retval] short* lpi2Ret);
        [id(0x00000033), propput, helpcontext(0x0098cea2)]
        HRESULT ShowProgress([in] short lpi2Ret);
        [id(0x00000034), propget, helpstring("Interface returned is VBIDE.VBE."), helpcontext(0x0098cfa6)]
        HRESULT Vbe([out, retval] IDispatch** lpdispRet);
        [id(0x00000035), propget, hidden, helpstring("In Visio 2002 and later, ShowMenus does nothing. ShowToolbar now hides/shows all command menus and toolbars."), helpcontext(0x0098ce98)]
        HRESULT ShowMenus([out, retval] short* lpi2Ret);
        [id(0x00000035), propput, hidden, helpstring("In Visio 2002 and later, ShowMenus does nothing. ShowToolbar now hides/shows all command menus and toolbars."), helpcontext(0x0098ce98)]
        HRESULT ShowMenus([in] short lpi2Ret);
        [id(0x00000036), propget, hidden, helpstring("Superseded by App.ShowToolbar as of Visio 5.0."), helpcontext(0x0098cf65)]
        HRESULT ToolbarStyle([out, retval] short* lpi2Ret);
        [id(0x00000036), propput, hidden, helpstring("Superseded by App.ShowToolbar as of Visio 5.0."), helpcontext(0x0098cf65)]
        HRESULT ToolbarStyle([in] short lpi2Ret);
        [id(0x00000037), propget, helpcontext(0x0098ceac)]
        HRESULT ShowStatusBar([out, retval] short* lpi2Ret);
        [id(0x00000037), propput, helpcontext(0x0098ceac)]
        HRESULT ShowStatusBar([in] short lpi2Ret);
        [id(0x00000038), propget, helpcontext(0x0098cb2d)]
        HRESULT EventsEnabled([out, retval] short* lpi2Ret);
        [id(0x00000038), propput, helpcontext(0x0098cb2d)]
        HRESULT EventsEnabled([in] short lpi2Ret);
        [id(0x00000039), helpcontext(0x0098d62c)]
        HRESULT FormatResult(
                        [in] VARIANT StringOrNumber, 
                        [in] VARIANT UnitsIn, 
                        [in] VARIANT UnitsOut, 
                        [in] BSTR Format, 
                        [out, retval] BSTR* lpbstrRet);
        [id(0x0000003a), helpcontext(0x0098d587)]
        HRESULT ConvertResult(
                        [in] VARIANT StringOrNumber, 
                        [in] VARIANT UnitsIn, 
                        [in] VARIANT UnitsOut, 
                        [out, retval] double* lpr8Ret);
        [id(0x0000003b), propget, helpcontext(0x0098cd62)]
        HRESULT Path([out, retval] BSTR* lpbstrRet);
        [id(0x0000003c), helpcontext(0x0098d5ff)]
        HRESULT EnumDirectories(
                        [in] BSTR PathsString, 
                        [out] SAFEARRAY(BSTR)* NameArray);
        [id(0x0000003d), propget, helpcontext(0x0098cf7e)]
        HRESULT TraceFlags([out, retval] long* lpi4Ret);
        [id(0x0000003d), propput, helpcontext(0x0098cf7e)]
        HRESULT TraceFlags([in] long lpi4Ret);
        [id(0x0000003e), helpcontext(0x0098d6c2)]
        HRESULT PurgeUndo();
        [id(0x0000003f), helpcontext(0x0098d6c7)]
        HRESULT QueueMarkerEvent(
                        [in] BSTR ContextString, 
                        [out, retval] long* lpi4Ret);
        [id(0x00000040), propget, helpstring("In Visio 2002 and later, ShowToolbar hides/shows all commandbars - menus and toolbars. S now does nothing."), helpcontext(0x0098ceb1)]
        HRESULT ShowToolbar([out, retval] short* lpi2Ret);
        [id(0x00000040), propput, helpstring("In Visio 2002 and later, ShowToolbar hides/shows all commandbars - menus and toolbars. S now does nothing."), helpcontext(0x0098ceb1)]
        HRESULT ShowToolbar([in] short lpi2Ret);
        [id(0x00000041), propget, helpcontext(0x0098cc9f)]
        HRESULT LiveDynamics([out, retval] VARIANT_BOOL* pbRet);
        [id(0x00000041), propput, helpcontext(0x0098cc9f)]
        HRESULT LiveDynamics([in] VARIANT_BOOL pbRet);
        [id(0x00000042), propget, helpcontext(0x0098c9b1)]
        HRESULT AutoLayout([out, retval] VARIANT_BOOL* pbRet);
        [id(0x00000042), propput, helpcontext(0x0098c9b1)]
        HRESULT AutoLayout([in] VARIANT_BOOL pbRet);
        [id(0x00000043), propget, helpcontext(0x0098cfba)]
        HRESULT Visible([out, retval] VARIANT_BOOL* pbVisible);
        [id(0x00000043), propput, helpcontext(0x0098cfba)]
        HRESULT Visible([in] VARIANT_BOOL pbVisible);
        [id(0x00000044), helpcontext(0x0098d555)]
        HRESULT BeginUndoScope(
                        [in] BSTR bstrUndoScopeName, 
                        [out, retval] long* pnScopeID);
        [id(0x00000045), helpcontext(0x0098d5fa)]
        HRESULT EndUndoScope(
                        [in] long nScopeID, 
                        [in] VARIANT_BOOL bCommit);
        [id(0x00000046), helpcontext(0x0098d54b)]
        HRESULT AddUndoUnit([in] IUnknown* pUndoUnit);
        [id(0x00000047), propget, helpcontext(0x0098ca60)]
        HRESULT CommandLine([out, retval] BSTR* pbstrCmdLine);
        [id(0x00000048), propget, helpcontext(0x0098cc40)]
        HRESULT IsUndoingOrRedoing([out, retval] VARIANT_BOOL* pbInUndoOrRedo);
        [id(0x00000049), propget, helpcontext(0x0098ca9c)]
        HRESULT CurrentScope([out, retval] long* pnCmdID);
        [id(0x0000004a), propget, helpcontext(0x0098cc36)]
        HRESULT IsInScope(
                        [in] long nCmdID, 
                        [out, retval] VARIANT_BOOL* pbInScope);
        [id(0x0000004b), propget, hidden, helpstring("Collection of COM Addins that are registered."), helpcontext(0x0098c970)]
        HRESULT old_Addins([out, retval] IDispatch** lpdispRet);
        [id(0x0000004c), propget, hidden, helpstring("ProductName is obsolete as of Visio 2000."), helpcontext(0x0098cdc6)]
        HRESULT ProductName([out, retval] BSTR* lpbstrRet);
        [id(0x0000004d), propget, helpcontext(0x0098cf92)]
        HRESULT UndoEnabled([out, retval] VARIANT_BOOL* pbRet);
        [id(0x0000004d), propput, helpcontext(0x0098cf92)]
        HRESULT UndoEnabled([in] VARIANT_BOOL pbRet);
        [id(0x0000004e), propget, helpcontext(0x0098cfe2)]
        HRESULT ShowChanges([out, retval] VARIANT_BOOL* pbRet);
        [id(0x0000004e), propput, helpcontext(0x0098cfe2)]
        HRESULT ShowChanges([in] VARIANT_BOOL pbRet);
        [id(0x0000004f), propget, helpcontext(0x0098cfe7)]
        HRESULT TypelibMajorVersion([out, retval] short* lpi2Ret);
        [id(0x00000050), propget, helpcontext(0x0098cfec)]
        HRESULT TypelibMinorVersion([out, retval] short* lpi2Ret);
        [id(0x00000051), propget, helpcontext(0x0098cff1)]
        HRESULT AutoRecoverInterval([out, retval] short* lpi2Ret);
        [id(0x00000051), propput, helpcontext(0x0098cff1)]
        HRESULT AutoRecoverInterval([in] short lpi2Ret);
        [id(0x6002006e), propget, helpcontext(0x00995c73)]
        HRESULT InhibitSelectChange([out, retval] VARIANT_BOOL* pbRet);
        [id(0x6002006e), propput, helpcontext(0x00995c73)]
        HRESULT InhibitSelectChange([in] VARIANT_BOOL pbRet);
        [id(0x60020070), propget, helpcontext(0x00995bc4)]
        HRESULT ActivePrinter([out, retval] BSTR* pbstrPrinterName);
        [id(0x60020070), propput, helpcontext(0x00995bc4)]
        HRESULT ActivePrinter([in] BSTR pbstrPrinterName);
        [id(0x60020072), propget, helpstring("Use the elements returned in this array with the ActivePrinter property."), helpcontext(0x00995bce)]
        HRESULT AvailablePrinters([out, retval] SAFEARRAY(BSTR)* NamesArray);
        [id(0x60020073), helpstring("Renames the currently open top level undo scope such that bstrScopeName shows up in the do menu item. Raises an exception if not in an open scope."), helpcontext(0x00995cff)]
        HRESULT RenameCurrentScope([in] BSTR bstrScopeName);
        [id(0x60020074), helpcontext(0x00995c87)]
        HRESULT InvokeHelp(
                        [in] BSTR bstrHelpFileName, 
                        [in] long Command, 
                        [in] long Data);
        [id(0x60020075), propget, helpstring("Interface returned is Office.CommandBars."), helpcontext(0x00995bec)]
        HRESULT CommandBars([out, retval] IDispatch** lpdispRet);
        [id(0x60020076), propget, helpcontext(0x00995bd3)]
        HRESULT Build([out, retval] long* pnBuild);
        [id(0x60020077), propget, helpstring("Interface returned is Office.COMAddIns."), helpcontext(0x00995be7)]
        HRESULT COMAddIns([out, retval] IDispatch** lpdispRet);
        [id(0x60020078), propget, hidden, helpcontext(0x00995de0)]
        HRESULT DefaultPageUnits([out, retval] VARIANT* pUnitsNameOrCode);
        [id(0x60020078), propput, hidden, helpcontext(0x00995de0)]
        HRESULT DefaultPageUnits([in] VARIANT pUnitsNameOrCode);
        [id(0x6002007a), propget, helpcontext(0x00995ddb)]
        HRESULT DefaultTextUnits([out, retval] VARIANT* pUnitsNameOrCode);
        [id(0x6002007a), propput, helpcontext(0x00995ddb)]
        HRESULT DefaultTextUnits([in] VARIANT pUnitsNameOrCode);
        [id(0x6002007c), propget, helpcontext(0x00995dea)]
        HRESULT DefaultAngleUnits([out, retval] VARIANT* pUnitsNameOrCode);
        [id(0x6002007c), propput, helpcontext(0x00995dea)]
        HRESULT DefaultAngleUnits([in] VARIANT pUnitsNameOrCode);
        [id(0x6002007e), propget, helpcontext(0x00995de5)]
        HRESULT DefaultDurationUnits([out, retval] VARIANT* pUnitsNameOrCode);
        [id(0x6002007e), propput, helpcontext(0x00995de5)]
        HRESULT DefaultDurationUnits([in] VARIANT pUnitsNameOrCode);
        [id(0x60020080), propget, helpcontext(0x00995e94)]
        HRESULT FullBuild([out, retval] long* pnFullBuild);
        [id(0x60020081), helpcontext(0x009961cd)]
        HRESULT OnComponentEnterState(
                        [in] VisOnComponentEnterCodes uStateID, 
                        [in] VARIANT_BOOL bEnter);
        [id(0x60020082), propget, helpcontext(0x009961f5)]
        HRESULT VBAEnabled([out, retval] VARIANT_BOOL* pbRet);
        [id(0x60020083), propget, helpcontext(0x009961e6)]
        HRESULT DefaultZoomBehavior([out, retval] VisZoomBehavior* pnZoomBehavior);
        [id(0x60020083), propput, helpcontext(0x009961e6)]
        HRESULT DefaultZoomBehavior([in] VisZoomBehavior pnZoomBehavior);
        [id(0x60020085), hidden, helpcontext(0x00989680)]
        HRESULT GetUsageStatistic(
                        [in] long nWhichStatistic, 
                        [out, retval] VARIANT* pvStatistic);
        [id(0x60020086), propget, helpstring("Returns font Visio is using in its dialogs."), helpcontext(0x009961eb)]
        HRESULT DialogFont([out, retval] IFontDisp** ppFontDisp);
        [id(0x60020087), propget, helpcontext(0x00996074)]
        HRESULT LanguageHelp([out, retval] long* lpi4Ret);
        [id(0x60020088), propget, helpcontext(0x00995f98)]
        HRESULT Window([out, retval] IVWindow** lpdispRet);
        [id(0x60020089), propget, helpcontext(0x0098cdc6)]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x6002008a), propget, helpcontext(0x009960fb)]
        HRESULT ConnectorToolDataObject([out, retval] IUnknown** lpdispRet);
        [id(0x6002008b), propget, helpcontext(0x00996033)]
        HRESULT Settings([out, retval] IVApplicationSettings** lpSettingRet);
        [id(0x6002008c), helpcontext(0x00995f2f)]
        HRESULT FormatResultEx(
                        [in] VARIANT StringOrNumber, 
                        [in] VARIANT UnitsIn, 
                        [in] VARIANT UnitsOut, 
                        [in] BSTR Format, 
                        [in, optional, defaultvalue(0)] long LangID, 
                        [in, optional, defaultvalue(-1)] long CalendarID, 
                        [out, retval] BSTR* lpbstrRet);
        [id(0x6002008d), propget, helpcontext(0x0099604c)]
        HRESULT SaveAsWebObject([out, retval] IDispatch** lpdispRet);
        [id(0x6002008e), propget, hidden, helpcontext(0x00998108)]
        HRESULT MsoDebugOptions([out, retval] IDispatch** lpdispRet);
        [id(0x6002008f), propget, helpcontext(0x0099810d)]
        HRESULT MyShapesPath([out, retval] BSTR* lpbstrRet);
        [id(0x6002008f), propput, helpcontext(0x0099810d)]
        HRESULT MyShapesPath([in] BSTR lpbstrRet);
        [id(0x60020091), propget, helpcontext(0x00998112)]
        HRESULT DefaultRectangleDataObject([out, retval] IUnknown** lpunkRet);
        [id(0x60020092), propget, helpcontext(0x00998117)]
        HRESULT DataFeaturesEnabled([out, retval] VARIANT_BOOL* pbRet);
        [id(0x60020093), propget, helpstring("Interface returned is Office.LanguageSettings."), helpcontext(0x00998103)]
        HRESULT LanguageSettings([out, retval] IDispatch** lpdispRet);
        [id(0x60020094), propget, helpcontext(0x0099811c)]
        HRESULT Assistance([out, retval] IDispatch** lpdispRet);
    };

    [
      odl,
      uuid(000D0705-0000-0000-C000-000000000046),
      helpcontext(0x00002760),
      hidden,
      dual,
      oleautomation
    ]
    interface IVDocument : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00a06ac2)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00a06ff4)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x00000003), propget, helpstring("Returns visObjTypeDoc (10)."), helpcontext(0x00a06e28)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000005), propget, helpcontext(0x00a06d29)]
        HRESULT InPlace([out, retval] short* lpi2Ret);
        [id(0x00000006), propget, helpcontext(0x00a06dd3)]
        HRESULT Masters([out, retval] IVMasters** lpdispRet);
        [id(0x00000007), propget, helpcontext(0x00a06e4b)]
        HRESULT Pages([out, retval] IVPages** lpdispRet);
        [id(0x00000008), propget, helpcontext(0x00a07017)]
        HRESULT Styles([out, retval] IVStyles** lpdispRet);
        [id(00000000), propget, helpcontext(0x00a06e0a)]
        HRESULT Name([out, retval] BSTR* lpbstrRet);
        [id(0x00000014), propget, helpcontext(0x00a06e82)]
        HRESULT Path([out, retval] BSTR* lpbstrRet);
        [id(0x00000015), propget, helpcontext(0x00a06cbb)]
        HRESULT FullName([out, retval] BSTR* lpbstrRet);
        [id(0x00000009), helpcontext(0x00a0770b)]
        HRESULT Drop(
                        [in] IUnknown* ObjectToDrop, 
                        [in] short xPos, 
                        [in] short yPos, 
                        [out, retval] IVMaster** lpdispRet);
        [id(0x00000004), propget, helpcontext(0x00a06d1f)]
        HRESULT Index([out, retval] short* lpi2Ret);
        [id(0x0000000a), propget, hidden, helpcontext(0x00a06f6d)]
        HRESULT old_Saved([out, retval] short* lpi2Ret);
        [id(0x0000000a), propput, hidden, helpcontext(0x00a06f6d)]
        HRESULT old_Saved([in] short lpi2Ret);
        [id(0x0000000b), propget, helpcontext(0x00a06f09)]
        HRESULT ReadOnly([out, retval] short* lpi2Ret);
        [id(0x0000000c), helpcontext(0x00a0780f)]
        HRESULT Save([out, retval] short* lpi2Ret);
        [id(0x0000000d), helpcontext(0x00a07814)]
        HRESULT SaveAs(
                        [in] BSTR FileName, 
                        [out, retval] short* lpi2Ret);
        [id(0x0000000e), propget, hidden, helpcontext(0x00a0ff5f)]
        HRESULT old_Version([out, retval] long* lpi4Ret);
        [id(0x0000000e), propput, hidden, helpcontext(0x00a0ff5f)]
        HRESULT old_Version([in] long lpi4Ret);
        [id(0x0000000f), propget, helpcontext(0x00a0706c)]
        HRESULT Title([out, retval] BSTR* lpbstrRet);
        [id(0x0000000f), propput, helpcontext(0x00a0706c)]
        HRESULT Title([in] BSTR lpbstrRet);
        [id(0x00000010), propget, helpcontext(0x00a07021)]
        HRESULT Subject([out, retval] BSTR* lpbstrRet);
        [id(0x00000010), propput, helpcontext(0x00a07021)]
        HRESULT Subject([in] BSTR lpbstrRet);
        [id(0x00000011), propget, helpcontext(0x00a06bb7)]
        HRESULT Creator([out, retval] BSTR* lpbstrRet);
        [id(0x00000011), propput, helpcontext(0x00a06bb7)]
        HRESULT Creator([in] BSTR lpbstrRet);
        [id(0x00000012), propget, helpcontext(0x00a06d83)]
        HRESULT Keywords([out, retval] BSTR* lpbstrRet);
        [id(0x00000012), propput, helpcontext(0x00a06d83)]
        HRESULT Keywords([in] BSTR lpbstrRet);
        [id(0x00000013), propget, helpcontext(0x00a06bfd)]
        HRESULT Description([out, retval] BSTR* lpbstrRet);
        [id(0x00000013), propput, helpcontext(0x00a06bfd)]
        HRESULT Description([in] BSTR lpbstrRet);
        [id(0x00000016), helpcontext(0x00a077dd)]
        HRESULT Print();
        [id(0x00000017), helpcontext(0x00a0769d)]
        HRESULT Close();
        [id(0x00000018), propget, helpcontext(0x00a06bc1)]
        HRESULT CustomMenus([out, retval] IVUIObject** lpdispRet);
        [id(0x00000019), helpcontext(0x00a07850)]
        HRESULT SetCustomMenus([in] IVUIObject* MenusObject);
        [id(0x0000001a), propget, helpcontext(0x00a06bc6)]
        HRESULT CustomMenusFile([out, retval] BSTR* lpbstrRet);
        [id(0x0000001a), propput, helpcontext(0x00a06bc6)]
        HRESULT CustomMenusFile([in] BSTR lpbstrRet);
        [id(0x0000001b), helpcontext(0x00a0768e)]
        HRESULT ClearCustomMenus();
        [id(0x0000001c), propget, helpcontext(0x00a06bcb)]
        HRESULT CustomToolbars([out, retval] IVUIObject** lpdispRet);
        [id(0x0000001d), helpcontext(0x00a07855)]
        HRESULT SetCustomToolbars([in] IVUIObject* ToolbarsObject);
        [id(0x0000001e), propget, helpcontext(0x00a06bd0)]
        HRESULT CustomToolbarsFile([out, retval] BSTR* lpbstrRet);
        [id(0x0000001e), propput, helpcontext(0x00a06bd0)]
        HRESULT CustomToolbarsFile([in] BSTR lpbstrRet);
        [id(0x0000001f), helpcontext(0x00a07693)]
        HRESULT ClearCustomToolbars();
        [id(0x00000020), propget, helpcontext(0x00a06c8e)]
        HRESULT Fonts([out, retval] IVFonts** lpdispRet);
        [id(0x00000021), propget, helpcontext(0x00a06b76)]
        HRESULT Colors([out, retval] IVColors** lpdispRet);
        [id(0x00000022), propget, helpcontext(0x00a06c48)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x00000023), propget, helpcontext(0x00a07049)]
        HRESULT Template([out, retval] BSTR* lpbstrRet);
        [id(0x00000024), helpcontext(0x00a07819)]
        HRESULT SaveAsEx(
                        [in] BSTR FileName, 
                        [in] short SaveFlags);
        [id(0x00000025), propget, hidden, helpcontext(0x00a06f72)]
        HRESULT old_SavePreviewMode([out, retval] short* lpi2Ret);
        [id(0x00000025), propput, hidden, helpcontext(0x00a06f72)]
        HRESULT old_SavePreviewMode([in] short lpi2Ret);
        [id(0x00000026), hidden, helpcontext(0x00a037a0)]
        HRESULT GetIcon(
                        [in] short ID, 
                        [in] BSTR FileName);
        [id(0x00000027), hidden, helpcontext(0x00a037a0)]
        HRESULT SetIcon(
                        [in] short ID, 
                        [in] short Index, 
                        [in] BSTR FileName);
        [id(0x00000028), propget, helpcontext(0x00a06da6)]
        HRESULT LeftMargin(
                        [in, optional] VARIANT UnitsNameOrCode, 
                        [out, retval] double* lpr8Ret);
        [id(0x00000028), propput, helpcontext(0x00a06da6)]
        HRESULT LeftMargin(
                        [in, optional] VARIANT UnitsNameOrCode, 
                        [in] double lpr8Ret);
        [id(0x00000029), propget, helpcontext(0x00a06f3b)]
        HRESULT RightMargin(
                        [in, optional] VARIANT UnitsNameOrCode, 
                        [out, retval] double* lpr8Ret);
        [id(0x00000029), propput, helpcontext(0x00a06f3b)]
        HRESULT RightMargin(
                        [in, optional] VARIANT UnitsNameOrCode, 
                        [in] double lpr8Ret);
        [id(0x0000002a), propget, helpcontext(0x00a07094)]
        HRESULT TopMargin(
                        [in, optional] VARIANT UnitsNameOrCode, 
                        [out, retval] double* lpr8Ret);
        [id(0x0000002a), propput, helpcontext(0x00a07094)]
        HRESULT TopMargin(
                        [in, optional] VARIANT UnitsNameOrCode, 
                        [in] double lpr8Ret);
        [id(0x0000002b), propget, helpcontext(0x00a06afe)]
        HRESULT BottomMargin(
                        [in, optional] VARIANT UnitsNameOrCode, 
                        [out, retval] double* lpr8Ret);
        [id(0x0000002b), propput, helpcontext(0x00a06afe)]
        HRESULT BottomMargin(
                        [in, optional] VARIANT UnitsNameOrCode, 
                        [in] double lpr8Ret);
        [id(0x0000002c), propget, hidden, helpcontext(0x00a06ec8)]
        HRESULT old_PrintLandscape([out, retval] short* lpi2Ret);
        [id(0x0000002c), propput, hidden, helpcontext(0x00a06ec8)]
        HRESULT old_PrintLandscape([in] short lpi2Ret);
        [id(0x0000002d), propget, hidden, helpcontext(0x00a06eb9)]
        HRESULT old_PrintCenteredH([out, retval] short* lpi2Ret);
        [id(0x0000002d), propput, hidden, helpcontext(0x00a06eb9)]
        HRESULT old_PrintCenteredH([in] short lpi2Ret);
        [id(0x0000002e), propget, hidden, helpcontext(0x00a06ebe)]
        HRESULT old_PrintCenteredV([out, retval] short* lpi2Ret);
        [id(0x0000002e), propput, hidden, helpcontext(0x00a06ebe)]
        HRESULT old_PrintCenteredV([in] short lpi2Ret);
        [id(0x0000002f), propget, helpcontext(0x00a06ed7)]
        HRESULT PrintScale([out, retval] double* lpr8Ret);
        [id(0x0000002f), propput, helpcontext(0x00a06ed7)]
        HRESULT PrintScale([in] double lpr8Ret);
        [id(0x00000030), propget, hidden, helpcontext(0x00a06ec3)]
        HRESULT old_PrintFitOnPages([out, retval] short* lpi2Ret);
        [id(0x00000030), propput, hidden, helpcontext(0x00a06ec3)]
        HRESULT old_PrintFitOnPages([in] short lpi2Ret);
        [id(0x00000031), propget, helpcontext(0x00a06ecd)]
        HRESULT PrintPagesAcross([out, retval] short* lpi2Ret);
        [id(0x00000031), propput, helpcontext(0x00a06ecd)]
        HRESULT PrintPagesAcross([in] short lpi2Ret);
        [id(0x00000032), propget, helpcontext(0x00a06ed2)]
        HRESULT PrintPagesDown([out, retval] short* lpi2Ret);
        [id(0x00000032), propput, helpcontext(0x00a06ed2)]
        HRESULT PrintPagesDown([in] short lpi2Ret);
        [id(0x00000033), propget, helpstring("Locale specific name of document's default style."), helpcontext(0x00a06bee)]
        HRESULT DefaultStyle([out, retval] BSTR* lpLocaleSpecificName);
        [id(0x00000033), propput, helpstring("Locale specific name of document's default style."), helpcontext(0x00a06bee)]
        HRESULT DefaultStyle([in] BSTR lpLocaleSpecificName);
        [id(0x00000034), propget, helpstring("Locale specific name of document's default line style."), helpcontext(0x00a06be9)]
        HRESULT DefaultLineStyle([out, retval] BSTR* lpLocaleSpecificName);
        [id(0x00000034), propput, helpstring("Locale specific name of document's default line style."), helpcontext(0x00a06be9)]
        HRESULT DefaultLineStyle([in] BSTR lpLocaleSpecificName);
        [id(0x00000035), propget, helpstring("Locale specific name of document's default fill style."), helpcontext(0x00a06be4)]
        HRESULT DefaultFillStyle([out, retval] BSTR* lpLocaleSpecificName);
        [id(0x00000035), propput, helpstring("Locale specific name of document's default fill style."), helpcontext(0x00a06be4)]
        HRESULT DefaultFillStyle([in] BSTR lpLocaleSpecificName);
        [id(0x00000036), propget, helpstring("Locale specific name of document's default text style."), helpcontext(0x00a06bf3)]
        HRESULT DefaultTextStyle([out, retval] BSTR* lpLocaleSpecificName);
        [id(0x00000036), propput, helpstring("Locale specific name of document's default text style."), helpcontext(0x00a06bf3)]
        HRESULT DefaultTextStyle([in] BSTR lpLocaleSpecificName);
        [id(0x00000037), propget, helpcontext(0x00a06ea0)]
        HRESULT PersistsEvents([out, retval] short* lpboolRet);
        [id(0x00000038), helpcontext(0x00a077c4)]
        HRESULT OpenStencilWindow([out, retval] IVWindow** lpdispRet);
        [id(0x00000039), helpcontext(0x00a077c9)]
        HRESULT ParseLine([in] BSTR Line);
        [id(0x0000003a), helpcontext(0x00a07724)]
        HRESULT ExecuteLine([in] BSTR Line);
        [id(0x0000003b), propget, helpstring("Interface returned is VBIDE.VBProject."), helpcontext(0x00a070cb)]
        HRESULT VBProject([out, retval] IDispatch** lpdispRet);
        [id(0x0000003c), propget, helpcontext(0x00a06e69)]
        HRESULT PaperWidth(
                        [in] VARIANT UnitsNameOrCode, 
                        [out, retval] double* lpr8Ret);
        [id(0x0000003d), propget, helpcontext(0x00a06e5f)]
        HRESULT PaperHeight(
                        [in] VARIANT UnitsNameOrCode, 
                        [out, retval] double* lpr8Ret);
        [id(0x0000003e), propget, hidden, helpcontext(0x00a06e64)]
        HRESULT old_PaperSize([out, retval] short* lpi2Ret);
        [id(0x0000003e), propput, hidden, helpcontext(0x00a06e64)]
        HRESULT old_PaperSize([in] short lpi2Ret);
        [id(0x0000003f), hidden, helpcontext(0x00a037a0)]
        HRESULT FollowHyperlink45(
                        [in] BSTR Target, 
                        [in] BSTR Location);
        [id(0x80010000), propget, hidden]
        HRESULT CodeName([out, retval] BSTR* lpbstrRet);
        [id(0x00000040), propget, hidden, helpcontext(0x00a06e05)]
        HRESULT old_Mode([out, retval] short* lpi2Ret);
        [id(0x00000040), propput, hidden, helpcontext(0x00a06e05)]
        HRESULT old_Mode([in] short lpi2Ret);
        [id(0x00000041), propget, helpcontext(0x00a06e2d)]
        HRESULT OLEObjects([out, retval] IVOLEObjects** lpdispRet);
        [id(0x00000042), helpcontext(0x00a07747)]
        HRESULT FollowHyperlink(
                        [in] BSTR Address, 
                        [in] BSTR SubAddress, 
                        [in, optional] VARIANT ExtraInfo, 
                        [in, optional] VARIANT Frame, 
                        [in, optional] VARIANT NewWindow, 
                        [in, optional] VARIANT res1, 
                        [in, optional] VARIANT res2, 
                        [in, optional] VARIANT res3);
        [id(0x00000043), propget, helpcontext(0x00a06dc9)]
        HRESULT Manager([out, retval] BSTR* lpbstrRet);
        [id(0x00000043), propput, helpcontext(0x00a06dc9)]
        HRESULT Manager([in] BSTR lpbstrRet);
        [id(0x00000044), propget, helpcontext(0x00a06b85)]
        HRESULT Company([out, retval] BSTR* lpbstrRet);
        [id(0x00000044), propput, helpcontext(0x00a06b85)]
        HRESULT Company([in] BSTR lpbstrRet);
        [id(0x00000045), propget, helpcontext(0x00a06b17)]
        HRESULT Category([out, retval] BSTR* lpbstrRet);
        [id(0x00000045), propput, helpcontext(0x00a06b17)]
        HRESULT Category([in] BSTR lpbstrRet);
        [id(0x00000046), propget, helpcontext(0x00a06cf7)]
        HRESULT HyperlinkBase([out, retval] BSTR* lpbstrRet);
        [id(0x00000046), propput, helpcontext(0x00a06cf7)]
        HRESULT HyperlinkBase([in] BSTR lpbstrRet);
        [id(0x00000047), propget, helpcontext(0x00a06c20)]
        HRESULT DocumentSheet([out, retval] IVShape** lpdispRet);
        [id(0x00000048), propget, helpcontext(0x00a06b8f)]
        HRESULT Container([out, retval] IDispatch** lpdispRet);
        [id(0x00000049), propget, helpcontext(0x00a06b58)]
        HRESULT ClassID([out, retval] BSTR* lpbstrRet);
        [id(0x0000004a), propget, helpcontext(0x00a06ef0)]
        HRESULT ProgID([out, retval] BSTR* lpbstrRet);
        [id(0x0000004b), propget, helpcontext(0x00a06ddd)]
        HRESULT MasterShortcuts([out, retval] IVMasterShortcuts** lpdispRet);
        [id(0x0000004c), propget, helpcontext(0x00a06abd)]
        HRESULT AlternateNames([out, retval] BSTR* lpbstrRet);
        [id(0x0000004c), propput, helpcontext(0x00a06abd)]
        HRESULT AlternateNames([in] BSTR lpbstrRet);
        [id(0x0000004d), propget, helpcontext(0x00a06cc5)]
        HRESULT GestureFormatSheet([out, retval] IVShape** lpdispRet);
        [id(0x0000004e), helpcontext(0x00a07698)]
        HRESULT ClearGestureFormatSheet();
        [id(0x0000004f), propget, helpcontext(0x00a07116)]
        HRESULT AutoRecover([out, retval] VARIANT_BOOL* pbRet);
        [id(0x0000004f), propput, helpcontext(0x00a07116)]
        HRESULT AutoRecover([in] VARIANT_BOOL pbRet);
        [id(0x60020072), propget, helpcontext(0x00a06f6d)]
        HRESULT Saved([out, retval] VARIANT_BOOL* pbRet);
        [id(0x60020072), propput, helpcontext(0x00a06f6d)]
        HRESULT Saved([in] VARIANT_BOOL pbRet);
        [id(0x60020074), propget, helpcontext(0x00a0ff5f)]
        HRESULT Version([out, retval] VisDocVersions* lpi4Ret);
        [id(0x60020074), propput, helpcontext(0x00a0ff5f)]
        HRESULT Version([in] VisDocVersions lpi4Ret);
        [id(0x60020076), propget, helpcontext(0x00a06f72)]
        HRESULT SavePreviewMode([out, retval] VisSavePreviewMode* lpi4Ret);
        [id(0x60020076), propput, helpcontext(0x00a06f72)]
        HRESULT SavePreviewMode([in] VisSavePreviewMode lpi4Ret);
        [id(0x60020078), propget, helpcontext(0x00a06ec8)]
        HRESULT PrintLandscape([out, retval] VARIANT_BOOL* pbRet);
        [id(0x60020078), propput, helpcontext(0x00a06ec8)]
        HRESULT PrintLandscape([in] VARIANT_BOOL pbRet);
        [id(0x6002007a), propget, helpcontext(0x00a06eb9)]
        HRESULT PrintCenteredH([out, retval] VARIANT_BOOL* pbRet);
        [id(0x6002007a), propput, helpcontext(0x00a06eb9)]
        HRESULT PrintCenteredH([in] VARIANT_BOOL pbRet);
        [id(0x6002007c), propget, helpcontext(0x00a06ebe)]
        HRESULT PrintCenteredV([out, retval] VARIANT_BOOL* pbRet);
        [id(0x6002007c), propput, helpcontext(0x00a06ebe)]
        HRESULT PrintCenteredV([in] VARIANT_BOOL pbRet);
        [id(0x6002007e), propget, helpcontext(0x00a06ec3)]
        HRESULT PrintFitOnPages([out, retval] VARIANT_BOOL* pbRet);
        [id(0x6002007e), propput, helpcontext(0x00a06ec3)]
        HRESULT PrintFitOnPages([in] VARIANT_BOOL pbRet);
        [id(0x60020080), propget, helpcontext(0x00a06e64)]
        HRESULT PaperSize([out, retval] VisPaperSizes* lpi4Ret);
        [id(0x60020080), propput, helpcontext(0x00a06e64)]
        HRESULT PaperSize([in] VisPaperSizes lpi4Ret);
        [id(0x60020082), propget, helpcontext(0x00a06e05)]
        HRESULT Mode([out, retval] VisDocModeArgs* lpi4Ret);
        [id(0x60020082), propput, helpcontext(0x00a06e05)]
        HRESULT Mode([in] VisDocModeArgs lpi4Ret);
        [id(0x60020084), propget, helpcontext(0x00a0fe60)]
        HRESULT SnapEnabled([out, retval] VARIANT_BOOL* pbRet);
        [id(0x60020084), propput, helpcontext(0x00a0fe60)]
        HRESULT SnapEnabled([in] VARIANT_BOOL pbRet);
        [id(0x60020086), propget, helpcontext(0x00a0fe6a)]
        HRESULT SnapSettings([out, retval] VisSnapSettings* pnRet);
        [id(0x60020086), propput, helpcontext(0x00a0fe6a)]
        HRESULT SnapSettings([in] VisSnapSettings pnRet);
        [id(0x60020088), propget, helpcontext(0x00a0fe65)]
        HRESULT SnapExtensions([out, retval] VisSnapExtensions* pnRet);
        [id(0x60020088), propput, helpcontext(0x00a0fe65)]
        HRESULT SnapExtensions([in] VisSnapExtensions pnRet);
        [id(0x6002008a), propget, helpcontext(0x00a0fe5b)]
        HRESULT SnapAngles([out, retval] SAFEARRAY(double)* dAngles);
        [id(0x6002008a), propput, helpcontext(0x00a0fe5b)]
        HRESULT SnapAngles([in] SAFEARRAY(double)* dAngles);
        [id(0x6002008c), propget, helpcontext(0x00a0fd5c)]
        HRESULT GlueEnabled([out, retval] VARIANT_BOOL* pbRet);
        [id(0x6002008c), propput, helpcontext(0x00a0fd5c)]
        HRESULT GlueEnabled([in] VARIANT_BOOL pbRet);
        [id(0x6002008e), propget, helpcontext(0x00a0fd61)]
        HRESULT GlueSettings([out, retval] VisGlueSettings* pnRet);
        [id(0x6002008e), propput, helpcontext(0x00a0fd61)]
        HRESULT GlueSettings([in] VisGlueSettings pnRet);
        [id(0x60020090), propget, helpcontext(0x00a0fd20)]
        HRESULT DynamicGridEnabled([out, retval] VARIANT_BOOL* pbRet);
        [id(0x60020090), propput, helpcontext(0x00a0fd20)]
        HRESULT DynamicGridEnabled([in] VARIANT_BOOL pbRet);
        [id(0x60020092), propget, helpcontext(0x00a0fd16)]
        HRESULT DefaultGuideStyle([out, retval] BSTR* lpLocaleSpecificName);
        [id(0x60020092), propput, helpcontext(0x00a0fd16)]
        HRESULT DefaultGuideStyle([in] BSTR lpLocaleSpecificName);
        [id(0x60020094), propget, helpcontext(0x00a0fe01)]
        HRESULT Protection(
                        [in, optional] VARIANT bstrPassword, 
                        [out, retval] VisProtection* pnRet);
        [id(0x60020094), propput, helpcontext(0x00a0fe01)]
        HRESULT Protection(
                        [in, optional] VARIANT bstrPassword, 
                        [in] VisProtection pnRet);
        [id(0x60020096), propget, helpcontext(0x00a0fdfc)]
        HRESULT Printer([out, retval] BSTR* pbstrRet);
        [id(0x60020096), propput, helpcontext(0x00a0fdfc)]
        HRESULT Printer([in] BSTR pbstrRet);
        [id(0x60020098), propget, hidden, helpcontext(0x00a0fe06)]
        HRESULT PrintCopies([out, retval] long* pnRet);
        [id(0x60020098), propput, hidden, helpcontext(0x00a0fe06)]
        HRESULT PrintCopies([in] long pnRet);
        [id(0x6002009a), propget, helpcontext(0x00a0fd75)]
        HRESULT HeaderLeft([out, retval] BSTR* pbstrRet);
        [id(0x6002009a), propput, helpcontext(0x00a0fd75)]
        HRESULT HeaderLeft([in] BSTR pbstrRet);
        [id(0x6002009c), propget, helpcontext(0x00a0fd66)]
        HRESULT HeaderCenter([out, retval] BSTR* pbstrRet);
        [id(0x6002009c), propput, helpcontext(0x00a0fd66)]
        HRESULT HeaderCenter([in] BSTR pbstrRet);
        [id(0x6002009e), propget, helpcontext(0x00a0fd7f)]
        HRESULT HeaderRight([out, retval] BSTR* pbstrRet);
        [id(0x6002009e), propput, helpcontext(0x00a0fd7f)]
        HRESULT HeaderRight([in] BSTR pbstrRet);
        [id(0x600200a0), propget, helpcontext(0x00a0fd7a)]
        HRESULT HeaderMargin(
                        [in, optional] VARIANT UnitsNameOrCode, 
                        [out, retval] double* pdRet);
        [id(0x600200a0), propput, helpcontext(0x00a0fd7a)]
        HRESULT HeaderMargin(
                        [in, optional] VARIANT UnitsNameOrCode, 
                        [in] double pdRet);
        [id(0x600200a2), propget, helpcontext(0x00a0fd39)]
        HRESULT FooterLeft([out, retval] BSTR* pbstrRet);
        [id(0x600200a2), propput, helpcontext(0x00a0fd39)]
        HRESULT FooterLeft([in] BSTR pbstrRet);
        [id(0x600200a4), propget, helpcontext(0x00a0fd34)]
        HRESULT FooterCenter([out, retval] BSTR* pbstrRet);
        [id(0x600200a4), propput, helpcontext(0x00a0fd34)]
        HRESULT FooterCenter([in] BSTR pbstrRet);
        [id(0x600200a6), propget, helpcontext(0x00a0fd43)]
        HRESULT FooterRight([out, retval] BSTR* pbstrRet);
        [id(0x600200a6), propput, helpcontext(0x00a0fd43)]
        HRESULT FooterRight([in] BSTR pbstrRet);
        [id(0x600200a8), propget, helpcontext(0x00a0fd3e)]
        HRESULT FooterMargin(
                        [in, optional] VARIANT UnitsNameOrCode, 
                        [out, retval] double* pdRet);
        [id(0x600200a8), propput, helpcontext(0x00a0fd3e)]
        HRESULT FooterMargin(
                        [in, optional] VARIANT UnitsNameOrCode, 
                        [in] double pdRet);
        [id(0x600200aa), propget, helpcontext(0x00a0fd70)]
        HRESULT HeaderFooterFont([out, retval] IFontDisp** ppFontDisp);
        [id(0x600200aa), propputref, helpcontext(0x00a0fd70)]
        HRESULT HeaderFooterFont([in] IFontDisp* ppFontDisp);
        [id(0x600200ac), propget, helpcontext(0x00a0fd6b)]
        HRESULT HeaderFooterColor([out, retval] OLE_COLOR* pColor);
        [id(0x600200ac), propput, helpcontext(0x00a0fd6b)]
        HRESULT HeaderFooterColor([in] OLE_COLOR pColor);
        [id(0x600200ae), propput, hidden, helpstring("Obsolete as of Visio 2003."), helpcontext(0x00a0fde8)]
        HRESULT Password(
                        [in, optional] VARIANT bstrExistingPassword, 
                        [in] BSTR rhs);
        [id(0x600200af), propget, helpcontext(0x00a0fdf7)]
        HRESULT PreviewPicture([out, retval] IPictureDisp** ppPictureDisp);
        [id(0x600200af), propputref, helpcontext(0x00a0fdf7)]
        HRESULT PreviewPicture([in] IPictureDisp* ppPictureDisp);
        [id(0x600200b1), helpstring("Detects and repairs various indicated conditions in a document."), helpcontext(0x00a102e8)]
        HRESULT Clean(
                        [in, optional] VARIANT nTargets, 
                        [in, optional] VARIANT nActions, 
                        [in, optional] VARIANT nAlerts, 
                        [in, optional] VARIANT nFixes, 
                        [in, optional] VARIANT bStopOnError, 
                        [in, optional] VARIANT bLogFileName, 
                        [in, optional] VARIANT nReserved);
        [id(0x600200b2), propget, helpcontext(0x00a0fcf8)]
        HRESULT BuildNumberCreated([out, retval] long* pnBuildNumCreated);
        [id(0x600200b3), propget, helpcontext(0x00a0fcfd)]
        HRESULT BuildNumberEdited([out, retval] long* pnBuildNumEdited);
        [id(0x600200b4), propget, helpcontext(0x00a0fe79)]
        HRESULT TimeCreated([out, retval] DATE* pdTimeCreated);
        [id(0x600200b5), propget, helpcontext(0x00a0fe74)]
        HRESULT Time([out, retval] DATE* pdTimeCurrent);
        [id(0x600200b6), propget, helpcontext(0x00a0fe7e)]
        HRESULT TimeEdited([out, retval] DATE* pdTimeEdited);
        [id(0x600200b7), propget, helpcontext(0x00a0fe83)]
        HRESULT TimePrinted([out, retval] DATE* pdTimePrinted);
        [id(0x600200b8), propget, helpcontext(0x00a0fe88)]
        HRESULT TimeSaved([out, retval] DATE* pdTimeSaved);
        [id(0x600200b9), helpstring("Copies the preview picture from pSourceDoc into this one."), helpcontext(0x00a0fd11)]
        HRESULT CopyPreviewPicture([in] IVDocument* pSourceDoc);
        [id(0x600200ba), propget, hidden, helpstring("True if this document was saved as a workspace. False otherwise."), helpcontext(0x00a0fd02)]
        HRESULT ContainsWorkspace([out, retval] VARIANT_BOOL* pbRet);
        [id(0x600200bb), propget, helpcontext(0x00a0fd2a)]
        HRESULT EmailRoutingData([out, retval] SAFEARRAY(VARIANT)* pData);
        [id(0x600200bc), propget, helpcontext(0x00a0fe8d)]
        HRESULT VBProjectData([out, retval] SAFEARRAY(unsigned char)* pData);
        [id(0x600200bd), propget, helpstring("Returns number of Solution XML elements in document. The first element has index 1."), helpcontext(0x00a0fe4c)]
        HRESULT SolutionXMLElementCount([out, retval] long* pElementCount);
        [id(0x600200be), propget, helpstring("Returns the name of the i'th (1-based) Solution XML element."), helpcontext(0x00a0fe56)]
        HRESULT SolutionXMLElementName(
                        [in] long Index, 
                        [out, retval] BSTR* pElementName);
        [id(0x600200bf), propget, helpstring("Returns true if there is a Solution XML element with the given name."), helpcontext(0x00a0fe51)]
        HRESULT SolutionXMLElementExists(
                        [in] BSTR ElementName, 
                        [out, retval] VARIANT_BOOL* pbRet);
        [id(0x600200c0), propget, helpstring("Data of the Solution XML element with the given name. Putting data to non-existent element creates element."), helpcontext(0x00a0fe47)]
        HRESULT SolutionXMLElement(
                        [in] BSTR ElementName, 
                        [out, retval] BSTR* pWellFormedXML);
        [id(0x600200c0), propput, helpstring("Data of the Solution XML element with the given name. Putting data to non-existent element creates element."), helpcontext(0x00a0fe47)]
        HRESULT SolutionXMLElement(
                        [in] BSTR ElementName, 
                        [in] BSTR pWellFormedXML);
        [id(0x600200c2), helpstring("Deletes the Solution XML element with the given name."), helpcontext(0x00a0fd1b)]
        HRESULT DeleteSolutionXMLElement([in] BSTR ElementName);
        [id(0x600200c3), propget, helpcontext(0x00a0ffb9)]
        HRESULT FullBuildNumberCreated([out, retval] long* pnFullBuildNumCreated);
        [id(0x600200c4), propget, helpcontext(0x00a0ffbe)]
        HRESULT FullBuildNumberEdited([out, retval] long* pnFullBuildNumEdited);
        [id(0x600200c5), propget, helpcontext(0x00a06d0b)]
        HRESULT ID([out, retval] long* lpi4Ret);
        [id(0x600200c6), propget, helpcontext(0x00a10310)]
        HRESULT MacrosEnabled([out, retval] VARIANT_BOOL* pbRet);
        [id(0x600200c7), propget, helpcontext(0x00a100a9)]
        HRESULT ZoomBehavior([out, retval] VisZoomBehavior* pnZoomBehavior);
        [id(0x600200c7), propput, helpcontext(0x00a100a9)]
        HRESULT ZoomBehavior([in] VisZoomBehavior pnZoomBehavior);
        [id(0x600200c9), helpcontext(0x00a102d4)]
        HRESULT CanCheckIn([out, retval] VARIANT_BOOL* pbRet);
        [id(0x600200ca), helpcontext(0x00a102de)]
        HRESULT CheckIn(
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL SaveChanges, 
                        [in, optional] VARIANT* Comments, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL MakePublic);
        [id(0x600200cb), propget, helpcontext(0x00a100c7)]
        HRESULT Type([out, retval] VisDocumentTypes* pnDocType);
        [id(0x600200cc), propget, helpcontext(0x00a10199)]
        HRESULT Language([out, retval] long* lpLangID);
        [id(0x600200cc), propput, hidden, helpcontext(0x00a10199)]
        HRESULT Language([in] long lpLangID);
        [id(0x600200ce), propget, helpcontext(0x00a1017b)]
        HRESULT RemovePersonalInformation([out, retval] VARIANT_BOOL* pbRet);
        [id(0x600200ce), propput, helpcontext(0x00a1017b)]
        HRESULT RemovePersonalInformation([in] VARIANT_BOOL pbRet);
        [id(0x600200d0), helpcontext(0x00a1002c)]
        HRESULT PrintOut(
                        [in] VisPrintOutRange PrintRange, 
                        [in, optional, defaultvalue(1)] long FromPage, 
                        [in, optional, defaultvalue(-1)] long ToPage, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL ScaleCurrentViewToPaper, 
                        [in, optional, defaultvalue("")] BSTR PrinterName, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL PrintToFile, 
                        [in, optional, defaultvalue("")] BSTR OutputFileName, 
                        [in, optional, defaultvalue(1)] long Copies, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL Collate, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL ColorAsBlack);
        [id(0x600200d1), helpcontext(0x00a07675)]
        HRESULT BeginUndoScope(
                        [in] BSTR bstrUndoScopeName, 
                        [out, retval] long* pnScopeID);
        [id(0x600200d2), helpcontext(0x00a0771a)]
        HRESULT EndUndoScope(
                        [in] long nScopeID, 
                        [in] VARIANT_BOOL bCommit);
        [id(0x600200d3), helpcontext(0x00a0766b)]
        HRESULT AddUndoUnit([in] IUnknown* pUndoUnit);
        [id(0x600200d4), helpcontext(0x00a077e2)]
        HRESULT PurgeUndo();
        [id(0x600200d5), propget, helpcontext(0x00a070b2)]
        HRESULT UndoEnabled([out, retval] VARIANT_BOOL* pbRet);
        [id(0x600200d5), propput, helpcontext(0x00a070b2)]
        HRESULT UndoEnabled([in] VARIANT_BOOL pbRet);
        [id(0x600200d7), helpstring("Renames the currently open top level undo scope such that bstrScopeName shows up in the Undo menu item. Raises an exception if not in an open scope."), helpcontext(0x00a0fba9)]
        HRESULT RenameCurrentScope([in] BSTR bstrScopeName);
        [id(0x600200d8), propget, helpcontext(0x00a12288)]
        HRESULT SharedWorkspace([out, retval] IDispatch** lpdispRet);
        [id(0x600200d9), propget, helpcontext(0x00a12289)]
        HRESULT Sync([out, retval] IDispatch** lpdispRet);
        [id(0x600200da), helpcontext(0x00a037a0)]
        HRESULT RemoveHiddenInformation([in] long RemoveHiddenInfoItems);
        [id(0x600200db), propget, helpcontext(0x00a12246)]
        HRESULT DataRecordsets([out, retval] IVDataRecordsets** DataRecordsets);
        [id(0x600200dc), helpcontext(0x00a1224b)]
        HRESULT GetThemeNames(
                        [in] VisThemeTypes eType, 
                        [out] SAFEARRAY(BSTR)* NameArray);
        [id(0x600200dd), helpcontext(0x00a12250)]
        HRESULT GetThemeNamesU(
                        [in] VisThemeTypes eType, 
                        [out] SAFEARRAY(BSTR)* NameArray);
        [id(0x600200de), helpcontext(0x00a12255)]
        HRESULT CanUndoCheckOut([out, retval] VARIANT_BOOL* pbRet);
        [id(0x600200df), helpcontext(0x00a1225a)]
        HRESULT UndoCheckOut();
        [id(0x600200e0), propget, helpcontext(0x00a0fd02)]
        HRESULT ContainsWorkspaceEx([out, retval] VARIANT_BOOL* TrueOrFalse);
        [id(0x600200e0), propput, helpcontext(0x00a0fd02)]
        HRESULT ContainsWorkspaceEx([in] VARIANT_BOOL TrueOrFalse);
        [id(0x600200e2), helpcontext(0x00a1225f)]
        HRESULT ExportAsFixedFormat(
                        [in] VisFixedFormatTypes FixedFormat, 
                        [in] BSTR OutputFileName, 
                        [in] VisDocExIntent Intent, 
                        [in] VisPrintOutRange PrintRange, 
                        [in, optional, defaultvalue(1)] long FromPage, 
                        [in, optional, defaultvalue(-1)] long ToPage, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL ColorAsBlack, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL IncludeBackground, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL IncludeDocumentProperties, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL IncludeStructureTags, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL UseISO19005_1, 
                        [in, optional] VARIANT FixedFormatExtClass);
        [id(0x600200e3), propget, helpcontext(0x00a12264)]
        HRESULT DefaultSavePath([out, retval] BSTR* SaveLocation);
        [id(0x600200e3), propput, helpcontext(0x00a12264)]
        HRESULT DefaultSavePath([in] BSTR SaveLocation);
    };

    [
      odl,
      uuid(000D0708-0000-0000-C000-000000000046),
      helpcontext(0x00002792),
      hidden,
      dual,
      oleautomation
    ]
    interface IVMasters : IDispatch {
        [id(0x00000003), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00a4fea2)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpstring("Returns visObjTypeMasters (13)."), helpcontext(0x00a50208)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("The first item in a Masters collection is item 1. Name treated as locale specific."), helpcontext(0x00a50145)]
        HRESULT Item(
                        [in] VARIANT NameUIDOrIndex, 
                        [out, retval] IVMaster** lpdispRet);
        [id(0x00000001), propget, helpcontext(0x00a4ff92)]
        HRESULT Count([out, retval] short* lpi2Ret);
        [id(0x00000004), propget, helpcontext(0x00a4fff6)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000005), propget, helpcontext(0x00a503d4)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x00000006), propget, helpcontext(0x00a50028)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x00000007), propget, helpcontext(0x00a50280)]
        HRESULT PersistsEvents([out, retval] short* lpboolRet);
        [id(0x00000008), helpcontext(0x00a50a05)]
        HRESULT Add([out, retval] IVMaster** lpdispRet);
        [id(0x00000009), helpstring("Returns locale specific names of masters."), helpcontext(0x00a50b3b)]
        HRESULT GetNames([out] SAFEARRAY(BSTR)* localeSpecificNameArray);
        [id(0x0000000a), helpcontext(0x00a50aeb)]
        HRESULT Drop(
                        [in] IUnknown* ObjectToDrop, 
                        [in] short xPos, 
                        [in] short yPos, 
                        [out, retval] IVMaster** lpdispRet);
        [id(0x0000000b), propget, helpstring("Like Item() but names treated locale independent."), helpcontext(0x00a5968c)]
        HRESULT ItemU(
                        [in] VARIANT NameUIDOrIndex, 
                        [out, retval] IVMaster** lpdispRet);
        [id(0x0000000c), helpstring("Returns locale independent names of masters."), helpcontext(0x00a59664)]
        HRESULT GetNamesU([out] SAFEARRAY(BSTR)* localeIndependentNameArray);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
        [id(0x6002000e), propget, helpcontext(0x00a5014f)]
        HRESULT ItemFromID(
                        [in] long nID, 
                        [out, retval] IVMaster** ppMaster);
        [id(0x6002000f), helpcontext(0x00a59362)]
        HRESULT Paste([in, optional] VARIANT Flags);
        [id(0x60020010), helpcontext(0x00a5947a)]
        HRESULT AddEx(
                        [in] VisMasterTypes Type, 
                        [out, retval] IVMaster** Master);
    };

    [
      odl,
      uuid(000D0707-0000-0000-C000-000000000046),
      helpcontext(0x00002792),
      hidden,
      dual,
      oleautomation
    ]
    interface IVMaster : IDispatch {
        [id(0x00000002), propget, helpcontext(0x00a37956)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000006), propget, helpcontext(0x00a37c35)]
        HRESULT Prompt([out, retval] BSTR* lpbstrRet);
        [id(0x00000006), propput, helpcontext(0x00a37c35)]
        HRESULT Prompt([in] BSTR lpbstrRet);
        [id(0x00000007), propget, helpcontext(0x00a377f3)]
        HRESULT AlignName([out, retval] short* lpi2Ret);
        [id(0x00000007), propput, helpcontext(0x00a377f3)]
        HRESULT AlignName([in] short lpi2Ret);
        [id(0x00000008), propget, helpcontext(0x00a37a41)]
        HRESULT IconSize([out, retval] short* lpi2Ret);
        [id(0x00000008), propput, helpcontext(0x00a37a41)]
        HRESULT IconSize([in] short lpi2Ret);
        [id(0x00000009), propget, helpcontext(0x00a37a46)]
        HRESULT IconUpdate([out, retval] short* lpi2Ret);
        [id(0x00000009), propput, helpcontext(0x00a37a46)]
        HRESULT IconUpdate([in] short lpi2Ret);
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00a37802)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000004), propget, helpcontext(0x00a37d34)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x00000005), propget, helpstring("Returns visObjTypeMaster (12)."), helpcontext(0x00a37b68)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("Master's locale specific name."), helpcontext(0x00a37b4a)]
        HRESULT Name([out, retval] BSTR* lpLocaleSpecificName);
        [id(00000000), propput, helpstring("Master's locale specific name."), helpcontext(0x00a37b4a)]
        HRESULT Name([in] BSTR lpLocaleSpecificName);
        [id(0x00000003), propget, helpcontext(0x00a37cda)]
        HRESULT Shapes([out, retval] IVShapes** lpdispRet);
        [id(0x0000000a), propget, helpcontext(0x00a37a5f)]
        HRESULT Index([out, retval] short* lpi2Ret);
        [id(0x0000000b), propget, helpcontext(0x00a37b77)]
        HRESULT OneD([out, retval] short* lpi2Ret);
        [id(0x0000000c), helpcontext(0x00a38405)]
        HRESULT Delete();
        [id(0x0000000d), propget, helpcontext(0x00a40cbd)]
        HRESULT UniqueID([out, retval] BSTR* lpbstrRet);
        [id(0x0000000e), propget, helpcontext(0x00a37adc)]
        HRESULT Layers([out, retval] IVLayers** lpdispRet);
        [id(0x0000000f), propget, helpcontext(0x00a37b90)]
        HRESULT PageSheet([out, retval] IVShape** lpdispRet);
        [id(0x00000010), helpcontext(0x00a3844b)]
        HRESULT Drop(
                        [in] IUnknown* ObjectToDrop, 
                        [in] double xPos, 
                        [in] double yPos, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000011), helpcontext(0x00a383c9)]
        HRESULT CenterDrawing();
        [id(0x00000012), propget, helpcontext(0x00a37988)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x00000013), propget, helpcontext(0x00a37be0)]
        HRESULT PersistsEvents([out, retval] short* lpboolRet);
        [id(0x00000014), helpcontext(0x00a38428)]
        HRESULT DrawLine(
                        [in] double xBegin, 
                        [in] double yBegin, 
                        [in] double xEnd, 
                        [in] double yEnd, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000015), helpcontext(0x00a3843c)]
        HRESULT DrawRectangle(
                        [in] double x1, 
                        [in] double y1, 
                        [in] double x2, 
                        [in] double y2, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000016), helpcontext(0x00a38432)]
        HRESULT DrawOval(
                        [in] double x1, 
                        [in] double y1, 
                        [in] double x2, 
                        [in] double y2, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000017), helpcontext(0x00a38446)]
        HRESULT DrawSpline(
                        [in] SAFEARRAY(double)* xyArray, 
                        [in] double Tolerance, 
                        [in] short Flags, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000018), helpcontext(0x00a38423)]
        HRESULT DrawBezier(
                        [in] SAFEARRAY(double)* xyArray, 
                        [in] short degree, 
                        [in] short Flags, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000019), helpcontext(0x00a38437)]
        HRESULT DrawPolyline(
                        [in] SAFEARRAY(double)* xyArray, 
                        [in] short Flags, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000001a), helpcontext(0x00a384c3)]
        HRESULT Import(
                        [in] BSTR FileName, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000001b), helpcontext(0x00a38469)]
        HRESULT Export([in] BSTR FileName);
        [id(0x0000001c), helpcontext(0x00a384cd)]
        HRESULT InsertFromFile(
                        [in] BSTR FileName, 
                        [in] short Flags, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000001d), helpcontext(0x00a384d2)]
        HRESULT InsertObject(
                        [in] BSTR ClassOrProgID, 
                        [in] short Flags, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000001e), helpcontext(0x00a384f0)]
        HRESULT OpenDrawWindow([out, retval] IVWindow** lpdispRet);
        [id(0x0000001f), helpcontext(0x00a384fa)]
        HRESULT OpenIconWindow([out, retval] IVWindow** lpdispRet);
        [id(0x00000020), helpcontext(0x00a40cdb)]
        HRESULT Open([out, retval] IVMaster** lpdispRet);
        [id(0x00000021), helpcontext(0x00a383dd)]
        HRESULT Close();
        [id(0x00000022), helpstring("Creates many shapes in this master. Names, if supplied, are considered locale specific."), helpcontext(0x00a38450)]
        HRESULT DropMany(
                        [in] SAFEARRAY(VARIANT)* ObjectsToInstance, 
                        [in] SAFEARRAY(double)* xyArray, 
                        [out] SAFEARRAY(short)* IDArray, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000023), helpstring("Returns cell formulas in locale specific syntax."), helpcontext(0x00a38496)]
        HRESULT GetFormulas(
                        [in] SAFEARRAY(short)* SID_SRCStream, 
                        [out] SAFEARRAY(VARIANT)* formulaArray);
        [id(0x00000024), helpcontext(0x00a384a0)]
        HRESULT GetResults(
                        [in] SAFEARRAY(short)* SID_SRCStream, 
                        [in] short Flags, 
                        [in] SAFEARRAY(VARIANT)* UnitsNamesOrCodes, 
                        [out] SAFEARRAY(VARIANT)* resultArray);
        [id(0x00000025), helpcontext(0x00a3859f)]
        HRESULT SetFormulas(
                        [in] SAFEARRAY(short)* SID_SRCStream, 
                        [in] SAFEARRAY(VARIANT)* formulaArray, 
                        [in] short Flags, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000026), helpcontext(0x00a385a4)]
        HRESULT SetResults(
                        [in] SAFEARRAY(short)* SID_SRCStream, 
                        [in] SAFEARRAY(VARIANT)* UnitsNamesOrCodes, 
                        [in] SAFEARRAY(VARIANT)* resultArray, 
                        [in] short Flags, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000027), propget, helpcontext(0x00a378ca)]
        HRESULT Connects([out, retval] IVConnects** lpdispRet);
        [id(0x00000028), helpcontext(0x00a384c8)]
        HRESULT ImportIcon([in] BSTR FileName);
        [id(0x00000029), hidden, helpcontext(0x00a3846e)]
        HRESULT ExportIconTransparentAsBlack(
                        [in] BSTR FileName, 
                        [in] short Flags);
        [id(0x0000002a), helpcontext(0x00a384e1)]
        HRESULT Layout();
        [id(0x0000002b), helpcontext(0x00a383ba)]
        HRESULT BoundingBox(
                        [in] short Flags, 
                        [out] double* lpr8Left, 
                        [out] double* lpr8Bottom, 
                        [out] double* lpr8Right, 
                        [out] double* lpr8Top);
        [id(0x0000002c), propget, hidden, helpcontext(0x00a37a4b)]
        HRESULT ID16([out, retval] short* lpi2Ret);
        [id(0x0000002d), propget, helpcontext(0x00a37b6d)]
        HRESULT OLEObjects([out, retval] IVOLEObjects** lpdispRet);
        [id(0x0000002e), propget, helpcontext(0x00a37bd1)]
        HRESULT PatternFlags([out, retval] short* lpi2Ret);
        [id(0x0000002e), propput, helpcontext(0x00a37bd1)]
        HRESULT PatternFlags([in] short lpi2Ret);
        [id(0x0000002f), propget, helpcontext(0x00a37b22)]
        HRESULT MatchByName([out, retval] short* lpi2Ret);
        [id(0x0000002f), propput, helpcontext(0x00a37b22)]
        HRESULT MatchByName([in] short lpi2Ret);
        [id(0x00000030), propget, helpcontext(0x00a37a4b)]
        HRESULT ID([out, retval] long* lpi4Ret);
        [id(0x00000031), propget, helpcontext(0x00a37a28)]
        HRESULT Hidden([out, retval] short* lpi2Ret);
        [id(0x00000031), propput, helpcontext(0x00a37a28)]
        HRESULT Hidden([in] short lpi2Ret);
        [id(0x00000032), propget, helpcontext(0x00a3782f)]
        HRESULT BaseID([out, retval] BSTR* lpbstrRet);
        [id(0x00000033), propget, helpcontext(0x00a37b54)]
        HRESULT NewBaseID([out, retval] BSTR* lpbstrRet);
        [id(0x00000034), propget, helpcontext(0x00a37d25)]
        HRESULT SpatialSearch(
                        [in] double x, 
                        [in] double y, 
                        [in] short Relation, 
                        [in] double Tolerance, 
                        [in] short Flags, 
                        [out, retval] IVSelection** lpdispRet);
        [id(0x00000035), helpcontext(0x00a383f6)]
        HRESULT CreateShortcut([out, retval] IVMasterShortcut** lpdispRet);
        [id(0x00000036), propget, helpstring("Master's locale independent name."), helpcontext(0x00a40ff1)]
        HRESULT NameU([out, retval] BSTR* lpLocaleIndependentName);
        [id(0x00000036), propput, helpstring("Master's locale independent name."), helpcontext(0x00a40ff1)]
        HRESULT NameU([in] BSTR lpLocaleIndependentName);
        [id(0x00000037), helpstring("Creates many shapes in this master. Names, if supplied, are considered locale independent."), helpcontext(0x00a40fba)]
        HRESULT DropManyU(
                        [in] SAFEARRAY(VARIANT)* ObjectsToInstance, 
                        [in] SAFEARRAY(double)* xyArray, 
                        [out] SAFEARRAY(short)* IDArray, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000038), helpstring("Returns cell formulas in locale independent syntax."), helpcontext(0x00a40fbf)]
        HRESULT GetFormulasU(
                        [in] SAFEARRAY(short)* SID_SRCStream, 
                        [out] SAFEARRAY(VARIANT)* formulaArray);
        [id(0x00000039), helpcontext(0x00a3842d)]
        HRESULT DrawNURBS(
                        [in] short degree, 
                        [in] short Flags, 
                        [in] SAFEARRAY(double)* xyArray, 
                        [in] SAFEARRAY(double)* knots, 
                        [in, optional] VARIANT weights, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000003a), helpcontext(0x00a3846e)]
        HRESULT ExportIcon(
                        [in] BSTR FileName, 
                        [in] short Flags, 
                        [in, optional] VARIANT TransparentRGB);
        [id(0x0000003b), propget, helpcontext(0x00a37a64)]
        HRESULT IndexInStencil([out, retval] short* lpi2Ret);
        [id(0x60020045), propget, helpcontext(0x00a40b2d)]
        HRESULT Picture([out, retval] IPictureDisp** ppPictureDisp);
        [id(0x60020046), propget, helpcontext(0x00a40ac9)]
        HRESULT Icon([out, retval] IPictureDisp** ppPictureDisp);
        [id(0x60020046), propputref, helpcontext(0x00a40ac9)]
        HRESULT Icon([in] IPictureDisp* ppPictureDisp);
        [id(0x60020048), propget, helpstring("Returns the open for edit Master that was originally copied from this Master. If there is no open for edit Master associated with this Master, returns Nothing."), helpcontext(0x00a40a65)]
        HRESULT EditCopy([out, retval] IVMaster** ppOpenMaster);
        [id(0x60020049), propget, helpstring("Returns the original Master that produced this open Master. If this Master is not an open EditCopy of another Master, returns Nothing."), helpcontext(0x00a40b19)]
        HRESULT Original([out, retval] IVMaster** ppOriginalMaster);
        [id(0x6002004a), propget, helpstring("If Original is not Nothing, this returns whether any changes have been made to this Master since it was opened. Always False when Original is Nothing."), helpcontext(0x00a40aec)]
        HRESULT IsChanged([out, retval] VARIANT_BOOL* pbChanged);
        [id(0x0000003b), propput, helpcontext(0x00a37a64)]
        HRESULT IndexInStencil([in] short lpi2Ret);
        [id(0x6002004c), helpcontext(0x00a40b64)]
        HRESULT ResizeToFitContents();
        [id(0x6002004d), helpcontext(0x00a40cc2)]
        HRESULT Paste([in, optional] VARIANT Flags);
        [id(0x6002004e), helpcontext(0x00a40c2c)]
        HRESULT PasteSpecial(
                        [in] long Format, 
                        [in, optional] VARIANT Link, 
                        [in, optional] VARIANT DisplayAsIcon);
        [id(0x6002004f), helpcontext(0x00a40dc6)]
        HRESULT CreateSelection(
                        [in] VisSelectionTypes SelType, 
                        [in, optional, defaultvalue(256)] VisSelectMode IterationMode, 
                        [in, optional] VARIANT Data, 
                        [out, retval] IVSelection** ppSelection);
        [id(0x60020050), helpcontext(0x00a38383)]
        HRESULT AddGuide(
                        [in] short Type, 
                        [in] double xPos, 
                        [in] double yPos, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x60020051), helpcontext(0x00a40db7)]
        HRESULT DrawArcByThreePoints(
                        [in] double xBegin, 
                        [in] double yBegin, 
                        [in] double xEnd, 
                        [in] double yEnd, 
                        [in] double xControl, 
                        [in] double yControl, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x60020052), helpcontext(0x00a40d99)]
        HRESULT DrawQuarterArc(
                        [in] double xBegin, 
                        [in] double yBegin, 
                        [in] double xEnd, 
                        [in] double yEnd, 
                        [in] VisArcSweepFlags SweepFlag, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x60020053), helpcontext(0x00a4100f)]
        HRESULT DrawCircularArc(
                        [in] double xCenter, 
                        [in] double yCenter, 
                        [in] double Radius, 
                        [in, optional, defaultvalue(0)] double StartAngle, 
                        [in, optional, defaultvalue(3,14159274101257)] double EndAngle, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x60020054), propget, helpcontext(0x00a40e07)]
        HRESULT Type([out, retval] VisMasterTypes* Type);
        [id(0x60020055), propget, helpcontext(0x00a42fa4)]
        HRESULT DataGraphicHidden([out, retval] VARIANT_BOOL* Hidden);
        [id(0x60020055), propput, helpcontext(0x00a42fa4)]
        HRESULT DataGraphicHidden([in] VARIANT_BOOL Hidden);
        [id(0x60020057), propget, helpcontext(0x00a42fb3)]
        HRESULT DataGraphicHidesText([out, retval] VARIANT_BOOL* HideText);
        [id(0x60020057), propput, helpcontext(0x00a42fb3)]
        HRESULT DataGraphicHidesText([in] VARIANT_BOOL HideText);
        [id(0x60020059), propget, helpcontext(0x00a42fb8)]
        HRESULT DataGraphicShowBorder([out, retval] VARIANT_BOOL* ShowBorder);
        [id(0x60020059), propput, helpcontext(0x00a42fb8)]
        HRESULT DataGraphicShowBorder([in] VARIANT_BOOL ShowBorder);
        [id(0x6002005b), propget, helpcontext(0x00a42fbd)]
        HRESULT DataGraphicHorizontalPosition([out, retval] VisGraphicPositionHorizontal* Position);
        [id(0x6002005b), propput, helpcontext(0x00a42fbd)]
        HRESULT DataGraphicHorizontalPosition([in] VisGraphicPositionHorizontal Position);
        [id(0x6002005d), propget, helpcontext(0x00a42fc2)]
        HRESULT DataGraphicVerticalPosition([out, retval] VisGraphicPositionVertical* Position);
        [id(0x6002005d), propput, helpcontext(0x00a42fc2)]
        HRESULT DataGraphicVerticalPosition([in] VisGraphicPositionVertical Position);
        [id(0x6002005f), propget, helpcontext(0x00a42fc7)]
        HRESULT GraphicItems([out, retval] IVGraphicItems** GraphicItems);
        [id(0x60020060), helpcontext(0x00a42fcc)]
        HRESULT DataGraphicDelete();
    };

    [
      odl,
      uuid(000D070D-0000-0000-C000-000000000046),
      helpcontext(0x000027f6),
      hidden,
      dual,
      oleautomation
    ]
    interface IVShapes : IDispatch {
        [id(0x00000003), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00ac9fc2)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpstring("Returns visObjTypeShapes (18)."), helpcontext(0x00aca328)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("The first item in a Shapes collection is item 1. Name treated as locale specific."), helpcontext(0x00aca265)]
        HRESULT Item(
                        [in] VARIANT NameUIDOrIndex, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000001), propget, hidden, helpcontext(0x00aca0b2)]
        HRESULT Count16([out, retval] short* lpi2Ret);
        [id(0x00000004), propget, helpcontext(0x00aca116)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000005), propget, helpcontext(0x00aca099)]
        HRESULT ContainingPage([out, retval] IVPage** lpdispRet);
        [id(0x00000006), propget, helpcontext(0x00aca094)]
        HRESULT ContainingMaster([out, retval] IVMaster** lpdispRet);
        [id(0x00000007), propget, helpcontext(0x00aca0a8)]
        HRESULT ContainingShape([out, retval] IVShape** lpdispRet);
        [id(0x00000008), helpcontext(0x00acab89)]
        HRESULT CenterDrawing();
        [id(0x00000009), propget, helpcontext(0x00aca4f4)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x0000000a), propget, helpcontext(0x00aca148)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x0000000b), propget, helpcontext(0x00aca3a0)]
        HRESULT PersistsEvents([out, retval] short* lpboolRet);
        [id(0x0000000c), propget, hidden, helpcontext(0x00aca26f)]
        HRESULT ItemFromID16(
                        [in] short ObjectID, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000000d), propget, helpcontext(0x00aca0b2)]
        HRESULT Count([out, retval] long* lpi4Ret);
        [id(0x0000000e), propget, helpcontext(0x00aca26f)]
        HRESULT ItemFromID(
                        [in] long ObjectID, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000000f), propget, helpstring("Like Item() but names treated locale independent."), helpcontext(0x00ad37ac)]
        HRESULT ItemU(
                        [in] VARIANT NameUIDOrIndex, 
                        [out, retval] IVShape** lpdispRet);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
    };

    [
      odl,
      uuid(000D070C-0000-0000-C000-000000000046),
      helpcontext(0x000027f1),
      hidden,
      dual,
      oleautomation
    ]
    interface IVShape : IDispatch {
        [id(0x0000002d), hidden, helpcontext(0x00ab25d9)]
        HRESULT VoidGroup();
        [id(0x0000002e), helpcontext(0x00ab24df)]
        HRESULT BringForward();
        [id(0x0000002f), helpcontext(0x00ab24e4)]
        HRESULT BringToFront();
        [id(0x00000030), helpcontext(0x00ab250c)]
        HRESULT ConvertToGroup();
        [id(0x00000031), helpcontext(0x00ab2598)]
        HRESULT FlipHorizontal();
        [id(0x00000032), helpcontext(0x00ab259d)]
        HRESULT FlipVertical();
        [id(0x00000033), helpcontext(0x00ab2660)]
        HRESULT ReverseEnds();
        [id(0x00000034), helpcontext(0x00ab269c)]
        HRESULT SendBackward();
        [id(0x00000035), helpcontext(0x00ab26a1)]
        HRESULT SendToBack();
        [id(0x00000036), helpcontext(0x00ab2665)]
        HRESULT Rotate90();
        [id(0x00000037), helpcontext(0x00ab26f1)]
        HRESULT Ungroup();
        [id(0x0000002c), propget, helpcontext(0x00ab1a76)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000038), propget, helpcontext(0x00abac43)]
        HRESULT Parent([out, retval] IDispatch** lpdispRet);
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00ab1922)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00ab1e54)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x00000015), propget, helpcontext(0x00ab1c2e)]
        HRESULT Master([out, retval] IVMaster** lpdispRet);
        [id(0x00000014), propget, helpcontext(0x00ab1f03)]
        HRESULT Type([out, retval] short* lpi2Ret);
        [id(0x00000003), propget, helpstring("Returns visObjTypeShape (17)."), helpcontext(0x00ab1c88)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x0000000d), propget, helpstring("Returns cell of this shape with given locale specific name."), helpcontext(0x00ab1986)]
        HRESULT Cells(
                        [in] BSTR localeSpecificCellName, 
                        [out, retval] IVCell** lpdispRet);
        [id(0x0000000e), propget, helpcontext(0x00ab1995)]
        HRESULT CellsSRC(
                        [in] short Section, 
                        [in] short Row, 
                        [in] short Column, 
                        [out, retval] IVCell** lpdispRet);
        [id(0x00000005), propget, helpcontext(0x00ab1dfa)]
        HRESULT Shapes([out, retval] IVShapes** lpdispRet);
        [id(0x0000000f), propget, helpcontext(0x00ab1a35)]
        HRESULT Data1([out, retval] BSTR* lpbstrRet);
        [id(0x0000000f), propput, helpcontext(0x00ab1a35)]
        HRESULT Data1([in] BSTR lpbstrRet);
        [id(0x00000010), propget, helpcontext(0x00ab1a3a)]
        HRESULT Data2([out, retval] BSTR* lpbstrRet);
        [id(0x00000010), propput, helpcontext(0x00ab1a3a)]
        HRESULT Data2([in] BSTR lpbstrRet);
        [id(0x00000011), propget, helpcontext(0x00ab1a3f)]
        HRESULT Data3([out, retval] BSTR* lpbstrRet);
        [id(0x00000011), propput, helpcontext(0x00ab1a3f)]
        HRESULT Data3([in] BSTR lpbstrRet);
        [id(0x00000012), propget, helpcontext(0x00ab1b34)]
        HRESULT Help([out, retval] BSTR* lpbstrRet);
        [id(0x00000012), propput, helpcontext(0x00ab1b34)]
        HRESULT Help([in] BSTR lpbstrRet);
        [id(0x00000004), propget, helpstring("Returns synthetic name of shape (sheet.ID). Locale independent."), helpcontext(0x00ab1c6f)]
        HRESULT NameID([out, retval] BSTR* lpLocaleIndependentName);
        [id(00000000), propget, helpstring("Shape's locale specific name."), helpcontext(0x00ab1c6a)]
        HRESULT Name([out, retval] BSTR* lpLocaleSpecificName);
        [id(00000000), propput, helpstring("Shape's locale specific name."), helpcontext(0x00ab1c6a)]
        HRESULT Name([in] BSTR lpLocaleSpecificName);
        [id(0x00000006), propget, helpcontext(0x00abade7)]
        HRESULT Text([out, retval] BSTR* lpbstrRet);
        [id(0x00000006), propput, helpcontext(0x00abade7)]
        HRESULT Text([in] BSTR lpbstrRet);
        [id(0x00000007), propget, helpcontext(0x00ab19a4)]
        HRESULT CharCount([out, retval] long* lpi4Ret);
        [id(0x00000008), propget, helpcontext(0x00ab199f)]
        HRESULT Characters([out, retval] IVCharacters** lpdispRet);
        [id(0x00000009), hidden, helpcontext(0x00abad3d)]
        HRESULT old_Copy();
        [id(0x0000000a), hidden, helpcontext(0x00ab2520)]
        HRESULT old_Cut();
        [id(0x0000000b), helpcontext(0x00ab2525)]
        HRESULT Delete();
        [id(0x0000000c), hidden, helpcontext(0x00ab2575)]
        HRESULT VoidDuplicate();
        [id(0x00000013), helpcontext(0x00ab256b)]
        HRESULT Drop(
                        [in] IUnknown* ObjectToDrop, 
                        [in] double xPos, 
                        [in] double yPos, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000016), propget, helpcontext(0x00ab1c97)]
        HRESULT OneD([out, retval] short* lpi2Ret);
        [id(0x00000016), propput, helpcontext(0x00ab1c97)]
        HRESULT OneD([in] short lpi2Ret);
        [id(0x00000017), propget, helpcontext(0x00ab1b20)]
        HRESULT GeometryCount([out, retval] short* lpi2Ret);
        [id(0x00000018), propget, helpcontext(0x00ab1da5)]
        HRESULT RowCount(
                        [in] short Section, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000019), helpcontext(0x00ab24bc)]
        HRESULT AddSection(
                        [in] short Section, 
                        [out, retval] short* lpi2Ret);
        [id(0x0000001a), helpcontext(0x00ab252f)]
        HRESULT DeleteSection([in] short Section);
        [id(0x0000001b), helpcontext(0x00ab24b2)]
        HRESULT AddRow(
                        [in] short Section, 
                        [in] short Row, 
                        [in] short RowTag, 
                        [out, retval] short* lpi2Ret);
        [id(0x0000001c), helpcontext(0x00ab252a)]
        HRESULT DeleteRow(
                        [in] short Section, 
                        [in] short Row);
        [id(0x0000001d), propget, helpcontext(0x00ab1db9)]
        HRESULT RowsCellCount(
                        [in] short Section, 
                        [in] short Row, 
                        [out, retval] short* lpi2Ret);
        [id(0x0000001e), propget, helpcontext(0x00ab1dbe)]
        HRESULT RowType(
                        [in] short Section, 
                        [in] short Row, 
                        [out, retval] short* lpi2Ret);
        [id(0x0000001e), propput, helpcontext(0x00ab1dbe)]
        HRESULT RowType(
                        [in] short Section, 
                        [in] short Row, 
                        [in] short lpi2Ret);
        [id(0x0000001f), helpcontext(0x00ab26ab)]
        HRESULT SetCenter(
                        [in] double xPos, 
                        [in] double yPos);
        [id(0x00000020), helpcontext(0x00ab26a6)]
        HRESULT SetBegin(
                        [in] double xPos, 
                        [in] double yPos);
        [id(0x00000021), helpcontext(0x00ab26ba)]
        HRESULT SetEnd(
                        [in] double xPos, 
                        [in] double yPos);
        [id(0x00000022), propget, helpcontext(0x00ab19ea)]
        HRESULT Connects([out, retval] IVConnects** lpdispRet);
        [id(0x00000023), propget, hidden, helpcontext(0x00ab1b7f)]
        HRESULT Index16([out, retval] short* lpi2Ret);
        [id(0x00000024), propget, helpstring("Locale specific name of style applied to this shape."), helpcontext(0x00abadd8)]
        HRESULT Style([out, retval] BSTR* lpLocaleSpecificStyleName);
        [id(0x00000024), propput, helpstring("Locale specific name of style applied to this shape."), helpcontext(0x00abadd8)]
        HRESULT Style([in] BSTR lpLocaleSpecificStyleName);
        [id(0x00000028), propput, helpstring("Locale specific name of style to apply to this shape while keeping local overrides."), helpcontext(0x00ab1e72)]
        HRESULT StyleKeepFmt([in] BSTR rhs);
        [id(0x00000025), propget, helpstring("Locale specific name of line style applied to this shape."), helpcontext(0x00ab1c15)]
        HRESULT LineStyle([out, retval] BSTR* lpLocaleSpecificStyleName);
        [id(0x00000025), propput, helpstring("Locale specific name of line style applied to this shape."), helpcontext(0x00ab1c15)]
        HRESULT LineStyle([in] BSTR lpLocaleSpecificStyleName);
        [id(0x00000029), propput, helpstring("Locale specific name of line style to apply to this shape while keeping local overrides."), helpcontext(0x00ab1c1a)]
        HRESULT LineStyleKeepFmt([in] BSTR rhs);
        [id(0x00000026), propget, helpstring("Locale specific name of fill style applied to this shape."), helpcontext(0x00ab1ad5)]
        HRESULT FillStyle([out, retval] BSTR* lpLocaleSpecificStyleName);
        [id(0x00000026), propput, helpstring("Locale specific name of fill style applied to this shape."), helpcontext(0x00ab1ad5)]
        HRESULT FillStyle([in] BSTR lpLocaleSpecificStyleName);
        [id(0x0000002a), propput, helpstring("Locale specific name of fill style to apply to this shape while keeping local overrides."), helpcontext(0x00ab1ada)]
        HRESULT FillStyleKeepFmt([in] BSTR rhs);
        [id(0x00000027), propget, helpstring("Locale specific name of text style applied to this shape."), helpcontext(0x00ab1ec2)]
        HRESULT TextStyle([out, retval] BSTR* lpLocaleSpecificStyleName);
        [id(0x00000027), propput, helpstring("Locale specific name of text style applied to this shape."), helpcontext(0x00ab1ec2)]
        HRESULT TextStyle([in] BSTR lpLocaleSpecificStyleName);
        [id(0x0000002b), propput, helpstring("Locale specific name of text style to apply to this shape while keeping local overrides."), helpcontext(0x00ab1ec7)]
        HRESULT TextStyleKeepFmt([in] BSTR rhs);
        [id(0x00000039), helpcontext(0x00ab2589)]
        HRESULT Export([in] BSTR FileName);
        [id(0x0000003a), propget, hidden, helpcontext(0x00ab1927)]
        HRESULT old_AreaIU([out, retval] double* lpr8Ret);
        [id(0x0000003b), propget, hidden, helpcontext(0x00ab1c0b)]
        HRESULT old_LengthIU([out, retval] double* lpr8Ret);
        [id(0x0000003c), propget, hidden, helpcontext(0x00aae600)]
        HRESULT GeomExIf(
                        [in] short fFill, 
                        [in] double LineRes, 
                        [out, retval] IUnknown** lpunkRet);
        [id(0x0000003d), propget, helpcontext(0x00ab1f17)]
        HRESULT UniqueID(
                        [in] short fUniqueID, 
                        [out, retval] BSTR* lpbstrRet);
        [id(0x0000003e), propget, helpcontext(0x00ab19f9)]
        HRESULT ContainingPage([out, retval] IVPage** lpdispRet);
        [id(0x0000003f), propget, helpcontext(0x00ab19f4)]
        HRESULT ContainingMaster([out, retval] IVMaster** lpdispRet);
        [id(0x00000040), propget, helpcontext(0x00ab1a08)]
        HRESULT ContainingShape([out, retval] IVShape** lpdispRet);
        [id(0x00000041), propget, helpcontext(0x00ab1de1)]
        HRESULT SectionExists(
                        [in] short Section, 
                        [in] short fExistsLocally, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000042), propget, helpcontext(0x00ab1daa)]
        HRESULT RowExists(
                        [in] short Section, 
                        [in] short Row, 
                        [in] short fExistsLocally, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000043), propget, helpstring("Returns whether this shape has cell with given locale specific name."), helpcontext(0x00ab1981)]
        HRESULT CellExists(
                        [in] BSTR localeSpecificCellName, 
                        [in] short fExistsLocally, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000044), propget, helpcontext(0x00ab199a)]
        HRESULT CellsSRCExists(
                        [in] short Section, 
                        [in] short Row, 
                        [in] short Column, 
                        [in] short fExistsLocally, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000045), propget, helpcontext(0x00ab1bf7)]
        HRESULT LayerCount([out, retval] short* lpi2Ret);
        [id(0x00000046), propget, helpcontext(0x00ab1bf2)]
        HRESULT Layer(
                        [in] short Index, 
                        [out, retval] IVLayer** lpdispRet);
        [id(0x00000047), helpcontext(0x00ab24ad)]
        HRESULT AddNamedRow(
                        [in] short Section, 
                        [in] BSTR RowName, 
                        [in] short RowTag, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000048), helpcontext(0x00ab24b7)]
        HRESULT AddRows(
                        [in] short Section, 
                        [in] short Row, 
                        [in] short RowTag, 
                        [in] short RowCount, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000049), propget, helpcontext(0x00ab1aa8)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x0000004a), propget, helpcontext(0x00ab1d00)]
        HRESULT PersistsEvents([out, retval] short* lpboolRet);
        [id(0x0000004b), helpcontext(0x00ab2548)]
        HRESULT DrawLine(
                        [in] double xBegin, 
                        [in] double yBegin, 
                        [in] double xEnd, 
                        [in] double yEnd, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000004c), helpcontext(0x00ab255c)]
        HRESULT DrawRectangle(
                        [in] double x1, 
                        [in] double y1, 
                        [in] double x2, 
                        [in] double y2, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000004d), helpcontext(0x00ab2552)]
        HRESULT DrawOval(
                        [in] double x1, 
                        [in] double y1, 
                        [in] double x2, 
                        [in] double y2, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000004e), helpcontext(0x00ab2566)]
        HRESULT DrawSpline(
                        [in] SAFEARRAY(double)* xyArray, 
                        [in] double Tolerance, 
                        [in] short Flags, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000004f), helpcontext(0x00ab2543)]
        HRESULT DrawBezier(
                        [in] SAFEARRAY(double)* xyArray, 
                        [in] short degree, 
                        [in] short Flags, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000050), helpcontext(0x00ab2557)]
        HRESULT DrawPolyline(
                        [in] SAFEARRAY(double)* xyArray, 
                        [in] short Flags, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000051), helpcontext(0x00ab2593)]
        HRESULT FitCurve(
                        [in] double Tolerance, 
                        [in] short Flags);
        [id(0x00000052), helpcontext(0x00ab25e3)]
        HRESULT Import(
                        [in] BSTR FileName, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000053), helpcontext(0x00ab24e9)]
        HRESULT CenterDrawing();
        [id(0x00000054), helpcontext(0x00ab25ed)]
        HRESULT InsertFromFile(
                        [in] BSTR FileName, 
                        [in] short Flags, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000055), helpcontext(0x00ab25f2)]
        HRESULT InsertObject(
                        [in] BSTR ClassOrProgID, 
                        [in] short Flags, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000056), propget, helpcontext(0x00ab19b8)]
        HRESULT ClassID([out, retval] BSTR* lpbstrRet);
        [id(0x00000057), propget, helpcontext(0x00ab1af3)]
        HRESULT ForeignType([out, retval] short* lpi2Ret);
        [id(0x00000058), propget, helpcontext(0x00ab1c7e)]
        HRESULT Object([out, retval] IDispatch** lpdispRet);
        [id(0x00000059), helpcontext(0x00ab2610)]
        HRESULT OpenDrawWindow([out, retval] IVWindow** lpdispRet);
        [id(0x0000005a), helpcontext(0x00ab261f)]
        HRESULT OpenSheetWindow([out, retval] IVWindow** lpdispRet);
        [id(0x0000005b), propget, hidden, helpcontext(0x00ab1b6b)]
        HRESULT ID16([out, retval] short* lpi2Ret);
        [id(0x0000005c), helpstring("Creates many shapes in this shape (if it is group). Names, if supplied, are considered locale specific."), helpcontext(0x00ab2570)]
        HRESULT DropMany(
                        [in] SAFEARRAY(VARIANT)* ObjectsToInstance, 
                        [in] SAFEARRAY(double)* xyArray, 
                        [out] SAFEARRAY(short)* IDArray, 
                        [out, retval] short* lpi2Ret);
        [id(0x0000005d), helpstring("Returns cell formulas in locale specific syntax."), helpcontext(0x00ab25b6)]
        HRESULT GetFormulas(
                        [in] SAFEARRAY(short)* SRCStream, 
                        [out] SAFEARRAY(VARIANT)* formulaArray);
        [id(0x0000005e), helpcontext(0x00ab25c0)]
        HRESULT GetResults(
                        [in] SAFEARRAY(short)* SRCStream, 
                        [in] short Flags, 
                        [in] SAFEARRAY(VARIANT)* UnitsNamesOrCodes, 
                        [out] SAFEARRAY(VARIANT)* resultArray);
        [id(0x0000005f), helpcontext(0x00ab26bf)]
        HRESULT SetFormulas(
                        [in] SAFEARRAY(short)* SRCStream, 
                        [in] SAFEARRAY(VARIANT)* formulaArray, 
                        [in] short Flags, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000060), helpcontext(0x00ab26c4)]
        HRESULT SetResults(
                        [in] SAFEARRAY(short)* SRCStream, 
                        [in] SAFEARRAY(VARIANT)* UnitsNamesOrCodes, 
                        [in] SAFEARRAY(VARIANT)* resultArray, 
                        [in] short Flags, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000061), propget, helpcontext(0x00ab1b0c)]
        HRESULT FromConnects([out, retval] IVConnects** lpdispRet);
        [id(0x00000062), helpcontext(0x00ab2601)]
        HRESULT Layout();
        [id(0x00000063), helpcontext(0x00ab24da)]
        HRESULT BoundingBox(
                        [in] short Flags, 
                        [out] double* lpr8Left, 
                        [out] double* lpr8Bottom, 
                        [out] double* lpr8Right, 
                        [out] double* lpr8Top);
        [id(0x00000064), helpcontext(0x00ab1b4d)]
        HRESULT HitTest(
                        [in] double xPos, 
                        [in] double yPos, 
                        [in] double Tolerance, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000065), propget, hidden, helpcontext(0x00abadb5)]
        HRESULT Hyperlink([out, retval] IVHyperlink** lpdispRet);
        [id(0x00000066), propget, helpcontext(0x00ab1d50)]
        HRESULT ProgID([out, retval] BSTR* lpbstrRet);
        [id(0x00000067), propget, helpcontext(0x00ab1c83)]
        HRESULT ObjectIsInherited([out, retval] short* lpboolRet);
        [id(0x00000068), propget, helpcontext(0x00ab1ce7)]
        HRESULT Paths([out, retval] IVPaths** lpdispRet);
        [id(0x00000069), propget, helpcontext(0x00ab1cec)]
        HRESULT PathsLocal([out, retval] IVPaths** lpdispRet);
        [id(0x0000006a), helpcontext(0x00ab24a8)]
        HRESULT AddHyperlink([out, retval] IVHyperlink** lpdispRet);
        [id(0x0000006b), propget, helpcontext(0x00ab1b6b)]
        HRESULT ID([out, retval] long* lpi4Ret);
        [id(0x0000006c), propget, helpcontext(0x00ab1b7f)]
        HRESULT Index([out, retval] long* lpi4Ret);
        [id(0x0000006d), propget, helpcontext(0x00ab1ddc)]
        HRESULT Section(
                        [in] short Index, 
                        [out, retval] IVSection** lpdispRet);
        [id(0x0000006e), propget, helpcontext(0x00ab1b5c)]
        HRESULT Hyperlinks([out, retval] IVHyperlinks** lpdispRet);
        [id(0x0000006f), propget, helpcontext(0x00ab1e40)]
        HRESULT SpatialRelation(
                        [in] IVShape* OtherShape, 
                        [in] double Tolerance, 
                        [in] short Flags, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000070), propget, helpcontext(0x00ab1a6c)]
        HRESULT DistanceFrom(
                        [in] IVShape* OtherShape, 
                        [in] short Flags, 
                        [out, retval] double* lpr8Ret);
        [id(0x00000071), propget, helpcontext(0x00ab1a71)]
        HRESULT DistanceFromPoint(
                        [in] double x, 
                        [in] double y, 
                        [in] short Flags, 
                        [out, optional] VARIANT* pvPathIndex, 
                        [out, optional] VARIANT* pvCurveIndex, 
                        [out, optional] VARIANT* pvt, 
                        [out, retval] double* lpr8Ret);
        [id(0x00000072), propget, helpcontext(0x00ab1e3b)]
        HRESULT SpatialNeighbors(
                        [in] short Relation, 
                        [in] double Tolerance, 
                        [in] short Flags, 
                        [in, optional] VARIANT ResultRoot, 
                        [out, retval] IVSelection** lpdispRet);
        [id(0x00000073), propget, helpcontext(0x00ab1e45)]
        HRESULT SpatialSearch(
                        [in] double x, 
                        [in] double y, 
                        [in] short Relation, 
                        [in] double Tolerance, 
                        [in] short Flags, 
                        [out, retval] IVSelection** lpdispRet);
        [id(0x00000074), helpcontext(0x00ab26dd)]
        HRESULT TransformXYTo(
                        [in] IVShape* OtherShape, 
                        [in] double x, 
                        [in] double y, 
                        [out] double* xprime, 
                        [out] double* yprime);
        [id(0x00000075), helpcontext(0x00ab26d8)]
        HRESULT TransformXYFrom(
                        [in] IVShape* OtherShape, 
                        [in] double x, 
                        [in] double y, 
                        [out] double* xprime, 
                        [out] double* yprime);
        [id(0x00000076), helpcontext(0x00ab270a)]
        HRESULT XYToPage(
                        [in] double x, 
                        [in] double y, 
                        [out] double* xprime, 
                        [out] double* yprime);
        [id(0x00000077), helpcontext(0x00ab2705)]
        HRESULT XYFromPage(
                        [in] double x, 
                        [in] double y, 
                        [out] double* xprime, 
                        [out] double* yprime);
        [id(0x00000078), helpcontext(0x00ab26fb)]
        HRESULT UpdateAlignmentBox();
        [id(0x00000079), propget, helpstring("Returns cell of this shape with given locale independent name."), helpcontext(0x00abb0f3)]
        HRESULT CellsU(
                        [in] BSTR localeIndependentCellName, 
                        [out, retval] IVCell** lpdispRet);
        [id(0x0000007a), propget, helpstring("Shape's locale independent name."), helpcontext(0x00abb111)]
        HRESULT NameU([out, retval] BSTR* lpLocaleIndependentName);
        [id(0x0000007a), propput, helpstring("Shape's locale independent name."), helpcontext(0x00abb111)]
        HRESULT NameU([in] BSTR lpLocaleIndependentName);
        [id(0x0000007b), propget, helpstring("Returns whether this shape has cell with given locale independent name."), helpcontext(0x00abb0e9)]
        HRESULT CellExistsU(
                        [in] BSTR localeIndependentCellName, 
                        [in] short fExistsLocally, 
                        [out, retval] short* lpi2Ret);
        [id(0x0000007c), helpstring("Creates many shapes in this shape (if it is group). Names, if supplied, are considered locale independent."), helpcontext(0x00abb0da)]
        HRESULT DropManyU(
                        [in] SAFEARRAY(VARIANT)* ObjectsToInstance, 
                        [in] SAFEARRAY(double)* xyArray, 
                        [out] SAFEARRAY(short)* IDArray, 
                        [out, retval] short* lpi2Ret);
        [id(0x0000007d), helpstring("Returns cell formulas in locale independent syntax."), helpcontext(0x00abb0df)]
        HRESULT GetFormulasU(
                        [in] SAFEARRAY(short)* SRCStream, 
                        [out] SAFEARRAY(VARIANT)* formulaArray);
        [id(0x0000007e), helpcontext(0x00ab254d)]
        HRESULT DrawNURBS(
                        [in] short degree, 
                        [in] short Flags, 
                        [in] SAFEARRAY(double)* xyArray, 
                        [in] SAFEARRAY(double)* knots, 
                        [in, optional] VARIANT weights, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000007f), propget, helpstring("Returns index of row of cell with given locale specific name."), helpcontext(0x00ab1990)]
        HRESULT CellsRowIndex(
                        [in] BSTR localeSpecificCellName, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000080), propget, helpstring("Returns index of row of cell with given locale independent name."), helpcontext(0x00abb0ee)]
        HRESULT CellsRowIndexU(
                        [in] BSTR localeIndependentCellName, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000081), propget, helpcontext(0x00ab1f58)]
        HRESULT IsOpenForTextEdit([out, retval] VARIANT_BOOL* pbOpenForTextEdit);
        [id(0x6002008f), propget, helpstring("If shape is part of a master instance, returns the top level shape of the instance. Otherwise, returns Nothing."), helpcontext(0x00abac89)]
        HRESULT RootShape([out, retval] IVShape** ppRootShape);
        [id(0x60020090), propget, helpstring("If shape is part of a master instance, returns the shape in the master from which this one inherits. Otherwise, returns Nothing."), helpcontext(0x00abac16)]
        HRESULT MasterShape([out, retval] IVShape** ppMasterShape);
        [id(0x60020091), propget, helpcontext(0x00abac4d)]
        HRESULT Picture([out, retval] IPictureDisp** ppPictureDisp);
        [id(0x60020092), helpstring("Returns the created group shape"), helpcontext(0x00ab25d9)]
        HRESULT Group([out, retval] IVShape** ppShape);
        [id(0x60020093), helpstring("Returns the duplicated shape"), helpcontext(0x00ab2575)]
        HRESULT Duplicate([out, retval] IVShape** ppShape);
        [id(0x60020094), helpstring("Performs end point and glue swapping on 1D shapes"), helpcontext(0x00abaccf)]
        HRESULT SwapEnds();
        [id(0x00000038), propput, helpcontext(0x00abac43)]
        HRESULT Parent([in] IDispatch* lpdispRet);
        [id(0x60020096), propget, helpstring("If Type = visTypeForeignObject, then this data will be the metafile, bitmap, or OLE data for the shape."), helpcontext(0x00ababa8)]
        HRESULT ForeignData([out, retval] SAFEARRAY(unsigned char)* pData);
        [id(0x60020097), helpcontext(0x00abad3d)]
        HRESULT Copy([in, optional] VARIANT Flags);
        [id(0x60020098), helpcontext(0x00ab2520)]
        HRESULT Cut([in, optional] VARIANT Flags);
        [id(0x60020099), helpcontext(0x00ab262e)]
        HRESULT Paste([in, optional] VARIANT Flags);
        [id(0x6002009a), helpcontext(0x00abad4c)]
        HRESULT PasteSpecial(
                        [in] long Format, 
                        [in, optional] VARIANT Link, 
                        [in, optional] VARIANT DisplayAsIcon);
        [id(0x6002009b), helpcontext(0x00abaee6)]
        HRESULT CreateSelection(
                        [in] VisSelectionTypes SelType, 
                        [in, optional, defaultvalue(256)] VisSelectMode IterationMode, 
                        [in, optional] VARIANT Data, 
                        [out, retval] IVSelection** ppSelection);
        [id(0x6002009c), propget, helpcontext(0x00abaff9)]
        HRESULT Language([out, retval] long* lpLangID);
        [id(0x6002009c), propput, helpcontext(0x00abaff9)]
        HRESULT Language([in] long lpLangID);
        [id(0x6002009e), helpcontext(0x00abae91)]
        HRESULT Offset([in] double Distance);
        [id(0x6002009f), helpcontext(0x00ab24a3)]
        HRESULT AddGuide(
                        [in] short Type, 
                        [in] double xPos, 
                        [in] double yPos, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x600200a0), propget, helpcontext(0x00ab1927)]
        HRESULT AreaIU(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL fIncludeSubShapes, 
                        [out, retval] double* lpr8Ret);
        [id(0x600200a1), propget, helpcontext(0x00ab1c0b)]
        HRESULT LengthIU(
                        [in, optional, defaultvalue(0)] VARIANT_BOOL fIncludeSubShapes, 
                        [out, retval] double* lpr8Ret);
        [id(0x600200a2), helpcontext(0x00abaed7)]
        HRESULT DrawArcByThreePoints(
                        [in] double xBegin, 
                        [in] double yBegin, 
                        [in] double xEnd, 
                        [in] double yEnd, 
                        [in] double xControl, 
                        [in] double yControl, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x600200a3), helpcontext(0x00abaeb9)]
        HRESULT DrawQuarterArc(
                        [in] double xBegin, 
                        [in] double yBegin, 
                        [in] double xEnd, 
                        [in] double yEnd, 
                        [in] VisArcSweepFlags SweepFlag, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x600200a4), helpcontext(0x00abb12f)]
        HRESULT DrawCircularArc(
                        [in] double xCenter, 
                        [in] double yCenter, 
                        [in] double Radius, 
                        [in, optional, defaultvalue(0)] double StartAngle, 
                        [in, optional, defaultvalue(3,14159274101257)] double EndAngle, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x600200a5), propget, helpcontext(0x00abd0e7)]
        HRESULT ContainingPageID([out, retval] long* lpi4Ret);
        [id(0x600200a6), propget, helpcontext(0x00abd0e2)]
        HRESULT ContainingMasterID([out, retval] long* lpi4Ret);
        [id(0x600200a7), helpcontext(0x00abd11e)]
        HRESULT LinkToData(
                        [in] long DataRecordsetID, 
                        [in] long RowID, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL ApplyDataGraphicAfterLink);
        [id(0x600200a8), helpcontext(0x00abd123)]
        HRESULT BreakLinkToData([in] long DataRecordsetID);
        [id(0x600200a9), helpcontext(0x00abd137)]
        HRESULT GetLinkedDataRow(
                        [in] long DataRecordsetID, 
                        [out, retval] long* DataRowID);
        [id(0x600200aa), helpcontext(0x00abd13c)]
        HRESULT GetLinkedDataRecordsetIDs([out] SAFEARRAY(long)* DataRecordsetIDs);
        [id(0x600200ab), helpcontext(0x00abd141)]
        HRESULT GetCustomPropertiesLinkedToData(
                        [in] long DataRecordsetID, 
                        [out] SAFEARRAY(long)* CustomPropertyIndices);
        [id(0x600200ac), helpcontext(0x00abd146)]
        HRESULT IsCustomPropertyLinked(
                        [in] long DataRecordsetID, 
                        [in] long CustomPropertyIndex, 
                        [out, retval] VARIANT_BOOL* Status);
        [id(0x600200ad), helpcontext(0x00abd14b)]
        HRESULT GetCustomPropertyLinkedColumn(
                        [in] long DataRecordsetID, 
                        [in] long CustomPropertyIndex, 
                        [out, retval] BSTR* ColumnName);
        [id(0x600200ae), helpcontext(0x00abd150)]
        HRESULT AutoConnect(
                        [in] IVShape* ToShape, 
                        [in] VisAutoConnectDir PlacementDir, 
                        [in, optional, defaultvalue(<unprintable IUnknown*>)] IUnknown* Connector);
        [id(0x600200af), propget, helpcontext(0x00abd12d)]
        HRESULT DataGraphic([out, retval] IVMaster** DataGraphic);
        [id(0x600200af), propput, helpcontext(0x00abd12d)]
        HRESULT DataGraphic([in] IVMaster* DataGraphic);
        [id(0x600200b1), propget, helpcontext(0x00ab24a8)]
        HRESULT IsDataGraphicCallout([out, retval] VARIANT_BOOL* pbDataGraphicCallout);
    };

    [
      odl,
      uuid(000D0701-0000-0000-C000-000000000046),
      helpcontext(0x0000273d),
      hidden,
      dual,
      oleautomation
    ]
    interface IVCell : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x009a5042)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpstring("Returns visObjTypeCell (4)."), helpcontext(0x009a53a8)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000003), propget, helpcontext(0x009a51b9)]
        HRESULT Error([out, retval] short* lpi2Ret);
        [id(0x00000004), propget, helpstring("Cell's formula in locale specific syntax."), helpcontext(0x009a5218)]
        HRESULT Formula([out, retval] BSTR* lpbstrRet);
        [id(0x00000004), propput, helpstring("Cell's formula in locale specific syntax."), helpcontext(0x009a5218)]
        HRESULT Formula([in] BSTR lpbstrRet);
        [id(0x00000005), propput, helpstring("Sets cell's formula overriding guard. Parsed against locale specific syntax."), helpcontext(0x009a521d)]
        HRESULT FormulaForce([in] BSTR rhs);
        [id(0x00000006), helpcontext(0x009a5cef)]
        HRESULT GlueTo([in] IVCell* CellObject);
        [id(0x00000007), helpcontext(0x009a5cf4)]
        HRESULT GlueToPos(
                        [in] IVShape* SheetObject, 
                        [in] double xPercent, 
                        [in] double yPercent);
        [id(0x00000008), propget, helpcontext(0x009a5493)]
        HRESULT Result(
                        [in] VARIANT UnitsNameOrCode, 
                        [out, retval] double* lpr8Ret);
        [id(0x00000008), propput, helpcontext(0x009a5493)]
        HRESULT Result(
                        [in] VARIANT UnitsNameOrCode, 
                        [in] double lpr8Ret);
        [id(0x00000009), propput, helpcontext(0x009a5498)]
        HRESULT ResultForce(
                        [in] VARIANT UnitsNameOrCode, 
                        [in] double rhs);
        [id(00000000), propget, helpcontext(0x009a54ac)]
        HRESULT ResultIU([out, retval] double* lpr8Ret);
        [id(00000000), propput, helpcontext(0x009a54ac)]
        HRESULT ResultIU([in] double lpr8Ret);
        [id(0x0000000a), propput, helpcontext(0x009a54b1)]
        HRESULT ResultIUForce([in] double rhs);
        [id(0x0000000b), propget, helpcontext(0x009a5574)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x0000000c), propget, helpcontext(0x009a563c)]
        HRESULT Units([out, retval] short* lpi2Ret);
        [id(0x0000000d), propget, helpstring("Cell's name in locale independent syntax."), helpcontext(0x009a538a)]
        HRESULT Name([out, retval] BSTR* lpLocaleIndependentName);
        [id(0x0000000e), propget, helpstring("Cell's name in locale specific syntax."), helpcontext(0x009a5344)]
        HRESULT LocalName([out, retval] BSTR* lpLocaleSpecificName);
        [id(0x0000000f), propput, helpstring("Name of cell's row in locale specific syntax."), helpcontext(0x009a54d4)]
        HRESULT RowName([in] BSTR lpbstrRet);
        [id(0x00000010), propget, helpcontext(0x009a5196)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000011), propget, helpcontext(0x009a5510)]
        HRESULT Shape([out, retval] IVShape** lpdispRet);
        [id(0x00000012), propget, helpcontext(0x009ae4e9)]
        HRESULT Style([out, retval] IVStyle** lpdispRet);
        [id(0x00000013), propget, helpcontext(0x009ae4e4)]
        HRESULT Section([out, retval] short* lpi2Ret);
        [id(0x00000014), propget, helpcontext(0x009a54c0)]
        HRESULT Row([out, retval] short* lpi2Ret);
        [id(0x00000015), propget, helpcontext(0x009a50fb)]
        HRESULT Column([out, retval] short* lpi2Ret);
        [id(0x00000016), propget, helpcontext(0x009a52b3)]
        HRESULT IsConstant([out, retval] short* lpi2Ret);
        [id(0x00000017), propget, helpcontext(0x009a52d1)]
        HRESULT IsInherited([out, retval] short* lpi2Ret);
        [id(0x00000018), propget, helpcontext(0x009a54a7)]
        HRESULT ResultInt(
                        [in] VARIANT UnitsNameOrCode, 
                        [in] short fRound, 
                        [out, retval] long* lpi4Ret);
        [id(0x000009c3), propput, helpcontext(0x009a549d)]
        HRESULT ResultFromInt(
                        [in] VARIANT UnitsNameOrCode, 
                        [in] long rhs);
        [id(0x00000019), propput, helpcontext(0x009a54a2)]
        HRESULT ResultFromIntForce(
                        [in] VARIANT UnitsNameOrCode, 
                        [in] long rhs);
        [id(0x0000001a), propget, helpcontext(0x009a54b6)]
        HRESULT ResultStr(
                        [in] VARIANT UnitsNameOrCode, 
                        [out, retval] BSTR* lpbstrRet);
        [id(0x0000001b), helpcontext(0x009a5e02)]
        HRESULT Trigger();
        [id(0x0000000f), propget, helpstring("Name of cell's row in locale specific syntax."), helpcontext(0x009a54d4)]
        HRESULT RowName([out, retval] BSTR* lpbstrRet);
        [id(0x0000001c), propget, helpcontext(0x009a51c8)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x0000001d), propget, helpcontext(0x009a5420)]
        HRESULT PersistsEvents([out, retval] short* lpboolRet);
        [id(0x0000001e), propget, helpcontext(0x009a511e)]
        HRESULT ContainingRow([out, retval] IVRow** lpdispRet);
        [id(0x0000001f), propget, helpstring("Cell's formula in locale independent syntax."), helpcontext(0x009ae827)]
        HRESULT FormulaU([out, retval] BSTR* lpbstrRet);
        [id(0x0000001f), propput, helpstring("Cell's formula in locale independent syntax."), helpcontext(0x009ae827)]
        HRESULT FormulaU([in] BSTR lpbstrRet);
        [id(0x00000020), propput, helpstring("Sets cell's formula overriding guard. Parsed against locale independent syntax."), helpcontext(0x009ae822)]
        HRESULT FormulaForceU([in] BSTR rhs);
        [id(0x00000021), propget, helpstring("Name of cell's row in locale independent syntax."), helpcontext(0x009ae836)]
        HRESULT RowNameU([out, retval] BSTR* lpLocaleIndependentName);
        [id(0x00000021), propput, helpstring("Name of cell's row in locale independent syntax."), helpcontext(0x009ae836)]
        HRESULT RowNameU([in] BSTR lpLocaleIndependentName);
        [id(0x60020029), propget, helpcontext(0x009ae31d)]
        HRESULT InheritedValueSource([out, retval] IVCell** ppCell);
        [id(0x6002002a), propget, helpcontext(0x009ae318)]
        HRESULT InheritedFormulaSource([out, retval] IVCell** ppCell);
        [id(0x6002002b), propget, helpstring("An array of cells that depend on this cell."), helpcontext(0x009ae791)]
        HRESULT Dependents([out, retval] SAFEARRAY(IVCell*)* dependentCellsArray);
        [id(0x6002002c), propget, helpstring("An array of cells that this cell depends on."), helpcontext(0x009ae70a)]
        HRESULT Precedents([out, retval] SAFEARRAY(IVCell*)* precedentCellsArray);
        [id(0x6002002d), propget, helpcontext(0x009ae70f)]
        HRESULT ContainingPageID([out, retval] long* lpi4Ret);
        [id(0x6002002e), propget, helpcontext(0x009ae714)]
        HRESULT ContainingMasterID([out, retval] long* lpi4Ret);
        [id(0x6002002f), propget, helpcontext(0x009b07c1)]
        HRESULT ResultStrU(
                        [in] VARIANT UnitsNameOrCode, 
                        [out, retval] BSTR* lpbstrRet);
    };

    [
      odl,
      uuid(000D070E-0000-0000-C000-000000000046),
      helpcontext(0x0000280f),
      hidden,
      dual,
      oleautomation
    ]
    interface IVStyle : IDispatch {
        [id(0x00000002), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00ae2662)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000003), propget, helpcontext(0x00ae2b94)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x00000001), propget, helpstring("Returns visObjTypeStyle (19)."), helpcontext(0x00ae29c8)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("Style's locale specific name."), helpcontext(0x00ae29aa)]
        HRESULT Name([out, retval] BSTR* localeSpecificCellName);
        [id(00000000), propput, helpstring("Style's locale specific name."), helpcontext(0x00ae29aa)]
        HRESULT Name([in] BSTR localeSpecificCellName);
        [id(0x00000004), propget, hidden, helpcontext(0x00ae28bf)]
        HRESULT Index16([out, retval] short* lpi2Ret);
        [id(0x00000005), propget, helpcontext(0x00ae27b6)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000006), propget, helpstring("Locale specific name of style applied to this shape."), helpcontext(0x00ae268a)]
        HRESULT BasedOn([out, retval] BSTR* lpLocaleSpecificStyleName);
        [id(0x00000006), propput, helpstring("Locale specific name of style applied to this shape."), helpcontext(0x00ae268a)]
        HRESULT BasedOn([in] BSTR lpLocaleSpecificStyleName);
        [id(0x00000007), propget, helpstring("Locale specific name of text style applied to this shape."), helpcontext(0x00ae2bfd)]
        HRESULT TextBasedOn([out, retval] BSTR* lpLocaleSpecificStyleName);
        [id(0x00000007), propput, helpstring("Locale specific name of text style applied to this shape."), helpcontext(0x00ae2bfd)]
        HRESULT TextBasedOn([in] BSTR lpLocaleSpecificStyleName);
        [id(0x00000008), propget, helpstring("Locale specific name of line style applied to this shape."), helpcontext(0x00ae2950)]
        HRESULT LineBasedOn([out, retval] BSTR* lpLocaleSpecificStyleName);
        [id(0x00000008), propput, helpstring("Locale specific name of line style applied to this shape."), helpcontext(0x00ae2950)]
        HRESULT LineBasedOn([in] BSTR lpLocaleSpecificStyleName);
        [id(0x00000009), propget, helpstring("Locale specific name of fill style applied to this shape."), helpcontext(0x00ae2810)]
        HRESULT FillBasedOn([out, retval] BSTR* lpLocaleSpecificStyleName);
        [id(0x00000009), propput, helpstring("Locale specific name of fill style applied to this shape."), helpcontext(0x00ae2810)]
        HRESULT FillBasedOn([in] BSTR lpLocaleSpecificStyleName);
        [id(0x0000000a), propget, helpcontext(0x00ae28ba)]
        HRESULT IncludesText([out, retval] short* lpi2Ret);
        [id(0x0000000a), propput, helpcontext(0x00ae28ba)]
        HRESULT IncludesText([in] short lpi2Ret);
        [id(0x0000000b), propget, helpcontext(0x00ae28b5)]
        HRESULT IncludesLine([out, retval] short* lpi2Ret);
        [id(0x0000000b), propput, helpcontext(0x00ae28b5)]
        HRESULT IncludesLine([in] short lpi2Ret);
        [id(0x0000000c), propget, helpcontext(0x00ae28b0)]
        HRESULT IncludesFill([out, retval] short* lpi2Ret);
        [id(0x0000000c), propput, helpcontext(0x00ae28b0)]
        HRESULT IncludesFill([in] short lpi2Ret);
        [id(0x0000000d), propget, helpstring("Returns cell of this style with given locale specific name."), helpcontext(0x00ae26c6)]
        HRESULT Cells(
                        [in] BSTR localeSpecificCellName, 
                        [out, retval] IVCell** lpdispRet);
        [id(0x0000000e), helpcontext(0x00ae3265)]
        HRESULT Delete();
        [id(0x0000000f), propget, helpcontext(0x00ae27e8)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x00000010), propget, helpcontext(0x00ae2a40)]
        HRESULT PersistsEvents([out, retval] short* lpboolRet);
        [id(0x00000011), propget, hidden, helpcontext(0x00ae28ab)]
        HRESULT ID16([out, retval] short* lpi2Ret);
        [id(0x00000012), helpstring("Returns cell formulas in locale specific syntax."), helpcontext(0x00ae32f6)]
        HRESULT GetFormulas(
                        [in] SAFEARRAY(short)* SRCStream, 
                        [out] SAFEARRAY(VARIANT)* formulaArray);
        [id(0x00000013), helpcontext(0x00ae3300)]
        HRESULT GetResults(
                        [in] SAFEARRAY(short)* SRCStream, 
                        [in] short Flags, 
                        [in] SAFEARRAY(VARIANT)* UnitsNamesOrCodes, 
                        [out] SAFEARRAY(VARIANT)* resultArray);
        [id(0x00000014), helpcontext(0x00ae33ff)]
        HRESULT SetFormulas(
                        [in] SAFEARRAY(short)* SRCStream, 
                        [in] SAFEARRAY(VARIANT)* formulaArray, 
                        [in] short Flags, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000015), helpcontext(0x00ae3404)]
        HRESULT SetResults(
                        [in] SAFEARRAY(short)* SRCStream, 
                        [in] SAFEARRAY(VARIANT)* UnitsNamesOrCodes, 
                        [in] SAFEARRAY(VARIANT)* resultArray, 
                        [in] short Flags, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000016), propget, helpcontext(0x00ae28ab)]
        HRESULT ID([out, retval] long* lpi4Ret);
        [id(0x00000017), propget, helpcontext(0x00ae28bf)]
        HRESULT Index([out, retval] long* lpi4Ret);
        [id(0x00000018), propget, helpcontext(0x00ae2b1c)]
        HRESULT Section(
                        [in] short Index, 
                        [out, retval] IVSection** lpdispRet);
        [id(0x00000019), propget, helpcontext(0x00ae2888)]
        HRESULT Hidden([out, retval] short* lpi2Ret);
        [id(0x00000019), propput, helpcontext(0x00ae2888)]
        HRESULT Hidden([in] short lpi2Ret);
        [id(0x0000001a), propget, helpstring("Style's locale independent name."), helpcontext(0x00aebe51)]
        HRESULT NameU([out, retval] BSTR* lpLocaleIndependentName);
        [id(0x0000001a), propput, helpstring("Style's locale independent name."), helpcontext(0x00aebe51)]
        HRESULT NameU([in] BSTR lpLocaleIndependentName);
        [id(0x0000001b), propget, helpstring("Returns cell of this style with given locale independent name."), helpcontext(0x00aebe33)]
        HRESULT CellsU(
                        [in] BSTR localeIndependentCellName, 
                        [out, retval] IVCell** lpdispRet);
        [id(0x0000001c), propget, helpstring("Returns whether this style has cell with given locale specific name."), helpcontext(0x00ae26c1)]
        HRESULT CellExists(
                        [in] BSTR localeSpecificCellName, 
                        [in] short fExistsLocally, 
                        [out, retval] short* lpi2Ret);
        [id(0x0000001d), propget, helpstring("Returns whether this shape has cell with given locale independent name."), helpcontext(0x00aebe29)]
        HRESULT CellExistsU(
                        [in] BSTR localeIndependentCellName, 
                        [in] short fExistsLocally, 
                        [out, retval] short* lpi2Ret);
        [id(0x0000001e), helpstring("Returns cell formulas in locale independent syntax."), helpcontext(0x00aebe1f)]
        HRESULT GetFormulasU(
                        [in] SAFEARRAY(short)* SRCStream, 
                        [out] SAFEARRAY(VARIANT)* formulaArray);
        [id(0x60020029), propget, helpcontext(0x00ae26d5)]
        HRESULT CellsSRC(
                        [in] short Section, 
                        [in] short Row, 
                        [in] short Column, 
                        [out, retval] IVCell** lpdispRet);
        [id(0x6002002a), propget, helpcontext(0x00ae26da)]
        HRESULT CellsSRCExists(
                        [in] short Section, 
                        [in] short Row, 
                        [in] short Column, 
                        [in] short fExistsLocally, 
                        [out, retval] short* lpi2Ret);
    };

    [
      odl,
      uuid(000D071B-0000-0000-C000-000000000046),
      helpcontext(0x0000276f),
      hidden,
      dual,
      oleautomation
    ]
    interface IVEventList : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00c1fc82)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpstring("Returns visObjTypeEventList (34)."), helpcontext(0x00c1ffe8)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("The first item in an EventList is item 1."), helpcontext(0x00c1ff25)]
        HRESULT Item(
                        [in] short Index, 
                        [out, retval] IVEvent** lpdispRet);
        [id(0x00000003), propget, helpcontext(0x00c1fd72)]
        HRESULT Count([out, retval] short* lpi2Ret);
        [id(0x00000004), helpcontext(0x00c20a79)]
        HRESULT Add(
                        [in] short EventCode, 
                        [in] short Action, 
                        [in] BSTR Target, 
                        [in] BSTR TargetArgs, 
                        [out, retval] IVEvent** lpdispRet);
        [id(0x00000005), helpcontext(0x00c207ea)]
        HRESULT AddAdvise(
                        [in] short EventCode, 
                        [in] VARIANT SinkIUnkOrIDisp, 
                        [in] BSTR IIDSink, 
                        [in] BSTR TargetArgs, 
                        [out, retval] IVEvent** lpdispRet);
        [id(0x00000006), propget, helpcontext(0x00c1ff2f)]
        HRESULT ItemFromID(
                        [in] long ObjectID, 
                        [out, retval] IVEvent** lpdispRet);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
    };

    [
      odl,
      uuid(000D071A-0000-0000-C000-000000000046),
      helpcontext(0x0000276a),
      hidden,
      dual,
      oleautomation
    ]
    interface IVEvent : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00c075e2)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00c07768)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x00000003), propget, helpcontext(0x00c0783f)]
        HRESULT Index([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpcontext(0x00c0775e)]
        HRESULT Event([out, retval] short* lpi2Ret);
        [id(00000000), propput, helpcontext(0x00c0775e)]
        HRESULT Event([in] short lpi2Ret);
        [id(0x00000004), propget, helpcontext(0x00c07592)]
        HRESULT Action([out, retval] short* lpi2Ret);
        [id(0x00000004), propput, helpcontext(0x00c07592)]
        HRESULT Action([in] short lpi2Ret);
        [id(0x00000005), propget, helpcontext(0x00c07b55)]
        HRESULT Target([out, retval] BSTR* lpbstrRet);
        [id(0x00000005), propput, helpcontext(0x00c07b55)]
        HRESULT Target([in] BSTR lpbstrRet);
        [id(0x00000006), propget, helpcontext(0x00c07b5a)]
        HRESULT TargetArgs([out, retval] BSTR* lpbstrRet);
        [id(0x00000006), propput, helpcontext(0x00c07b5a)]
        HRESULT TargetArgs([in] BSTR lpbstrRet);
        [id(0x00000007), helpcontext(0x00c10ab6)]
        HRESULT Trigger([in] BSTR ContextString);
        [id(0x00000008), helpcontext(0x00c081e5)]
        HRESULT Delete();
        [id(0x00000009), propget, helpstring("Returns visObjTypeEvent (33)."), helpcontext(0x00c07948)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x0000000a), propget, helpcontext(0x00c0782b)]
        HRESULT ID([out, retval] long* lpi4Ret);
        [id(0x0000000b), propget, helpcontext(0x00c0774f)]
        HRESULT Enabled([out, retval] short* lpi2Ret);
        [id(0x0000000b), propput, helpcontext(0x00c0774f)]
        HRESULT Enabled([in] short lpi2Ret);
        [id(0x0000000c), propget, helpcontext(0x00c079b6)]
        HRESULT Persistable([out, retval] short* lpi2Ret);
        [id(0x0000000d), propget, helpcontext(0x00c079bb)]
        HRESULT Persistent([out, retval] short* lpi2Ret);
        [id(0x0000000d), propput, helpcontext(0x00c079bb)]
        HRESULT Persistent([in] short lpi2Ret);
        [id(0x60020014), helpcontext(0x00c1086d)]
        HRESULT GetFilterObjects([out, retval] SAFEARRAY(long)* Objects);
        [id(0x60020015), helpcontext(0x00c10953)]
        HRESULT SetFilterObjects([in] SAFEARRAY(long)* Objects);
        [id(0x60020016), helpcontext(0x00c10872)]
        HRESULT GetFilterCommands([out, retval] SAFEARRAY(long)* Commands);
        [id(0x60020017), helpcontext(0x00c1094e)]
        HRESULT SetFilterCommands([in] SAFEARRAY(long)* Commands);
        [id(0x60020018), helpcontext(0x00c10877)]
        HRESULT GetFilterSRC([out, retval] SAFEARRAY(short)* SRCStream);
        [id(0x60020019), helpcontext(0x00c10958)]
        HRESULT SetFilterSRC([in] SAFEARRAY(short)* SRCStream);
        [id(0x6002001a), helpcontext(0x00c12e1f)]
        HRESULT GetFilterActions([out, retval] SAFEARRAY(long)* filterActionStream);
        [id(0x6002001b), helpcontext(0x00c12e24)]
        HRESULT SetFilterActions([in] SAFEARRAY(long)* filterActionStream);
    };

    [
      odl,
      uuid(000D0724-0000-0000-C000-000000000046),
      helpcontext(0x000027e7),
      hidden,
      dual,
      oleautomation
    ]
    interface IVSection : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00efc342)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00efc810)]
        HRESULT Shape([out, retval] IVShape** lpdispRet);
        [id(0x00000003), propget, helpcontext(0x00f057f3)]
        HRESULT Style([out, retval] IVStyle** lpdispRet);
        [id(0x00000004), propget, helpcontext(0x00efc59f)]
        HRESULT Index([out, retval] short* lpi2Ret);
        [id(0x00000005), propget, helpstring("Returns visObjTypeSection (44)."), helpcontext(0x00efc6a8)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000006), propget, helpcontext(0x00efc4c8)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x00000007), propget, helpcontext(0x00efc720)]
        HRESULT PersistsEvents([out, retval] short* lpi2Ret);
        [id(0x00000008), propget, helpcontext(0x00efc874)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x00000009), propget, helpcontext(0x00efc432)]
        HRESULT Count([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpcontext(0x00efc7c0)]
        HRESULT Row(
                        [in] short Index, 
                        [out, retval] IVRow** lpdispRet);
        [id(0x6002000a), propget, helpcontext(0x00f05a0f)]
        HRESULT ContainingPageID([out, retval] long* lpi4Ret);
        [id(0x6002000b), propget, helpcontext(0x00f05a14)]
        HRESULT ContainingMasterID([out, retval] long* lpi4Ret);
    };

    [
      odl,
      uuid(000D0725-0000-0000-C000-000000000046),
      helpcontext(0x000027e2),
      hidden,
      dual,
      oleautomation
    ]
    interface IVRow : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00f149e2)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00f14eb0)]
        HRESULT Shape([out, retval] IVShape** lpdispRet);
        [id(0x00000003), propget, helpcontext(0x00f14f2d)]
        HRESULT Style([out, retval] IVStyle** lpdispRet);
        [id(0x00000004), propget, helpcontext(0x00f14ac3)]
        HRESULT ContainingSection([out, retval] IVSection** lpdispRet);
        [id(0x00000005), propget, helpcontext(0x00f14c3f)]
        HRESULT Index([out, retval] short* lpi2Ret);
        [id(0x00000006), propget, helpstring("Returns visObjTypeRow (45)."), helpcontext(0x00f14d48)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000007), propget, helpcontext(0x00f14b68)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x00000008), propget, helpcontext(0x00f14dc0)]
        HRESULT PersistsEvents([out, retval] short* lpi2Ret);
        [id(0x00000009), propget, helpcontext(0x00f14f14)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x0000000a), propget, helpstring("Row's locale specific name."), helpcontext(0x00f14d2a)]
        HRESULT Name([out, retval] BSTR* lpLocaleSpecificName);
        [id(0x0000000a), propput, helpstring("Row's locale specific name."), helpcontext(0x00f14d2a)]
        HRESULT Name([in] BSTR lpLocaleSpecificName);
        [id(0x0000000b), propget, helpcontext(0x00f14ad2)]
        HRESULT Count([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("The first cell in a row is item 0. Name treated as locale specific."), helpcontext(0x00f14a3c)]
        HRESULT Cell(
                        [in] VARIANT NameOrIndex, 
                        [out, retval] IVCell** lpdispRet);
        [id(0x0000000c), propget, helpstring("Row's locale independent name."), helpcontext(0x00f1e1d1)]
        HRESULT NameU([out, retval] BSTR* lpLocaleIndependentName);
        [id(0x0000000c), propput, helpstring("Row's locale independent name."), helpcontext(0x00f1e1d1)]
        HRESULT NameU([in] BSTR lpLocaleIndependentName);
        [id(0x0000000d), propget, helpstring("The first cell in a row is item 0. Name treated as locale independent."), helpcontext(0x00f1e1b8)]
        HRESULT CellU(
                        [in] VARIANT NameOrIndex, 
                        [out, retval] IVCell** lpdispRet);
        [id(0x0000000e), helpcontext(0x00f157f2)]
        HRESULT GetPolylineData(
                        [in] short Flags, 
                        [out] SAFEARRAY(double)* xyArray);
        [id(0x60020011), propget, helpcontext(0x00f1e0af)]
        HRESULT ContainingPageID([out, retval] long* lpi4Ret);
        [id(0x60020012), propget, helpcontext(0x00f1e0b4)]
        HRESULT ContainingMasterID([out, retval] long* lpi4Ret);
    };

    [
      odl,
      uuid(000D0702-0000-0000-C000-000000000046),
      helpcontext(0x00002742),
      hidden,
      dual,
      oleautomation
    ]
    interface IVCharacters : IDispatch {
        [id(0x00000001), helpstring("Adds custom field. Formula parsed against locale specific syntax."), helpcontext(0x009be259)]
        HRESULT AddCustomField(
                        [in] BSTR Formula, 
                        [in] short Format);
        [id(0x00000002), helpcontext(0x009be25e)]
        HRESULT AddField(
                        [in] short Category, 
                        [in] short Code, 
                        [in] short Format);
        [id(0x00000003), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x009bd6e2)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000004), propget, helpcontext(0x009bd714)]
        HRESULT Begin([out, retval] long* lpi4Ret);
        [id(0x00000004), propput, helpcontext(0x009bd714)]
        HRESULT Begin([in] long lpi4Ret);
        [id(0x00000005), propget, helpcontext(0x009bd764)]
        HRESULT CharCount([out, retval] long* lpi4Ret);
        [id(0x00000015), propput, helpcontext(0x009bd769)]
        HRESULT CharProps(
                        [in] short CellIndex, 
                        [in] short rhs);
        [id(0x00000010), propget, helpcontext(0x009bd76e)]
        HRESULT CharPropsRow(
                        [in] short BiasLorR, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000006), helpcontext(0x009be2d1)]
        HRESULT Copy();
        [id(0x00000007), helpcontext(0x009c6b07)]
        HRESULT Cut();
        [id(0x00000008), propget, helpstring("Returns visObjTypeChars (5)."), helpcontext(0x009bda48)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000009), propget, helpcontext(0x009bd854)]
        HRESULT End([out, retval] long* lpi4Ret);
        [id(0x00000009), propput, helpcontext(0x009bd854)]
        HRESULT End([in] long lpi4Ret);
        [id(0x0000000a), propget, helpcontext(0x009bd87c)]
        HRESULT FieldCategory([out, retval] short* lpi2Ret);
        [id(0x0000000b), propget, helpcontext(0x009bd881)]
        HRESULT FieldCode([out, retval] short* lpi2Ret);
        [id(0x0000000c), propget, helpcontext(0x009bd886)]
        HRESULT FieldFormat([out, retval] short* lpi2Ret);
        [id(0x0000000d), propget, helpstring("Returns field's formula in in locale specific syntax."), helpcontext(0x009bd88b)]
        HRESULT FieldFormula([out, retval] BSTR* lpbstrRet);
        [id(0x0000000e), propget, helpcontext(0x009bd967)]
        HRESULT IsField([out, retval] short* lpi2Ret);
        [id(0x00000016), propput, helpcontext(0x009bda8e)]
        HRESULT ParaProps(
                        [in] short CellIndex, 
                        [in] short rhs);
        [id(0x00000011), propget, helpcontext(0x009bda93)]
        HRESULT ParaPropsRow(
                        [in] short BiasLorR, 
                        [out, retval] short* lpi2Ret);
        [id(0x0000000f), helpcontext(0x009c6ba2)]
        HRESULT Paste();
        [id(0x00000012), propget, helpcontext(0x009bdc50)]
        HRESULT TabPropsRow(
                        [in] short BiasLorR, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000013), propget, helpcontext(0x009bdb83)]
        HRESULT RunBegin(
                        [in] short RunType, 
                        [out, retval] long* lpi4Ret);
        [id(0x00000014), propget, helpcontext(0x009bdb88)]
        HRESULT RunEnd(
                        [in] short RunType, 
                        [out, retval] long* lpi4Ret);
        [id(0x00000017), propget, helpcontext(0x009bdbb0)]
        HRESULT Shape([out, retval] IVShape** lpdispRet);
        [id(0x00000018), propget, helpcontext(0x009bdc14)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x000003e7), propget, hidden, helpstring("Superseded by variant=Characters.Text."), helpcontext(0x009bdc78)]
        HRESULT TextAsString([out, retval] BSTR* lpbstrRet);
        [id(00000000), propput, helpcontext(0x009bdc73)]
        HRESULT Text([in] VARIANT lpvarRet);
        [id(0x00000019), propget, helpcontext(0x009bd836)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x0000001a), propget, helpcontext(0x009bd868)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x0000001b), propget, helpcontext(0x009bdac0)]
        HRESULT PersistsEvents([out, retval] short* lpboolRet);
        [id(00000000), propget, helpcontext(0x009bdc73)]
        HRESULT Text([out, retval] VARIANT* lpvarRet);
        [id(0x0000001c), helpstring("Adds custom field. Formula parsed against locale independent syntax."), helpcontext(0x009c6e95)]
        HRESULT AddCustomFieldU(
                        [in] BSTR Formula, 
                        [in] short Format);
        [id(0x0000001d), propget, helpstring("Returns field's formula in in locale independent syntax."), helpcontext(0x009c6ebd)]
        HRESULT FieldFormulaU([out, retval] BSTR* lpbstrRet);
        [id(0x0000001e), helpcontext(0x009c6ca1)]
        HRESULT Delete();
        [id(0x0000001f), helpcontext(0x009c6cb5)]
        HRESULT AddFieldEx(
                        [in] VisFieldCategories Category, 
                        [in] VisFieldCodes Code, 
                        [in] VisFieldFormats Format, 
                        [in, optional, defaultvalue(0)] long LangID, 
                        [in, optional, defaultvalue(-1)] long CalendarID);
        [id(0x60020024), propget, helpcontext(0x009c6e9a)]
        HRESULT ContainingPageID([out, retval] long* lpi4Ret);
        [id(0x60020025), propget, helpcontext(0x009c6e9f)]
        HRESULT ContainingMasterID([out, retval] long* lpi4Ret);
    };

    [
      odl,
      uuid(000D0704-0000-0000-C000-000000000046),
      helpcontext(0x00002756),
      hidden,
      dual,
      oleautomation
    ]
    interface IVConnects : IDispatch {
        [id(0x00000004), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x009ee422)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x000003e7), propget, hidden, helpcontext(0x009ee6c5)]
        HRESULT Item16(
                        [in] short Index, 
                        [out, retval] IVConnect** lpdispRet);
        [id(0x00000001), propget, hidden, helpcontext(0x009ee512)]
        HRESULT Count16([out, retval] short* lpi2Ret);
        [id(0x00000002), propget, helpcontext(0x009ee616)]
        HRESULT FromSheet([out, retval] IVShape** lpdispRet);
        [id(0x00000003), propget, helpstring("Returns visObjTypeConnects (9)."), helpcontext(0x009ee788)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000005), propget, helpcontext(0x009ee576)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000006), propget, helpcontext(0x009ee954)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x00000007), propget, helpcontext(0x009ee9f9)]
        HRESULT ToSheet([out, retval] IVShape** lpdispRet);
        [id(00000000), propget, helpstring("The first item in a Connects collection is item 1."), helpcontext(0x009ee6c5)]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] IVConnect** lpdispRet);
        [id(0x00000008), propget, helpcontext(0x009ee512)]
        HRESULT Count([out, retval] long* lpi4Ret);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
    };

    [
      odl,
      uuid(000D0703-0000-0000-C000-000000000046),
      helpcontext(0x00002751),
      hidden,
      dual,
      oleautomation
    ]
    interface IVConnect : IDispatch {
        [id(0x00000006), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x009d5d82)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000007), propget, helpcontext(0x009d62b4)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpcontext(0x009d5f76)]
        HRESULT FromSheet([out, retval] IVShape** lpdispRet);
        [id(0x00000001), propget, helpcontext(0x009d6359)]
        HRESULT ToSheet([out, retval] IVShape** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x009d5f67)]
        HRESULT FromCell([out, retval] IVCell** lpdispRet);
        [id(0x00000003), propget, helpcontext(0x009d6331)]
        HRESULT ToCell([out, retval] IVCell** lpdispRet);
        [id(0x00000004), propget, helpcontext(0x009d5f71)]
        HRESULT FromPart([out, retval] short* lpi2Ret);
        [id(0x00000005), propget, helpcontext(0x009d634f)]
        HRESULT ToPart([out, retval] short* lpi2Ret);
        [id(0x00000008), propget, helpstring("Returns visObjTypeConnect (8)."), helpcontext(0x009d60e8)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000009), propget, hidden, helpcontext(0x009d5fdf)]
        HRESULT Index16([out, retval] short* lpi2Ret);
        [id(0x0000000a), propget, helpcontext(0x009d5ed6)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x0000000b), propget, helpcontext(0x009d5fdf)]
        HRESULT Index([out, retval] long* lpi4Ret);
        [id(0x6002000c), propget, helpcontext(0x009df53a)]
        HRESULT ContainingPageID([out, retval] long* lpi4Ret);
        [id(0x6002000d), propget, helpcontext(0x009df53f)]
        HRESULT ContainingMasterID([out, retval] long* lpi4Ret);
    };

    [
      odl,
      uuid(000D0709-0000-0000-C000-000000000046),
      helpcontext(0x000027ce),
      hidden,
      dual,
      oleautomation
    ]
    interface IVPage : IDispatch {
        [id(0x0000000d), propget, helpcontext(0x00a68696)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00a68542)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00a68a74)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x0000000b), propget, helpcontext(0x00a68556)]
        HRESULT Background([out, retval] short* lpi2Ret);
        [id(0x0000000b), propput, helpcontext(0x00a68556)]
        HRESULT Background([in] short lpi2Ret);
        [id(0x0000000a), hidden, helpcontext(0x00a6924e)]
        HRESULT old_Paste();
        [id(0x00000010), hidden, helpcontext(0x00a65220)]
        HRESULT old_PasteSpecial([in] short Format);
        [id(0x00000003), propget, helpstring("Returns visObjTypePage (14)."), helpcontext(0x00a688a8)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000006), helpcontext(0x00a69168)]
        HRESULT DrawLine(
                        [in] double xBegin, 
                        [in] double yBegin, 
                        [in] double xEnd, 
                        [in] double yEnd, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000007), helpcontext(0x00a6917c)]
        HRESULT DrawRectangle(
                        [in] double x1, 
                        [in] double y1, 
                        [in] double x2, 
                        [in] double y2, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000008), helpcontext(0x00a69172)]
        HRESULT DrawOval(
                        [in] double x1, 
                        [in] double y1, 
                        [in] double x2, 
                        [in] double y2, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000004), propget, helpcontext(0x00a6879f)]
        HRESULT Index([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("Page's locale specific name."), helpcontext(0x00a6888a)]
        HRESULT Name([out, retval] BSTR* lpLocaleSpecificName);
        [id(00000000), propput, helpstring("Page's locale specific name."), helpcontext(0x00a6888a)]
        HRESULT Name([in] BSTR lpLocaleSpecificName);
        [id(0x00000005), propget, helpcontext(0x00a68a1a)]
        HRESULT Shapes([out, retval] IVShapes** lpdispRet);
        [id(0x00000009), helpcontext(0x00a6918b)]
        HRESULT Drop(
                        [in] IUnknown* ObjectToDrop, 
                        [in] double xPos, 
                        [in] double yPos, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000000c), helpcontext(0x00a690c3)]
        HRESULT AddGuide(
                        [in] short Type, 
                        [in] double xPos, 
                        [in] double yPos, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000000e), propget, hidden, helpstring("Superseded by variant=Page.BackPage."), helpcontext(0x00a68560)]
        HRESULT BackPageAsObj([out, retval] IVPage** lpdispRet);
        [id(0x000005db), propput, hidden, helpstring("Takes locale specific page name. Superseded by Page.BackPage=variant."), helpcontext(0x00a68565)]
        HRESULT BackPageFromName([in] BSTR rhs);
        [id(0x0000000f), helpcontext(0x00a6925d)]
        HRESULT Print();
        [id(0x00000011), helpcontext(0x00a69203)]
        HRESULT Import(
                        [in] BSTR FileName, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000012), helpcontext(0x00a691a9)]
        HRESULT Export([in] BSTR FileName);
        [id(0x00000013), propget, helpcontext(0x00a6881c)]
        HRESULT Layers([out, retval] IVLayers** lpdispRet);
        [id(0x00000014), propget, helpcontext(0x00a688d0)]
        HRESULT PageSheet([out, retval] IVShape** lpdispRet);
        [id(0x00000015), helpcontext(0x00a71a11)]
        HRESULT Delete([in] short fRenumberPages);
        [id(0x00000016), helpcontext(0x00a69109)]
        HRESULT CenterDrawing();
        [id(0x00000017), propget, helpcontext(0x00a686c8)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x00000018), propget, helpcontext(0x00a68920)]
        HRESULT PersistsEvents([out, retval] short* lpboolRet);
        [id(0x00000019), helpcontext(0x00a69186)]
        HRESULT DrawSpline(
                        [in] SAFEARRAY(double)* xyArray, 
                        [in] double Tolerance, 
                        [in] short Flags, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000001a), helpcontext(0x00a69163)]
        HRESULT DrawBezier(
                        [in] SAFEARRAY(double)* xyArray, 
                        [in] short degree, 
                        [in] short Flags, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000001b), helpcontext(0x00a69177)]
        HRESULT DrawPolyline(
                        [in] SAFEARRAY(double)* xyArray, 
                        [in] short Flags, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000001c), helpcontext(0x00a6920d)]
        HRESULT InsertFromFile(
                        [in] BSTR FileName, 
                        [in] short Flags, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000001d), helpcontext(0x00a69212)]
        HRESULT InsertObject(
                        [in] BSTR ClassOrProgID, 
                        [in] short Flags, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x0000001e), helpcontext(0x00a69230)]
        HRESULT OpenDrawWindow([out, retval] IVWindow** lpdispRet);
        [id(0x0000001f), helpstring("Creates many shapes on this page. Names, if supplied, are considered locale specific."), helpcontext(0x00a69190)]
        HRESULT DropMany(
                        [in] SAFEARRAY(VARIANT)* ObjectsToInstance, 
                        [in] SAFEARRAY(double)* xyArray, 
                        [out] SAFEARRAY(short)* IDArray, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000020), helpstring("Returns cell formulas in locale specific syntax."), helpcontext(0x00a691d6)]
        HRESULT GetFormulas(
                        [in] SAFEARRAY(short)* SID_SRCStream, 
                        [out] SAFEARRAY(VARIANT)* formulaArray);
        [id(0x00000021), helpcontext(0x00a691e0)]
        HRESULT GetResults(
                        [in] SAFEARRAY(short)* SID_SRCStream, 
                        [in] short Flags, 
                        [in] SAFEARRAY(VARIANT)* UnitsNamesOrCodes, 
                        [out] SAFEARRAY(VARIANT)* resultArray);
        [id(0x00000022), helpcontext(0x00a692df)]
        HRESULT SetFormulas(
                        [in] SAFEARRAY(short)* SID_SRCStream, 
                        [in] SAFEARRAY(VARIANT)* formulaArray, 
                        [in] short Flags, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000023), helpcontext(0x00a692e4)]
        HRESULT SetResults(
                        [in] SAFEARRAY(short)* SID_SRCStream, 
                        [in] SAFEARRAY(VARIANT)* UnitsNamesOrCodes, 
                        [in] SAFEARRAY(VARIANT)* resultArray, 
                        [in] short Flags, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000024), propget, helpcontext(0x00a6860a)]
        HRESULT Connects([out, retval] IVConnects** lpdispRet);
        [id(0x00000025), propget, helpstring("Takes locale independent page name, locale specific page name or page object. Returns page object."), helpcontext(0x00a6855b)]
        HRESULT BackPage([out, retval] VARIANT* lpobjRet);
        [id(0x00000025), propput, helpstring("Takes locale independent page name, locale specific page name or page object. Returns page object."), helpcontext(0x00a6855b)]
        HRESULT BackPage([in] VARIANT lpobjRet);
        [id(0x00000026), helpcontext(0x00a69221)]
        HRESULT Layout();
        [id(0x00000027), helpcontext(0x00a690fa)]
        HRESULT BoundingBox(
                        [in] short Flags, 
                        [out] double* lpr8Left, 
                        [out] double* lpr8Bottom, 
                        [out] double* lpr8Right, 
                        [out] double* lpr8Top);
        [id(0x00000028), propget, hidden, helpcontext(0x00a6878b)]
        HRESULT ID16([out, retval] short* lpi2Ret);
        [id(0x00000029), propget, helpcontext(0x00a688ad)]
        HRESULT OLEObjects([out, retval] IVOLEObjects** lpdispRet);
        [id(0x0000002a), propget, helpcontext(0x00a6878b)]
        HRESULT ID([out, retval] long* lpi4Ret);
        [id(0x0000002b), propget, helpcontext(0x00a68a65)]
        HRESULT SpatialSearch(
                        [in] double x, 
                        [in] double y, 
                        [in] short Relation, 
                        [in] double Tolerance, 
                        [in] short Flags, 
                        [out, retval] IVSelection** lpdispRet);
        [id(0x0000002c), propget, helpstring("Page's locale independent name."), helpcontext(0x00a71d31)]
        HRESULT NameU([out, retval] BSTR* lpLocaleIndependentName);
        [id(0x0000002c), propput, helpstring("Page's locale independent name."), helpcontext(0x00a71d31)]
        HRESULT NameU([in] BSTR lpLocaleIndependentName);
        [id(0x0000002d), helpstring("Creates many shapes on this page. Names, if supplied, are considered locale independent."), helpcontext(0x00a71cfa)]
        HRESULT DropManyU(
                        [in] SAFEARRAY(VARIANT)* ObjectsToInstance, 
                        [in] SAFEARRAY(double)* xyArray, 
                        [out] SAFEARRAY(short)* IDArray, 
                        [out, retval] short* lpi2Ret);
        [id(0x0000002e), helpstring("Returns cell formulas in locale independent syntax."), helpcontext(0x00a71cff)]
        HRESULT GetFormulasU(
                        [in] SAFEARRAY(short)* SID_SRCStream, 
                        [out] SAFEARRAY(VARIANT)* formulaArray);
        [id(0x0000002f), helpcontext(0x00a6916d)]
        HRESULT DrawNURBS(
                        [in] short degree, 
                        [in] short Flags, 
                        [in] SAFEARRAY(double)* xyArray, 
                        [in] SAFEARRAY(double)* knots, 
                        [in, optional] VARIANT weights, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x60020035), propget, helpcontext(0x00a7186d)]
        HRESULT Picture([out, retval] IPictureDisp** ppPictureDisp);
        [id(0x00000004), propput, helpcontext(0x00a6879f)]
        HRESULT Index([in] short lpi2Ret);
        [id(0x60020037), propget, helpcontext(0x00a71890)]
        HRESULT PrintTileCount([out, retval] long* pnCount);
        [id(0x60020038), helpcontext(0x00a7188b)]
        HRESULT PrintTile([in] long nTile);
        [id(0x60020039), helpcontext(0x00a718a4)]
        HRESULT ResizeToFitContents();
        [id(0x6002003a), helpcontext(0x00a6924e)]
        HRESULT Paste([in, optional] VARIANT Flags);
        [id(0x6002003b), helpcontext(0x00a7196c)]
        HRESULT PasteSpecial(
                        [in] long Format, 
                        [in, optional] VARIANT Link, 
                        [in, optional] VARIANT DisplayAsIcon);
        [id(0x6002003c), helpcontext(0x00a71b06)]
        HRESULT CreateSelection(
                        [in] VisSelectionTypes SelType, 
                        [in, optional, defaultvalue(256)] VisSelectMode IterationMode, 
                        [in, optional] VARIANT Data, 
                        [out, retval] IVSelection** ppSelection);
        [id(0x6002003d), propget, helpcontext(0x00a71b47)]
        HRESULT Type([out, retval] VisPageTypes* pnPageType);
        [id(0x6002003e), helpcontext(0x00a71af7)]
        HRESULT DrawArcByThreePoints(
                        [in] double xBegin, 
                        [in] double yBegin, 
                        [in] double xEnd, 
                        [in] double yEnd, 
                        [in] double xControl, 
                        [in] double yControl, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x6002003f), helpcontext(0x00a71ad9)]
        HRESULT DrawQuarterArc(
                        [in] double xBegin, 
                        [in] double yBegin, 
                        [in] double xEnd, 
                        [in] double yEnd, 
                        [in] VisArcSweepFlags SweepFlag, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x60020040), helpcontext(0x00a71d4f)]
        HRESULT DrawCircularArc(
                        [in] double xCenter, 
                        [in] double yCenter, 
                        [in] double Radius, 
                        [in, optional, defaultvalue(0)] double StartAngle, 
                        [in, optional, defaultvalue(3,14159274101257)] double EndAngle, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x60020041), propget, helpcontext(0x00a71bf6)]
        HRESULT ReviewerID([out, retval] long* ReviewerID);
        [id(0x60020042), propget, helpcontext(0x00a71c0f)]
        HRESULT OriginalPage([out, retval] IVPage** ppPage);
        [id(0x60020043), helpcontext(0x00a73d11)]
        HRESULT GetShapesLinkedToData(
                        [in] long DataRecordsetID, 
                        [out] SAFEARRAY(long)* ShapeIDs);
        [id(0x60020044), helpcontext(0x00a73d16)]
        HRESULT GetShapesLinkedToDataRow(
                        [in] long DataRecordsetID, 
                        [in] long DataRowID, 
                        [out] SAFEARRAY(long)* ShapeIDs);
        [id(0x60020045), helpcontext(0x00a73d1b)]
        HRESULT LinkShapesToDataRows(
                        [in] long DataRecordsetID, 
                        [in] SAFEARRAY(long)* DataRowIDs, 
                        [in] SAFEARRAY(long)* ShapeIDs, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL ApplyDataGraphicAfterLink);
        [id(0x60020046), helpcontext(0x00a73d20)]
        HRESULT ShapeIDsToUniqueIDs(
                        [in] SAFEARRAY(long)* ShapeIDs, 
                        [in] VisUniqueIDArgs UniqueIDArgs, 
                        [out] SAFEARRAY(BSTR)* GUIDs);
        [id(0x60020047), helpcontext(0x00a73d25)]
        HRESULT UniqueIDsToShapeIDs(
                        [in] SAFEARRAY(BSTR)* GUIDs, 
                        [out] SAFEARRAY(long)* ShapeIDs);
        [id(0x60020048), helpcontext(0x00a73d2a)]
        HRESULT DropLinked(
                        [in] IUnknown* ObjectToDrop, 
                        [in] double x, 
                        [in] double y, 
                        [in] long DataRecordsetID, 
                        [in] long DataRowID, 
                        [in] VARIANT_BOOL ApplyDataGraphicAfterLink, 
                        [out, retval] IVShape** Shape);
        [id(0x60020049), helpstring("Creates many linked shapes on this page. Names, if supplied, are considered locale independent."), helpcontext(0x00a73d2f)]
        HRESULT DropManyLinkedU(
                        [in] SAFEARRAY(VARIANT)* ObjectsToInstance, 
                        [in] SAFEARRAY(double)* XYs, 
                        [in] long DataRecordsetID, 
                        [in] SAFEARRAY(long)* DataRowIDs, 
                        [in] VARIANT_BOOL ApplyDataGraphicAfterLink, 
                        [out] SAFEARRAY(long)* ShapeIDs, 
                        [out, retval] long* Ret);
        [id(0x6002004a), propget, helpcontext(0x00a73d34)]
        HRESULT ThemeColors([out, retval] VARIANT* pVar);
        [id(0x6002004a), propput, helpcontext(0x00a73d34)]
        HRESULT ThemeColors([in] VARIANT pVar);
        [id(0x6002004c), propget, helpcontext(0x00a73d39)]
        HRESULT ThemeEffects([out, retval] VARIANT* pVar);
        [id(0x6002004c), propput, helpcontext(0x00a73d39)]
        HRESULT ThemeEffects([in] VARIANT pVar);
    };

    [
      odl,
      uuid(000D0713-0000-0000-C000-000000000046),
      helpcontext(0x0000278d),
      hidden,
      dual,
      oleautomation
    ]
    interface IVLayers : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00b5c782)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00b5c8d6)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000003), propget, helpcontext(0x00b5cafc)]
        HRESULT Page([out, retval] IVPage** lpdispRet);
        [id(0x00000004), propget, helpcontext(0x00b5ca8e)]
        HRESULT Master([out, retval] IVMaster** lpdispRet);
        [id(0x00000005), propget, helpcontext(0x00b5c872)]
        HRESULT Count([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("The first item in a Layers collection is item 1. Name treated as locale specific."), helpcontext(0x00b5ca25)]
        HRESULT Item(
                        [in] VARIANT NameOrIndex, 
                        [out, retval] IVLayer** lpdispRet);
        [id(0x00000006), helpcontext(0x00b5d583)]
        HRESULT Add(
                        [in] BSTR LayerName, 
                        [out, retval] IVLayer** lpdispRet);
        [id(0x00000007), propget, helpstring("Returns visObjTypeLayers (26)."), helpcontext(0x00b5cae8)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000008), propget, helpcontext(0x00b5ccb4)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x00000009), propget, helpcontext(0x00b5c908)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x0000000a), propget, helpcontext(0x00b5cb60)]
        HRESULT PersistsEvents([out, retval] short* lpboolRet);
        [id(0x0000000b), propget, helpstring("Like Item() but names treated locale independent."), helpcontext(0x00b65f6c)]
        HRESULT ItemU(
                        [in] VARIANT NameOrIndex, 
                        [out, retval] IVLayer** lpdispRet);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
    };

    [
      odl,
      uuid(000D0712-0000-0000-C000-000000000046),
      helpcontext(0x00002788),
      hidden,
      dual,
      oleautomation
    ]
    interface IVLayer : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00b440e2)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00b44236)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000003), propget, helpcontext(0x00b4445c)]
        HRESULT Page([out, retval] IVPage** lpdispRet);
        [id(0x00000004), propget, helpcontext(0x00b443ee)]
        HRESULT Master([out, retval] IVMaster** lpdispRet);
        [id(0x00000005), propget, helpcontext(0x00b4433f)]
        HRESULT Index([out, retval] short* lpi2Ret);
        [id(0x00000006), propget, helpcontext(0x00b44560)]
        HRESULT Row([out, retval] short* lpi2Ret);
        [id(0x00000007), helpcontext(0x00b44ede)]
        HRESULT Add(
                        [in] IVShape* SheetObject, 
                        [in] short fPresMems);
        [id(0x00000008), helpcontext(0x00b44e16)]
        HRESULT Remove(
                        [in] IVShape* SheetObject, 
                        [in] short fPresMems);
        [id(0x00000009), helpcontext(0x00b4d5c0)]
        HRESULT Delete([in] short fDeleteShapes);
        [id(00000000), propget, helpstring("Layer's locale specific name."), helpcontext(0x00b4442a)]
        HRESULT Name([out, retval] BSTR* lpLocaleSpecificName);
        [id(00000000), propput, helpstring("Layer's locale specific name."), helpcontext(0x00b4442a)]
        HRESULT Name([in] BSTR lpLocaleSpecificName);
        [id(0x0000000a), propget, helpcontext(0x00b4414b)]
        HRESULT CellsC(
                        [in] short Column, 
                        [out, retval] IVCell** lpdispRet);
        [id(0x0000000b), propget, helpstring("Returns visObjTypeLayer (25)."), helpcontext(0x00b44448)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x0000000c), propget, helpcontext(0x00b44614)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x0000000d), propget, helpcontext(0x00b44268)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x0000000e), propget, helpcontext(0x00b444c0)]
        HRESULT PersistsEvents([out, retval] short* lpboolRet);
        [id(0x0000000f), propget, helpstring("Layer's locale independent name."), helpcontext(0x00b4d8d1)]
        HRESULT NameU([out, retval] BSTR* lpLocaleIndependentName);
        [id(0x0000000f), propput, helpstring("Layer's locale independent name."), helpcontext(0x00b4d8d1)]
        HRESULT NameU([in] BSTR lpLocaleIndependentName);
    };

    [
      odl,
      uuid(000D0710-0000-0000-C000-000000000046),
      helpcontext(0x00002841),
      hidden,
      dual,
      oleautomation
    ]
    interface IVWindow : IDispatch {
        [id(00000000), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00b133a2)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000001), propget, helpcontext(0x00b138d4)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x00000002), propget, helpstring("Returns visObjTypeWindow (21)."), helpcontext(0x00b13708)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000003), helpcontext(0x00b13f00)]
        HRESULT Activate();
        [id(0x00000004), propget, helpcontext(0x00b13983)]
        HRESULT Type([out, retval] short* lpi2Ret);
        [id(0x00000005), propget, helpcontext(0x00b134f6)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000006), propget, hidden, helpstring("Superseded by variant=Window.Page."), helpcontext(0x00b13721)]
        HRESULT PageAsObj([out, retval] IVPage** lpdispRet);
        [id(0x000002bb), propput, hidden, helpstring("Takes locale specific page name. Superseded by Window.Page=variant."), helpcontext(0x00b13726)]
        HRESULT PageFromName([in] BSTR rhs);
        [id(0x00000007), propget, helpcontext(0x00b139d3)]
        HRESULT Zoom([out, retval] double* lpr8Ret);
        [id(0x00000007), propput, helpcontext(0x00b139d3)]
        HRESULT Zoom([in] double lpr8Ret);
        [id(0x00000008), helpcontext(0x00b13f7d)]
        HRESULT Close();
        [id(0x00000009), helpcontext(0x00b14117)]
        HRESULT SelectAll();
        [id(0x0000000a), helpcontext(0x00b13fb4)]
        HRESULT DeselectAll();
        [id(0x0000000b), propget, helpcontext(0x00b13866)]
        HRESULT Selection([out, retval] IVSelection** lpdispRet);
        [id(0x0000000c), helpcontext(0x00b14112)]
        HRESULT Select(
                        [in] IVShape* SheetObject, 
                        [in] short SelectAction);
        [id(0x0000000d), propget, helpcontext(0x00b135ff)]
        HRESULT Index([out, retval] short* lpi2Ret);
        [id(0x0000000e), hidden, helpcontext(0x00b13fa0)]
        HRESULT Cut();
        [id(0x0000000f), hidden, helpcontext(0x00b13f91)]
        HRESULT Copy();
        [id(0x00000010), hidden, helpcontext(0x00b140ae)]
        HRESULT Paste();
        [id(0x00000011), hidden, helpcontext(0x00b13fa5)]
        HRESULT Delete();
        [id(0x00000012), hidden, helpcontext(0x00b13ff5)]
        HRESULT Duplicate();
        [id(0x00000013), hidden, helpcontext(0x00b14059)]
        HRESULT Group();
        [id(0x00000014), hidden, helpcontext(0x00b14176)]
        HRESULT Union();
        [id(0x00000015), hidden, helpcontext(0x00b13f82)]
        HRESULT Combine();
        [id(0x00000016), hidden, helpcontext(0x00b14031)]
        HRESULT Fragment();
        [id(0x00000017), hidden, helpcontext(0x00b13f46)]
        HRESULT AddToGroup();
        [id(0x00000018), hidden, helpcontext(0x00b140db)]
        HRESULT RemoveFromGroup();
        [id(0x00000019), propget, helpcontext(0x00b13906)]
        HRESULT SubType([out, retval] short* lpi2Ret);
        [id(0x0000001a), hidden, helpcontext(0x00b14077)]
        HRESULT Intersect();
        [id(0x0000001b), hidden, helpcontext(0x00b14153)]
        HRESULT Subtract();
        [id(0x0000001c), propget, helpcontext(0x00b13528)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x0000001d), propget, helpcontext(0x00b13780)]
        HRESULT PersistsEvents([out, retval] short* lpboolRet);
        [id(0x0000001e), propget, hidden, helpcontext(0x00b139c4)]
        HRESULT WindowHandle([out, retval] short* lpi2Ret);
        [id(0x0000001f), propget, helpcontext(0x00b139c4)]
        HRESULT WindowHandle32([out, retval] long* lpi4Ret);
        [id(0x00000020), hidden, helpcontext(0x00b14167)]
        HRESULT Trim();
        [id(0x00000021), hidden, helpcontext(0x00b1407c)]
        HRESULT Join();
        [id(0x00000022), propget, helpcontext(0x00b138a7)]
        HRESULT ShowRulers([out, retval] short* lpi2Ret);
        [id(0x00000022), propput, helpcontext(0x00b138a7)]
        HRESULT ShowRulers([in] short lpi2Ret);
        [id(0x00000023), propget, helpcontext(0x00b1388e)]
        HRESULT ShowGrid([out, retval] short* lpi2Ret);
        [id(0x00000023), propput, helpcontext(0x00b1388e)]
        HRESULT ShowGrid([in] short lpi2Ret);
        [id(0x00000024), propget, helpcontext(0x00b13893)]
        HRESULT ShowGuides([out, retval] short* lpi2Ret);
        [id(0x00000024), propput, helpcontext(0x00b13893)]
        HRESULT ShowGuides([in] short lpi2Ret);
        [id(0x00000025), propget, helpcontext(0x00b13889)]
        HRESULT ShowConnectPoints([out, retval] short* lpi2Ret);
        [id(0x00000025), propput, helpcontext(0x00b13889)]
        HRESULT ShowConnectPoints([in] short lpi2Ret);
        [id(0x00000026), propget, helpcontext(0x00b1389d)]
        HRESULT ShowPageBreaks([out, retval] short* lpi2Ret);
        [id(0x00000026), propput, helpcontext(0x00b1389d)]
        HRESULT ShowPageBreaks([in] short lpi2Ret);
        [id(0x00000027), propget, helpstring("Takes locale independent page name, locale specific page name or page object. Returns page object."), helpcontext(0x00b1c885)]
        HRESULT Page([out, retval] VARIANT* lpobjRet);
        [id(0x00000027), propput, helpstring("Takes locale independent page name, locale specific page name or page object. Returns page object."), helpcontext(0x00b1c885)]
        HRESULT Page([in] VARIANT lpobjRet);
        [id(0x00000028), helpcontext(0x00b13fb9)]
        HRESULT DockedStencils([out] SAFEARRAY(BSTR)* NameArray);
        [id(0x00000029), propget, helpcontext(0x00b136ae)]
        HRESULT Master([out, retval] VARIANT* lpobjRet);
        [id(0x0000002a), propget, helpstring("Show or hide the scroll bars in a drawing window."), helpcontext(0x00b1c71d)]
        HRESULT ShowScrollBars([out, retval] short* lpi2Ret);
        [id(0x0000002a), propput, helpstring("Show or hide the scroll bars in a drawing window."), helpcontext(0x00b1c71d)]
        HRESULT ShowScrollBars([in] short lpi2Ret);
        [id(0x0000002b), propget, helpcontext(0x00b139ba)]
        HRESULT Visible([out, retval] VARIANT_BOOL* pbVisible);
        [id(0x0000002b), propput, helpcontext(0x00b139ba)]
        HRESULT Visible([in] VARIANT_BOOL pbVisible);
        [id(0x0000002c), propget, helpcontext(0x00b133f2)]
        HRESULT Caption([out, retval] BSTR* pbstrCaption);
        [id(0x0000002c), propput, helpcontext(0x00b133f2)]
        HRESULT Caption([in] BSTR pbstrCaption);
        [id(0x0000002d), propget, helpcontext(0x00b139c9)]
        HRESULT Windows([out, retval] IVWindows** ppWins);
        [id(0x0000002e), helpcontext(0x00b14108)]
        HRESULT Scroll(
                        [in] long nxFlags, 
                        [in] long nyFlags);
        [id(0x0000002f), helpcontext(0x00b1410d)]
        HRESULT ScrollViewTo(
                        [in] double x, 
                        [in] double y);
        [id(0x00000030), helpcontext(0x00b14045)]
        HRESULT GetViewRect(
                        [out] double* pdLeft, 
                        [out] double* pdTop, 
                        [out] double* pdWidth, 
                        [out] double* pdHeight);
        [id(0x00000031), helpcontext(0x00b14149)]
        HRESULT SetViewRect(
                        [in] double dLeft, 
                        [in] double dTop, 
                        [in] double dWidth, 
                        [in] double dHeight);
        [id(0x00000032), helpcontext(0x00b1404a)]
        HRESULT GetWindowRect(
                        [out] long* pnLeft, 
                        [out] long* pnTop, 
                        [out] long* pnWidth, 
                        [out] long* pnHeight);
        [id(0x00000033), helpcontext(0x00b1414e)]
        HRESULT SetWindowRect(
                        [in] long nLeft, 
                        [in] long nTop, 
                        [in] long nWidth, 
                        [in] long nHeight);
        [id(0x00000034), propget, helpcontext(0x00b139ce)]
        HRESULT WindowState([out, retval] long* pnState);
        [id(0x00000034), propput, helpcontext(0x00b139ce)]
        HRESULT WindowState([in] long pnState);
        [id(0x00000035), propget, helpcontext(0x00b139b5)]
        HRESULT ViewFit([out, retval] long* pnFit);
        [id(0x00000035), propput, helpcontext(0x00b139b5)]
        HRESULT ViewFit([in] long pnFit);
        [id(0x00000036), propget, helpcontext(0x00b13622)]
        HRESULT IsEditingText([out, retval] VARIANT_BOOL* pbEditingText);
        [id(0x00000037), propget, helpcontext(0x00b1361d)]
        HRESULT IsEditingOLE([out, retval] VARIANT_BOOL* pbEditingOLE);
        [id(0x00000038), propget, helpcontext(0x00b13758)]
        HRESULT Parent([out, retval] IVWindows** ppParent);
        [id(0x00000039), propget, helpcontext(0x00b136b8)]
        HRESULT MasterShortcut([out, retval] IVMasterShortcut** lpdispRet);
        [id(0x0000003a), propget, helpcontext(0x00b135eb)]
        HRESULT ID([out, retval] long* pnID);
        [id(0x0000003b), propget, helpcontext(0x00b139dd)]
        HRESULT ParentWindow([out, retval] IVWindow** ppParentWindow);
        [id(0x60020049), propget, helpcontext(0x00b1c6a0)]
        HRESULT MergeID([out, retval] BSTR* pbstrRet);
        [id(0x6002004a), propget, helpcontext(0x00b1c69b)]
        HRESULT MergeClass([out, retval] BSTR* pbstrRet);
        [id(0x6002004b), propget, helpcontext(0x00b1c6a5)]
        HRESULT MergePosition([out, retval] long* pnRet);
        [id(0x6002004c), propget, helpstring("Enables or disables the Edit command for stencil windows. Set to False to prevent unintentional stencil edits."), helpcontext(0x00b1c5c9)]
        HRESULT AllowEditing([out, retval] VARIANT_BOOL* pbAllowEditing);
        [id(0x6002004c), propput, helpstring("Enables or disables the Edit command for stencil windows. Set to False to prevent unintentional stencil edits."), helpcontext(0x00b1c5c9)]
        HRESULT AllowEditing([in] VARIANT_BOOL pbAllowEditing);
        [id(0x6002004e), propget, helpstring("Get or set the width of the page tab control in a drawing window. Value is a percentage of the drawing window width, from 0 to 100. Assigning -1 means use default."), helpcontext(0x00b1c6be)]
        HRESULT PageTabWidth([out, retval] double* pdWidth);
        [id(0x6002004e), propput, helpstring("Get or set the width of the page tab control in a drawing window. Value is a percentage of the drawing window width, from 0 to 100. Assigning -1 means use default."), helpcontext(0x00b1c6be)]
        HRESULT PageTabWidth([in] double pdWidth);
        [id(0x60020050), propget, helpstring("Show or hide the page tab control in a drawing window."), helpcontext(0x00b1c722)]
        HRESULT ShowPageTabs([out, retval] VARIANT_BOOL* pbShow);
        [id(0x60020050), propput, helpstring("Show or hide the page tab control in a drawing window."), helpcontext(0x00b1c722)]
        HRESULT ShowPageTabs([in] VARIANT_BOOL pbShow);
        [id(0x60020049), propput, helpcontext(0x00b1c6a0)]
        HRESULT MergeID([in] BSTR pbstrRet);
        [id(0x6002004a), propput, helpcontext(0x00b1c69b)]
        HRESULT MergeClass([in] BSTR pbstrRet);
        [id(0x6002004b), propput, helpcontext(0x00b1c6a5)]
        HRESULT MergePosition([in] long pnRet);
        [id(0x60020055), propget, helpcontext(0x00b13609)]
        HRESULT InPlace([out, retval] VARIANT_BOOL* pbInPlace);
        [id(0x60020056), propget, helpstring("MergeCaption is used for the tab when the window is merged with other windows."), helpcontext(0x00b1c77c)]
        HRESULT MergeCaption([out, retval] BSTR* pbstrRet);
        [id(0x60020056), propput, helpstring("MergeCaption is used for the tab when the window is merged with other windows."), helpcontext(0x00b1c77c)]
        HRESULT MergeCaption([in] BSTR pbstrRet);
        [id(0x60020058), propget, hidden, helpcontext(0x00b1c669)]
        HRESULT Icon([out, retval] IPictureDisp** ppPictureDisp);
        [id(0x60020058), propputref, hidden, helpcontext(0x00b1c669)]
        HRESULT Icon([in] IPictureDisp* ppPictureDisp);
        [id(0x6002005a), propget, helpcontext(0x00b13870)]
        HRESULT Shape([out, retval] IVShape** lpobjRet);
        [id(0x6002005b), propget, helpcontext(0x00b1eb5d)]
        HRESULT SelectedCell([out, retval] IVCell** lpobjRet);
        [id(0x6002005c), helpcontext(0x00b1c916)]
        HRESULT NewWindow([out, retval] IVWindow** lpobjRet);
        [id(0x6002005d), propget, helpcontext(0x00b1cb4b)]
        HRESULT BackgroundColor([out, retval] OLE_COLOR* pColor);
        [id(0x6002005d), propput, helpcontext(0x00b1cb4b)]
        HRESULT BackgroundColor([in] OLE_COLOR pColor);
        [id(0x6002005f), propget, helpcontext(0x00b1cb46)]
        HRESULT BackgroundColorGradient([out, retval] OLE_COLOR* pColor);
        [id(0x6002005f), propput, helpcontext(0x00b1cb46)]
        HRESULT BackgroundColorGradient([in] OLE_COLOR pColor);
        [id(0x60020061), propget, helpcontext(0x00b1ca1f)]
        HRESULT ShowPageOutline([out, retval] VARIANT_BOOL* Show);
        [id(0x60020061), propput, helpcontext(0x00b1ca1f)]
        HRESULT ShowPageOutline([in] VARIANT_BOOL Show);
        [id(0x60020063), propget, helpcontext(0x00b1ca42)]
        HRESULT ScrollLock([out, retval] VARIANT_BOOL* Lock);
        [id(0x60020063), propput, helpcontext(0x00b1ca42)]
        HRESULT ScrollLock([in] VARIANT_BOOL Lock);
        [id(0x60020065), propget, helpcontext(0x00b1c984)]
        HRESULT ZoomLock([out, retval] VARIANT_BOOL* Lock);
        [id(0x60020065), propput, helpcontext(0x00b1c984)]
        HRESULT ZoomLock([in] VARIANT_BOOL Lock);
        [id(0x60020067), propget, helpcontext(0x00b1c989)]
        HRESULT ZoomBehavior([out, retval] VisZoomBehavior* pnZoomBehavior);
        [id(0x60020067), propput, helpcontext(0x00b1c989)]
        HRESULT ZoomBehavior([in] VisZoomBehavior pnZoomBehavior);
        [id(0x60020069), propget, helpcontext(0x00b1ca3d)]
        HRESULT SelectedMasters([out, retval] SAFEARRAY(IDispatch*)* SelectedArray);
        [id(0x6002006a), propget, helpcontext(0x00b1ca38)]
        HRESULT SelectedText([out, retval] IVCharacters** ppObjReturn);
        [id(0x6002006a), propput, helpcontext(0x00b1ca38)]
        HRESULT SelectedText([in] IVCharacters* ppObjReturn);
        [id(0x6002006c), propget, helpcontext(0x00b1eaeb)]
        HRESULT ReviewerMarkupVisible(
                        [in, optional, defaultvalue(-1)] long ReviewerID, 
                        [out, retval] VARIANT_BOOL* viewStatus);
        [id(0x6002006c), propput, helpcontext(0x00b1eaeb)]
        HRESULT ReviewerMarkupVisible(
                        [in, optional, defaultvalue(-1)] long ReviewerID, 
                        [in] VARIANT_BOOL viewStatus);
        [id(0x0000000b), propput, helpcontext(0x00b13866)]
        HRESULT Selection([in] IVSelection* lpdispRet);
        [id(0x6002006f), propget, helpcontext(0x00b1ebd5)]
        HRESULT SelectedDataRecordset([out, retval] IVDataRecordset** DataRecordset);
        [id(0x6002006f), propput, helpcontext(0x00b1ebd5)]
        HRESULT SelectedDataRecordset([in] IVDataRecordset* DataRecordset);
        [id(0x60020071), propget, helpcontext(0x00b1ebda)]
        HRESULT SelectedDataRowID([out, retval] long* DataRowID);
        [id(0x60020071), propput, helpcontext(0x00b1ebda)]
        HRESULT SelectedDataRowID([in] long DataRowID);
    };

    [
      odl,
      uuid(000D070B-0000-0000-C000-000000000046),
      helpcontext(0x000027ec),
      hidden,
      dual,
      oleautomation
    ]
    interface IVSelection : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00a99282)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00a997b4)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x00000003), propget, helpstring("Returns visObjTypeSelection (16)."), helpcontext(0x00a995e8)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x000003e7), propget, hidden, helpcontext(0x00a99525)]
        HRESULT Item16(
                        [in] short Index, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000004), propget, hidden, helpcontext(0x00a99372)]
        HRESULT Count16([out, retval] short* lpi2Ret);
        [id(0x00000005), helpcontext(0x00a99ee9)]
        HRESULT Export([in] BSTR FileName);
        [id(0x00000006), propget, helpcontext(0x00a993d6)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000007), propget, helpcontext(0x00a99359)]
        HRESULT ContainingPage([out, retval] IVPage** lpdispRet);
        [id(0x00000008), propget, helpcontext(0x00a99354)]
        HRESULT ContainingMaster([out, retval] IVMaster** lpdispRet);
        [id(0x00000009), propget, helpcontext(0x00a99368)]
        HRESULT ContainingShape([out, retval] IVShape** lpdispRet);
        [id(0x0000000a), helpcontext(0x00a99e3f)]
        HRESULT BringForward();
        [id(0x0000000b), helpcontext(0x00a99e44)]
        HRESULT BringToFront();
        [id(0x0000000c), helpcontext(0x00a99ffc)]
        HRESULT SendBackward();
        [id(0x0000000d), helpcontext(0x00a9a001)]
        HRESULT SendToBack();
        [id(0x0000000e), propget, helpstring("Locale specific name of style applied to this selection."), helpcontext(0x00aa271a)]
        HRESULT Style([out, retval] BSTR* lpLocaleSpecificStyleName);
        [id(0x0000000e), propput, helpstring("Locale specific name of style applied to this selection."), helpcontext(0x00aa271a)]
        HRESULT Style([in] BSTR lpLocaleSpecificStyleName);
        [id(0x0000000f), propput, helpstring("Locale specific name of style to apply to this selection while keeping local overrides."), helpcontext(0x00a997d2)]
        HRESULT StyleKeepFmt([in] BSTR rhs);
        [id(0x00000010), propget, helpstring("Locale specific name of line style applied to this selection."), helpcontext(0x00a99575)]
        HRESULT LineStyle([out, retval] BSTR* lpLocaleSpecificStyleName);
        [id(0x00000010), propput, helpstring("Locale specific name of line style applied to this selection."), helpcontext(0x00a99575)]
        HRESULT LineStyle([in] BSTR lpLocaleSpecificStyleName);
        [id(0x00000011), propput, helpstring("Locale specific name of line style to apply to this selection while keeping local overrides."), helpcontext(0x00a9957a)]
        HRESULT LineStyleKeepFmt([in] BSTR rhs);
        [id(0x00000012), propget, helpstring("Locale specific name of fill style applied to this selection."), helpcontext(0x00a99435)]
        HRESULT FillStyle([out, retval] BSTR* lpLocaleSpecificStyleName);
        [id(0x00000012), propput, helpstring("Locale specific name of fill style applied to this selection."), helpcontext(0x00a99435)]
        HRESULT FillStyle([in] BSTR lpLocaleSpecificStyleName);
        [id(0x00000013), propput, helpstring("Locale specific name of fill style to apply to this selection while keeping local overrides."), helpcontext(0x00a9943a)]
        HRESULT FillStyleKeepFmt([in] BSTR rhs);
        [id(0x00000014), propget, helpstring("Locale specific name of text style applied to this selection."), helpcontext(0x00a99822)]
        HRESULT TextStyle([out, retval] BSTR* lpLocaleSpecificStyleName);
        [id(0x00000014), propput, helpstring("Locale specific name of text style applied to this selection."), helpcontext(0x00a99822)]
        HRESULT TextStyle([in] BSTR lpLocaleSpecificStyleName);
        [id(0x00000015), propput, helpstring("Locale specific name of text style to apply to this selection while keeping local overrides."), helpcontext(0x00a99827)]
        HRESULT TextStyleKeepFmt([in] BSTR rhs);
        [id(0x00000016), helpcontext(0x00a99e62)]
        HRESULT Combine();
        [id(0x00000017), helpcontext(0x00a99f11)]
        HRESULT Fragment();
        [id(0x00000018), helpcontext(0x00a99f57)]
        HRESULT Intersect();
        [id(0x00000019), helpcontext(0x00a9a033)]
        HRESULT Subtract();
        [id(0x0000001a), helpcontext(0x00a9a056)]
        HRESULT Union();
        [id(0x0000001b), helpcontext(0x00a99ef8)]
        HRESULT FlipHorizontal();
        [id(0x0000001c), helpcontext(0x00a99efd)]
        HRESULT FlipVertical();
        [id(0x0000001d), helpcontext(0x00a99fc0)]
        HRESULT ReverseEnds();
        [id(0x0000001e), helpcontext(0x00a99fc5)]
        HRESULT Rotate90();
        [id(0x0000001f), hidden, helpcontext(0x00aa26a2)]
        HRESULT old_Copy();
        [id(0x00000020), hidden, helpcontext(0x00a99e80)]
        HRESULT old_Cut();
        [id(0x00000021), helpcontext(0x00a99e85)]
        HRESULT Delete();
        [id(0x00000022), hidden, helpcontext(0x00a99ed5)]
        HRESULT VoidDuplicate();
        [id(0x00000023), hidden, helpcontext(0x00a99f39)]
        HRESULT VoidGroup();
        [id(0x00000024), helpcontext(0x00a99e6c)]
        HRESULT ConvertToGroup();
        [id(0x00000025), helpcontext(0x00a9a051)]
        HRESULT Ungroup();
        [id(0x00000026), helpcontext(0x00a99ff7)]
        HRESULT SelectAll();
        [id(0x00000027), helpcontext(0x00a99e94)]
        HRESULT DeselectAll();
        [id(0x00000028), helpcontext(0x00a99ff2)]
        HRESULT Select(
                        [in] IVShape* SheetObject, 
                        [in] short SelectAction);
        [id(0x00000029), propget, helpcontext(0x00a99408)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x0000002a), propget, helpcontext(0x00a99660)]
        HRESULT PersistsEvents([out, retval] short* lpboolRet);
        [id(0x0000002b), helpcontext(0x00a9a047)]
        HRESULT Trim();
        [id(0x0000002c), helpcontext(0x00a99f5c)]
        HRESULT Join();
        [id(0x0000002d), helpcontext(0x00a99ef3)]
        HRESULT FitCurve(
                        [in] double Tolerance, 
                        [in] short Flags);
        [id(0x0000002e), helpcontext(0x00a99f61)]
        HRESULT Layout();
        [id(0x0000002f), helpcontext(0x00a99e3a)]
        HRESULT BoundingBox(
                        [in] short Flags, 
                        [out] double* lpr8Left, 
                        [out] double* lpr8Bottom, 
                        [out] double* lpr8Right, 
                        [out] double* lpr8Top);
        [id(00000000), propget, helpstring("The first item in a Selection is item 1."), helpcontext(0x00a99525)]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] IVShape** lpdispRet);
        [id(0x00000030), propget, helpcontext(0x00a99372)]
        HRESULT Count([out, retval] long* lpi4Ret);
        [id(0x00000031), helpcontext(0x00a99ec1)]
        HRESULT DrawRegion(
                        [in] double Tolerance, 
                        [in] short Flags, 
                        [in, optional] VARIANT x, 
                        [in, optional] VARIANT y, 
                        [in, optional] VARIANT ResultsMaster, 
                        [out, retval] IVShape** lpdispRet);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
        [id(0x00000032), propget, helpstring("Include/Exclude items that are sub/super selected."), helpcontext(0x00a99539)]
        HRESULT IterationMode([out, retval] long* lpi4Ret);
        [id(0x00000032), propput, helpstring("Include/Exclude items that are sub/super selected."), helpcontext(0x00a99539)]
        HRESULT IterationMode([in] long lpi4Ret);
        [id(0x00000033), propget, helpstring("Is Item(i) sub-selection, super-selection, etc."), helpcontext(0x00a99534)]
        HRESULT ItemStatus(
                        [in] long Index, 
                        [out, retval] short* lpi2Ret);
        [id(0x00000034), propget, helpstring("Returns primary selected shape or nothing."), helpcontext(0x00a99674)]
        HRESULT PrimaryItem([out, retval] IVShape** lpdispRet);
        [id(0x6002003c), propget, helpcontext(0x00aa25ad)]
        HRESULT Picture([out, retval] IPictureDisp** ppPictureDisp);
        [id(0x6002003d), helpstring("Returns the created group shape"), helpcontext(0x00a99f39)]
        HRESULT Group([out, retval] IVShape** ppShape);
        [id(0x6002003e), helpstring("Performs end point and glue swapping on 1D shapes"), helpcontext(0x00aa262f)]
        HRESULT SwapEnds();
        [id(0x6002003f), helpcontext(0x00a99e26)]
        HRESULT AddToGroup();
        [id(0x60020040), helpcontext(0x00a99fbb)]
        HRESULT RemoveFromGroup();
        [id(0x60020041), helpstring("Returns a Selection containing all the duplicated shapes."), helpcontext(0x00a99ed5)]
        HRESULT Duplicate([out, retval] IVSelection** ppSelection);
        [id(0x60020042), helpcontext(0x00aa26a2)]
        HRESULT Copy([in, optional] VARIANT Flags);
        [id(0x60020043), helpcontext(0x00a99e80)]
        HRESULT Cut([in, optional] VARIANT Flags);
        [id(0x60020044), helpstring("Move selection by dx in the X-direction and dy in the Y-direction."), helpcontext(0x00aa27fb)]
        HRESULT Move(
                        [in] double dx, 
                        [in] double dy, 
                        [in, optional] VARIANT UnitsNameOrCode);
        [id(0x60020045), helpcontext(0x00aa27e2)]
        HRESULT Rotate(
                        [in] double Angle, 
                        [in, optional] VARIANT AngleUnitsNameOrCode, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL BlastGuards, 
                        [in, optional, defaultvalue(0)] VisRotationTypes RotationType, 
                        [in, optional, defaultvalue(0)] double PinX, 
                        [in, optional, defaultvalue(0)] double PinY, 
                        [in, optional] VARIANT PinUnitsNameOrCode);
        [id(0x60020046), helpcontext(0x00aa284b)]
        HRESULT Align(
                        [in] VisHorizontalAlignTypes AlignHorizontal, 
                        [in] VisVerticalAlignTypes AlignVertical, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL GlueToGuide);
        [id(0x60020047), helpcontext(0x00aa283c)]
        HRESULT Distribute(
                        [in] VisDistributeTypes Distribute, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL GlueToGuide);
        [id(0x60020048), helpcontext(0x00a9a05b)]
        HRESULT UpdateAlignmentBox();
        [id(0x60020049), helpcontext(0x00aa27f1)]
        HRESULT Offset([in] double Distance);
        [id(0x6002004a), helpcontext(0x00aa2a8a)]
        HRESULT ConnectShapes();
        [id(0x6002004b), helpcontext(0x00aa285a)]
        HRESULT Flip(
                        [in] VisFlipDirection FlipDirection, 
                        [in, optional, defaultvalue(0)] VisFlipTypes FlipType, 
                        [in, optional, defaultvalue(0)] VARIANT_BOOL BlastGuards, 
                        [in, optional, defaultvalue(0)] double PinX, 
                        [in, optional, defaultvalue(0)] double PinY, 
                        [in, optional] VARIANT PinUnitsNameOrCode);
        [id(0x6002004c), propget, helpcontext(0x00aa2a3a)]
        HRESULT ContainingPageID([out, retval] long* lpi4Ret);
        [id(0x6002004d), propget, helpcontext(0x00aa2a3f)]
        HRESULT ContainingMasterID([out, retval] long* lpi4Ret);
        [id(0x6002004e), helpcontext(0x00aa4a7e)]
        HRESULT LinkToData(
                        [in] long DataRecordsetID, 
                        [in] long DataRowID, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL ApplyDataGraphicAfterLink);
        [id(0x6002004f), helpcontext(0x00aa4a83)]
        HRESULT BreakLinkToData([in] long DataRecordsetID);
        [id(0x60020050), helpcontext(0x00aa4a88)]
        HRESULT GetIDs([out] SAFEARRAY(long)* ShapeIDs);
        [id(0x60020051), helpcontext(0x00aa4a92)]
        HRESULT AutomaticLink(
                        [in] long DataRecordsetID, 
                        [in] SAFEARRAY(BSTR)* ColumnNames, 
                        [in] SAFEARRAY(long)* AutoLinkFieldTypes, 
                        [in] SAFEARRAY(BSTR)* FieldNames, 
                        [in] long AutoLinkBehavior, 
                        [out] SAFEARRAY(long)* ShapeIDs, 
                        [out, retval] long* pSheetCount);
        [id(0x60020052), propget, helpcontext(0x00aa4a8d)]
        HRESULT DataGraphic([out, retval] IVMaster** DataGraphic);
        [id(0x60020052), propput, helpcontext(0x00aa4a8d)]
        HRESULT DataGraphic([in] IVMaster* DataGraphic);
    };

    [
      odl,
      uuid(000D0711-0000-0000-C000-000000000046),
      helpcontext(0x00002846),
      hidden,
      dual,
      oleautomation
    ]
    interface IVWindows : IDispatch {
        [id(0x00000003), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00b2ba42)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpstring("Returns visObjTypeWindows (22)."), helpcontext(0x00b2bda8)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("The first item in a Windows collection is item 1."), helpcontext(0x00b2bce5)]
        HRESULT Item(
                        [in] short Index, 
                        [out, retval] IVWindow** lpdispRet);
        [id(0x00000001), propget, helpcontext(0x00b2bb32)]
        HRESULT Count([out, retval] short* lpi2Ret);
        [id(0x00000004), hidden, helpcontext(0x00b2c5f0)]
        HRESULT VoidArrange();
        [id(0x00000005), propget, helpcontext(0x00b2bbc8)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x00000006), propget, helpcontext(0x00b2be20)]
        HRESULT PersistsEvents([out, retval] short* lpboolRet);
        [id(0x00000007), hidden, helpcontext(0x00b2c84d)]
        HRESULT Add_WithoutMergeArgs(
                        [in, optional] VARIANT bstrCaption, 
                        [in, optional] VARIANT nFlags, 
                        [in, optional] VARIANT nType, 
                        [in, optional] VARIANT nLeft, 
                        [in, optional] VARIANT nTop, 
                        [in, optional] VARIANT nWidth, 
                        [in, optional] VARIANT nHeight, 
                        [out, retval] IVWindow** lpdispRet);
        [id(0x00000008), helpcontext(0x00b2c5f0)]
        HRESULT Arrange([in, optional] VARIANT nArrangeFlags);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
        [id(0x00000009), propget, helpcontext(0x00b2bcef)]
        HRESULT ItemFromID(
                        [in] long nID, 
                        [out, retval] IVWindow** ppWin);
        [id(0x6002000b), helpcontext(0x00b2c84d)]
        HRESULT Add(
                        [in, optional] VARIANT bstrCaption, 
                        [in, optional] VARIANT nFlags, 
                        [in, optional] VARIANT nType, 
                        [in, optional] VARIANT nLeft, 
                        [in, optional] VARIANT nTop, 
                        [in, optional] VARIANT nWidth, 
                        [in, optional] VARIANT nHeight, 
                        [in, optional] VARIANT bstrMergeID, 
                        [in, optional] VARIANT bstrMergeClass, 
                        [in, optional] VARIANT nMergePosition, 
                        [out, retval] IVWindow** lpdispRet);
        [id(0x0000000a), propget, helpcontext(0x00b35132)]
        HRESULT ItemEx(
                        [in] VARIANT CaptionOrIndex, 
                        [out, retval] IVWindow** ppWin);
    };

    [
      odl,
      uuid(000D0727-0000-0000-C000-000000000046),
      helpcontext(0x0000279c),
      hidden,
      dual,
      oleautomation
    ]
    interface IVMasterShortcut : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00f45722)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00f45876)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000003), propget, helpcontext(0x00f4597f)]
        HRESULT Index([out, retval] short* lpi2Ret);
        [id(0x00000004), propget, helpstring("Returns visObjTypeMasterShortcut (47)."), helpcontext(0x00f45a88)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000005), propget, helpcontext(0x00f45c54)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("MasterShortcut's locale specific name."), helpcontext(0x00f45a6a)]
        HRESULT Name([out, retval] BSTR* lpLocaleSpecificName);
        [id(00000000), propput, helpstring("MasterShortcut's locale specific name."), helpcontext(0x00f45a6a)]
        HRESULT Name([in] BSTR lpLocaleSpecificName);
        [id(0x00000006), propget, helpcontext(0x00f45b55)]
        HRESULT Prompt([out, retval] BSTR* lpbstrRet);
        [id(0x00000006), propput, helpcontext(0x00f45b55)]
        HRESULT Prompt([in] BSTR lpbstrRet);
        [id(0x00000007), propget, helpcontext(0x00f45713)]
        HRESULT AlignName([out, retval] short* lpi2Ret);
        [id(0x00000007), propput, helpcontext(0x00f45713)]
        HRESULT AlignName([in] short lpi2Ret);
        [id(0x00000008), propget, helpcontext(0x00f45961)]
        HRESULT IconSize([out, retval] short* lpi2Ret);
        [id(0x00000008), propput, helpcontext(0x00f45961)]
        HRESULT IconSize([in] short lpi2Ret);
        [id(0x00000009), helpcontext(0x00f46325)]
        HRESULT Delete();
        [id(0x0000000a), helpcontext(0x00f463e8)]
        HRESULT ImportIcon([in] BSTR FileName);
        [id(0x0000000b), helpcontext(0x00f4638e)]
        HRESULT ExportIcon(
                        [in] BSTR FileName, 
                        [in] short Flags, 
                        [in, optional] VARIANT TransparentRGB);
        [id(0x0000000c), propget, helpcontext(0x00f4596b)]
        HRESULT ID([out, retval] long* lpi4Ret);
        [id(0x0000000d), helpcontext(0x00f4641a)]
        HRESULT OpenIconWindow([out, retval] IVWindow** lpdispRet);
        [id(0x0000000e), propget, helpcontext(0x00f45c9f)]
        HRESULT TargetDocumentName([out, retval] BSTR* lpbstrRet);
        [id(0x0000000e), propput, helpcontext(0x00f45c9f)]
        HRESULT TargetDocumentName([in] BSTR lpbstrRet);
        [id(0x0000000f), propget, helpstring("Locale independent name of target Master."), helpcontext(0x00f45ca4)]
        HRESULT TargetMasterName([out, retval] BSTR* lpLocaleIndependentName);
        [id(0x0000000f), propput, helpstring("Locale independent name of target Master."), helpcontext(0x00f45ca4)]
        HRESULT TargetMasterName([in] BSTR lpLocaleIndependentName);
        [id(0x00000010), propget, hidden, helpcontext(0x00f42400)]
        HRESULT TargetBaseID([out, retval] BSTR* lpbstrRet);
        [id(0x00000010), propput, hidden, helpcontext(0x00f42400)]
        HRESULT TargetBaseID([in] BSTR lpbstrRet);
        [id(0x00000011), propget, helpcontext(0x00f4588a)]
        HRESULT DropActions([out, retval] BSTR* lpbstrRet);
        [id(0x00000011), propput, helpcontext(0x00f4588a)]
        HRESULT DropActions([in] BSTR lpbstrRet);
        [id(0x00000012), propget, helpcontext(0x00f45bf5)]
        HRESULT ShapeHelp([out, retval] BSTR* lpbstrRet);
        [id(0x00000012), propput, helpcontext(0x00f45bf5)]
        HRESULT ShapeHelp([in] BSTR lpbstrRet);
        [id(0x00000013), propget, helpstring("MasterShortcut's locale independent name."), helpcontext(0x00f4ef11)]
        HRESULT NameU([out, retval] BSTR* lpLocaleIndependentName);
        [id(0x00000013), propput, helpstring("MasterShortcut's locale independent name."), helpcontext(0x00f4ef11)]
        HRESULT NameU([in] BSTR lpLocaleIndependentName);
        [id(0x00000014), propget, helpcontext(0x00f45984)]
        HRESULT IndexInStencil([out, retval] short* lpi2Ret);
        [id(0x6002001f), propget, helpcontext(0x00f4e9e9)]
        HRESULT Icon([out, retval] IPictureDisp** ppPictureDisp);
        [id(0x6002001f), propputref, helpcontext(0x00f4e9e9)]
        HRESULT Icon([in] IPictureDisp* ppPictureDisp);
        [id(0x00000014), propput, helpcontext(0x00f45984)]
        HRESULT IndexInStencil([in] short lpi2Ret);
    };

    [
      odl,
      uuid(000D072F-0000-0000-C000-000000000046),
      helpcontext(0x0000ee4d),
      hidden,
      dual,
      oleautomation
    ]
    interface IVDataRecordset : IDispatch {
        [id(0x60020000), propget, helpcontext(0x00fa71a2)]
        HRESULT Application([out, retval] IVApplication** Application);
        [id(0x60020001), propget, helpcontext(0x00fa76d4)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x60020002), propget, helpcontext(0x00fa72f6)]
        HRESULT Document([out, retval] IVDocument** Document);
        [id(0x60020003), propget, helpcontext(0x00fa7508)]
        HRESULT ObjectType([out, retval] short* ObjectType);
        [id(00000000), propget, helpcontext(0x00fa73eb)]
        HRESULT ID([out, retval] long* DataRecordsetID);
        [id(0x60020005), propget, helpcontext(0x00fa74ea)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x60020005), propput, helpcontext(0x00fa74ea)]
        HRESULT Name([in] BSTR Name);
        [id(0x60020007), propget, helpcontext(0x00fb2a4d)]
        HRESULT LinkReplaceBehavior([out, retval] VisLinkReplaceBehavior* Property);
        [id(0x60020007), propput, helpcontext(0x00fb2a4d)]
        HRESULT LinkReplaceBehavior([in] VisLinkReplaceBehavior Property);
        [id(0x60020009), propget, helpcontext(0x00fb29f8)]
        HRESULT DataConnection([out, retval] IVDataConnection** DataConnection);
        [id(0x6002000a), propget, helpcontext(0x00fb29fd)]
        HRESULT DataColumns([out, retval] IVDataColumns** DataColumns);
        [id(0x6002000b), helpcontext(0x00fb2a02)]
        HRESULT GetPrimaryKey(
                        [out] VisPrimaryKeySettings* PrimaryKeySettings, 
                        [out] SAFEARRAY(BSTR)* PrimaryKey);
        [id(0x6002000c), helpcontext(0x00fb2a07)]
        HRESULT SetPrimaryKey(
                        [in] VisPrimaryKeySettings PrimaryKeySettings, 
                        [in] SAFEARRAY(BSTR)* PrimaryKey);
        [id(0x6002000d), propget, helpcontext(0x00fb2a0c)]
        HRESULT CommandString([out, retval] BSTR* CommandString);
        [id(0x6002000d), propput, helpcontext(0x00fb2a0c)]
        HRESULT CommandString([in] BSTR CommandString);
        [id(0x6002000f), propget, helpcontext(0x00fb2a11)]
        HRESULT DataAsXML([out, retval] BSTR* Data);
        [id(0x60020010), helpcontext(0x00fb2a16)]
        HRESULT GetDataRowIDs(
                        [in] BSTR CriteriaString, 
                        [out, retval] SAFEARRAY(long)* DataRowIDs);
        [id(0x60020011), helpcontext(0x00fb2a1b)]
        HRESULT GetRowData(
                        [in] long DataRowID, 
                        [out, retval] SAFEARRAY(VARIANT)* DataRowValues);
        [id(0x60020012), helpcontext(0x00fa7da5)]
        HRESULT Delete();
        [id(0x60020013), helpcontext(0x00fb2a20)]
        HRESULT Refresh();
        [id(0x60020014), helpcontext(0x00fb2a25)]
        HRESULT RefreshUsingXML([in] BSTR NewDataAsXML);
        [id(0x60020015), propget, helpcontext(0x00fb2a2f)]
        HRESULT TimeRefreshed([out, retval] DATE* TimeRefreshed);
        [id(0x60020016), propget, helpcontext(0x00fb2a34)]
        HRESULT RefreshInterval([out, retval] long* RefreshInterval);
        [id(0x60020016), propput, helpcontext(0x00fb2a34)]
        HRESULT RefreshInterval([in] long RefreshInterval);
        [id(0x60020018), propget, helpcontext(0x00fb2a39)]
        HRESULT RefreshSettings([out, retval] long* Settings);
        [id(0x60020018), propput, helpcontext(0x00fb2a39)]
        HRESULT RefreshSettings([in] long Settings);
        [id(0x6002001a), propget, helpcontext(0x00fb2b42)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x6002001b), helpcontext(0x00fb2a3e)]
        HRESULT GetAllRefreshConflicts([out, retval] SAFEARRAY(IVShape*)* ShapesInConflict);
        [id(0x6002001c), helpcontext(0x00fb2a43)]
        HRESULT RemoveRefreshConflict([in] IVShape* ShapeInConflict);
        [id(0x6002001d), helpcontext(0x00fb2a48)]
        HRESULT GetMatchingRowsForRefreshConflict(
                        [in] IVShape* ShapeInConflict, 
                        [out, retval] SAFEARRAY(long)* DataRowIDs);
    };

    typedef enum {
        visLinkReplaceNever = 0,
        visLinkReplaceAlways = 1,
        visLinkReplacePrompt = 2
    } VisLinkReplaceBehavior;

    [
      odl,
      uuid(000D0730-0000-0000-C000-000000000046),
      helpcontext(0x0000ee52),
      hidden,
      dual,
      oleautomation
    ]
    interface IVDataConnection : IDispatch {
        [id(0x60020000), propget, helpcontext(0x00fbf842)]
        HRESULT Application([out, retval] IVApplication** Application);
        [id(0x60020001), propget, helpcontext(0x00fbfd74)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x60020002), propget, helpcontext(0x00fbf996)]
        HRESULT Document([out, retval] IVDocument** Document);
        [id(0x60020003), propget, helpcontext(0x00fbfba8)]
        HRESULT ObjectType([out, retval] short* ObjectType);
        [id(00000000), propget, helpcontext(0x00fbfa8b)]
        HRESULT ID([out, retval] long* DataConnectionID);
        [id(0x60020005), propget, helpcontext(0x00fcb0f2)]
        HRESULT ConnectionString([out, retval] BSTR* ConnectionString);
        [id(0x60020005), propput, helpcontext(0x00fcb0f2)]
        HRESULT ConnectionString([in] BSTR ConnectionString);
        [id(0x60020007), propget, helpcontext(0x00fcb0fc)]
        HRESULT FileName([out, retval] BSTR* FileName);
        [id(0x60020008), propget, helpcontext(0x00fcb0f7)]
        HRESULT Timeout([out, retval] long* Timeout);
        [id(0x60020008), propput, helpcontext(0x00fcb0f7)]
        HRESULT Timeout([in] long Timeout);
    };

    [
      odl,
      uuid(000D0731-0000-0000-C000-000000000046),
      helpcontext(0x0000ee57),
      hidden,
      dual,
      oleautomation
    ]
    interface IVDataColumns : IDispatch {
        [id(0x60020000), propget, helpcontext(0x00fd7ee2)]
        HRESULT Application([out, retval] IVApplication** Application);
        [id(0x60020001), propget, helpcontext(0x00fd8414)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x60020002), propget, helpcontext(0x00fd8036)]
        HRESULT Document([out, retval] IVDocument** Document);
        [id(0x60020003), propget, helpcontext(0x00fd8248)]
        HRESULT ObjectType([out, retval] short* ObjectType);
        [id(0x60020004), propget, helpcontext(0x00fe37a1)]
        HRESULT DataRecordset([out, retval] IVDataRecordset** DataRecordset);
        [id(0x60020005), propget, helpcontext(0x00fd7fd2)]
        HRESULT Count([out, retval] long* Count);
        [id(00000000), propget, helpcontext(0x00fd8185)]
        HRESULT Item(
                        [in] VARIANT IndexOrName, 
                        [out, retval] IVDataColumn** DataColumn);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** Enum);
        [id(0x60020008), helpcontext(0x00fe37a6)]
        HRESULT SetColumnProperties(
                        [in] SAFEARRAY(BSTR)* ColumnNames, 
                        [in] SAFEARRAY(long)* Properties, 
                        [in] SAFEARRAY(VARIANT)* Values);
    };

    [
      odl,
      uuid(000D0732-0000-0000-C000-000000000046),
      helpcontext(0x0000ee5c),
      hidden,
      dual,
      oleautomation
    ]
    interface IVDataColumn : IDispatch {
        [id(0x60020000), propget, helpcontext(0x00ff0582)]
        HRESULT Application([out, retval] IVApplication** Application);
        [id(0x60020001), propget, helpcontext(0x00ff0ab4)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x60020002), propget, helpcontext(0x00ff06d6)]
        HRESULT Document([out, retval] IVDocument** Document);
        [id(0x60020003), propget, helpcontext(0x00ff08e8)]
        HRESULT ObjectType([out, retval] short* ObjectType);
        [id(0x60020004), propget, helpcontext(0x00ffbe41)]
        HRESULT DataRecordset([out, retval] IVDataRecordset** DataRecordset);
        [id(00000000), propget, helpcontext(0x00ff08ca)]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x60020006), propget, helpcontext(0x00ffbe4b)]
        HRESULT DisplayName([out, retval] BSTR* DisplayName);
        [id(0x60020006), propput, helpcontext(0x00ffbe4b)]
        HRESULT DisplayName([in] BSTR DisplayName);
        [id(0x60020008), propget, helpcontext(0x00ff0b9a)]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x60020008), propput, helpcontext(0x00ff0b9a)]
        HRESULT Visible([in] VARIANT_BOOL Visible);
        [id(0x6002000a), helpcontext(0x00ffbe50)]
        HRESULT GetProperty(
                        [in] VisDataColumnProperties Property, 
                        [out, retval] VARIANT* Value);
        [id(0x6002000b), helpcontext(0x00ffbe55)]
        HRESULT SetProperty(
                        [in] VisDataColumnProperties Property, 
                        [in] VARIANT Value);
        [id(0x6002000c), propget, helpcontext(0x00ffbe5a)]
        HRESULT Hyperlink([out, retval] VARIANT_BOOL* Hyperlink);
        [id(0x6002000c), propput, helpcontext(0x00ffbe5a)]
        HRESULT Hyperlink([in] VARIANT_BOOL Hyperlink);
    };

    typedef enum {
        visDataColumnPropertyType = 1,
        visDataColumnPropertyLangID = 2,
        visDataColumnPropertyCalendar = 3,
        visDataColumnPropertyUnits = 4,
        visDataColumnPropertyCurrency = 5,
        visDataColumnPropertyDisplayName = 6,
        visDataColumnPropertyVisible = 7,
        visDataColumnPropertyHyperlink = 8
    } VisDataColumnProperties;

    typedef enum {
        visKeyRowOrder = 1,
        visKeySingle = 2,
        visKeyComposite = 3
    } VisPrimaryKeySettings;

    [
      odl,
      uuid(000D071E-0000-0000-C000-000000000046),
      helpcontext(0x000027c9),
      hidden,
      dual,
      oleautomation
    ]
    interface IVOLEObjects : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00e69b82)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpstring("Returns visObjTypeOLEObjects (38)."), helpcontext(0x00e69ee8)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000003), propget, helpcontext(0x00e6a0b4)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("The first item in an OLEObjects collection is item 1. Name treated as locale specific."), helpcontext(0x00e69e25)]
        HRESULT Item(
                        [in] VARIANT NameOrIndex, 
                        [out, retval] IVOLEObject** lpdispRet);
        [id(0x00000004), propget, hidden, helpcontext(0x00e69c72)]
        HRESULT Count16([out, retval] short* lpi2Ret);
        [id(0x00000005), propget, helpcontext(0x00e69c72)]
        HRESULT Count([out, retval] long* lpi4Ret);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
    };

    [
      odl,
      uuid(000D071F-0000-0000-C000-000000000046),
      helpcontext(0x000027c4),
      hidden,
      dual,
      oleautomation
    ]
    interface IVOLEObject : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00e82222)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00e826f0)]
        HRESULT Shape([out, retval] IVShape** lpdispRet);
        [id(0x00000003), propget, helpstring("Returns visObjTypeOLEObject (39)."), helpcontext(0x00e82588)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000004), propget, helpcontext(0x00e82754)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x00000005), propget, helpcontext(0x00e822b8)]
        HRESULT ClassID([out, retval] BSTR* lpbstrRet);
        [id(0x00000006), propget, helpcontext(0x00e82650)]
        HRESULT ProgID([out, retval] BSTR* lpbstrRet);
        [id(0x00000007), propget, helpcontext(0x00e823f3)]
        HRESULT ForeignType([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpcontext(0x00e8257e)]
        HRESULT Object([out, retval] IDispatch** lpdispRet);
    };

    [
      odl,
      uuid(000D071D-0000-0000-C000-000000000046),
      helpcontext(0x0000277e),
      hidden,
      dual,
      oleautomation
    ]
    interface IVHyperlink : IDispatch {
        [id(00000000), propget, helpcontext(0x00e5161d)]
        HRESULT Description([out, retval] BSTR* lpbstrRet);
        [id(00000000), propput, helpcontext(0x00e5161d)]
        HRESULT Description([in] BSTR lpbstrRet);
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00e514e2)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00e519b0)]
        HRESULT Shape([out, retval] IVShape** lpdispRet);
        [id(0x00000003), propget, helpstring("Returns visObjTypeHyperlink (37)."), helpcontext(0x00e51848)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000004), propget, helpcontext(0x00e51a14)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x00000005), propget, helpcontext(0x00e514c9)]
        HRESULT Address([out, retval] BSTR* lpbstrRet);
        [id(0x00000005), propput, helpcontext(0x00e514c9)]
        HRESULT Address([in] BSTR lpbstrRet);
        [id(0x00000006), propget, helpcontext(0x00e51a3c)]
        HRESULT SubAddress([out, retval] BSTR* lpbstrRet);
        [id(0x00000006), propput, helpcontext(0x00e51a3c)]
        HRESULT SubAddress([in] BSTR lpbstrRet);
        [id(0x00000007), propget, helpcontext(0x00e51839)]
        HRESULT NewWindow([out, retval] short* lpi2Ret);
        [id(0x00000007), propput, helpcontext(0x00e51839)]
        HRESULT NewWindow([in] short lpi2Ret);
        [id(0x00000008), propget, helpcontext(0x00e51672)]
        HRESULT ExtraInfo([out, retval] BSTR* lpbstrRet);
        [id(0x00000008), propput, helpcontext(0x00e51672)]
        HRESULT ExtraInfo([in] BSTR lpbstrRet);
        [id(0x00000009), propget, helpcontext(0x00e516c2)]
        HRESULT Frame([out, retval] BSTR* lpbstrRet);
        [id(0x00000009), propput, helpcontext(0x00e516c2)]
        HRESULT Frame([in] BSTR lpbstrRet);
        [id(0x0000000a), helpcontext(0x00e52081)]
        HRESULT AddToFavorites([in, optional] VARIANT FavoritesTitle);
        [id(0x0000000b), helpcontext(0x00e52162)]
        HRESULT Follow();
        [id(0x0000000c), helpcontext(0x00e520e5)]
        HRESULT Delete();
        [id(0x0000000d), helpcontext(0x00e520d1)]
        HRESULT Copy();
        [id(0x0000000e), helpcontext(0x00e520db)]
        HRESULT CreateURL(
                        [in] short CanonicalForm, 
                        [out, retval] BSTR* lpbstrRet);
        [id(0x00000010), propget, helpcontext(0x00e51960)]
        HRESULT Row([out, retval] short* lpi2Ret);
        [id(0x00000011), propget, helpcontext(0x00e51758)]
        HRESULT IsDefaultLink([out, retval] short* lpi2Ret);
        [id(0x00000011), propput, helpcontext(0x00e51758)]
        HRESULT IsDefaultLink([in] short lpi2Ret);
        [id(0x00000012), propget, helpstring("Hyperlinks's locale specific name."), helpcontext(0x00e5182a)]
        HRESULT Name([out, retval] BSTR* lpLocaleSpecificName);
        [id(0x00000012), propput, helpstring("Hyperlinks's locale specific name."), helpcontext(0x00e5182a)]
        HRESULT Name([in] BSTR lpLocaleSpecificName);
        [id(0x6002001a), propget, helpstring("Hyperlinks's locale independent name."), helpcontext(0x00e5acd1)]
        HRESULT NameU([out, retval] BSTR* lpLocaleIndepenentName);
        [id(0x6002001a), propput, helpstring("Hyperlinks's locale independent name."), helpcontext(0x00e5acd1)]
        HRESULT NameU([in] BSTR lpLocaleIndepenentName);
    };

    [
      odl,
      uuid(000D0720-0000-0000-C000-000000000046),
      helpcontext(0x000027dd),
      hidden,
      dual,
      oleautomation
    ]
    interface IVPaths : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00e9a8c2)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpstring("Returns visObjTypePaths (40)."), helpcontext(0x00e9ac28)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x000003e7), propget, hidden, helpcontext(0x00e9ab65)]
        HRESULT Item16(
                        [in] short Index, 
                        [out, retval] IVPath** lpdispRet);
        [id(0x00000003), propget, hidden, helpcontext(0x00e9a9b2)]
        HRESULT Count16([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("The first item in a Paths collection is item 1."), helpcontext(0x00e9ab65)]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] IVPath** lpdispRet);
        [id(0x00000004), propget, helpcontext(0x00e9a9b2)]
        HRESULT Count([out, retval] long* lpi4Ret);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
    };

    [
      odl,
      uuid(000D0721-0000-0000-C000-000000000046),
      helpcontext(0x000027d8),
      hidden,
      dual,
      oleautomation
    ]
    interface IVPath : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00eb2f62)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpstring("Returns visObjTypePath (41)."), helpcontext(0x00eb32c8)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x000003e7), propget, hidden, helpcontext(0x00eb3205)]
        HRESULT Item16(
                        [in] short Index, 
                        [out, retval] IVCurve** lpdispRet);
        [id(0x00000003), propget, hidden, helpcontext(0x00eb3052)]
        HRESULT Count16([out, retval] short* lpi2Ret);
        [id(0x00000004), propget, helpcontext(0x00eb3002)]
        HRESULT Closed([out, retval] short* lpi2Ret);
        [id(0x00000005), helpcontext(0x00eb334a)]
        HRESULT Points(
                        [in] double Tolerance, 
                        [out] SAFEARRAY(double)* xyArray);
        [id(00000000), propget, helpstring("The first item in a Path is item 1."), helpcontext(0x00eb3205)]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] IVCurve** lpdispRet);
        [id(0x00000006), propget, helpcontext(0x00eb3052)]
        HRESULT Count([out, retval] long* lpi4Ret);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
    };

    [
      odl,
      uuid(000D0722-0000-0000-C000-000000000046),
      helpcontext(0x0000275b),
      hidden,
      dual,
      oleautomation
    ]
    interface IVCurve : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00ecb602)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpstring("Returns visObjTypeCurve (42)."), helpcontext(0x00ecb968)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000003), propget, helpcontext(0x00ecb6a2)]
        HRESULT Closed([out, retval] short* lpi2Ret);
        [id(0x00000004), helpcontext(0x00ecb9ea)]
        HRESULT Points(
                        [in] double Tolerance, 
                        [out] SAFEARRAY(double)* xyArray);
        [id(0x00000005), propget, helpcontext(0x00ecbb2a)]
        HRESULT Start([out, retval] double* lpr8Ret);
        [id(0x00000006), propget, helpcontext(0x00ed486f)]
        HRESULT End([out, retval] double* lpr8Ret);
        [id(00000000), helpcontext(0x00ecc313)]
        HRESULT Point(
                        [in] double t, 
                        [out] double* x, 
                        [out] double* y);
        [id(0x00000008), helpcontext(0x00ecc318)]
        HRESULT PointAndDerivatives(
                        [in] double t, 
                        [in] short n, 
                        [out] double* x, 
                        [out] double* y, 
                        [out] double* dxdt, 
                        [out] double* dydt, 
                        [out] double* ddxdt, 
                        [out] double* ddydt);
    };

    [
      odl,
      uuid(000D0723-0000-0000-C000-000000000046),
      helpcontext(0x00002783),
      hidden,
      dual,
      oleautomation
    ]
    interface IVHyperlinks : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00ee3ca2)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00ee4170)]
        HRESULT Shape([out, retval] IVShape** lpdispRet);
        [id(0x00000003), propget, helpstring("Returns visObjTypeHyperlinks (43)."), helpcontext(0x00ee4008)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000004), propget, helpcontext(0x00ee41d4)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("The first item in a Hyperlinks collection is item 0. Name treated as locale specific."), helpcontext(0x00ee3f45)]
        HRESULT Item(
                        [in] VARIANT NameOrIndex, 
                        [out, retval] IVHyperlink** lpdispRet);
        [id(0x00000005), propget, helpcontext(0x00ee3d92)]
        HRESULT Count([out, retval] short* lpi2Ret);
        [id(0x00000006), helpcontext(0x00ee4805)]
        HRESULT Add([out, retval] IVHyperlink** lpdispRet);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
        [id(0x60020008), propget, helpstring("The first item in a Hyperlinks collection is item 0. Name treated as locale independent."), helpcontext(0x00eed48c)]
        HRESULT ItemU(
                        [in] VARIANT NameOrIndex, 
                        [out, retval] IVHyperlink** lpdispRet);
    };

    typedef enum {
        visAutoConnectDirNone = 0,
        visAutoConnectDirUp = 1,
        visAutoConnectDirDown = 2,
        visAutoConnectDirLeft = 3,
        visAutoConnectDirRight = 4
    } VisAutoConnectDir;

    typedef enum {
        visTypeMaster = 1,
        visTypeFillPattern = 2,
        visTypeLinePattern = 3,
        visTypeLineEnd = 4,
        visTypeDataGraphic = 5,
        visTypeThemeColors = 6,
        visTypeThemeEffects = 7
    } VisMasterTypes;

    typedef enum {
        visGraphicFarLeft = 0,
        visGraphicLeftEdge = 1,
        visGraphicLeft = 2,
        visGraphicCenter = 3,
        visGraphicRight = 4,
        visGraphicRightEdge = 5,
        visGraphicFarRight = 6
    } VisGraphicPositionHorizontal;

    typedef enum {
        visGraphicBelow = 0,
        visGraphicBottomEdge = 1,
        visGraphicBottom = 2,
        visGraphicMiddle = 3,
        visGraphicTop = 4,
        visGraphicTopEdge = 5,
        visGraphicAbove = 6
    } VisGraphicPositionVertical;

    [
      odl,
      uuid(000D0734-0000-0000-C000-000000000046),
      helpcontext(0x0000ee66),
      hidden,
      dual,
      oleautomation
    ]
    interface IVGraphicItems : IDispatch {
        [id(0x60020000), propget, helpcontext(0x01008c22)]
        HRESULT Application([out, retval] IVApplication** Application);
        [id(0x60020001), propget, helpcontext(0x01008d76)]
        HRESULT Document([out, retval] IVDocument** Document);
        [id(0x60020002), propget, helpcontext(0x01008f88)]
        HRESULT ObjectType([out, retval] VisObjectTypes* ObjectType);
        [id(0x60020003), propget, helpcontext(0x010144ff)]
        HRESULT DataGraphic([out, retval] IVMaster** DataGraphic);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** Enum);
        [id(0x60020005), propget, helpcontext(0x01008d12)]
        HRESULT Count([out, retval] long* Count);
        [id(0x60020006), helpcontext(0x01014504)]
        HRESULT AddCopy(
                        [in] IVGraphicItem* GraphicItem, 
                        [out, retval] IVGraphicItem** GraphicItemCopy);
        [id(00000000), propget, helpcontext(0x01008ec5)]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] IVGraphicItem** GraphicItem);
        [id(0x60020008), propget, helpcontext(0x01008ecf)]
        HRESULT ItemFromID(
                        [in] long ObjectID, 
                        [out, retval] IVGraphicItem** GraphicItem);
        [id(0x60020009), propget, helpcontext(0x01009154)]
        HRESULT Stat([out, retval] short* lpi2Ret);
    };

    [
      odl,
      uuid(000D0735-0000-0000-C000-000000000046),
      helpcontext(0x0000ee6b),
      hidden,
      dual,
      oleautomation
    ]
    interface IVGraphicItem : IDispatch {
        [id(0x60020000), propget, helpcontext(0x010212c2)]
        HRESULT Application([out, retval] IVApplication** Application);
        [id(0x60020001), propget, helpcontext(0x01021416)]
        HRESULT Document([out, retval] IVDocument** Document);
        [id(0x60020002), propget, helpcontext(0x01021628)]
        HRESULT ObjectType([out, retval] VisObjectTypes* ObjectType);
        [id(0x60020003), helpcontext(0x0102a881)]
        HRESULT Delete();
        [id(0x60020004), propget, helpcontext(0x0102151f)]
        HRESULT Index([out, retval] long* Index);
        [id(0x60020004), propput, helpcontext(0x0102151f)]
        HRESULT Index([in] long Index);
        [id(00000000), propget, helpcontext(0x0102150b)]
        HRESULT ID([out, retval] long* ID);
        [id(0x60020007), propget, helpcontext(0x010213fd)]
        HRESULT Description([out, retval] BSTR* Description);
        [id(0x60020008), propget, helpcontext(0x010218a3)]
        HRESULT Type([out, retval] VisGraphicItemTypes* Type);
        [id(0x60020009), helpcontext(0x0102cba9)]
        HRESULT GetExpression(
                        [out] VisGraphicField* Field, 
                        [out] BSTR* Expression);
        [id(0x6002000a), helpcontext(0x0102cbae)]
        HRESULT SetExpression(
                        [in] VisGraphicField Field, 
                        [in] BSTR Expression);
        [id(0x6002000b), propget, helpcontext(0x0102cb9f)]
        HRESULT DataGraphic([out, retval] IVMaster** DataGraphic);
        [id(0x6002000c), propget, helpcontext(0x010217f4)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x6002000d), propget, helpcontext(0x0102cbb3)]
        HRESULT Tag([out, retval] BSTR* Tag);
        [id(0x6002000d), propput, helpcontext(0x0102cbb3)]
        HRESULT Tag([in] BSTR Tag);
        [id(0x6002000f), propget, helpcontext(0x0102cbb8)]
        HRESULT HorizontalPosition([out, retval] VisGraphicPositionHorizontal* Position);
        [id(0x6002000f), propput, helpcontext(0x0102cbb8)]
        HRESULT HorizontalPosition([in] VisGraphicPositionHorizontal Position);
        [id(0x60020011), propget, helpcontext(0x0102cbbd)]
        HRESULT VerticalPosition([out, retval] VisGraphicPositionVertical* Position);
        [id(0x60020011), propput, helpcontext(0x0102cbbd)]
        HRESULT VerticalPosition([in] VisGraphicPositionVertical Position);
        [id(0x60020013), propget, helpcontext(0x0102cbc2)]
        HRESULT UseDataGraphicPosition([out, retval] VARIANT_BOOL* UseDataGraphicPosition);
        [id(0x60020013), propput, helpcontext(0x0102cbc2)]
        HRESULT UseDataGraphicPosition([in] VARIANT_BOOL UseDataGraphicPosition);
    };

    typedef enum {
        visTypeIconSet = 2,
        visTypeTextCallout = 3,
        visTypeDataBar = 4,
        visTypeColorByValue = 5,
        visTypeHeading = 6
    } VisGraphicItemTypes;

    typedef enum {
        visGraphicPropertyLabel = 1,
        visGraphicExpression = 2
    } VisGraphicField;

    [
      odl,
      uuid(000D070A-0000-0000-C000-000000000046),
      helpcontext(0x000027d3),
      hidden,
      dual,
      oleautomation
    ]
    interface IVPages : IDispatch {
        [id(0x00000003), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00a80be2)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpstring("Returns visObjTypePages (15)."), helpcontext(0x00a80f48)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("The first item in a Pages collection is item 1. Name treated as locale specific."), helpcontext(0x00a80e85)]
        HRESULT Item(
                        [in] VARIANT NameOrIndex, 
                        [out, retval] IVPage** lpdispRet);
        [id(0x00000001), propget, helpcontext(0x00a80cd2)]
        HRESULT Count([out, retval] short* lpi2Ret);
        [id(0x00000004), helpcontext(0x00a81745)]
        HRESULT Add([out, retval] IVPage** lpdispRet);
        [id(0x00000005), propget, helpcontext(0x00a80d36)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000006), propget, helpcontext(0x00a81114)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x00000007), propget, helpcontext(0x00a80d68)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x00000008), propget, helpcontext(0x00a80fc0)]
        HRESULT PersistsEvents([out, retval] short* lpboolRet);
        [id(0x00000009), helpstring("Returns locale specific names of pages."), helpcontext(0x00a8187b)]
        HRESULT GetNames([out] SAFEARRAY(BSTR)* localeSpecificNameArray);
        [id(0x0000000a), propget, helpstring("Like Item() but names treated locale independent."), helpcontext(0x00a8a3cc)]
        HRESULT ItemU(
                        [in] VARIANT NameOrIndex, 
                        [out, retval] IVPage** lpdispRet);
        [id(0x0000000b), helpstring("Returns locale independent names of pages."), helpcontext(0x00a8a3a4)]
        HRESULT GetNamesU([out] SAFEARRAY(BSTR)* localeIndependentNameArray);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
        [id(0x6002000d), propget, helpcontext(0x00a80e8f)]
        HRESULT ItemFromID(
                        [in] long nID, 
                        [out, retval] IVPage** ppPage);
    };

    [
      odl,
      uuid(000D070F-0000-0000-C000-000000000046),
      helpcontext(0x00002814),
      hidden,
      dual,
      oleautomation
    ]
    interface IVStyles : IDispatch {
        [id(0x00000003), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00afad02)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpstring("Returns visObjTypeStyles (20)."), helpcontext(0x00afb068)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("The first item in a Styles collection is item 1. Name treated as locale specific."), helpcontext(0x00afafa5)]
        HRESULT Item(
                        [in] VARIANT NameOrIndex, 
                        [out, retval] IVStyle** lpdispRet);
        [id(0x00000001), propget, hidden, helpcontext(0x00afadf2)]
        HRESULT Count16([out, retval] short* lpi2Ret);
        [id(0x00000004), propget, helpcontext(0x00afae56)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000005), helpcontext(0x00afbb08)]
        HRESULT Add(
                        [in] BSTR StyleName, 
                        [in] BSTR BasedOn, 
                        [in] short fIncludesText, 
                        [in] short fIncludesLine, 
                        [in] short fIncludesFill, 
                        [out, retval] IVStyle** lpdispRet);
        [id(0x00000006), propget, helpcontext(0x00afb234)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x00000007), propget, helpcontext(0x00afae88)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x00000008), propget, helpcontext(0x00afb0e0)]
        HRESULT PersistsEvents([out, retval] short* lpboolRet);
        [id(0x00000009), propget, hidden, helpcontext(0x00afafaf)]
        HRESULT ItemFromID16(
                        [in] short ObjectID, 
                        [out, retval] IVStyle** lpdispRet);
        [id(0x0000000a), helpstring("Returns locale specific names of styles."), helpcontext(0x00afb99b)]
        HRESULT GetNames([out] SAFEARRAY(BSTR)* localeSpecificNameArray);
        [id(0x0000000b), propget, helpcontext(0x00afadf2)]
        HRESULT Count([out, retval] long* lpi4Ret);
        [id(0x0000000c), propget, helpcontext(0x00afafaf)]
        HRESULT ItemFromID(
                        [in] long ObjectID, 
                        [out, retval] IVStyle** lpdispRet);
        [id(0x0000000d), propget, helpstring("Like Item() but names treated locale independent."), helpcontext(0x00b044ec)]
        HRESULT ItemU(
                        VARIANT NameOrIndex, 
                        [out, retval] IVStyle** lpdispRet);
        [id(0x0000000e), helpstring("Returns locale independent names of styles."), helpcontext(0x00b044c4)]
        HRESULT GetNamesU([out] SAFEARRAY(BSTR)* localeIndependentNameArray);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
    };

    [
      odl,
      uuid(000D0202-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x0000283c),
      hidden,
      dual,
      oleautomation
    ]
    interface IVUIObject : IDispatch {
        [id(0x60020000), hidden, helpcontext(0x00e35b20)]
        HRESULT Delete();
        [id(0x60020001), propget, hidden, helpcontext(0x00e35b20)]
        HRESULT Default([out, retval] BSTR* pName);
        [id(00000000), propput, helpcontext(0x00e3918a)]
        HRESULT Name([in] BSTR pName);
        [id(00000000), propget, helpcontext(0x00e3918a)]
        HRESULT Name([out, retval] BSTR* pName);
        [id(0x60020004), propput, hidden, helpstring("Visio versions 5.0 and later no longer support UIObject flavors."), helpcontext(0x00e39009)]
        HRESULT Flavor([in] short pFlavor);
        [id(0x60020004), propget, hidden, helpstring("Visio versions 5.0 and later no longer support UIObject flavors."), helpcontext(0x00e39009)]
        HRESULT Flavor([out, retval] short* pFlavor);
        [id(0x60020006), propget, helpcontext(0x00e3917b)]
        HRESULT MenuSets([out, retval] IVMenuSets** lplpVMenuSets);
        [id(0x60020007), propget, helpcontext(0x00e39400)]
        HRESULT ToolbarSets([out, retval] IVToolbarSets** lplpVToolbarSets);
        [id(0x60020008), propget, hidden, helpstring("StatusBars is obsolete as of Visio 2002."), helpcontext(0x00e39383)]
        HRESULT StatusBars([out, retval] IVStatusBars** lplpVStatusBars);
        [id(0x60020009), propget, helpcontext(0x00e38ded)]
        HRESULT AccelTables([out, retval] IVAccelTables** lplpVAccelTables);
        [id(0x6002000a), helpcontext(0x00e39b9e)]
        HRESULT SaveToFile([in] BSTR FileName);
        [id(0x6002000b), helpcontext(0x00e39b26)]
        HRESULT LoadFromFile([in] BSTR FileName);
        [id(0x6002000c), helpcontext(0x00e39c20)]
        HRESULT UpdateUI();
        [id(0x6002000d), propget, helpcontext(0x00e38f82)]
        HRESULT DisplayKeysInTooltips([out, retval] VARIANT_BOOL* pbShow);
        [id(0x6002000d), propput, helpcontext(0x00e38f82)]
        HRESULT DisplayKeysInTooltips([in] VARIANT_BOOL pbShow);
        [id(0x6002000f), propget, helpcontext(0x00e38f87)]
        HRESULT DisplayTooltips([out, retval] VARIANT_BOOL* pbShow);
        [id(0x6002000f), propput, helpcontext(0x00e38f87)]
        HRESULT DisplayTooltips([in] VARIANT_BOOL pbShow);
        [id(0x60020011), propget, helpcontext(0x00e3910d)]
        HRESULT LargeButtons([out, retval] VARIANT_BOOL* pbLarge);
        [id(0x60020011), propput, helpcontext(0x00e3910d)]
        HRESULT LargeButtons([in] VARIANT_BOOL pbLarge);
        [id(0x60020013), propget, helpcontext(0x00e3916c)]
        HRESULT MenuAnimationStyle([out, retval] short* pAnim);
        [id(0x60020013), propput, helpcontext(0x00e3916c)]
        HRESULT MenuAnimationStyle([in] short pAnim);
        [id(0x60020015), propget, helpcontext(0x00e38edd)]
        HRESULT Clone([out, retval] IVUIObject** ppUIObject);
    };

    [
      odl,
      uuid(000D0236-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x000027bf),
      hidden,
      dual,
      oleautomation
    ]
    interface IVMenuSets : IDispatch {
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lplpIEnumVMenuSet);
        [id(00000000), propget, helpstring("The first item in a MenuSets collection is item 0."), helpcontext(0x00ccad85)]
        HRESULT Item(
                        [in] long lIndex, 
                        [out, retval] IVMenuSet** lplpMenuSet);
        [id(0x60020002), propget, helpcontext(0x00ccad8a)]
        HRESULT ItemAtID(
                        [in] long lID, 
                        [out, retval] IVMenuSet** lplpMenuSet);
        [id(0x60020003), helpcontext(0x00ccb645)]
        HRESULT Add([out, retval] IVMenuSet** lplpMenuSet);
        [id(0x60020004), helpcontext(0x00ccb654)]
        HRESULT AddAtID(
                        [in] long lID, 
                        [out, retval] IVMenuSet** lplpMenuSet);
        [id(0x60020005), propget, helpcontext(0x00ccabd2)]
        HRESULT Count([out, retval] long* lplCount);
        [id(0x60020006), propget, helpcontext(0x00ccae98)]
        HRESULT Parent([out, retval] IVUIObject** lplpVUIObject);
    };

    [
      odl,
      uuid(000D0232-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x000027ba),
      hidden,
      dual,
      oleautomation
    ]
    interface IVMenuSet : IDispatch {
        [id(0x60020000), helpcontext(0x00cb3045)]
        HRESULT Delete();
        [id(0x60020001), propget, hidden]
        HRESULT Default([out, retval] BSTR* pCaption);
        [id(00000000), propput, helpcontext(0x00cb2492)]
        HRESULT Caption([in] BSTR pCaption);
        [id(00000000), propget, helpcontext(0x00cb2492)]
        HRESULT Caption([out, retval] BSTR* pCaption);
        [id(0x60020004), propget, helpcontext(0x00cb290b)]
        HRESULT SetID([out, retval] long* plSetID);
        [id(0x60020005), propget, helpcontext(0x00cb2776)]
        HRESULT Menus([out, retval] IVMenus** lplpVMenus);
        [id(0x60020006), propget, helpcontext(0x00cb27f8)]
        HRESULT Parent([out, retval] IVMenuSets** lplpVMenuSets);
        [id(0x60020007), propget, helpcontext(0x00cb2483)]
        HRESULT BuiltIn([out, retval] VARIANT_BOOL* pbBuiltIn);
        [id(0x60020008), propput, helpcontext(0x00cb25af)]
        HRESULT Enabled([in] VARIANT_BOOL pbEnabled);
        [id(0x60020008), propget, helpcontext(0x00cb25af)]
        HRESULT Enabled([out, retval] VARIANT_BOOL* pbEnabled);
        [id(0x6002000a), propput, helpcontext(0x00cb264f)]
        HRESULT Height([in] short pHeight);
        [id(0x6002000a), propget, helpcontext(0x00cb264f)]
        HRESULT Height([out, retval] short* pHeight);
        [id(0x6002000c), propput, helpcontext(0x00cb2721)]
        HRESULT Left([in] short pLeft);
        [id(0x6002000c), propget, helpcontext(0x00cb2721)]
        HRESULT Left([out, retval] short* pLeft);
        [id(0x6002000e), propput, helpcontext(0x00cb282f)]
        HRESULT Position([in] short pPos);
        [id(0x6002000e), propget, helpcontext(0x00cb282f)]
        HRESULT Position([out, retval] short* pPos);
        [id(0x60020010), propput, helpcontext(0x00cb2884)]
        HRESULT Protection([in] short pProt);
        [id(0x60020010), propget, helpcontext(0x00cb2884)]
        HRESULT Protection([out, retval] short* pProt);
        [id(0x60020012), propput, helpcontext(0x00cb28cf)]
        HRESULT RowIndex([in] short pwRow);
        [id(0x60020012), propget, helpcontext(0x00cb28cf)]
        HRESULT RowIndex([out, retval] short* pwRow);
        [id(0x60020014), propput, helpcontext(0x00cb2a0a)]
        HRESULT Top([in] short pTop);
        [id(0x60020014), propget, helpcontext(0x00cb2a0a)]
        HRESULT Top([out, retval] short* pTop);
        [id(0x60020016), propput, helpcontext(0x00cb2a5a)]
        HRESULT Visible([in] VARIANT_BOOL pbVisible);
        [id(0x60020016), propget, helpcontext(0x00cb2a5a)]
        HRESULT Visible([out, retval] VARIANT_BOOL* pbVisible);
        [id(0x60020018), propput, helpcontext(0x00cb2a5f)]
        HRESULT Width([in] short pwWidth);
        [id(0x60020018), propget, helpcontext(0x00cb2a5f)]
        HRESULT Width([out, retval] short* pwWidth);
    };

    [
      odl,
      uuid(000D0225-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x000027b5),
      hidden,
      dual,
      oleautomation
    ]
    interface IVMenus : IDispatch {
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lplpIEnumVMenu);
        [id(00000000), propget, helpstring("The first item in a Menus collection is item 0."), helpcontext(0x00c9a045)]
        HRESULT Item(
                        [in] long lIndex, 
                        [out, retval] IVMenu** lplpMenu);
        [id(0x60020002), helpcontext(0x00c9a905)]
        HRESULT Add([out, retval] IVMenu** lplpMenu);
        [id(0x60020003), helpcontext(0x00c9a90f)]
        HRESULT AddAt(
                        [in] long lIndex, 
                        [out, retval] IVMenu** lplpMenu);
        [id(0x60020004), propget, helpcontext(0x00c99e92)]
        HRESULT Count([out, retval] long* lplCount);
        [id(0x60020005), propget, helpcontext(0x00c9a158)]
        HRESULT Parent([out, retval] IVMenuSet** lplpVMenuSet);
    };

    [
      odl,
      uuid(000D0222-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x000027a6),
      hidden,
      dual,
      oleautomation
    ]
    interface IVMenu : IDispatch {
        [id(0x60020000), helpcontext(0x00c82305)]
        HRESULT Delete();
        [id(0x60020001), propget, hidden, helpcontext(0x00c7e3e0)]
        HRESULT Default([out, retval] BSTR* pCaption);
        [id(00000000), propput, helpcontext(0x00c81752)]
        HRESULT Caption([in] BSTR pCaption);
        [id(00000000), propget, helpcontext(0x00c81752)]
        HRESULT Caption([out, retval] BSTR* pCaption);
        [id(0x60020004), propget, helpcontext(0x00c8195f)]
        HRESULT Index([out, retval] long* plIndex);
        [id(0x60020005), propput, helpcontext(0x00c81a27)]
        HRESULT MDIWindowMenu([in] short pMDIWindowMenu);
        [id(0x60020005), propget, helpcontext(0x00c81a27)]
        HRESULT MDIWindowMenu([out, retval] short* pMDIWindowMenu);
        [id(0x60020007), propget, helpcontext(0x00c81a31)]
        HRESULT MenuItems([out, retval] IVMenuItems** lplpVMenuItems);
        [id(0x60020008), propget, helpcontext(0x00c81ab8)]
        HRESULT Parent([out, retval] IVMenus** lplpVMenus);
        [id(0x60020009), propput, helpcontext(0x00c817a7)]
        HRESULT CmdNum([in] short pwCmd);
        [id(0x60020009), propget, helpcontext(0x00c817a7)]
        HRESULT CmdNum([out, retval] short* pwCmd);
        [id(0x6002000b), propput, hidden, helpstring("HelpContextID is obsolete as of Visio 2000."), helpcontext(0x00c81919)]
        HRESULT HelpContextID([in] short pHelpContextID);
        [id(0x6002000b), propget, hidden, helpstring("HelpContextID is obsolete as of Visio 2000."), helpcontext(0x00c81919)]
        HRESULT HelpContextID([out, retval] short* pHelpContextID);
        [id(0x6002000d), propget, hidden, helpstring("IsSeparator is obsolete as of Visio 2000."), helpcontext(0x00c8199b)]
        HRESULT IsSeparator([out, retval] short* pIsSeparator);
        [id(0x6002000e), propget, helpcontext(0x00c8198c)]
        HRESULT IsHierarchical([out, retval] short* pIsHierarchical);
        [id(0x6002000f), propput, helpcontext(0x00c817b1)]
        HRESULT CntrlType([in] short pwCntrlType);
        [id(0x6002000f), propget, helpcontext(0x00c817b1)]
        HRESULT CntrlType([out, retval] short* pwCntrlType);
        [id(0x60020011), propput, hidden, helpstring("CntrlID is obsolete as of Visio 2000."), helpcontext(0x00c817ac)]
        HRESULT CntrlID([in] short pwCntrlID);
        [id(0x60020011), propget, hidden, helpstring("CntrlID is obsolete as of Visio 2000."), helpcontext(0x00c817ac)]
        HRESULT CntrlID([out, retval] short* pwCntrlID);
        [id(0x60020013), propput, helpcontext(0x00c81ce8)]
        HRESULT TypeSpecific1([in] short pwTypeSpecific);
        [id(0x60020013), propget, helpcontext(0x00c81ce8)]
        HRESULT TypeSpecific1([out, retval] short* pwTypeSpecific);
        [id(0x60020015), propput, hidden, helpstring("Priority is obsolete as of Visio 2000."), helpcontext(0x00c81b1c)]
        HRESULT Priority([in] short pwPriority);
        [id(0x60020015), propget, hidden, helpstring("Priority is obsolete as of Visio 2000."), helpcontext(0x00c81b1c)]
        HRESULT Priority([out, retval] short* pwPriority);
        [id(0x60020017), propput, hidden, helpstring("Spacing is obsolete as of Visio 2000."), helpcontext(0x00c81c16)]
        HRESULT Spacing([in] short pwSpacing);
        [id(0x60020017), propget, hidden, helpstring("Spacing is obsolete as of Visio 2000."), helpcontext(0x00c81c16)]
        HRESULT Spacing([out, retval] short* pwSpacing);
        [id(0x60020019), propput, helpcontext(0x00c81ced)]
        HRESULT TypeSpecific2([in] short pwTypeSpecific);
        [id(0x60020019), propget, helpcontext(0x00c81ced)]
        HRESULT TypeSpecific2([out, retval] short* pwTypeSpecific);
        [id(0x6002001b), propput, helpcontext(0x00c816b7)]
        HRESULT ActionText([in] BSTR pActionText);
        [id(0x6002001b), propget, helpcontext(0x00c816b7)]
        HRESULT ActionText([out, retval] BSTR* pActionText);
        [id(0x6002001d), propput, hidden, helpstring("Minihelp is obsolete as of Visio 2002."), helpcontext(0x00c81a40)]
        HRESULT MiniHelp([in] BSTR pMiniHelp);
        [id(0x6002001d), propget, hidden, helpstring("Minihelp is obsolete as of Visio 2002."), helpcontext(0x00c81a40)]
        HRESULT MiniHelp([out, retval] BSTR* pMiniHelp);
        [id(0x6002001f), propput, helpcontext(0x00c816da)]
        HRESULT AddOnName([in] BSTR pAddOnName);
        [id(0x6002001f), propget, helpcontext(0x00c816da)]
        HRESULT AddOnName([out, retval] BSTR* pAddOnName);
        [id(0x60020021), propput, helpcontext(0x00c816d5)]
        HRESULT AddOnArgs([in] BSTR pAddOnArgs);
        [id(0x60020021), propget, helpcontext(0x00c816d5)]
        HRESULT AddOnArgs([out, retval] BSTR* pAddOnArgs);
        [id(0x60020023), propput, hidden, helpstring("HelpFile is obsolete as of Visio 2000."), helpcontext(0x00c8191e)]
        HRESULT HelpFile([in] BSTR pHelpFile);
        [id(0x60020023), propget, hidden, helpstring("HelpFile is obsolete as of Visio 2000."), helpcontext(0x00c8191e)]
        HRESULT HelpFile([out, retval] BSTR* pHelpFile);
        [id(0x60020025), helpcontext(0x00c823be)]
        HRESULT IconFileName([in] BSTR IconFileName);
        [id(0x60020026), propget, helpcontext(0x00c81743)]
        HRESULT BuiltIn([out, retval] VARIANT_BOOL* pbBuiltIn);
        [id(0x60020027), propput, helpcontext(0x00c8186f)]
        HRESULT Enabled([in] VARIANT_BOOL pbEnabled);
        [id(0x60020027), propget, helpcontext(0x00c8186f)]
        HRESULT Enabled([out, retval] VARIANT_BOOL* pbEnabled);
        [id(0x60020029), propput, helpcontext(0x00c81897)]
        HRESULT FaceID([in] short pwFaceID);
        [id(0x60020029), propget, helpcontext(0x00c81897)]
        HRESULT FaceID([out, retval] short* pwFaceID);
        [id(0x6002002b), propput, helpcontext(0x00c81c39)]
        HRESULT State([in] short pwState);
        [id(0x6002002b), propget, helpcontext(0x00c81c39)]
        HRESULT State([out, retval] short* pwState);
        [id(0x6002002d), propput, helpcontext(0x00c8abae)]
        HRESULT Style([in] short pwStyle);
        [id(0x6002002d), propget, helpcontext(0x00c8abae)]
        HRESULT Style([out, retval] short* pwStyle);
        [id(0x6002002f), propput, helpcontext(0x00c81d1a)]
        HRESULT Visible([in] VARIANT_BOOL pbVisible);
        [id(0x6002002f), propget, helpcontext(0x00c81d1a)]
        HRESULT Visible([out, retval] VARIANT_BOOL* pbVisible);
        [id(0x60020031), propput, helpcontext(0x00c81d1f)]
        HRESULT Width([in] short pwWidth);
        [id(0x60020031), propget, helpcontext(0x00c81d1f)]
        HRESULT Width([out, retval] short* pwWidth);
        [id(0x60020033), propput, helpcontext(0x00c81a9a)]
        HRESULT PaletteWidth([in] short pwWidth);
        [id(0x60020033), propget, helpcontext(0x00c81a9a)]
        HRESULT PaletteWidth([out, retval] short* pwWidth);
    };

    [
      odl,
      uuid(000D0216-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x000027b0),
      hidden,
      dual,
      oleautomation
    ]
    interface IVMenuItems : IDispatch {
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lplpIEnumVMenuItem);
        [id(00000000), propget, helpstring("The first item in a MenuItems collection is item 0."), helpcontext(0x00c69305)]
        HRESULT Item(
                        [in] long lIndex, 
                        [out, retval] IVMenuItem** lplpMenuItem);
        [id(0x60020002), helpcontext(0x00c69bc5)]
        HRESULT Add([out, retval] IVMenuItem** lplpMenuItem);
        [id(0x60020003), helpcontext(0x00c69bcf)]
        HRESULT AddAt(
                        [in] long lIndex, 
                        [out, retval] IVMenuItem** lplpMenuItem);
        [id(0x60020004), propget, helpcontext(0x00c69152)]
        HRESULT Count([out, retval] long* lplCount);
        [id(0x60020005), propget, helpcontext(0x00c69418)]
        HRESULT Parent([out, retval] IVMenu** lplpVMenu);
        [id(0x60020006), propget, helpcontext(0x00c6941d)]
        HRESULT ParentItem([out, retval] IVMenuItem** lplpVMenuItem);
    };

    [
      odl,
      uuid(000D0212-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x000027ab),
      hidden,
      dual,
      oleautomation
    ]
    interface IVMenuItem : IDispatch {
        [id(0x60020000), helpcontext(0x00c515c5)]
        HRESULT Delete();
        [id(0x60020001), propget, hidden, helpcontext(0x00c4d6a0)]
        HRESULT Default([out, retval] BSTR* pCaption);
        [id(0x60020002), propget, helpcontext(0x00c50c1f)]
        HRESULT Index([out, retval] long* plIndex);
        [id(0x60020003), propget, helpcontext(0x00c50cf1)]
        HRESULT MenuItems([out, retval] IVMenuItems** lplpVMenuItems);
        [id(0x60020004), propget, helpcontext(0x00c50d78)]
        HRESULT Parent([out, retval] IVMenuItems** lplpVMenuItems);
        [id(0x60020005), propput, helpcontext(0x00c50a67)]
        HRESULT CmdNum([in] short pwCmd);
        [id(0x60020005), propget, helpcontext(0x00c50a67)]
        HRESULT CmdNum([out, retval] short* pwCmd);
        [id(0x60020007), propput, hidden, helpstring("HelpContextID is obsolete as of Visio 2000."), helpcontext(0x00c50bd9)]
        HRESULT HelpContextID([in] short pHelpContextID);
        [id(0x60020007), propget, hidden, helpstring("HelpContextID is obsolete as of Visio 2000."), helpcontext(0x00c50bd9)]
        HRESULT HelpContextID([out, retval] short* pHelpContextID);
        [id(0x60020009), propget, hidden, helpstring("IsSeparator is obsolete as of Visio 2000."), helpcontext(0x00c50c5b)]
        HRESULT IsSeparator([out, retval] short* pIsSeparator);
        [id(0x6002000a), propget, helpcontext(0x00c50c4c)]
        HRESULT IsHierarchical([out, retval] short* pIsHierarchical);
        [id(00000000), propput, helpcontext(0x00c50a12)]
        HRESULT Caption([in] BSTR pCaption);
        [id(00000000), propget, helpcontext(0x00c50a12)]
        HRESULT Caption([out, retval] BSTR* pCaption);
        [id(0x6002000d), propput, helpcontext(0x00c50977)]
        HRESULT ActionText([in] BSTR pActionText);
        [id(0x6002000d), propget, helpcontext(0x00c50977)]
        HRESULT ActionText([out, retval] BSTR* pActionText);
        [id(0x6002000f), propput, hidden, helpstring("Minihelp is obsolete as of Visio 2002."), helpcontext(0x00c50d00)]
        HRESULT MiniHelp([in] BSTR pMiniHelp);
        [id(0x6002000f), propget, hidden, helpstring("Minihelp is obsolete as of Visio 2002."), helpcontext(0x00c50d00)]
        HRESULT MiniHelp([out, retval] BSTR* pMiniHelp);
        [id(0x60020011), propput, helpcontext(0x00c5099a)]
        HRESULT AddOnName([in] BSTR pAddOnName);
        [id(0x60020011), propget, helpcontext(0x00c5099a)]
        HRESULT AddOnName([out, retval] BSTR* pAddOnName);
        [id(0x60020013), propput, helpcontext(0x00c50995)]
        HRESULT AddOnArgs([in] BSTR pAddOnArgs);
        [id(0x60020013), propget, helpcontext(0x00c50995)]
        HRESULT AddOnArgs([out, retval] BSTR* pAddOnArgs);
        [id(0x60020015), propput, hidden, helpstring("HelpFile is obsolete as of Visio 2000."), helpcontext(0x00c50bde)]
        HRESULT HelpFile([in] BSTR pHelpFile);
        [id(0x60020015), propget, hidden, helpstring("HelpFile is obsolete as of Visio 2000."), helpcontext(0x00c50bde)]
        HRESULT HelpFile([out, retval] BSTR* pHelpFile);
        [id(0x60020017), propput, helpcontext(0x00c50a71)]
        HRESULT CntrlType([in] short pwCntrlType);
        [id(0x60020017), propget, helpcontext(0x00c50a71)]
        HRESULT CntrlType([out, retval] short* pwCntrlType);
        [id(0x60020019), propput, hidden, helpstring("CntrlID is obsolete as of Visio 2000."), helpcontext(0x00c50a6c)]
        HRESULT CntrlID([in] short pwCntrlID);
        [id(0x60020019), propget, hidden, helpstring("CntrlID is obsolete as of Visio 2000."), helpcontext(0x00c50a6c)]
        HRESULT CntrlID([out, retval] short* pwCntrlID);
        [id(0x6002001b), propput, helpcontext(0x00c50fa8)]
        HRESULT TypeSpecific1([in] short pwTypeSpecific);
        [id(0x6002001b), propget, helpcontext(0x00c50fa8)]
        HRESULT TypeSpecific1([out, retval] short* pwTypeSpecific);
        [id(0x6002001d), propput, hidden, helpstring("Priority is obsolete as of Visio 2000."), helpcontext(0x00c50ddc)]
        HRESULT Priority([in] short pwPriority);
        [id(0x6002001d), propget, hidden, helpstring("Priority is obsolete as of Visio 2000."), helpcontext(0x00c50ddc)]
        HRESULT Priority([out, retval] short* pwPriority);
        [id(0x6002001f), propput, hidden, helpstring("Spacing is obsolete as of Visio 2000."), helpcontext(0x00c50ed6)]
        HRESULT Spacing([in] short pwSpacing);
        [id(0x6002001f), propget, hidden, helpstring("Spacing is obsolete as of Visio 2000."), helpcontext(0x00c50ed6)]
        HRESULT Spacing([out, retval] short* pwSpacing);
        [id(0x60020021), propput, helpcontext(0x00c50fad)]
        HRESULT TypeSpecific2([in] short pwTypeSpecific);
        [id(0x60020021), propget, helpcontext(0x00c50fad)]
        HRESULT TypeSpecific2([out, retval] short* pwTypeSpecific);
        [id(0x60020023), helpcontext(0x00c5167e)]
        HRESULT IconFileName([in] BSTR IconFileName);
        [id(0x60020024), propget, helpcontext(0x00c50a03)]
        HRESULT BuiltIn([out, retval] VARIANT_BOOL* pbBuiltIn);
        [id(0x60020025), propput, helpcontext(0x00c50b2f)]
        HRESULT Enabled([in] VARIANT_BOOL pbEnabled);
        [id(0x60020025), propget, helpcontext(0x00c50b2f)]
        HRESULT Enabled([out, retval] VARIANT_BOOL* pbEnabled);
        [id(0x60020027), propput, helpcontext(0x00c50b57)]
        HRESULT FaceID([in] short pwFaceID);
        [id(0x60020027), propget, helpcontext(0x00c50b57)]
        HRESULT FaceID([out, retval] short* pwFaceID);
        [id(0x60020029), propput, helpcontext(0x00c50ef9)]
        HRESULT State([in] short pwState);
        [id(0x60020029), propget, helpcontext(0x00c50ef9)]
        HRESULT State([out, retval] short* pwState);
        [id(0x6002002b), propput, helpcontext(0x00c59e6e)]
        HRESULT Style([in] short pwStyle);
        [id(0x6002002b), propget, helpcontext(0x00c59e6e)]
        HRESULT Style([out, retval] short* pwStyle);
        [id(0x6002002d), propput, helpcontext(0x00c50fda)]
        HRESULT Visible([in] VARIANT_BOOL pbVisible);
        [id(0x6002002d), propget, helpcontext(0x00c50fda)]
        HRESULT Visible([out, retval] VARIANT_BOOL* pbVisible);
        [id(0x6002002f), propput, helpcontext(0x00c50fdf)]
        HRESULT Width([in] short pwWidth);
        [id(0x6002002f), propget, helpcontext(0x00c50fdf)]
        HRESULT Width([out, retval] short* pwWidth);
        [id(0x60020031), propput, helpcontext(0x00c50d5a)]
        HRESULT PaletteWidth([in] short pwWidth);
        [id(0x60020031), propget, helpcontext(0x00c50d5a)]
        HRESULT PaletteWidth([out, retval] short* pwWidth);
        [id(0x60020033), propput, helpcontext(0x00c59e4b)]
        HRESULT BeginGroup([in] VARIANT_BOOL pbRet);
        [id(0x60020033), propget, helpcontext(0x00c59e4b)]
        HRESULT BeginGroup([out, retval] VARIANT_BOOL* pbRet);
    };

    [
      odl,
      uuid(000D0266-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x00002837),
      hidden,
      dual,
      oleautomation
    ]
    interface IVToolbarSets : IDispatch {
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lplpIEnumVToolbarSet);
        [id(00000000), propget, helpstring("The first item in a ToolbarSets collection is item 0."), helpcontext(0x00d5d545)]
        HRESULT Item(
                        [in] long lIndex, 
                        [out, retval] IVToolbarSet** lplpToolbarSet);
        [id(0x60020002), propget, helpcontext(0x00d5d54a)]
        HRESULT ItemAtID(
                        [in] long lID, 
                        [out, retval] IVToolbarSet** lplpToolbarSet);
        [id(0x60020003), helpcontext(0x00d5de05)]
        HRESULT Add([out, retval] IVToolbarSet** lplpToolbarSet);
        [id(0x60020004), helpcontext(0x00d5de14)]
        HRESULT AddAtID(
                        [in] long lID, 
                        [out, retval] IVToolbarSet** lplpToolbarSet);
        [id(0x60020005), propget, helpcontext(0x00d5d392)]
        HRESULT Count([out, retval] long* lplCount);
        [id(0x60020006), propget, helpcontext(0x00d5d658)]
        HRESULT Parent([out, retval] IVUIObject** lplpVUIObject);
    };

    [
      odl,
      uuid(000D0262-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x00002832),
      hidden,
      dual,
      oleautomation
    ]
    interface IVToolbarSet : IDispatch {
        [id(0x60020000), helpcontext(0x00d45805)]
        HRESULT Delete();
        [id(0x60020001), propget, hidden]
        HRESULT Default([out, retval] BSTR* pCaption);
        [id(00000000), propput, helpcontext(0x00d44c52)]
        HRESULT Caption([in] BSTR pCaption);
        [id(00000000), propget, helpcontext(0x00d44c52)]
        HRESULT Caption([out, retval] BSTR* pCaption);
        [id(0x60020004), propget, helpcontext(0x00d450cb)]
        HRESULT SetID([out, retval] long* plSetID);
        [id(0x60020005), propget, helpcontext(0x00d451bb)]
        HRESULT Toolbars([out, retval] IVToolbars** lplpVToolbars);
        [id(0x60020006), propget, helpcontext(0x00d44fb8)]
        HRESULT Parent([out, retval] IVToolbarSets** lplpVToolbarSets);
    };

    [
      odl,
      uuid(000D0255-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x0000282d),
      hidden,
      dual,
      oleautomation
    ]
    interface IVToolbars : IDispatch {
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lplpIEnumVToolbar);
        [id(00000000), propget, helpstring("The first item in a Toolbars collection is item 0."), helpcontext(0x00d2c805)]
        HRESULT Item(
                        [in] long lIndex, 
                        [out, retval] IVToolbar** lplpToolbar);
        [id(0x60020002), helpcontext(0x00d2d0c5)]
        HRESULT Add([out, retval] IVToolbar** lplpToolbar);
        [id(0x60020003), helpcontext(0x00d2d0cf)]
        HRESULT AddAt(
                        [in] long lIndex, 
                        [out, retval] IVToolbar** lplpToolbar);
        [id(0x60020004), propget, helpcontext(0x00d2c652)]
        HRESULT Count([out, retval] long* lplCount);
        [id(0x60020005), propget, helpcontext(0x00d2c918)]
        HRESULT Parent([out, retval] IVToolbarSet** lplpVToolbarSet);
    };

    [
      odl,
      uuid(000D0252-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x0000281e),
      hidden,
      dual,
      oleautomation
    ]
    interface IVToolbar : IDispatch {
        [id(0x60020000), helpcontext(0x00d14ac5)]
        HRESULT Delete();
        [id(0x60020001), propget, hidden]
        HRESULT Default([out, retval] BSTR* pCaption);
        [id(00000000), propput, helpcontext(0x00d13f12)]
        HRESULT Caption([in] BSTR pCaption);
        [id(00000000), propget, helpcontext(0x00d13f12)]
        HRESULT Caption([out, retval] BSTR* pCaption);
        [id(0x60020004), propget, helpcontext(0x00d1411f)]
        HRESULT Index([out, retval] long* plIndex);
        [id(0x60020005), propget, helpcontext(0x00d14476)]
        HRESULT ToolbarItems([out, retval] IVToolbarItems** lplpVToolbarItems);
        [id(0x60020006), propget, helpcontext(0x00d14278)]
        HRESULT Parent([out, retval] IVToolbars** lplpVToolbars);
        [id(0x60020007), propget, helpcontext(0x00d13f03)]
        HRESULT BuiltIn([out, retval] VARIANT_BOOL* pbBuiltIn);
        [id(0x60020008), propput, helpcontext(0x00d1402f)]
        HRESULT Enabled([in] VARIANT_BOOL pbEnabled);
        [id(0x60020008), propget, helpcontext(0x00d1402f)]
        HRESULT Enabled([out, retval] VARIANT_BOOL* pbEnabled);
        [id(0x6002000a), propput, helpcontext(0x00d140cf)]
        HRESULT Height([in] short pHeight);
        [id(0x6002000a), propget, helpcontext(0x00d140cf)]
        HRESULT Height([out, retval] short* pHeight);
        [id(0x6002000c), propput, helpcontext(0x00d141a1)]
        HRESULT Left([in] short pLeft);
        [id(0x6002000c), propget, helpcontext(0x00d141a1)]
        HRESULT Left([out, retval] short* pLeft);
        [id(0x6002000e), propput, helpcontext(0x00d142af)]
        HRESULT Position([in] short pPos);
        [id(0x6002000e), propget, helpcontext(0x00d142af)]
        HRESULT Position([out, retval] short* pPos);
        [id(0x60020010), propput, helpcontext(0x00d14304)]
        HRESULT Protection([in] short pProt);
        [id(0x60020010), propget, helpcontext(0x00d14304)]
        HRESULT Protection([out, retval] short* pProt);
        [id(0x60020012), propput, helpcontext(0x00d1434f)]
        HRESULT RowIndex([in] short pwRow);
        [id(0x60020012), propget, helpcontext(0x00d1434f)]
        HRESULT RowIndex([out, retval] short* pwRow);
        [id(0x60020014), propput, helpcontext(0x00d1448a)]
        HRESULT Top([in] short pTop);
        [id(0x60020014), propget, helpcontext(0x00d1448a)]
        HRESULT Top([out, retval] short* pTop);
        [id(0x60020016), propput, helpcontext(0x00d144da)]
        HRESULT Visible([in] VARIANT_BOOL pbVisible);
        [id(0x60020016), propget, helpcontext(0x00d144da)]
        HRESULT Visible([out, retval] VARIANT_BOOL* pbVisible);
        [id(0x60020018), propput, helpcontext(0x00d144df)]
        HRESULT Width([in] short pwWidth);
        [id(0x60020018), propget, helpcontext(0x00d144df)]
        HRESULT Width([out, retval] short* pwWidth);
    };

    [
      odl,
      uuid(000D0245-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x00002828),
      hidden,
      dual,
      oleautomation
    ]
    interface IVToolbarItems : IDispatch {
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lplpIEnumVToolbarItem);
        [id(00000000), propget, helpstring("The first item in a ToolbarItems collection is item 0."), helpcontext(0x00cfbac5)]
        HRESULT Item(
                        [in] long lIndex, 
                        [out, retval] IVToolbarItem** lplpToolbarItem);
        [id(0x60020002), helpcontext(0x00cfc385)]
        HRESULT Add([out, retval] IVToolbarItem** lplpToolbarItem);
        [id(0x60020003), helpcontext(0x00cfc38f)]
        HRESULT AddAt(
                        [in] long lIndex, 
                        [out, retval] IVToolbarItem** lplpToolbarItem);
        [id(0x60020004), propget, helpcontext(0x00cfb912)]
        HRESULT Count([out, retval] long* lplCount);
        [id(0x60020005), propget, helpcontext(0x00cfbbd8)]
        HRESULT Parent([out, retval] IVToolbar** lplpVToolbar);
        [id(0x60020006), propget, helpcontext(0x00cfbbdd)]
        HRESULT ParentItem([out, retval] IVToolbarItem** lplpVToolbarItem);
    };

    [
      odl,
      uuid(000D0242-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x00002823),
      hidden,
      dual,
      oleautomation
    ]
    interface IVToolbarItem : IDispatch {
        [id(0x60020000), helpcontext(0x00ce3d85)]
        HRESULT Delete();
        [id(0x60020001), helpcontext(0x00ce3e3e)]
        HRESULT IconFileName([in] BSTR IconFileName);
        [id(0x60020002), propget, hidden, helpcontext(0x00cdfe60)]
        HRESULT Default([out, retval] BSTR* pActionText);
        [id(0x60020003), propget, helpcontext(0x00ce33df)]
        HRESULT Index([out, retval] long* plIndex);
        [id(0x60020004), propget, helpcontext(0x00ce3538)]
        HRESULT Parent([out, retval] IVToolbarItems** lplpVToolbarItems);
        [id(0x60020005), propput, helpcontext(0x00ce3227)]
        HRESULT CmdNum([in] short pwCmd);
        [id(0x60020005), propget, helpcontext(0x00ce3227)]
        HRESULT CmdNum([out, retval] short* pwCmd);
        [id(0x60020007), propput, hidden, helpstring("HelpContextID is obsolete as of Visio 2000."), helpcontext(0x00ce3399)]
        HRESULT HelpContextID([in] short pHelpContextID);
        [id(0x60020007), propget, hidden, helpstring("HelpContextID is obsolete as of Visio 2000."), helpcontext(0x00ce3399)]
        HRESULT HelpContextID([out, retval] short* pHelpContextID);
        [id(00000000), propput, helpcontext(0x00ce3137)]
        HRESULT ActionText([in] BSTR pActionText);
        [id(00000000), propget, helpcontext(0x00ce3137)]
        HRESULT ActionText([out, retval] BSTR* pActionText);
        [id(0x6002000b), propput, helpcontext(0x00ce315a)]
        HRESULT AddOnName([in] BSTR pAddOnName);
        [id(0x6002000b), propget, helpcontext(0x00ce315a)]
        HRESULT AddOnName([out, retval] BSTR* pAddOnName);
        [id(0x6002000d), propput, helpcontext(0x00ce3155)]
        HRESULT AddOnArgs([in] BSTR pAddOnArgs);
        [id(0x6002000d), propget, helpcontext(0x00ce3155)]
        HRESULT AddOnArgs([out, retval] BSTR* pAddOnArgs);
        [id(0x6002000f), propput, hidden, helpstring("HelpFile is obsolete as of Visio 2000."), helpcontext(0x00ce339e)]
        HRESULT HelpFile([in] BSTR pHelpFile);
        [id(0x6002000f), propget, hidden, helpstring("HelpFile is obsolete as of Visio 2000."), helpcontext(0x00ce339e)]
        HRESULT HelpFile([out, retval] BSTR* pHelpFile);
        [id(0x60020011), propput, helpcontext(0x00ce3231)]
        HRESULT CntrlType([in] short pwCntrlType);
        [id(0x60020011), propget, helpcontext(0x00ce3231)]
        HRESULT CntrlType([out, retval] short* pwCntrlType);
        [id(0x60020013), propput, hidden, helpstring("CntrlID is obsolete as of Visio 2000."), helpcontext(0x00ce322c)]
        HRESULT CntrlID([in] short pwCntrlID);
        [id(0x60020013), propget, hidden, helpstring("CntrlID is obsolete as of Visio 2000."), helpcontext(0x00ce322c)]
        HRESULT CntrlID([out, retval] short* pwCntrlID);
        [id(0x60020015), propput, helpcontext(0x00ce3768)]
        HRESULT TypeSpecific1([in] short pwTypeSpecific);
        [id(0x60020015), propget, helpcontext(0x00ce3768)]
        HRESULT TypeSpecific1([out, retval] short* pwTypeSpecific);
        [id(0x60020017), propput, hidden, helpstring("Priority is obsolete as of Visio 2000."), helpcontext(0x00ce359c)]
        HRESULT Priority([in] short pwPriority);
        [id(0x60020017), propget, hidden, helpstring("Priority is obsolete as of Visio 2000."), helpcontext(0x00ce359c)]
        HRESULT Priority([out, retval] short* pwPriority);
        [id(0x60020019), propput, hidden, helpstring("Spacing is obsolete as of Visio 2000."), helpcontext(0x00ce3696)]
        HRESULT Spacing([in] short pwSpacing);
        [id(0x60020019), propget, hidden, helpstring("Spacing is obsolete as of Visio 2000."), helpcontext(0x00ce3696)]
        HRESULT Spacing([out, retval] short* pwSpacing);
        [id(0x6002001b), propput, helpcontext(0x00ce376d)]
        HRESULT TypeSpecific2([in] short pwTypeSpecific);
        [id(0x6002001b), propget, helpcontext(0x00ce376d)]
        HRESULT TypeSpecific2([out, retval] short* pwTypeSpecific);
        [id(0x6002001d), propput, helpcontext(0x00ce31d2)]
        HRESULT Caption([in] BSTR pCaption);
        [id(0x6002001d), propget, helpcontext(0x00ce31d2)]
        HRESULT Caption([out, retval] BSTR* pCaption);
        [id(0x6002001f), propput, hidden, helpstring("Minihelp is obsolete as of Visio 2002."), helpcontext(0x00ce34c0)]
        HRESULT MiniHelp([in] BSTR pMiniHelp);
        [id(0x6002001f), propget, hidden, helpstring("Minihelp is obsolete as of Visio 2002."), helpcontext(0x00ce34c0)]
        HRESULT MiniHelp([out, retval] BSTR* pMiniHelp);
        [id(0x60020021), propget, helpcontext(0x00ce31c3)]
        HRESULT BuiltIn([out, retval] VARIANT_BOOL* pbBuiltIn);
        [id(0x60020022), propput, helpcontext(0x00ce32ef)]
        HRESULT Enabled([in] VARIANT_BOOL pbEnabled);
        [id(0x60020022), propget, helpcontext(0x00ce32ef)]
        HRESULT Enabled([out, retval] VARIANT_BOOL* pbEnabled);
        [id(0x60020024), propput, helpcontext(0x00ce3317)]
        HRESULT FaceID([in] short pwFaceID);
        [id(0x60020024), propget, helpcontext(0x00ce3317)]
        HRESULT FaceID([out, retval] short* pwFaceID);
        [id(0x60020026), propput, helpcontext(0x00ce36b9)]
        HRESULT State([in] short pwState);
        [id(0x60020026), propget, helpcontext(0x00ce36b9)]
        HRESULT State([out, retval] short* pwState);
        [id(0x60020028), propput, helpcontext(0x00cec62e)]
        HRESULT Style([in] short pwStyle);
        [id(0x60020028), propget, helpcontext(0x00cec62e)]
        HRESULT Style([out, retval] short* pwStyle);
        [id(0x6002002a), propput, helpcontext(0x00ce379a)]
        HRESULT Visible([in] VARIANT_BOOL pbVisible);
        [id(0x6002002a), propget, helpcontext(0x00ce379a)]
        HRESULT Visible([out, retval] VARIANT_BOOL* pbVisible);
        [id(0x6002002c), propput, helpcontext(0x00ce379f)]
        HRESULT Width([in] short pwWidth);
        [id(0x6002002c), propget, helpcontext(0x00ce379f)]
        HRESULT Width([out, retval] short* pwWidth);
        [id(0x6002002e), propput, helpcontext(0x00ce351a)]
        HRESULT PaletteWidth([in] short pwWidth);
        [id(0x6002002e), propget, helpcontext(0x00ce351a)]
        HRESULT PaletteWidth([out, retval] short* pwWidth);
        [id(0x60020030), propget, helpcontext(0x00ce3736)]
        HRESULT ToolbarItems([out, retval] IVToolbarItems** lplpVToolbarItems);
        [id(0x60020031), propget, hidden, helpstring("IsSeparator is obsolete as of Visio 2000."), helpcontext(0x00ce341b)]
        HRESULT IsSeparator([out, retval] short* pIsSeparator);
        [id(0x60020032), propget, helpcontext(0x00ce340c)]
        HRESULT IsHierarchical([out, retval] short* pIsHierarchical);
        [id(0x60020033), propput, helpcontext(0x00cec60b)]
        HRESULT BeginGroup([in] VARIANT_BOOL pbRet);
        [id(0x60020033), propget, helpcontext(0x00cec60b)]
        HRESULT BeginGroup([out, retval] VARIANT_BOOL* pbRet);
    };

    [
      odl,
      uuid(000D0285-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x0000280a),
      hidden,
      dual,
      oleautomation
    ]
    interface IVStatusBars : IDispatch {
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lplpIEnumVStatusBar);
        [id(00000000), propget, helpstring("The first item in a StatusBars collection is item 0."), helpcontext(0x00dbefc5)]
        HRESULT Item(
                        [in] long lIndex, 
                        [out, retval] IVStatusBar** lplpStatusBar);
        [id(0x60020002), propget, helpcontext(0x00dbefca)]
        HRESULT ItemAtID(
                        [in] long lID, 
                        [out, retval] IVStatusBar** lplpStatusBar);
        [id(0x60020003), helpcontext(0x00dbf885)]
        HRESULT Add([out, retval] IVStatusBar** lplpStatusBar);
        [id(0x60020004), helpcontext(0x00dbf894)]
        HRESULT AddAtID(
                        [in] long lID, 
                        [out, retval] IVStatusBar** lplpStatusBar);
        [id(0x60020005), propget, helpcontext(0x00dbee12)]
        HRESULT Count([out, retval] long* lplCount);
        [id(0x60020006), propget, helpcontext(0x00dbf0d8)]
        HRESULT Parent([out, retval] IVUIObject** lplpVUIObject);
    };

    [
      odl,
      uuid(000D0282-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x000027fb),
      hidden,
      dual,
      oleautomation
    ]
    interface IVStatusBar : IDispatch {
        [id(0x60020000), helpcontext(0x00da7285)]
        HRESULT Delete();
        [id(0x60020001), propget, hidden]
        HRESULT Default([out, retval] BSTR* pCaption);
        [id(00000000), propput, helpcontext(0x00da66d2)]
        HRESULT Caption([in] BSTR pCaption);
        [id(00000000), propget, helpcontext(0x00da66d2)]
        HRESULT Caption([out, retval] BSTR* pCaption);
        [id(0x60020004), propget, helpcontext(0x00da6b4b)]
        HRESULT SetID([out, retval] long* plSetID);
        [id(0x60020005), propget, helpcontext(0x00da6bbe)]
        HRESULT StatusBarItems([out, retval] IVStatusBarItems** lplpVStatusBarItems);
        [id(0x60020006), propget, helpcontext(0x00da6a38)]
        HRESULT Parent([out, retval] IVStatusBars** lplpVStatusBars);
        [id(0x60020007), propget, helpcontext(0x00da66c3)]
        HRESULT BuiltIn([out, retval] VARIANT_BOOL* pbBuiltIn);
        [id(0x60020008), propput, helpcontext(0x00da6ac4)]
        HRESULT Protection([in] short pProt);
        [id(0x60020008), propget, helpcontext(0x00da6ac4)]
        HRESULT Protection([out, retval] short* pProt);
    };

    [
      odl,
      uuid(000D0275-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x00002805),
      hidden,
      dual,
      oleautomation
    ]
    interface IVStatusBarItems : IDispatch {
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lplpIEnumVStatusBar);
        [id(00000000), propget, helpstring("The first item in a StatusBarItems collection is item 0."), helpcontext(0x00d8e285)]
        HRESULT Item(
                        [in] long lIndex, 
                        [out, retval] IVStatusBarItem** lplpStatusBar);
        [id(0x60020002), helpcontext(0x00d8eb45)]
        HRESULT Add([out, retval] IVStatusBarItem** lplpStatusBarItem);
        [id(0x60020003), helpcontext(0x00d8eb4f)]
        HRESULT AddAt(
                        [in] long lIndex, 
                        [out, retval] IVStatusBarItem** lplpStatusBarItem);
        [id(0x60020004), propget, helpcontext(0x00d8e0d2)]
        HRESULT Count([out, retval] long* lplCount);
        [id(0x60020005), propget, helpcontext(0x00d8e398)]
        HRESULT Parent([out, retval] IVStatusBar** lplpVStatusBar);
        [id(0x60020006), propget, helpcontext(0x00d8e39d)]
        HRESULT ParentItem([out, retval] IVStatusBarItem** lplpVStatusBarItem);
    };

    [
      odl,
      uuid(000D0272-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x00002800),
      hidden,
      dual,
      oleautomation
    ]
    interface IVStatusBarItem : IDispatch {
        [id(0x60020000), helpcontext(0x00d76545)]
        HRESULT Delete();
        [id(0x60020001), helpcontext(0x00d765fe)]
        HRESULT IconFileName([in] BSTR IconFileName);
        [id(0x60020002), propget, hidden]
        HRESULT Default([out, retval] BSTR* pActionText);
        [id(0x60020003), propget, helpcontext(0x00d75b9f)]
        HRESULT Index([out, retval] long* plIndex);
        [id(0x60020004), propget, helpcontext(0x00d75cf8)]
        HRESULT Parent([out, retval] IVStatusBarItems** lplpVStatusBarItems);
        [id(0x60020005), propput, helpcontext(0x00d759e7)]
        HRESULT CmdNum([in] short pwCmd);
        [id(0x60020005), propget, helpcontext(0x00d759e7)]
        HRESULT CmdNum([out, retval] short* pwCmd);
        [id(0x60020007), propput, hidden, helpstring("HelpContextID is obsolete as of Visio 2000."), helpcontext(0x00d75b59)]
        HRESULT HelpContextID([in] short pHelpContextID);
        [id(0x60020007), propget, hidden, helpstring("HelpContextID is obsolete as of Visio 2000."), helpcontext(0x00d75b59)]
        HRESULT HelpContextID([out, retval] short* pHelpContextID);
        [id(00000000), propput, helpcontext(0x00d758f7)]
        HRESULT ActionText([in] BSTR pActionText);
        [id(00000000), propget, helpcontext(0x00d758f7)]
        HRESULT ActionText([out, retval] BSTR* pActionText);
        [id(0x6002000b), propput, helpcontext(0x00d7591a)]
        HRESULT AddOnName([in] BSTR pAddOnName);
        [id(0x6002000b), propget, helpcontext(0x00d7591a)]
        HRESULT AddOnName([out, retval] BSTR* pAddOnName);
        [id(0x6002000d), propput, helpcontext(0x00d75915)]
        HRESULT AddOnArgs([in] BSTR pAddOnArgs);
        [id(0x6002000d), propget, helpcontext(0x00d75915)]
        HRESULT AddOnArgs([out, retval] BSTR* pAddOnArgs);
        [id(0x6002000f), propput, hidden, helpstring("HelpFile is obsolete as of Visio 2000."), helpcontext(0x00d75b5e)]
        HRESULT HelpFile([in] BSTR pHelpFile);
        [id(0x6002000f), propget, hidden, helpstring("HelpFile is obsolete as of Visio 2000."), helpcontext(0x00d75b5e)]
        HRESULT HelpFile([out, retval] BSTR* pHelpFile);
        [id(0x60020011), propput, helpcontext(0x00d759f1)]
        HRESULT CntrlType([in] short pwCntrlType);
        [id(0x60020011), propget, helpcontext(0x00d759f1)]
        HRESULT CntrlType([out, retval] short* pwCntrlType);
        [id(0x60020013), propput, hidden, helpstring("CntrlID is obsolete as of Visio 2000."), helpcontext(0x00d759ec)]
        HRESULT CntrlID([in] short pwCntrlID);
        [id(0x60020013), propget, hidden, helpstring("CntrlID is obsolete as of Visio 2000."), helpcontext(0x00d759ec)]
        HRESULT CntrlID([out, retval] short* pwCntrlID);
        [id(0x60020015), propput, helpcontext(0x00d75f28)]
        HRESULT TypeSpecific1([in] short pwTypeSpecific);
        [id(0x60020015), propget, helpcontext(0x00d75f28)]
        HRESULT TypeSpecific1([out, retval] short* pwTypeSpecific);
        [id(0x60020017), propput, hidden, helpstring("Priority is obsolete as of Visio 2000."), helpcontext(0x00d75d5c)]
        HRESULT Priority([in] short pwPriority);
        [id(0x60020017), propget, hidden, helpstring("Priority is obsolete as of Visio 2000."), helpcontext(0x00d75d5c)]
        HRESULT Priority([out, retval] short* pwPriority);
        [id(0x60020019), propput, hidden, helpstring("Spacing is obsolete as of Visio 2000."), helpcontext(0x00d75e56)]
        HRESULT Spacing([in] short pwSpacing);
        [id(0x60020019), propget, hidden, helpstring("Spacing is obsolete as of Visio 2000."), helpcontext(0x00d75e56)]
        HRESULT Spacing([out, retval] short* pwSpacing);
        [id(0x6002001b), propput, helpcontext(0x00d75f2d)]
        HRESULT TypeSpecific2([in] short pwTypeSpecific);
        [id(0x6002001b), propget, helpcontext(0x00d75f2d)]
        HRESULT TypeSpecific2([out, retval] short* pwTypeSpecific);
        [id(0x6002001d), propput, helpcontext(0x00d75992)]
        HRESULT Caption([in] BSTR pCaption);
        [id(0x6002001d), propget, helpcontext(0x00d75992)]
        HRESULT Caption([out, retval] BSTR* pCaption);
        [id(0x6002001f), propput, hidden, helpstring("Minihelp is obsolete as of Visio 2002."), helpcontext(0x00d75c80)]
        HRESULT MiniHelp([in] BSTR pMiniHelp);
        [id(0x6002001f), propget, hidden, helpstring("Minihelp is obsolete as of Visio 2002."), helpcontext(0x00d75c80)]
        HRESULT MiniHelp([out, retval] BSTR* pMiniHelp);
        [id(0x60020021), propget, helpcontext(0x00d75983)]
        HRESULT BuiltIn([out, retval] VARIANT_BOOL* pbBuiltIn);
        [id(0x60020022), propput, helpcontext(0x00d75aaf)]
        HRESULT Enabled([in] VARIANT_BOOL pbEnabled);
        [id(0x60020022), propget, helpcontext(0x00d75aaf)]
        HRESULT Enabled([out, retval] VARIANT_BOOL* pbEnabled);
        [id(0x60020024), propput, helpcontext(0x00d75ad7)]
        HRESULT FaceID([in] short pwFaceID);
        [id(0x60020024), propget, helpcontext(0x00d75ad7)]
        HRESULT FaceID([out, retval] short* pwFaceID);
        [id(0x60020026), propput, helpcontext(0x00d75e79)]
        HRESULT State([in] short pwState);
        [id(0x60020026), propget, helpcontext(0x00d75e79)]
        HRESULT State([out, retval] short* pwState);
        [id(0x60020028), propput, helpcontext(0x00d7edee)]
        HRESULT Style([in] short pwStyle);
        [id(0x60020028), propget, helpcontext(0x00d7edee)]
        HRESULT Style([out, retval] short* pwStyle);
        [id(0x6002002a), propput, helpcontext(0x00d75f5a)]
        HRESULT Visible([in] VARIANT_BOOL pbVisible);
        [id(0x6002002a), propget, helpcontext(0x00d75f5a)]
        HRESULT Visible([out, retval] VARIANT_BOOL* pbVisible);
        [id(0x6002002c), propput, helpcontext(0x00d75f5f)]
        HRESULT Width([in] short pwWidth);
        [id(0x6002002c), propget, helpcontext(0x00d75f5f)]
        HRESULT Width([out, retval] short* pwWidth);
        [id(0x6002002e), propput, helpcontext(0x00d75cda)]
        HRESULT PaletteWidth([in] short pwWidth);
        [id(0x6002002e), propget, helpcontext(0x00d75cda)]
        HRESULT PaletteWidth([out, retval] short* pwWidth);
        [id(0x60020030), propget, helpcontext(0x00d75e7e)]
        HRESULT StatusBarItems([out, retval] IVStatusBarItems** lplpVStatusBarItems);
        [id(0x60020031), propget, hidden, helpstring("IsSeparator is obsolete as of Visio 2000."), helpcontext(0x00d75bdb)]
        HRESULT IsSeparator([out, retval] short* pIsSeparator);
        [id(0x60020032), propget, helpcontext(0x00d75bcc)]
        HRESULT IsHierarchical([out, retval] short* pIsHierarchical);
    };

    [
      odl,
      uuid(000D02A5-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x00002729),
      hidden,
      dual,
      oleautomation
    ]
    interface IVAccelTables : IDispatch {
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lplpIEnumVAccelTable);
        [id(00000000), propget, helpstring("The first item in an AccelTables collection is item 0."), helpcontext(0x00e20a45)]
        HRESULT Item(
                        [in] long lIndex, 
                        [out, retval] IVAccelTable** lplpAccelTable);
        [id(0x60020002), propget, helpcontext(0x00e20a4a)]
        HRESULT ItemAtID(
                        [in] long lID, 
                        [out, retval] IVAccelTable** lplpAccelTable);
        [id(0x60020003), helpcontext(0x00e21305)]
        HRESULT Add([out, retval] IVAccelTable** lplpAccelTable);
        [id(0x60020004), helpcontext(0x00e21314)]
        HRESULT AddAtID(
                        [in] long lID, 
                        [out, retval] IVAccelTable** lplpAccelTable);
        [id(0x60020005), propget, helpcontext(0x00e20892)]
        HRESULT Count([out, retval] long* lplCount);
        [id(0x60020006), propget, helpcontext(0x00e20b58)]
        HRESULT Parent([out, retval] IVUIObject** lplpVUIObject);
    };

    [
      odl,
      uuid(000D02A2-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x00002724),
      hidden,
      dual,
      oleautomation
    ]
    interface IVAccelTable : IDispatch {
        [id(0x60020000), helpcontext(0x00e08d05)]
        HRESULT Delete();
        [id(0x60020001), propget, hidden]
        HRESULT Default([out, retval] BSTR* pTableName);
        [id(00000000), propput, helpcontext(0x00e0866b)]
        HRESULT TableName([in] BSTR pTableName);
        [id(00000000), propget, helpcontext(0x00e0866b)]
        HRESULT TableName([out, retval] BSTR* pTableName);
        [id(0x60020004), propget, helpcontext(0x00e085cb)]
        HRESULT SetID([out, retval] long* plSetID);
        [id(0x60020005), propget, helpcontext(0x00e115cc)]
        HRESULT AccelItems([out, retval] IVAccelItems** lplpVAccelItems);
        [id(0x60020006), propget, helpcontext(0x00e084b8)]
        HRESULT Parent([out, retval] IVAccelTables** lplpVAccelTables);
    };

    [
      odl,
      uuid(000D0295-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x0000271f),
      hidden,
      dual,
      oleautomation
    ]
    interface IVAccelItems : IDispatch {
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** lplpIEnumVAccelItem);
        [id(00000000), propget, helpstring("The first item in an AccelItems collection is item 0."), helpcontext(0x00defd05)]
        HRESULT Item(
                        [in] long lIndex, 
                        [out, retval] IVAccelItem** lplpAccelItem);
        [id(0x60020002), helpcontext(0x00df05c5)]
        HRESULT Add([out, retval] IVAccelItem** lplpAccelItem);
        [id(0x60020003), propget, helpcontext(0x00defb52)]
        HRESULT Count([out, retval] long* lplCount);
        [id(0x60020004), propget, helpcontext(0x00defe18)]
        HRESULT Parent([out, retval] IVAccelTable** lplpVAccelTable);
    };

    [
      odl,
      uuid(000D0292-0000-0000-C000-000000000046),
      version(4.12),
      helpcontext(0x0000271a),
      hidden,
      dual,
      oleautomation
    ]
    interface IVAccelItem : IDispatch {
        [id(0x60020000), helpcontext(0x00dd7fc5)]
        HRESULT Delete();
        [id(0x60020001), propget, hidden]
        HRESULT Default([out, retval] short* pwCmd);
        [id(00000000), propput, helpcontext(0x00dd7467)]
        HRESULT CmdNum([in] short pwCmd);
        [id(00000000), propget, helpcontext(0x00dd7467)]
        HRESULT CmdNum([out, retval] short* pwCmd);
        [id(0x60020004), propput, helpcontext(0x00dd767e)]
        HRESULT Key([in] short pKey);
        [id(0x60020004), propget, helpcontext(0x00dd767e)]
        HRESULT Key([out, retval] short* pKey);
        [id(0x60020006), propput, helpcontext(0x00dd73b8)]
        HRESULT Alt([in] short pAlt);
        [id(0x60020006), propget, helpcontext(0x00dd73b8)]
        HRESULT Alt([out, retval] short* pAlt);
        [id(0x60020008), propput, helpcontext(0x00dd78a4)]
        HRESULT Shift([in] short pShift);
        [id(0x60020008), propget, helpcontext(0x00dd78a4)]
        HRESULT Shift([out, retval] short* pShift);
        [id(0x6002000a), propput, helpcontext(0x00dd74ad)]
        HRESULT Control([in] short pControl);
        [id(0x6002000a), propget, helpcontext(0x00dd74ad)]
        HRESULT Control([out, retval] short* pControl);
        [id(0x6002000c), propget, helpcontext(0x00dd7778)]
        HRESULT Parent([out, retval] IVAccelItems** lplpVAccelItems);
        [id(0x6002000d), propput, helpcontext(0x00dd739a)]
        HRESULT AddOnName([in] BSTR pAddOnName);
        [id(0x6002000d), propget, helpcontext(0x00dd739a)]
        HRESULT AddOnName([out, retval] BSTR* pAddOnName);
        [id(0x6002000f), propput, helpcontext(0x00dd7395)]
        HRESULT AddOnArgs([in] BSTR pAddOnArgs);
        [id(0x6002000f), propget, helpcontext(0x00dd7395)]
        HRESULT AddOnArgs([out, retval] BSTR* pAddOnArgs);
    };

    [
      odl,
      uuid(000D0715-0000-0000-C000-000000000046),
      helpcontext(0x00002779),
      hidden,
      dual,
      oleautomation
    ]
    interface IVFonts : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00b8d4c2)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00b8d616)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000003), propget, helpcontext(0x00b8d5b2)]
        HRESULT Count([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("The first item in a Fonts collection is item 1."), helpcontext(0x00b8d765)]
        HRESULT Item(
                        [in] VARIANT NameOrIndex, 
                        [out, retval] IVFont** lpdispRet);
        [id(0x00000004), propget, helpcontext(0x00b8d76f)]
        HRESULT ItemFromID(
                        [in] long ObjectID, 
                        [out, retval] IVFont** lpdispRet);
        [id(0x00000005), propget, helpstring("Returns visObjTypeFonts (28)."), helpcontext(0x00b8d828)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000006), propget, helpcontext(0x00b8d9f4)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
    };

    [
      odl,
      uuid(000D0714-0000-0000-C000-000000000046),
      helpcontext(0x00002774),
      hidden,
      dual,
      oleautomation
    ]
    interface IVFont : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00b74e22)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00b74f76)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000003), propget, helpcontext(0x00b7507f)]
        HRESULT Index([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpcontext(0x00b7516a)]
        HRESULT Name([out, retval] BSTR* lpbstrRet);
        [id(0x00000004), propget, hidden, helpcontext(0x00b7506b)]
        HRESULT ID16([out, retval] short* lpi2Ret);
        [id(0x00000005), propget, helpcontext(0x00b74e2c)]
        HRESULT Attributes([out, retval] short* lpi2Ret);
        [id(0x00000006), propget, helpcontext(0x00b74eb3)]
        HRESULT CharSet([out, retval] short* lpi2Ret);
        [id(0x00000007), propget, helpcontext(0x00b75205)]
        HRESULT PitchAndFamily([out, retval] short* lpi2Ret);
        [id(0x00000008), propget, helpstring("Returns visObjTypeFont (27)."), helpcontext(0x00b75188)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000009), propget, helpcontext(0x00b75354)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x0000000a), propget, helpcontext(0x00b7506b)]
        HRESULT ID([out, retval] long* lpi4Ret);
    };

    [
      odl,
      uuid(000D0717-0000-0000-C000-000000000046),
      helpcontext(0x0000274c),
      hidden,
      dual,
      oleautomation
    ]
    interface IVColors : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00bbe202)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00bbe356)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000003), propget, hidden, helpcontext(0x00bbe2f2)]
        HRESULT Count16([out, retval] short* lpi2Ret);
        [id(0x000003e7), propget, hidden, helpcontext(0x00bbe4a5)]
        HRESULT Item16(
                        [in] short Index, 
                        [out, retval] IVColor** lpdispRet);
        [id(0x00000004), propget, helpstring("Returns visObjTypeColors (30)."), helpcontext(0x00bbe568)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000005), propget, helpcontext(0x00bbe734)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("The first item in a Colors collection is item 0."), helpcontext(0x00bbe4a5)]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] IVColor** lpdispRet);
        [id(0x00000006), propget, helpcontext(0x00bbe2f2)]
        HRESULT Count([out, retval] long* lpi4Ret);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
    };

    [
      odl,
      uuid(000D0716-0000-0000-C000-000000000046),
      helpcontext(0x00002747),
      hidden,
      dual,
      oleautomation
    ]
    interface IVColor : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00ba5b62)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00ba5cb6)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000003), propget, hidden, helpcontext(0x00ba5dbf)]
        HRESULT Index16([out, retval] short* lpi2Ret);
        [id(0x00000004), propget, helpcontext(0x00ba5fae)]
        HRESULT Red([out, retval] short* lpi2Ret);
        [id(0x00000004), propput, helpcontext(0x00ba5fae)]
        HRESULT Red([in] short lpi2Ret);
        [id(0x00000005), propget, helpcontext(0x00ba5d6a)]
        HRESULT Green([out, retval] short* lpi2Ret);
        [id(0x00000005), propput, helpcontext(0x00ba5d6a)]
        HRESULT Green([in] short lpi2Ret);
        [id(0x00000006), propget, helpcontext(0x00ba5b99)]
        HRESULT Blue([out, retval] short* lpi2Ret);
        [id(0x00000006), propput, helpcontext(0x00ba5b99)]
        HRESULT Blue([in] short lpi2Ret);
        [id(0x00000007), propget, helpcontext(0x00ba5d24)]
        HRESULT Flags([out, retval] short* lpi2Ret);
        [id(0x00000007), propput, helpcontext(0x00ba5d24)]
        HRESULT Flags([in] short lpi2Ret);
        [id(00000000), propget, helpcontext(0x00ba5ef5)]
        HRESULT PaletteEntry([out, retval] long* lpi4Ret);
        [id(00000000), propput, helpcontext(0x00ba5ef5)]
        HRESULT PaletteEntry([in] long lpi4Ret);
        [id(0x00000008), propget, helpstring("Returns visObjTypeColor (29)."), helpcontext(0x00ba5ec8)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000009), propget, helpcontext(0x00ba6094)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x0000000a), propget, helpcontext(0x00ba5dbf)]
        HRESULT Index([out, retval] long* lpi4Ret);
    };

    [
      odl,
      uuid(000D0726-0000-0000-C000-000000000046),
      helpcontext(0x000027a1),
      hidden,
      dual,
      oleautomation
    ]
    interface IVMasterShortcuts : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00f2d082)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00f2d1d6)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x00000003), propget, helpstring("Returns visObjTypeMasterShortcuts (46)."), helpcontext(0x00f2d3e8)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x00000004), propget, helpcontext(0x00f2d5b4)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("The first item in a MasterShortcuts collection is item 1. Name treated as locale specific."), helpcontext(0x00f2d325)]
        HRESULT Item(
                        [in] VARIANT NameOrIndex, 
                        [out, retval] IVMasterShortcut** lpdispRet);
        [id(0x00000005), propget, helpcontext(0x00f2d172)]
        HRESULT Count([out, retval] short* lpi2Ret);
        [id(0x00000006), helpstring("Returns locale specific names of mastershortcuts."), helpcontext(0x00f2dd1b)]
        HRESULT GetNames([out] SAFEARRAY(BSTR)* localeSpecificNameArray);
        [id(0x00000007), helpcontext(0x00f2dccb)]
        HRESULT Drop(
                        [in] IUnknown* ObjectToDrop, 
                        [in] short xPos, 
                        [in] short yPos, 
                        [out, retval] IVMasterShortcut** lpdispRet);
        [id(0x00000008), propget, helpstring("Like Item() but names treated locale independent."), helpcontext(0x00f3686c)]
        HRESULT ItemU(
                        [in] VARIANT NameOrIndex, 
                        [out, retval] IVMasterShortcut** lpdispRet);
        [id(0x00000009), helpstring("Returns locale independent names of mastershortcuts."), helpcontext(0x00f36844)]
        HRESULT GetNamesU([out] SAFEARRAY(BSTR)* localeIndependentNameArray);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
        [id(0x6002000b), propget, helpcontext(0x00f2d32f)]
        HRESULT ItemFromID(
                        [in] long nID, 
                        [out, retval] IVMasterShortcut** ppMasterShortcut);
        [id(0x6002000c), helpcontext(0x00f2dd8e)]
        HRESULT Paste([in, optional] VARIANT Flags);
    };

    [
      odl,
      uuid(000D072E-0000-0000-C000-000000000046),
      helpcontext(0x0000ee48),
      hidden,
      dual,
      oleautomation
    ]
    interface IVDataRecordsets : IDispatch {
        [id(0x60020000), propget, helpcontext(0x00f8eb02)]
        HRESULT Application([out, retval] IVApplication** Application);
        [id(0x60020001), propget, helpcontext(0x00f8f034)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x60020002), propget, helpcontext(0x00f8ec56)]
        HRESULT Document([out, retval] IVDocument** Document);
        [id(0x60020003), propget, helpcontext(0x00f8ec56)]
        HRESULT ObjectType([out, retval] short* ObjectType);
        [id(0x60020004), propget, helpcontext(0x00f8ebf2)]
        HRESULT Count([out, retval] long* Count);
        [id(00000000), propget, helpcontext(0x00f8eda5)]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] IVDataRecordset** DataRecordset);
        [id(0x60020006), propget, helpcontext(0x00f8edaf)]
        HRESULT ItemFromID(
                        [in] long ID, 
                        [out, retval] IVDataRecordset** DataRecordset);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** Enum);
        [id(0x60020008), propget, helpcontext(0x00f9a4a2)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x60020009), helpcontext(0x00f8f665)]
        HRESULT Add(
                        [in] VARIANT ConnectionIDOrString, 
                        [in] BSTR CommandString, 
                        [in] long AddOptions, 
                        [in, optional, defaultvalue("")] BSTR Name, 
                        [out, retval] IVDataRecordset** DataRecordset);
        [id(0x6002000a), helpcontext(0x00f9a34e)]
        HRESULT AddFromXML(
                        [in] BSTR XMLString, 
                        [in] long AddOptions, 
                        [in, optional, defaultvalue("")] BSTR Name, 
                        [out, retval] IVDataRecordset** DataRecordset);
        [id(0x6002000b), helpcontext(0x00f9a353)]
        HRESULT AddFromConnectionFile(
                        [in] BSTR FileName, 
                        [in] long AddOptions, 
                        [in, optional, defaultvalue("")] BSTR Name, 
                        [out, retval] IVDataRecordset** DataRecordset);
        [id(0x6002000c), helpcontext(0x00f9a4a7)]
        HRESULT GetLastDataError(
                        [out] long* DataErrorCode, 
                        [out] BSTR* DataErrorDescription, 
                        [out] long* RecordsetID);
    };

    typedef enum {
        visThemeTypeColor = 1,
        visThemeTypeEffect = 2
    } VisThemeTypes;

    typedef enum {
        visFixedFormatPDF = 1,
        visFixedFormatXPS = 2
    } VisFixedFormatTypes;

    typedef enum {
        visDocExIntentScreen = 0,
        visDocExIntentPrint = 1
    } VisDocExIntent;

    [
      odl,
      uuid(000D0706-0000-0000-C000-000000000046),
      helpcontext(0x00002765),
      hidden,
      dual,
      oleautomation
    ]
    interface IVDocuments : IDispatch {
        [id(0x00000004), helpcontext(0x00a1ff54)]
        HRESULT Add(
                        [in] BSTR FileName, 
                        [out, retval] IVDocument** lpdispRet);
        [id(0x00000005), helpcontext(0x00a1fe4b)]
        HRESULT Open(
                        [in] BSTR FileName, 
                        [out, retval] IVDocument** lpdispRet);
        [id(0x00000003), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00a1f162)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpstring("Returns visObjTypeDocs (11)."), helpcontext(0x00a1f4c8)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("The first item in a Documents collection is item 1."), helpcontext(0x00a1f405)]
        HRESULT Item(
                        [in] VARIANT NameOrIndex, 
                        [out, retval] IVDocument** lpdispRet);
        [id(0x00000001), propget, helpcontext(0x00a1f252)]
        HRESULT Count([out, retval] short* lpi2Ret);
        [id(0x00000006), helpcontext(0x00a1fe55)]
        HRESULT OpenEx(
                        [in] BSTR FileName, 
                        [in] short Flags, 
                        [out, retval] IVDocument** lpdispRet);
        [id(0x00000007), propget, helpcontext(0x00a1f2e8)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x00000008), propget, helpcontext(0x00a1f540)]
        HRESULT PersistsEvents([out, retval] short* lpboolRet);
        [id(0x00000009), helpcontext(0x00a1fdfb)]
        HRESULT GetNames([out] SAFEARRAY(BSTR)* NameArray);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
        [id(0x6002000b), propget, helpcontext(0x00a1f40f)]
        HRESULT ItemFromID(
                        [in] long ObjectID, 
                        [out, retval] IVDocument** lpdispRet);
        [id(0x6002000c), helpcontext(0x00a28979)]
        HRESULT CanCheckOut(
                        [in] BSTR FileName, 
                        [out, retval] VARIANT_BOOL* pbRet);
        [id(0x6002000d), helpcontext(0x00a28983)]
        HRESULT CheckOut([in] BSTR FileName);
        [id(0x6002000e), helpcontext(0x00a2873a)]
        HRESULT AddEx(
                        [in] BSTR FileName, 
                        [in, optional, defaultvalue(0)] VisMeasurementSystem MeasurementSystem, 
                        [in, optional, defaultvalue(0)] long Flags, 
                        [in, optional, defaultvalue(0)] long LangID, 
                        [out, retval] IVDocument** lpdispRet);
    };

    [
      odl,
      uuid(000D0719-0000-0000-C000-000000000046),
      helpcontext(0x00002733),
      hidden,
      dual,
      oleautomation
    ]
    interface IVAddons : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00beef42)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpstring("Returns visObjTypeAddons (32)."), helpcontext(0x00bef2a8)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpstring("The first item in an Addons collection is item 1."), helpcontext(0x00bef1e5)]
        HRESULT Item(
                        [in] VARIANT NameOrIndex, 
                        [out, retval] IVAddon** lpdispRet);
        [id(0x00000003), propget, helpcontext(0x00bef032)]
        HRESULT Count([out, retval] short* lpi2Ret);
        [id(0x00000004), helpcontext(0x00befd2f)]
        HRESULT Add(
                        [in] BSTR FileName, 
                        [out, retval] IVAddon** lpdispRet);
        [id(0x00000005), helpcontext(0x00befbdb)]
        HRESULT GetNames([out] SAFEARRAY(BSTR)* NameArray);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** ppEnum);
        [id(0x60020007), propget, helpstring("Like Item() but names treated locale independent."), helpcontext(0x00bf872c)]
        HRESULT ItemU(
                        [in] VARIANT NameOrIndex, 
                        [out, retval] IVAddon** lpdispRet);
        [id(0x60020008), helpcontext(0x00bf8704)]
        HRESULT GetNamesU([out] SAFEARRAY(BSTR)* NameArray);
    };

    [
      odl,
      uuid(000D0718-0000-0000-C000-000000000046),
      helpcontext(0x0000272e),
      hidden,
      dual,
      oleautomation
    ]
    interface IVAddon : IDispatch {
        [id(0x00000001), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00bd68a2)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000002), propget, helpstring("Returns visObjTypeAddon (31)."), helpcontext(0x00bd6c08)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(00000000), propget, helpcontext(0x00bd6bea)]
        HRESULT Name([out, retval] BSTR* lpbstrRet);
        [id(0x00000003), propget, helpcontext(0x00bd6aff)]
        HRESULT Index([out, retval] short* lpi2Ret);
        [id(0x00000004), propget, helpcontext(0x00bd6a0f)]
        HRESULT Enabled([out, retval] short* lpi2Ret);
        [id(0x00000005), helpcontext(0x00bd75ea)]
        HRESULT Run([in] BSTR ArgString);
        [id(0x60020006), propget, helpcontext(0x00be0091)]
        HRESULT NameU([out, retval] BSTR* lpbstrRet);
    };

    [
      odl,
      uuid(000D072D-0000-0000-C000-000000000046),
      helpstring("Interface provides access  Global application settings"),
      helpcontext(0x0000ea60),
      hidden,
      dual,
      oleautomation
    ]
    interface IVApplicationSettings : IDispatch {
        [id(0x60020000), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00f76462)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x60020001), propget, helpstring("Returns visObjTypeApplicationSettings (51)."), helpcontext(0x00f767c8)]
        HRESULT ObjectType([out, retval] VisObjectTypes* peType);
        [id(0x60020002), propget, helpcontext(0x00f7fba7)]
        HRESULT DrawingAids([out, retval] VARIANT_BOOL* RetVal);
        [id(0x60020002), propput, helpcontext(0x00f7fba7)]
        HRESULT DrawingAids([in] VARIANT_BOOL RetVal);
        [id(0x60020004), propget, helpcontext(0x00f7fa99)]
        HRESULT SnapStrengthRulerX([out, retval] long* strength);
        [id(0x60020004), propput, helpcontext(0x00f7fa99)]
        HRESULT SnapStrengthRulerX([in] long strength);
        [id(0x60020006), propget, helpcontext(0x00f7fa94)]
        HRESULT SnapStrengthRulerY([out, retval] long* strength);
        [id(0x60020006), propput, helpcontext(0x00f7fa94)]
        HRESULT SnapStrengthRulerY([in] long strength);
        [id(0x60020008), propget, helpcontext(0x00f7fab7)]
        HRESULT SnapStrengthGridX([out, retval] long* strength);
        [id(0x60020008), propput, helpcontext(0x00f7fab7)]
        HRESULT SnapStrengthGridX([in] long strength);
        [id(0x6002000a), propget, helpcontext(0x00f7fab2)]
        HRESULT SnapStrengthGridY([out, retval] long* strength);
        [id(0x6002000a), propput, helpcontext(0x00f7fab2)]
        HRESULT SnapStrengthGridY([in] long strength);
        [id(0x6002000c), propget, helpcontext(0x00f7faad)]
        HRESULT SnapStrengthGuidesX([out, retval] long* strength);
        [id(0x6002000c), propput, helpcontext(0x00f7faad)]
        HRESULT SnapStrengthGuidesX([in] long strength);
        [id(0x6002000e), propget, helpcontext(0x00f7faa8)]
        HRESULT SnapStrengthGuidesY([out, retval] long* strength);
        [id(0x6002000e), propput, helpcontext(0x00f7faa8)]
        HRESULT SnapStrengthGuidesY([in] long strength);
        [id(0x60020010), propget, helpcontext(0x00f7faa3)]
        HRESULT SnapStrengthPointsX([out, retval] long* strength);
        [id(0x60020010), propput, helpcontext(0x00f7faa3)]
        HRESULT SnapStrengthPointsX([in] long strength);
        [id(0x60020012), propget, helpcontext(0x00f7fa9e)]
        HRESULT SnapStrengthPointsY([out, retval] long* strength);
        [id(0x60020012), propput, helpcontext(0x00f7fa9e)]
        HRESULT SnapStrengthPointsY([in] long strength);
        [id(0x60020014), propget, helpcontext(0x00f7fac1)]
        HRESULT SnapStrengthGeometryX([out, retval] long* strength);
        [id(0x60020014), propput, helpcontext(0x00f7fac1)]
        HRESULT SnapStrengthGeometryX([in] long strength);
        [id(0x60020016), propget, helpcontext(0x00f7fabc)]
        HRESULT SnapStrengthGeometryY([out, retval] long* strength);
        [id(0x60020016), propput, helpcontext(0x00f7fabc)]
        HRESULT SnapStrengthGeometryY([in] long strength);
        [id(0x60020018), propget, helpcontext(0x00f7facb)]
        HRESULT SnapStrengthExtensionsX([out, retval] long* strength);
        [id(0x60020018), propput, helpcontext(0x00f7facb)]
        HRESULT SnapStrengthExtensionsX([in] long strength);
        [id(0x6002001a), propget, helpcontext(0x00f7fac6)]
        HRESULT SnapStrengthExtensionsY([out, retval] long* strength);
        [id(0x6002001a), propput, helpcontext(0x00f7fac6)]
        HRESULT SnapStrengthExtensionsY([in] long strength);
        [id(0x6002001c), propget, helpcontext(0x00f7fae4)]
        HRESULT ShowFileSaveWarnings([out, retval] VARIANT_BOOL* Show);
        [id(0x6002001c), propput, helpcontext(0x00f7fae4)]
        HRESULT ShowFileSaveWarnings([in] VARIANT_BOOL Show);
        [id(0x6002001e), propget, helpcontext(0x00f7fae9)]
        HRESULT ShowFileOpenWarnings([out, retval] VARIANT_BOOL* Show);
        [id(0x6002001e), propput, helpcontext(0x00f7fae9)]
        HRESULT ShowFileOpenWarnings([in] VARIANT_BOOL Show);
        [id(0x60020020), propget, helpcontext(0x00f7fbb6)]
        HRESULT DefaultSaveFormat([out, retval] VisDefaultSaveFormats* pFormatType);
        [id(0x60020020), propput, helpcontext(0x00f7fbb6)]
        HRESULT DefaultSaveFormat([in] VisDefaultSaveFormats pFormatType);
        [id(0x60020022), propget, helpcontext(0x00f7fb98)]
        HRESULT DrawingPageColor([out, retval] OLE_COLOR* pColor);
        [id(0x60020022), propput, helpcontext(0x00f7fb98)]
        HRESULT DrawingPageColor([in] OLE_COLOR pColor);
        [id(0x60020024), propget, helpcontext(0x00f7fba2)]
        HRESULT DrawingBackgroundColor([out, retval] OLE_COLOR* pColor);
        [id(0x60020024), propput, helpcontext(0x00f7fba2)]
        HRESULT DrawingBackgroundColor([in] OLE_COLOR pColor);
        [id(0x60020026), propget, helpcontext(0x00f7fb9d)]
        HRESULT DrawingBackgroundColorGradient([out, retval] OLE_COLOR* pColor);
        [id(0x60020026), propput, helpcontext(0x00f7fb9d)]
        HRESULT DrawingBackgroundColorGradient([in] OLE_COLOR pColor);
        [id(0x60020028), propget, helpcontext(0x00f7fa8f)]
        HRESULT StencilBackgroundColor([out, retval] OLE_COLOR* pColor);
        [id(0x60020028), propput, helpcontext(0x00f7fa8f)]
        HRESULT StencilBackgroundColor([in] OLE_COLOR pColor);
        [id(0x6002002a), propget, helpcontext(0x00f7fa8a)]
        HRESULT StencilBackgroundColorGradient([out, retval] OLE_COLOR* pColor);
        [id(0x6002002a), propput, helpcontext(0x00f7fa8a)]
        HRESULT StencilBackgroundColorGradient([in] OLE_COLOR pColor);
        [id(0x6002002c), propget, helpcontext(0x00f7fa7b)]
        HRESULT StencilTextColor([out, retval] OLE_COLOR* pColor);
        [id(0x6002002c), propput, helpcontext(0x00f7fa7b)]
        HRESULT StencilTextColor([in] OLE_COLOR pColor);
        [id(0x6002002e), propget, helpcontext(0x00f7fb25)]
        HRESULT PrintPreviewBackgroundColor([out, retval] OLE_COLOR* pColor);
        [id(0x6002002e), propput, helpcontext(0x00f7fb25)]
        HRESULT PrintPreviewBackgroundColor([in] OLE_COLOR pColor);
        [id(0x60020030), propget, helpcontext(0x00f7fb84)]
        HRESULT FullScreenBackgroundColor([out, retval] OLE_COLOR* pColor);
        [id(0x60020030), propput, helpcontext(0x00f7fb84)]
        HRESULT FullScreenBackgroundColor([in] OLE_COLOR pColor);
        [id(0x60020032), propget, hidden, helpcontext(0x00f81bac)]
        HRESULT ShowStartupDialog([out, retval] VARIANT_BOOL* pShow);
        [id(0x60020032), propput, hidden, helpcontext(0x00f81bac)]
        HRESULT ShowStartupDialog([in] VARIANT_BOOL pShow);
        [id(0x60020034), propget, helpcontext(0x00f7fada)]
        HRESULT ShowSmartTags([out, retval] VARIANT_BOOL* pShow);
        [id(0x60020034), propput, helpcontext(0x00f7fada)]
        HRESULT ShowSmartTags([in] VARIANT_BOOL pShow);
        [id(0x60020036), propget, helpcontext(0x00f7fa76)]
        HRESULT TextDisplayQuality([out, retval] VisTextDisplayQualityTypes* pTextQuality);
        [id(0x60020036), propput, helpcontext(0x00f7fa76)]
        HRESULT TextDisplayQuality([in] VisTextDisplayQualityTypes pTextQuality);
        [id(0x60020038), propget, helpcontext(0x00f7fb57)]
        HRESULT HigherQualityShapeDisplay([out, retval] VARIANT_BOOL* pbRet);
        [id(0x60020038), propput, helpcontext(0x00f7fb57)]
        HRESULT HigherQualityShapeDisplay([in] VARIANT_BOOL pbRet);
        [id(0x6002003a), propget, helpcontext(0x00f7fad0)]
        HRESULT SmoothDrawing([out, retval] VARIANT_BOOL* pbRet);
        [id(0x6002003a), propput, helpcontext(0x00f7fad0)]
        HRESULT SmoothDrawing([in] VARIANT_BOOL pbRet);
        [id(0x6002003c), propget, helpcontext(0x00f7fa85)]
        HRESULT StencilCharactersPerLine([out, retval] long* pCharCount);
        [id(0x6002003c), propput, helpcontext(0x00f7fa85)]
        HRESULT StencilCharactersPerLine([in] long pCharCount);
        [id(0x6002003e), propget, helpcontext(0x00f7fa80)]
        HRESULT StencilLinesPerMaster([out, retval] long* pLineCount);
        [id(0x6002003e), propput, helpcontext(0x00f7fa80)]
        HRESULT StencilLinesPerMaster([in] long pLineCount);
        [id(0x60020040), propget, helpcontext(0x00f81df8)]
        HRESULT UserName([out, retval] BSTR* lpbstrRet);
        [id(0x60020040), propput, helpcontext(0x00f81df8)]
        HRESULT UserName([in] BSTR lpbstrRet);
        [id(0x60020042), propget, helpcontext(0x00f7fa5d)]
        HRESULT UserInitials([out, retval] BSTR* lpbstrRet);
        [id(0x60020042), propput, helpcontext(0x00f7fa5d)]
        HRESULT UserInitials([in] BSTR lpbstrRet);
        [id(0x60020044), propget, helpcontext(0x00f7fa3f)]
        HRESULT ZoomOnRoll([out, retval] VARIANT_BOOL* pVal);
        [id(0x60020044), propput, helpcontext(0x00f7fa3f)]
        HRESULT ZoomOnRoll([in] VARIANT_BOOL pVal);
        [id(0x60020046), propget, helpcontext(0x00f7fa62)]
        HRESULT UndoLevels([out, retval] long* pNumLevels);
        [id(0x60020046), propput, helpcontext(0x00f7fa62)]
        HRESULT UndoLevels([in] long pNumLevels);
        [id(0x60020048), propget, helpcontext(0x00f7fb20)]
        HRESULT RecentFilesListSize([out, retval] long* pNumFiles);
        [id(0x60020048), propput, helpcontext(0x00f7fb20)]
        HRESULT RecentFilesListSize([in] long pNumFiles);
        [id(0x6002004a), propget, helpcontext(0x00f7fbfc)]
        HRESULT CenterSelectionOnZoom([out, retval] VARIANT_BOOL* pVal);
        [id(0x6002004a), propput, helpcontext(0x00f7fbfc)]
        HRESULT CenterSelectionOnZoom([in] VARIANT_BOOL pVal);
        [id(0x6002004c), propget, helpcontext(0x00f7fbf2)]
        HRESULT ConnectorSplittingEnabled([out, retval] VARIANT_BOOL* pVal);
        [id(0x6002004c), propput, helpcontext(0x00f7fbf2)]
        HRESULT ConnectorSplittingEnabled([in] VARIANT_BOOL pVal);
        [id(0x6002004e), propget, helpcontext(0x00f7fc10)]
        HRESULT AsianTextUI([out, retval] VisRegionalUIOptions* pAsianTextUIOption);
        [id(0x6002004e), propput, hidden, helpcontext(0x00f7fc10)]
        HRESULT AsianTextUI([in] VisRegionalUIOptions pAsianTextUIOption);
        [id(0x60020050), propget, helpcontext(0x00f7fbf7)]
        HRESULT ComplexTextUI([out, retval] VisRegionalUIOptions* pComplexTextUIOption);
        [id(0x60020050), propput, hidden, helpcontext(0x00f7fbf7)]
        HRESULT ComplexTextUI([in] VisRegionalUIOptions pComplexTextUIOption);
        [id(0x60020052), propget, helpcontext(0x00f7fb4d)]
        HRESULT KanaFindAndReplace([out, retval] VisRegionalUIOptions* pKanaOption);
        [id(0x60020052), propput, hidden, helpcontext(0x00f7fb4d)]
        HRESULT KanaFindAndReplace([in] VisRegionalUIOptions pKanaOption);
        [id(0x60020054), propget, helpcontext(0x00f7fb8e)]
        HRESULT FreeformDrawingPrecision([out, retval] long* plVal);
        [id(0x60020054), propput, helpcontext(0x00f7fb8e)]
        HRESULT FreeformDrawingPrecision([in] long plVal);
        [id(0x60020056), propget, helpcontext(0x00f7fb89)]
        HRESULT FreeformDrawingSmoothing([out, retval] long* plVal);
        [id(0x60020056), propput, helpcontext(0x00f7fb89)]
        HRESULT FreeformDrawingSmoothing([in] long plVal);
        [id(0x60020058), propget, helpcontext(0x00f7fbac)]
        HRESULT DeveloperMode([out, retval] VARIANT_BOOL* pVal);
        [id(0x60020058), propput, helpcontext(0x00f7fbac)]
        HRESULT DeveloperMode([in] VARIANT_BOOL pVal);
        [id(0x6002005a), propget, helpcontext(0x00f7faee)]
        HRESULT ShowChooseDrawingTypePane([out, retval] VARIANT_BOOL* pShow);
        [id(0x6002005a), propput, helpcontext(0x00f7faee)]
        HRESULT ShowChooseDrawingTypePane([in] VARIANT_BOOL pShow);
        [id(0x6002005c), propget, helpcontext(0x00f81dfd)]
        HRESULT ShowShapeSearchPane([out, retval] VARIANT_BOOL* pVal);
        [id(0x6002005c), propput, helpcontext(0x00f81dfd)]
        HRESULT ShowShapeSearchPane([in] VARIANT_BOOL pVal);
        [id(0x6002005e), propget, helpcontext(0x00f81e02)]
        HRESULT ApplyThemesOnShapeAdd([out, retval] VARIANT_BOOL* pVal);
        [id(0x6002005e), propput, helpcontext(0x00f81e02)]
        HRESULT ApplyThemesOnShapeAdd([in] VARIANT_BOOL pVal);
        [id(0x60020060), propget, helpcontext(0x00f81bb4)]
        HRESULT SATextUI([out, retval] VisRegionalUIOptions* pSATextUIOption);
        [id(0x60020061), propget, helpcontext(0x00f81bb9)]
        HRESULT BIDITextUI([out, retval] VisRegionalUIOptions* pBIDITextUIOption);
        [id(0x60020062), propget, helpcontext(0x00f81bbe)]
        HRESULT KashidaTextUI([out, retval] VisRegionalUIOptions* pKashidaTextUIOption);
        [id(0x60020063), propget, helpcontext(0x00f76994)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x60020064), propget, helpcontext(0x00f81baa)]
        HRESULT ShowMoreShapeHandlesOnHover([out, retval] VARIANT_BOOL* pVal);
        [id(0x60020064), propput, helpcontext(0x00f81baa)]
        HRESULT ShowMoreShapeHandlesOnHover([in] VARIANT_BOOL pVal);
        [id(0x60020066), propget, helpcontext(0x00f81baf)]
        HRESULT EnableAutoConnect([out, retval] VARIANT_BOOL* pVal);
        [id(0x60020066), propput, helpcontext(0x00f81baf)]
        HRESULT EnableAutoConnect([in] VARIANT_BOOL pVal);
    };

    [
      odl,
      uuid(000D0213-0000-0000-C000-000000000046),
      version(4.12),
      hidden,
      restricted
    ]
    interface IEnumVMenuItem : IUnknown {
        HRESULT _stdcall Next(
                        [in] long celt, 
                        [out] IVMenuItem** rgelt, 
                        [out] long* pceltFetched);
        HRESULT _stdcall Skip([in] long celt);
        HRESULT _stdcall Reset();
        HRESULT _stdcall Clone([out] IEnumVMenuItem** ppenm);
    };

    [
      odl,
      uuid(000D0223-0000-0000-C000-000000000046),
      version(4.12),
      hidden,
      restricted
    ]
    interface IEnumVMenu : IUnknown {
        HRESULT _stdcall Next(
                        [in] long celt, 
                        [out] IVMenu** rgelt, 
                        [out] long* pceltFetched);
        HRESULT _stdcall Skip([in] long celt);
        HRESULT _stdcall Reset();
        HRESULT _stdcall Clone([out] IEnumVMenu** ppenm);
    };

    [
      odl,
      uuid(000D0233-0000-0000-C000-000000000046),
      version(4.12),
      hidden,
      restricted
    ]
    interface IEnumVMenuSet : IUnknown {
        HRESULT _stdcall Next(
                        [in] long celt, 
                        [out] IVMenuSet** rgelt, 
                        [out] long* pceltFetched);
        HRESULT _stdcall Skip([in] long celt);
        HRESULT _stdcall Reset();
        HRESULT _stdcall Clone([out] IEnumVMenuSet** ppenm);
    };

    [
      odl,
      uuid(000D0243-0000-0000-C000-000000000046),
      version(4.12),
      hidden,
      restricted
    ]
    interface IEnumVToolbarItem : IUnknown {
        HRESULT _stdcall Next(
                        [in] long celt, 
                        [out] IVToolbarItem** rgelt, 
                        [out] long* pceltFetched);
        HRESULT _stdcall Skip([in] long celt);
        HRESULT _stdcall Reset();
        HRESULT _stdcall Clone([out] IEnumVToolbarItem** ppenm);
    };

    [
      odl,
      uuid(000D0253-0000-0000-C000-000000000046),
      version(4.12),
      hidden,
      restricted
    ]
    interface IEnumVToolbar : IUnknown {
        HRESULT _stdcall Next(
                        [in] long celt, 
                        [out] IVToolbar** rgelt, 
                        [out] long* pceltFetched);
        HRESULT _stdcall Skip([in] long celt);
        HRESULT _stdcall Reset();
        HRESULT _stdcall Clone([out] IEnumVToolbar** ppenm);
    };

    [
      odl,
      uuid(000D0263-0000-0000-C000-000000000046),
      version(4.12),
      hidden,
      restricted
    ]
    interface IEnumVToolbarSet : IUnknown {
        HRESULT _stdcall Next(
                        [in] long celt, 
                        [out] IVToolbarSet** rgelt, 
                        [out] long* pceltFetched);
        HRESULT _stdcall Skip([in] long celt);
        HRESULT _stdcall Reset();
        HRESULT _stdcall Clone([out] IEnumVToolbarSet** ppenm);
    };

    [
      odl,
      uuid(000D0273-0000-0000-C000-000000000046),
      version(4.12),
      hidden,
      restricted
    ]
    interface IEnumVStatusBarItem : IUnknown {
        HRESULT _stdcall Next(
                        [in] long celt, 
                        [out] IVStatusBarItem** rgelt, 
                        [out] long* pceltFetched);
        HRESULT _stdcall Skip([in] long celt);
        HRESULT _stdcall Reset();
        HRESULT _stdcall Clone([out] IEnumVStatusBarItem** ppenm);
    };

    [
      odl,
      uuid(000D0283-0000-0000-C000-000000000046),
      version(4.12),
      hidden,
      restricted
    ]
    interface IEnumVStatusBar : IUnknown {
        HRESULT _stdcall Next(
                        [in] long celt, 
                        [out] IVStatusBar** rgelt, 
                        [out] long* pceltFetched);
        HRESULT _stdcall Skip([in] long celt);
        HRESULT _stdcall Reset();
        HRESULT _stdcall Clone([out] IEnumVStatusBar** ppenm);
    };

    [
      odl,
      uuid(000D0293-0000-0000-C000-000000000046),
      version(4.12),
      hidden,
      restricted
    ]
    interface IEnumVAccelItem : IUnknown {
        HRESULT _stdcall Next(
                        [in] long celt, 
                        [out] IVAccelItem** rgelt, 
                        [out] long* pceltFetched);
        HRESULT _stdcall Skip([in] long celt);
        HRESULT _stdcall Reset();
        HRESULT _stdcall Clone([out] IEnumVAccelItem** ppenm);
    };

    [
      odl,
      uuid(000D02A3-0000-0000-C000-000000000046),
      version(4.12),
      hidden
    ]
    interface IEnumVAccelTable : IUnknown {
        HRESULT _stdcall Next(
                        [in] long celt, 
                        [out] IVAccelTable** rgelt, 
                        [out] long* pceltFetched);
        HRESULT _stdcall Skip([in] long celt);
        HRESULT _stdcall Reset();
        HRESULT _stdcall Clone([out] IEnumVAccelTable** ppenm);
    };

    [
      odl,
      uuid(000D0729-0000-0000-C000-000000000046),
      helpcontext(0x0000c62f),
      hidden,
      dual,
      oleautomation
    ]
    interface IVMSGWrap : IDispatch {
        [id(0x60020000), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00f5ddc2)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x60020001), propget, helpstring("Returns visObjTypeMSGWrap (48)."), helpcontext(0x00f5e128)]
        HRESULT ObjectType([out, retval] short* lpi2Ret);
        [id(0x60020002), propget, helpstring("Get/Sets the hwnd field of the MSG structure being wrapped."), helpcontext(0x00f67084)]
        HRESULT hwnd([out, retval] long* lpi4Ret);
        [id(0x60020002), propput, helpstring("Get/Sets the hwnd field of the MSG structure being wrapped."), helpcontext(0x00f67084)]
        HRESULT hwnd([in] long lpi4Ret);
        [id(0x60020004), propget, helpstring("Get/Sets the message field of the MSG structure being wrapped."), helpcontext(0x00f670ca)]
        HRESULT message([out, retval] long* lpi4Ret);
        [id(0x60020004), propput, helpstring("Get/Sets the message field of the MSG structure being wrapped."), helpcontext(0x00f670ca)]
        HRESULT message([in] long lpi4Ret);
        [id(0x60020006), propget, helpstring("Get/Sets the wParam field of the MSG structure being wrapped."), helpcontext(0x00f67192)]
        HRESULT wParam([out, retval] long* lpi4Ret);
        [id(0x60020006), propput, helpstring("Get/Sets the wParam field of the MSG structure being wrapped."), helpcontext(0x00f67192)]
        HRESULT wParam([in] long lpi4Ret);
        [id(0x60020008), propget, helpstring("Get/Sets the lParam field of the MSG structure being wrapped."), helpcontext(0x00f670b1)]
        HRESULT lParam([out, retval] long* lpi4Ret);
        [id(0x60020008), propput, helpstring("Get/Sets the lParam field of the MSG structure being wrapped."), helpcontext(0x00f670b1)]
        HRESULT lParam([in] long lpi4Ret);
        [id(0x6002000a), propget, helpstring("Get/Sets the time field of the MSG structure being wrapped."), helpcontext(0x00f670f2)]
        HRESULT posttime([out, retval] long* lpi4Ret);
        [id(0x6002000a), propput, helpstring("Get/Sets the time field of the MSG structure being wrapped."), helpcontext(0x00f670f2)]
        HRESULT posttime([in] long lpi4Ret);
        [id(0x6002000c), propget, helpstring("Get/Sets the pt.x field of the MSG structure being wrapped."), helpcontext(0x00f6711a)]
        HRESULT ptx([out, retval] long* lpi4Ret);
        [id(0x6002000c), propput, helpstring("Get/Sets the pt.x field of the MSG structure being wrapped."), helpcontext(0x00f6711a)]
        HRESULT ptx([in] long lpi4Ret);
        [id(0x6002000e), propget, helpstring("Get/Sets the pt.y field of the MSG structure being wrapped."), helpcontext(0x00f67115)]
        HRESULT pty([out, retval] long* lpi4Ret);
        [id(0x6002000e), propput, helpstring("Get/Sets the pt.y field of the MSG structure being wrapped."), helpcontext(0x00f67115)]
        HRESULT pty([in] long lpi4Ret);
    };

    [
      odl,
      uuid(000D072A-0000-0000-C000-000000000046),
      helpstring("Interface to enable passing relevant info about mouse messages through Visio automation events."),
      helpcontext(0x0000cb5c),
      oleautomation
    ]
    interface IVMouseEvent : IDispatch {
        [propget, helpstring("String representation of this object's properties."), helpcontext(0x0105b611)]
        HRESULT _stdcall ToString([out, retval] BSTR* pbstrString);
        [propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x01052002)]
        HRESULT _stdcall Application([out, retval] IVApplication** lpdispRet);
        [propget, helpstring("Returns visObjTypeMouseEvent (49)."), helpcontext(0x01052368)]
        HRESULT _stdcall ObjectType([out, retval] VisObjectTypes* peType);
        [propget, helpstring("The Visio.Window associated with this event."), helpcontext(0x0105b5f8)]
        HRESULT _stdcall Window([out, retval] IVWindow** ppWindow);
        [propget, helpstring("Which mouse button was clicked for MouseDown or MouseUp event."), helpcontext(0x0105b7a1)]
        HRESULT _stdcall Button([out, retval] long* pnButton);
        [propget, helpstring("Indicates state of mouse buttons and shift and control keys for the event."), helpcontext(0x0105b6e3)]
        HRESULT _stdcall KeyButtonState([out, retval] long* pnKeyButtonState);
        [propget, helpstring("Indicates x coordinate of mouse event in Visio.Window specific coordinates."), helpcontext(0x0105b5f3)]
        HRESULT _stdcall x([out, retval] double* pdX);
        [propget, helpstring("Indicates y coordinate of mouse event in Visio.Window specific coordinates."), helpcontext(0x0105b5ee)]
        HRESULT _stdcall y([out, retval] double* pdY);
        [propget, helpstring("Indicates drag state of a mouse move operation"), helpcontext(0x0105d849)]
        HRESULT _stdcall DragState([out, retval] VisMouseMoveDragStates* peDragState);
        [propget, helpcontext(0x01052534)]
        HRESULT _stdcall Stat([out, retval] short* lpi2Ret);
    };

    typedef enum {
        visMouseMoveDragStatesNone = 0,
        visMouseMoveDragStatesBegin = 1,
        visMouseMoveDragStatesEnter = 2,
        visMouseMoveDragStatesOver = 3,
        visMouseMoveDragStatesLeave = 4,
        visMouseMoveDragStatesDrop = 5
    } VisMouseMoveDragStates;

    [
      odl,
      uuid(000D072B-0000-0000-C000-000000000046),
      helpstring("Interface to enable passing relevant info about keyboard messages through Visio automation events."),
      helpcontext(0x0000cb57),
      oleautomation
    ]
    interface IVKeyboardEvent : IDispatch {
        [propget, helpstring("String representation of this object's properties."), helpcontext(0x01042f71)]
        HRESULT _stdcall ToString([out, retval] BSTR* pbstrString);
        [propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x01039962)]
        HRESULT _stdcall Application([out, retval] IVApplication** lpdispRet);
        [propget, helpstring("Returns visObjTypeKeyboardEvent (50)."), helpcontext(0x01039cc8)]
        HRESULT _stdcall ObjectType([out, retval] VisObjectTypes* peType);
        [propget, helpstring("The Visio.Window associated with this event."), helpcontext(0x01042f58)]
        HRESULT _stdcall Window([out, retval] IVWindow** ppWindow);
        [propget, helpstring("Code associated with KeyDown and KeyUp events."), helpcontext(0x0104303e)]
        HRESULT _stdcall KeyCode([out, retval] long* pnKeyCode);
        [propget, helpstring("Indicates state of mouse buttons and shift and control keys for the KeyDown or KeyUp event."), helpcontext(0x01043043)]
        HRESULT _stdcall KeyButtonState([out, retval] long* pnKeyButtonState);
        [propget, helpstring("Character associated with KeyPress event."), helpcontext(0x01043048)]
        HRESULT _stdcall KeyAscii([out, retval] long* pnKeyAscii);
        [propget, helpcontext(0x01039e94)]
        HRESULT _stdcall Stat([out, retval] short* lpi2Ret);
    };

    [
      odl,
      uuid(000D072C-0000-0000-C000-000000000046),
      oleautomation
    ]
    interface IVInvisibleApp : IDispatch {
        [propget, helpcontext(0x010b3a41)]
        HRESULT _stdcall ActiveDocument([out, retval] IVDocument** lpdispRet);
        [propget, helpcontext(0x010b3a46)]
        HRESULT _stdcall ActivePage([out, retval] IVPage** lpdispRet);
        [propget, helpcontext(0x010b3a4b)]
        HRESULT _stdcall ActiveWindow([out, retval] IVWindow** lpdispRet);
        [propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x010b3a82)]
        HRESULT _stdcall Application([out, retval] IVApplication** lpdispRet);
        [propget, helpcontext(0x010b3bdb)]
        HRESULT _stdcall Documents([out, retval] IVDocuments** lpdispRet);
        [propget, helpstring("Returns visObjTypeApp (3)."), helpcontext(0x010b3de8)]
        HRESULT _stdcall ObjectType([out, retval] short* lpi2Ret);
        [propget, helpcontext(0x010b3df2)]
        HRESULT _stdcall OnDataChangeDelay([out, retval] long* lpi4Ret);
        [propput, helpcontext(0x010b3df2)]
        HRESULT _stdcall OnDataChangeDelay([in] long lpi4Ret);
        [propget, helpcontext(0x010b3ea1)]
        HRESULT _stdcall ProcessID([out, retval] long* lpi4Ret);
        [helpcontext(0x010b47ac)]
        HRESULT _stdcall Quit();
        [helpcontext(0x010b47b1)]
        HRESULT _stdcall Redo();
        [propget, helpcontext(0x010b3f37)]
        HRESULT _stdcall ScreenUpdating([out, retval] short* lpi2Ret);
        [propput, helpcontext(0x010b3f37)]
        HRESULT _stdcall ScreenUpdating([in] short lpi2Ret);
        [propget, helpcontext(0x010b3fb4)]
        HRESULT _stdcall Stat([out, retval] short* lpi2Ret);
        [helpcontext(0x010b484c)]
        HRESULT _stdcall Undo();
        [propget, helpcontext(0x010b4090)]
        HRESULT _stdcall Version([out, retval] BSTR* lpbstrRet);
        [propget, hidden, helpcontext(0x010b40a4)]
        HRESULT _stdcall WindowHandle([out, retval] short* lpi2Ret);
        [propget, helpcontext(0x010b40a9)]
        HRESULT _stdcall Windows([out, retval] IVWindows** lpdispRet);
        [propget, helpcontext(0x010b3d48)]
        HRESULT _stdcall Language([out, retval] long* lpi4Ret);
        [propget, hidden, helpcontext(0x010b0760)]
        HRESULT _stdcall IsVisio16([out, retval] short* lpi2Ret);
        [propget, hidden, helpcontext(0x010b0760)]
        HRESULT _stdcall IsVisio32([out, retval] short* lpi2Ret);
        [propget, helpcontext(0x010b40a4)]
        HRESULT _stdcall WindowHandle32([out, retval] long* lpi4Ret);
        [propget, hidden, helpcontext(0x010b3cee)]
        HRESULT _stdcall InstanceHandle([out, retval] short* lpi2Ret);
        [propget, helpcontext(0x010b3cee)]
        HRESULT _stdcall InstanceHandle32([out, retval] long* lpi4Ret);
        [propget, helpcontext(0x010b3ac8)]
        HRESULT _stdcall BuiltInMenus([out, retval] IVUIObject** lpdispRet);
        [propget, helpcontext(0x010b3acd)]
        HRESULT _stdcall BuiltInToolbars(
                        [in] short fIgnored, 
                        [out, retval] IVUIObject** lpdispRet);
        [propget, helpcontext(0x010b3b81)]
        HRESULT _stdcall CustomMenus([out, retval] IVUIObject** lpdispRet);
        [helpcontext(0x010b4810)]
        HRESULT _stdcall SetCustomMenus([in] IVUIObject* MenusObject);
        [propget, helpcontext(0x010b3b86)]
        HRESULT _stdcall CustomMenusFile([out, retval] BSTR* lpbstrRet);
        [propput, helpcontext(0x010b3b86)]
        HRESULT _stdcall CustomMenusFile([in] BSTR lpbstrRet);
        [helpcontext(0x010b464e)]
        HRESULT _stdcall ClearCustomMenus();
        [propget, helpcontext(0x010b3b8b)]
        HRESULT _stdcall CustomToolbars([out, retval] IVUIObject** lpdispRet);
        [helpcontext(0x010b4815)]
        HRESULT _stdcall SetCustomToolbars([in] IVUIObject* ToolbarsObject);
        [propget, helpcontext(0x010b3b90)]
        HRESULT _stdcall CustomToolbarsFile([out, retval] BSTR* lpbstrRet);
        [propput, helpcontext(0x010b3b90)]
        HRESULT _stdcall CustomToolbarsFile([in] BSTR lpbstrRet);
        [helpcontext(0x010b4653)]
        HRESULT _stdcall ClearCustomToolbars();
        [propget, helpcontext(0x010b3a5f)]
        HRESULT _stdcall AddonPaths([out, retval] BSTR* lpbstrRet);
        [propput, helpcontext(0x010b3a5f)]
        HRESULT _stdcall AddonPaths([in] BSTR lpbstrRet);
        [propget, helpcontext(0x010b3be5)]
        HRESULT _stdcall DrawingPaths([out, retval] BSTR* lpbstrRet);
        [propput, helpcontext(0x010b3be5)]
        HRESULT _stdcall DrawingPaths([in] BSTR lpbstrRet);
        [propget, hidden, helpcontext(0x010b3c3f)]
        HRESULT _stdcall FilterPaths([out, retval] BSTR* lpbstrRet);
        [propput, hidden, helpcontext(0x010b3c3f)]
        HRESULT _stdcall FilterPaths([in] BSTR lpbstrRet);
        [propget, helpcontext(0x010b3ca3)]
        HRESULT _stdcall HelpPaths([out, retval] BSTR* lpbstrRet);
        [propput, helpcontext(0x010b3ca3)]
        HRESULT _stdcall HelpPaths([in] BSTR lpbstrRet);
        [propget, helpcontext(0x010b3faf)]
        HRESULT _stdcall StartupPaths([out, retval] BSTR* lpbstrRet);
        [propput, helpcontext(0x010b3faf)]
        HRESULT _stdcall StartupPaths([in] BSTR lpbstrRet);
        [propget, helpcontext(0x010b3fc8)]
        HRESULT _stdcall StencilPaths([out, retval] BSTR* lpbstrRet);
        [propput, helpcontext(0x010b3fc8)]
        HRESULT _stdcall StencilPaths([in] BSTR lpbstrRet);
        [propget, helpcontext(0x010b400e)]
        HRESULT _stdcall TemplatePaths([out, retval] BSTR* lpbstrRet);
        [propput, helpcontext(0x010b400e)]
        HRESULT _stdcall TemplatePaths([in] BSTR lpbstrRet);
        [propget, helpcontext(0x010b4081)]
        HRESULT _stdcall UserName([out, retval] BSTR* lpbstrRet);
        [propput, helpcontext(0x010b4081)]
        HRESULT _stdcall UserName([in] BSTR lpbstrRet);
        [propget, helpcontext(0x010b3eba)]
        HRESULT _stdcall PromptForSummary([out, retval] short* lpi2Ret);
        [propput, helpcontext(0x010b3eba)]
        HRESULT _stdcall PromptForSummary([in] short lpi2Ret);
        [propget, helpcontext(0x010b3a64)]
        HRESULT _stdcall Addons([out, retval] IVAddons** lpdispRet);
        [hidden, helpcontext(0x010b47e3)]
        HRESULT _stdcall SaveWorkspaceAs([in] BSTR FileName);
        [helpcontext(0x010b469e)]
        HRESULT _stdcall DoCmd([in] short CommandID);
        [propget, hidden, helpstring("ProfileName is obsolete as of Visio 2000."), helpcontext(0x010b3eab)]
        HRESULT _stdcall ProfileName([out, retval] BSTR* lpbstrRet);
        [propget, helpcontext(0x010b3c03)]
        HRESULT _stdcall EventInfo(
                        [in] long eventSeqNum, 
                        [out, retval] BSTR* lpbstrRet);
        [propget, helpcontext(0x010b3c08)]
        HRESULT _stdcall EventList([out, retval] IVEventList** lpdispRet);
        [propget, helpcontext(0x010b3e60)]
        HRESULT _stdcall PersistsEvents([out, retval] short* lpi2Ret);
        [propget, helpcontext(0x010b3a3c)]
        HRESULT _stdcall Active([out, retval] short* lpi2Ret);
        [propget, helpcontext(0x010b3bb8)]
        HRESULT _stdcall DeferRecalc([out, retval] short* lpi2Ret);
        [propput, helpcontext(0x010b3bb8)]
        HRESULT _stdcall DeferRecalc([in] short lpi2Ret);
        [propget, helpcontext(0x010b3a6e)]
        HRESULT _stdcall AlertResponse([out, retval] short* lpi2Ret);
        [propput, helpcontext(0x010b3a6e)]
        HRESULT _stdcall AlertResponse([in] short lpi2Ret);
        [propget, helpcontext(0x010b3f82)]
        HRESULT _stdcall ShowProgress([out, retval] short* lpi2Ret);
        [propput, helpcontext(0x010b3f82)]
        HRESULT _stdcall ShowProgress([in] short lpi2Ret);
        [propget, helpstring("Interface returned is VBIDE.VBE."), helpcontext(0x010b4086)]
        HRESULT _stdcall Vbe([out, retval] IDispatch** lpdispRet);
        [propget, hidden, helpstring("In Visio 2002 and later, ShowMenus does nothing. ShowToolbar now hides/shows all command menus and toolbars."), helpcontext(0x010b3f78)]
        HRESULT _stdcall ShowMenus([out, retval] short* lpi2Ret);
        [propput, hidden, helpstring("In Visio 2002 and later, ShowMenus does nothing. ShowToolbar now hides/shows all command menus and toolbars."), helpcontext(0x010b3f78)]
        HRESULT _stdcall ShowMenus([in] short lpi2Ret);
        [propget, hidden, helpstring("Superseded by App.ShowToolbar as of Visio 5.0."), helpcontext(0x010b4045)]
        HRESULT _stdcall ToolbarStyle([out, retval] short* lpi2Ret);
        [propput, hidden, helpstring("Superseded by App.ShowToolbar as of Visio 5.0."), helpcontext(0x010b4045)]
        HRESULT _stdcall ToolbarStyle([in] short lpi2Ret);
        [propget, helpcontext(0x010b3f8c)]
        HRESULT _stdcall ShowStatusBar([out, retval] short* lpi2Ret);
        [propput, helpcontext(0x010b3f8c)]
        HRESULT _stdcall ShowStatusBar([in] short lpi2Ret);
        [propget, helpcontext(0x010b3c0d)]
        HRESULT _stdcall EventsEnabled([out, retval] short* lpi2Ret);
        [propput, helpcontext(0x010b3c0d)]
        HRESULT _stdcall EventsEnabled([in] short lpi2Ret);
        [helpcontext(0x010b470c)]
        HRESULT _stdcall FormatResult(
                        [in] VARIANT StringOrNumber, 
                        [in] VARIANT UnitsIn, 
                        [in] VARIANT UnitsOut, 
                        [in] BSTR Format, 
                        [out, retval] BSTR* lpbstrRet);
        [helpcontext(0x010b4667)]
        HRESULT _stdcall ConvertResult(
                        [in] VARIANT StringOrNumber, 
                        [in] VARIANT UnitsIn, 
                        [in] VARIANT UnitsOut, 
                        [out, retval] double* lpr8Ret);
        [propget, helpcontext(0x010b3e42)]
        HRESULT _stdcall Path([out, retval] BSTR* lpbstrRet);
        [helpcontext(0x010b46df)]
        HRESULT _stdcall EnumDirectories(
                        [in] BSTR PathsString, 
                        [out] SAFEARRAY(BSTR)* NameArray);
        [propget, helpcontext(0x010b405e)]
        HRESULT _stdcall TraceFlags([out, retval] long* lpi4Ret);
        [propput, helpcontext(0x010b405e)]
        HRESULT _stdcall TraceFlags([in] long lpi4Ret);
        [helpcontext(0x010b47a2)]
        HRESULT _stdcall PurgeUndo();
        [helpcontext(0x010b47a7)]
        HRESULT _stdcall QueueMarkerEvent(
                        [in] BSTR ContextString, 
                        [out, retval] long* lpi4Ret);
        [propget, helpstring("In Visio 2002 and later, ShowToolbar hides/shows all commandbars - menus and toolbars. S now does nothing."), helpcontext(0x010b3f91)]
        HRESULT _stdcall ShowToolbar([out, retval] short* lpi2Ret);
        [propput, helpstring("In Visio 2002 and later, ShowToolbar hides/shows all commandbars - menus and toolbars. S now does nothing."), helpcontext(0x010b3f91)]
        HRESULT _stdcall ShowToolbar([in] short lpi2Ret);
        [propget, helpcontext(0x010b3d7f)]
        HRESULT _stdcall LiveDynamics([out, retval] VARIANT_BOOL* pbRet);
        [propput, helpcontext(0x010b3d7f)]
        HRESULT _stdcall LiveDynamics([in] VARIANT_BOOL pbRet);
        [propget, helpcontext(0x010b3a91)]
        HRESULT _stdcall AutoLayout([out, retval] VARIANT_BOOL* pbRet);
        [propput, helpcontext(0x010b3a91)]
        HRESULT _stdcall AutoLayout([in] VARIANT_BOOL pbRet);
        [propget, helpcontext(0x010b409a)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* pbVisible);
        [propput, helpcontext(0x010b409a)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL pbVisible);
        [helpcontext(0x010b4635)]
        HRESULT _stdcall BeginUndoScope(
                        [in] BSTR bstrUndoScopeName, 
                        [out, retval] long* pnScopeID);
        [helpcontext(0x010b46da)]
        HRESULT _stdcall EndUndoScope(
                        [in] long nScopeID, 
                        [in] VARIANT_BOOL bCommit);
        [helpcontext(0x010b462b)]
        HRESULT _stdcall AddUndoUnit([in] IUnknown* pUndoUnit);
        [propget, helpcontext(0x010b3b40)]
        HRESULT _stdcall CommandLine([out, retval] BSTR* pbstrCmdLine);
        [propget, helpcontext(0x010b3d20)]
        HRESULT _stdcall IsUndoingOrRedoing([out, retval] VARIANT_BOOL* pbInUndoOrRedo);
        [propget, helpcontext(0x010b3b7c)]
        HRESULT _stdcall CurrentScope([out, retval] long* pnCmdID);
        [propget, helpcontext(0x010b3d16)]
        HRESULT _stdcall IsInScope(
                        [in] long nCmdID, 
                        [out, retval] VARIANT_BOOL* pbInScope);
        [propget, hidden, helpstring("Collection of COM Addins that are registered."), helpcontext(0x010b3a50)]
        HRESULT _stdcall old_Addins([out, retval] IDispatch** lpdispRet);
        [propget, hidden, helpstring("ProductName is obsolete as of Visio 2000."), helpcontext(0x010b3ea6)]
        HRESULT _stdcall ProductName([out, retval] BSTR* lpbstrRet);
        [propget, helpcontext(0x010b4072)]
        HRESULT _stdcall UndoEnabled([out, retval] VARIANT_BOOL* pbRet);
        [propput, helpcontext(0x010b4072)]
        HRESULT _stdcall UndoEnabled([in] VARIANT_BOOL pbRet);
        [propget, helpcontext(0x010b40c2)]
        HRESULT _stdcall ShowChanges([out, retval] VARIANT_BOOL* pbRet);
        [propput, helpcontext(0x010b40c2)]
        HRESULT _stdcall ShowChanges([in] VARIANT_BOOL pbRet);
        [propget, helpcontext(0x010b40c7)]
        HRESULT _stdcall TypelibMajorVersion([out, retval] short* lpi2Ret);
        [propget, helpcontext(0x010b40cc)]
        HRESULT _stdcall TypelibMinorVersion([out, retval] short* lpi2Ret);
        [propget, helpcontext(0x010b40d1)]
        HRESULT _stdcall AutoRecoverInterval([out, retval] short* lpi2Ret);
        [propput, helpcontext(0x010b40d1)]
        HRESULT _stdcall AutoRecoverInterval([in] short lpi2Ret);
        [propget, helpcontext(0x010bcd53)]
        HRESULT _stdcall InhibitSelectChange([out, retval] VARIANT_BOOL* pbRet);
        [propput, helpcontext(0x010bcd53)]
        HRESULT _stdcall InhibitSelectChange([in] VARIANT_BOOL pbRet);
        [propget, helpcontext(0x010bcca4)]
        HRESULT _stdcall ActivePrinter([out, retval] BSTR* pbstrPrinterName);
        [propput, helpcontext(0x010bcca4)]
        HRESULT _stdcall ActivePrinter([in] BSTR pbstrPrinterName);
        [propget, helpstring("Use the elements returned in this array with the ActivePrinter property."), helpcontext(0x010bccae)]
        HRESULT _stdcall AvailablePrinters([out, retval] SAFEARRAY(BSTR)* NamesArray);
        [helpstring("Renames the currently open top level undo scope such that bstrScopeName shows up in the do menu item. Raises an exception if not in an open scope."), helpcontext(0x010bcddf)]
        HRESULT _stdcall RenameCurrentScope([in] BSTR bstrScopeName);
        [helpcontext(0x010bcd67)]
        HRESULT _stdcall InvokeHelp(
                        [in] BSTR bstrHelpFileName, 
                        [in] long Command, 
                        [in] long Data);
        [propget, helpstring("Interface returned is Office.CommandBars."), helpcontext(0x010bcccc)]
        HRESULT _stdcall CommandBars([out, retval] IDispatch** lpdispRet);
        [propget, helpcontext(0x010bccb3)]
        HRESULT _stdcall Build([out, retval] long* pnBuild);
        [propget, helpstring("Interface returned is Office.COMAddIns."), helpcontext(0x010bccc7)]
        HRESULT _stdcall COMAddIns([out, retval] IDispatch** lpdispRet);
        [propget, hidden, helpcontext(0x010bcec0)]
        HRESULT _stdcall DefaultPageUnits([out, retval] VARIANT* pUnitsNameOrCode);
        [propput, hidden, helpcontext(0x010bcec0)]
        HRESULT _stdcall DefaultPageUnits([in] VARIANT pUnitsNameOrCode);
        [propget, helpcontext(0x010bcebb)]
        HRESULT _stdcall DefaultTextUnits([out, retval] VARIANT* pUnitsNameOrCode);
        [propput, helpcontext(0x010bcebb)]
        HRESULT _stdcall DefaultTextUnits([in] VARIANT pUnitsNameOrCode);
        [propget, helpcontext(0x010bceca)]
        HRESULT _stdcall DefaultAngleUnits([out, retval] VARIANT* pUnitsNameOrCode);
        [propput, helpcontext(0x010bceca)]
        HRESULT _stdcall DefaultAngleUnits([in] VARIANT pUnitsNameOrCode);
        [propget, helpcontext(0x010bcec5)]
        HRESULT _stdcall DefaultDurationUnits([out, retval] VARIANT* pUnitsNameOrCode);
        [propput, helpcontext(0x010bcec5)]
        HRESULT _stdcall DefaultDurationUnits([in] VARIANT pUnitsNameOrCode);
        [propget, helpcontext(0x010bcf74)]
        HRESULT _stdcall FullBuild([out, retval] long* pnFullBuild);
        [helpcontext(0x010bd2ad)]
        HRESULT _stdcall OnComponentEnterState(
                        [in] VisOnComponentEnterCodes uStateID, 
                        [in] VARIANT_BOOL bEnter);
        [propget, helpcontext(0x010bd2d5)]
        HRESULT _stdcall VBAEnabled([out, retval] VARIANT_BOOL* pbRet);
        [propget, helpcontext(0x010bd2c6)]
        HRESULT _stdcall DefaultZoomBehavior([out, retval] VisZoomBehavior* pnZoomBehavior);
        [propput, helpcontext(0x010bd2c6)]
        HRESULT _stdcall DefaultZoomBehavior([in] VisZoomBehavior pnZoomBehavior);
        [hidden, helpcontext(0x010b0760)]
        HRESULT _stdcall GetUsageStatistic(
                        [in] long nWhichStatistic, 
                        [out, retval] VARIANT* pvStatistic);
        [propget, helpstring("Returns font Visio is using in its dialogs."), helpcontext(0x010bd2cb)]
        HRESULT _stdcall DialogFont([out, retval] IFontDisp** ppFontDisp);
        [propget, helpcontext(0x010bd154)]
        HRESULT _stdcall LanguageHelp([out, retval] long* lpi4Ret);
        [propget, helpcontext(0x010bd078)]
        HRESULT _stdcall Window([out, retval] IVWindow** lpdispRet);
        [propget, helpcontext(0x010b3ea6)]
        HRESULT _stdcall Name([out, retval] BSTR* pbstrName);
        [propget, helpcontext(0x010bd1db)]
        HRESULT _stdcall ConnectorToolDataObject([out, retval] IUnknown** lpdispRet);
        [propget, helpcontext(0x010bd113)]
        HRESULT _stdcall Settings([out, retval] IVApplicationSettings** lpSettingRet);
        [helpcontext(0x010bd00f)]
        HRESULT _stdcall FormatResultEx(
                        [in] VARIANT StringOrNumber, 
                        [in] VARIANT UnitsIn, 
                        [in] VARIANT UnitsOut, 
                        [in] BSTR Format, 
                        [in, optional, defaultvalue(0)] long LangID, 
                        [in, optional, defaultvalue(-1)] long CalendarID, 
                        [out, retval] BSTR* lpbstrRet);
        [propget, helpcontext(0x010bd12c)]
        HRESULT _stdcall SaveAsWebObject([out, retval] IDispatch** lpdispRet);
        [propget, hidden, helpcontext(0x010bf1e8)]
        HRESULT _stdcall MsoDebugOptions([out, retval] IDispatch** lpdispRet);
        [propget, helpcontext(0x010bf1ed)]
        HRESULT _stdcall MyShapesPath([out, retval] BSTR* lpbstrRet);
        [propput, helpcontext(0x010bf1ed)]
        HRESULT _stdcall MyShapesPath([in] BSTR lpbstrRet);
        [propget, helpcontext(0x010bf1f2)]
        HRESULT _stdcall DefaultRectangleDataObject([out, retval] IUnknown** lpunkRet);
        [propget, helpcontext(0x010bf1f7)]
        HRESULT _stdcall DataFeaturesEnabled([out, retval] VARIANT_BOOL* pbRet);
        [propget, helpstring("Interface returned is Office.LanguageSettings."), helpcontext(0x010bf1e3)]
        HRESULT _stdcall LanguageSettings([out, retval] IDispatch** lpdispRet);
        [propget, helpcontext(0x010bf1fc)]
        HRESULT _stdcall Assistance([out, retval] IDispatch** lpdispRet);
    };

    typedef enum {
        visRHINone = 0,
        visRHIPersonalInfo = 1,
        visRHIPreview = 2,
        visRHIMasters = 4,
        visRHIStyles = 8,
        visRHIDataRecordsets = 16
    } VisRemoveHiddenInfoItems;

    typedef enum {
        visAutoLinkShapeText = 1,
        visAutoLinkCustPropsLabel = 2,
        visAutoLinkUserRowName = 3,
        visAutoLinkGeometryAngle = 4,
        visAutoLinkGeometryWidth = 5,
        visAutoLinkGeometryHeight = 6,
        visAutoLinkObjectID = 7,
        visAutoLinkMasterName = 8,
        visAutoLinkObjectName = 9,
        visAutoLinkObjectType = 10,
        visAutoLinkObjectData1 = 11,
        visAutoLinkObjectData2 = 12,
        visAutoLinkObjectData3 = 13,
        visAutoLinkPropRowNameU = 14,
        visAutoLinkUserRowNameU = 15,
        visAutoLinkMasterNameU = 16,
        visAutoLinkObjectNameU = 17
    } VisAutoLinkFieldTypes;

    typedef enum {
        visRefreshOverwriteAll = 1,
        visRefreshNoReconcilationUI = 2
    } VisRefreshSettings;

    typedef enum {
        visDataRecordsetNoExternalDataUI = 1,
        visDataRecordsetNoRefreshUI = 2,
        visDataRecordsetNoAdvConfig = 4,
        visDataRecordsetDelayQuery = 8,
        visDataRecordsetDontCopyLinks = 16
    } VisDataRecordsetAddOptions;

    typedef enum {
        visThemeColorsNone = 0,
        visThemeColorsMonochrome = 1,
        visThemeColorsOffice = 2,
        visThemeColorsMedian = 3,
        visThemeColorsConcourse = 4,
        visThemeColorsSolstice = 5,
        visThemeColorsTechnic = 6,
        visThemeColorsPaper = 7,
        visThemeColorsFoundry = 8,
        visThemeColorsApex = 9,
        visThemeColorsTrek = 10,
        visThemeColorsModule = 11,
        visThemeColorsOriel = 12,
        visThemeColorsAspect = 13,
        visThemeColorsEquity = 14,
        visThemeColorsCivic = 15,
        visThemeColorsOpulent = 16,
        visThemeColorsVerve = 17,
        visThemeColorsOrigin = 18,
        visThemeColorsUrban = 19,
        visThemeColorsFlow = 20,
        visThemeColorsMetro = 21,
        visThemeColorsOfficeLight = 22,
        visThemeColorsOfficeDark = 23,
        visThemeColorsMedianLight = 24,
        visThemeColorsMedianDark = 25,
        visThemeColorsConcourseLight = 26,
        visThemeColorsConcourseDark = 27,
        visThemeColorsPaperLight = 28,
        visThemeColorsPaperDark = 29,
        visThemeColorsFoundryLight = 30,
        visThemeColorsFoundryDark = 31,
        visThemeColorsEquityLight = 32,
        visThemeColorsEquityDark = 33,
        visThemeColorsVerveLight = 34,
        visThemeColorsVerveDark = 35
    } VisThemeColors;

    typedef enum {
        visThemeEffectsNone = 0,
        visThemeEffectsSubdued = 1,
        visThemeEffectsSimpleShadow = 2,
        visThemeEffectsButton = 3,
        visThemeEffectsSquare = 4,
        visThemeEffectsPillow = 5,
        visThemeEffectsBevelIllusion = 6,
        visThemeEffectsBevelHighlight = 7,
        visThemeEffectsOutline = 8,
        visThemeEffectsDecal = 9,
        visThemeEffectsRaisedSurface = 10,
        visThemeEffectsMesh = 11,
        visThemeEffectsPinstripe = 12,
        visThemeEffectsStripes = 13,
        visThemeEffectsOblique = 14,
        visThemeEffectsToy = 15
    } VisThemeEffects;

    typedef enum {
        visAutoLinkSelectedShapesOnly = 1,
        visAutoLinkGenericProgressBar = 2,
        visAutoLinkNoApplyDataGraphic = 4,
        visAutoLinkReplaceExistingLinks = 8,
        visAutoLinkDontReplaceExistingLinks = 16,
        visAutoLinkNullMatchesNoFormula = 32,
        visAutoLinkIncludeHiddenProps = 64
    } VisAutoLinkBehaviors;

    [
      odl,
      uuid(000D0733-0000-0000-C000-000000000046),
      helpcontext(0x0000ee61),
      hidden,
      dual,
      oleautomation
    ]
    interface IVDataRecordsetChangedEvent : IDispatch {
        [id(0x60020000), propget, helpcontext(0x0106a6a2)]
        HRESULT Application([out, retval] IVApplication** Application);
        [id(0x60020001), propget, helpcontext(0x0106abd4)]
        HRESULT Stat([out, retval] short* lpi2Ret);
        [id(0x60020002), propget, helpcontext(0x0106aa08)]
        HRESULT ObjectType([out, retval] short* ObjectType);
        [id(0x60020003), propget, helpcontext(0x01075f61)]
        HRESULT DataRecordset([out, retval] IVDataRecordset** DataRecordset);
        [id(0x60020004), propget, helpcontext(0x01075fa7)]
        HRESULT DataRowsAdded([out, retval] SAFEARRAY(long)* IDsForNewRows);
        [id(0x60020005), propget, helpcontext(0x01075fac)]
        HRESULT DataRowsDeleted([out, retval] SAFEARRAY(long)* IDsForDeletedRows);
        [id(0x60020006), propget, helpcontext(0x01075fb1)]
        HRESULT DataColumnsAdded([out, retval] SAFEARRAY(BSTR)* NamesForNewColumns);
        [id(0x60020007), propget, helpcontext(0x01075fb6)]
        HRESULT DataColumnsDeleted([out, retval] SAFEARRAY(BSTR)* NamesForDeletedColumns);
        [id(0x60020008), propget, helpcontext(0x01075fbb)]
        HRESULT DataColumnsChanged([out, retval] SAFEARRAY(BSTR)* NamesForChangedColumns);
    };

    typedef [public]
    IVApplication* LPVISIOAPPLICATION;

    typedef [public]
    IVCell* LPVISIOCELL;

    typedef [public]
    IVCharacters* LPVISIOCHARS;

    typedef [public]
    IVConnect* LPVISIOCONNECT;

    typedef [public]
    IVConnects* LPVISIOCONNECTS;

    typedef [public]
    IVDocument* LPVISIODOCUMENT;

    typedef [public]
    IVDocuments* LPVISIODOCUMENTS;

    typedef [public]
    IVMaster* LPVISIOMASTER;

    typedef [public]
    IVMasters* LPVISIOMASTERS;

    typedef [public]
    IVPage* LPVISIOPAGE;

    typedef [public]
    IVPages* LPVISIOPAGES;

    typedef [public]
    IVSelection* LPVISIOSELECTION;

    typedef [public]
    IVShape* LPVISIOSHAPE;

    typedef [public]
    IVShapes* LPVISIOSHAPES;

    typedef [public]
    IVStyle* LPVISIOSTYLE;

    typedef [public]
    IVStyles* LPVISIOSTYLES;

    typedef [public]
    IVWindow* LPVISIOWINDOW;

    typedef [public]
    IVWindows* LPVISIOWINDOWS;

    typedef [public]
    IVLayer* LPVISIOLAYER;

    typedef [public]
    IVLayers* LPVISIOLAYERS;

    typedef [public]
    IVFont* LPVISIOFONT;

    typedef [public]
    IVFonts* LPVISIOFONTS;

    typedef [public]
    IVColor* LPVISIOCOLOR;

    typedef [public]
    IVColors* LPVISIOCOLORS;

    typedef [public]
    IVAddon* LPVISIOADDON;

    typedef [public]
    IVAddons* LPVISIOADDONS;

    typedef [public]
    IVEvent* LPVISIOEVENT;

    typedef [public]
    IVEventList* LPVISIOEVENTS;

    typedef [public]
    IVMenuItem* LPVISIOMENUITEM;

    typedef [public]
    IVMenuItems* LPVISIOMENUITEMS;

    typedef [public]
    IVMenu* LPVISIOMENU;

    typedef [public]
    IVMenus* LPVISIOMENUS;

    typedef [public]
    IVMenuSet* LPVISIOMENUSET;

    typedef [public]
    IVMenuSets* LPVISIOMENUSETS;

    typedef [public]
    IVToolbarItem* LPVISIOTOOLBARITEM;

    typedef [public]
    IVToolbarItems* LPVISIOTOOLBARITEMS;

    typedef [public]
    IVToolbar* LPVISIOTOOLBAR;

    typedef [public]
    IVToolbars* LPVISIOTOOLBARS;

    typedef [public]
    IVToolbarSet* LPVISIOTOOLBARSET;

    typedef [public]
    IVToolbarSets* LPVISIOTOOLBARSETS;

    typedef [public]
    IVStatusBarItem* LPVISIOSTATUSBARITEM;

    typedef [public]
    IVStatusBarItems* LPVISIOSTATUSBARITEMS;

    typedef [public]
    IVStatusBar* LPVISIOSTATUSBAR;

    typedef [public]
    IVStatusBars* LPVISIOSTATUSBARS;

    typedef [public]
    IVAccelItem* LPVISIOACCELITEM;

    typedef [public]
    IVAccelItems* LPVISIOACCELITEMS;

    typedef [public]
    IVAccelTable* LPVISIOACCELTABLE;

    typedef [public]
    IVAccelTables* LPVISIOACCELTABLES;

    typedef [public]
    IVUIObject* LPVISIOUIOBJECT;

    typedef [public]
    IEnumVMenuItem* LPVISIOENUMVMENUITEM;

    typedef [public]
    IEnumVMenu* LPVISIOENUMVMENU;

    typedef [public]
    IEnumVMenuSet* LPVISIOENUMVMENUSET;

    typedef [public]
    IEnumVToolbarItem* LPVISIOENUMVTOOLBARITEM;

    typedef [public]
    IEnumVToolbar* LPVISIOENUMVTOOLBAR;

    typedef [public]
    IEnumVToolbarSet* LPVISIOENUMVTOOLBARSET;

    typedef [public]
    IEnumVStatusBarItem* LPVISIOENUMVSTATUSBARITEM;

    typedef [public]
    IEnumVStatusBar* LPVISIOENUMVSTATUSBAR;

    typedef [public]
    IEnumVAccelItem* LPVISIOENUMVACCELITEM;

    typedef [public]
    IEnumVAccelTable* LPVISIOENUMVACCELTABLE;

    [
      odl,
      uuid(000D071C-0000-0000-C000-000000000046),
      helpcontext(0x00002710),
      hidden,
      dual,
      oleautomation
    ]
    interface IVGlobal : IDispatch {
        [id(00000000), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00c38322)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x00000001), propget, helpcontext(0x00c382e1)]
        HRESULT ActiveDocument([out, retval] IVDocument** lpdispRet);
        [id(0x00000002), propget, helpcontext(0x00c382e6)]
        HRESULT ActivePage([out, retval] IVPage** lpdispRet);
        [id(0x00000003), propget, helpcontext(0x00c382eb)]
        HRESULT ActiveWindow([out, retval] IVWindow** lpdispRet);
        [id(0x00000004), propget, helpcontext(0x00c3847b)]
        HRESULT Documents([out, retval] IVDocuments** lpdispRet);
        [id(0x00000005), propget, helpcontext(0x00c38949)]
        HRESULT Windows([out, retval] IVWindows** lpdispRet);
        [id(0x00000006), propget, helpcontext(0x00c38304)]
        HRESULT Addons([out, retval] IVAddons** lpdispRet);
        [id(0x00000007), propget, helpcontext(0x00c38926)]
        HRESULT Vbe([out, retval] IDispatch** lpdispRet);
    };

    [
      uuid(000D0750-0000-0000-C000-000000000046),
      helpstring("Visio Document Event Interface"),
      hidden
    ]
    dispinterface EDocument {
        properties:
        methods:
            [id(0x00000002), helpcontext(0x00a0825a)]
            void DocumentOpened([in] IVDocument* doc);
            [id(0x00000001), helpcontext(0x00a08255)]
            void DocumentCreated([in] IVDocument* doc);
            [id(0x00000003), helpcontext(0x00a0825f)]
            void DocumentSaved([in] IVDocument* doc);
            [id(0x00000004), helpcontext(0x00a08264)]
            void DocumentSavedAs([in] IVDocument* doc);
            [id(0x00002002), helpcontext(0x00a08250)]
            void DocumentChanged([in] IVDocument* doc);
            [id(0x00004002), helpcontext(0x00a081f1)]
            void BeforeDocumentClose([in] IVDocument* doc);
            [id(0x00008004), helpcontext(0x00a082cd)]
            void StyleAdded([in] IVStyle* Style);
            [id(0x00002004), helpcontext(0x00a082d2)]
            void StyleChanged([in] IVStyle* Style);
            [id(0x00004004), helpcontext(0x00a0821e)]
            void BeforeStyleDelete([in] IVStyle* Style);
            [id(0x00008008), helpcontext(0x00a08282)]
            void MasterAdded([in] IVMaster* Master);
            [id(0x00002008), helpcontext(0x00a08287)]
            void MasterChanged([in] IVMaster* Master);
            [id(0x00004008), helpcontext(0x00a08200)]
            void BeforeMasterDelete([in] IVMaster* Master);
            [id(0x00008010), helpcontext(0x00a082a0)]
            void PageAdded([in] IVPage* Page);
            [id(0x00002010), helpcontext(0x00a082a5)]
            void PageChanged([in] IVPage* Page);
            [id(0x00004010), helpcontext(0x00a0820a)]
            void BeforePageDelete([in] IVPage* Page);
            [id(0x00008040), helpcontext(0x00a082b9)]
            void ShapeAdded([in] IVShape* Shape);
            [id(0x00000385), helpcontext(0x00a08214)]
            void BeforeSelectionDelete([in] IVSelection* Selection);
            [id(0x00000005), helpcontext(0x00a082aa)]
            void RunModeEntered([in] IVDocument* doc);
            [id(0x00000006), helpcontext(0x00a08246)]
            void DesignModeEntered([in] IVDocument* doc);
            [id(0x00000007), helpcontext(0x00a081fb)]
            void BeforeDocumentSave([in] IVDocument* doc);
            [id(0x00000008), helpcontext(0x00a081fb)]
            void BeforeDocumentSaveAs([in] IVDocument* doc);
            [id(0x00000009), helpstring("Cancel close of document? T:Yes F:No"), helpcontext(0x00a082ff)]
            void QueryCancelDocumentClose(
                            [in] IVDocument* doc, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000000a), helpstring("Document close operation was canceled."), helpcontext(0x00a0832c)]
            void DocumentCloseCanceled([in] IVDocument* doc);
            [id(0x0000012c), helpstring("Cancel delete of style? T:Yes F:No"), helpcontext(0x00a08309)]
            void QueryCancelStyleDelete(
                            [in] IVStyle* Style, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000012d), helpstring("Delete style operation was canceled."), helpcontext(0x00a08336)]
            void StyleDeleteCanceled([in] IVStyle* Style);
            [id(0x00000190), helpstring("Cancel delete of master? T:Yes F:No"), helpcontext(0x00a0830e)]
            void QueryCancelMasterDelete(
                            [in] IVMaster* Master, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x00000191), helpstring("Delete master operation was canceled."), helpcontext(0x00a0833b)]
            void MasterDeleteCanceled([in] IVMaster* Master);
            [id(0x000001f4), helpstring("Cancel delete of page? T:Yes F:No"), helpcontext(0x00a08313)]
            void QueryCancelPageDelete(
                            [in] IVPage* Page, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x000001f5), helpstring("Delete page operation was canceled."), helpcontext(0x00a08340)]
            void PageDeleteCanceled([in] IVPage* Page);
            [id(0x00000322), helpcontext(0x00a082c3)]
            void ShapeParentChanged([in] IVShape* Shape);
            [id(0x00000323), helpcontext(0x00a08354)]
            void BeforeShapeTextEdit([in] IVShape* Shape);
            [id(0x00000324), helpcontext(0x00a08359)]
            void ShapeExitedTextEdit([in] IVShape* Shape);
            [id(0x00000387), helpstring("Cancel delete of shapes? T:Yes F:No"), helpcontext(0x00a08318)]
            void QueryCancelSelectionDelete(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x00000388), helpstring("Delete shapes operation was canceled."), helpcontext(0x00a08345)]
            void SelectionDeleteCanceled([in] IVSelection* Selection);
            [id(0x00000389), helpstring("Cancel ungroup operation? T:Yes F:No"), helpcontext(0x00a08322)]
            void QueryCancelUngroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038a), helpstring("Ungroup operation was canceled."), helpcontext(0x00a0834f)]
            void UngroupCanceled([in] IVSelection* Selection);
            [id(0x0000038b), helpstring("Cancel convert to group operation? T:Yes F:No"), helpcontext(0x00a0831d)]
            void QueryCancelConvertToGroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038c), helpstring("Convert to group operation was canceled."), helpcontext(0x00a0834a)]
            void ConvertToGroupCanceled([in] IVSelection* Selection);
            [id(0x0000038d), helpstring("Cancel group operation? T:Yes F:No"), helpcontext(0x00a129d0)]
            void QueryCancelGroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038e), helpstring("Group operation was canceled."), helpcontext(0x00a129d5)]
            void GroupCanceled([in] IVSelection* Selection);
            [id(0x00000327), helpcontext(0x00a129da)]
            void ShapeDataGraphicChanged([in] IVShape* Shape);
            [id(0x00004020), helpcontext(0x00a129ee)]
            void BeforeDataRecordsetDelete([in] IVDataRecordset* DataRecordset);
            [id(0x00008020), helpcontext(0x00a129f3)]
            void DataRecordsetAdded([in] IVDataRecordset* DataRecordset);
            [id(0x0000000b), helpcontext(0x00a129f8)]
            void AfterRemoveHiddenInformation([in] IVDocument* doc);
    };

    [
      uuid(000D0B00-0000-0000-C000-000000000046),
      helpstring("Visio Application Event Interface"),
      hidden
    ]
    dispinterface EApplication {
        properties:
        methods:
            [id(0x00001001), helpcontext(0x0098e0bd)]
            void AppActivated([in] IVApplication* app);
            [id(0x00001002), helpcontext(0x0098e0c2)]
            void AppDeactivated([in] IVApplication* app);
            [id(0x00001004), helpcontext(0x0098e0c7)]
            void AppObjActivated([in] IVApplication* app);
            [id(0x00001008), helpcontext(0x0098e0cc)]
            void AppObjDeactivated([in] IVApplication* app);
            [id(0x00001010), helpcontext(0x0098e0ef)]
            void BeforeQuit([in] IVApplication* app);
            [id(0x00001020), helpcontext(0x0098e0e5)]
            void BeforeModal([in] IVApplication* app);
            [id(0x00001040), helpcontext(0x0098e0b8)]
            void AfterModal([in] IVApplication* app);
            [id(0x00008001), helpcontext(0x0098e1d0)]
            void WindowOpened([in] IVWindow* Window);
            [id(0x000002bd), helpcontext(0x0098e194)]
            void SelectionChanged([in] IVWindow* Window);
            [id(0x00004001), helpcontext(0x0098e103)]
            void BeforeWindowClosed([in] IVWindow* Window);
            [id(0x00001080), helpcontext(0x0098e1c6)]
            void WindowActivated([in] IVWindow* Window);
            [id(0x000002be), helpcontext(0x0098e10d)]
            void BeforeWindowSelDelete([in] IVWindow* Window);
            [id(0x000002bf), helpcontext(0x0098e108)]
            void BeforeWindowPageTurn([in] IVWindow* Window);
            [id(0x000002c0), helpcontext(0x0098e1d5)]
            void WindowTurnedToPage([in] IVWindow* Window);
            [id(0x00000002), helpcontext(0x0098e13a)]
            void DocumentOpened([in] IVDocument* doc);
            [id(0x00000001), helpcontext(0x0098e135)]
            void DocumentCreated([in] IVDocument* doc);
            [id(0x00000003), helpcontext(0x0098e13f)]
            void DocumentSaved([in] IVDocument* doc);
            [id(0x00000004), helpcontext(0x0098e144)]
            void DocumentSavedAs([in] IVDocument* doc);
            [id(0x00002002), helpcontext(0x0098e130)]
            void DocumentChanged([in] IVDocument* doc);
            [id(0x00004002), helpcontext(0x0098e0d1)]
            void BeforeDocumentClose([in] IVDocument* doc);
            [id(0x00008004), helpcontext(0x0098e1ad)]
            void StyleAdded([in] IVStyle* Style);
            [id(0x00002004), helpcontext(0x0098e1b2)]
            void StyleChanged([in] IVStyle* Style);
            [id(0x00004004), helpcontext(0x0098e0fe)]
            void BeforeStyleDelete([in] IVStyle* Style);
            [id(0x00008008), helpcontext(0x0098e162)]
            void MasterAdded([in] IVMaster* Master);
            [id(0x00002008), helpcontext(0x0098e167)]
            void MasterChanged([in] IVMaster* Master);
            [id(0x00004008), helpcontext(0x0098e0e0)]
            void BeforeMasterDelete([in] IVMaster* Master);
            [id(0x00008010), helpcontext(0x0098e180)]
            void PageAdded([in] IVPage* Page);
            [id(0x00002010), helpcontext(0x0098e185)]
            void PageChanged([in] IVPage* Page);
            [id(0x00004010), helpcontext(0x0098e0ea)]
            void BeforePageDelete([in] IVPage* Page);
            [id(0x00008040), helpcontext(0x0098e1b7)]
            void ShapeAdded([in] IVShape* Shape);
            [id(0x00000385), helpcontext(0x0098e0f4)]
            void BeforeSelectionDelete([in] IVSelection* Selection);
            [id(0x00002040), helpcontext(0x0098e19e)]
            void ShapeChanged([in] IVShape* Shape);
            [id(0x00000386), helpcontext(0x0098e18f)]
            void SelectionAdded([in] IVSelection* Selection);
            [id(0x00004040), helpcontext(0x0098e0f9)]
            void BeforeShapeDelete([in] IVShape* Shape);
            [id(0x00002080), helpcontext(0x0098e1b7)]
            void TextChanged([in] IVShape* Shape);
            [id(0x00002800), helpstring("Fires after a cell's value changes."), helpcontext(0x0098e112)]
            void CellChanged([in] IVCell* Cell);
            [id(0x00001100), helpcontext(0x0098e15d)]
            void MarkerEvent(
                            [in] IVApplication* app, 
                            [in] long SequenceNum, 
                            [in] BSTR ContextString);
            [id(0x00001200), helpcontext(0x0098e176)]
            void NoEventsPending([in] IVApplication* app);
            [id(0x00001400), helpcontext(0x0098e1c1)]
            void VisioIsIdle([in] IVApplication* app);
            [id(0x000000c8), helpcontext(0x0098e16c)]
            void MustFlushScopeBeginning([in] IVApplication* app);
            [id(0x000000c9), helpcontext(0x0098e171)]
            void MustFlushScopeEnded([in] IVApplication* app);
            [id(0x00000005), helpcontext(0x0098e18a)]
            void RunModeEntered([in] IVDocument* doc);
            [id(0x00000006), helpcontext(0x0098e126)]
            void DesignModeEntered([in] IVDocument* doc);
            [id(0x00000007), helpcontext(0x0098e0d6)]
            void BeforeDocumentSave([in] IVDocument* doc);
            [id(0x00000008), helpcontext(0x0098e0db)]
            void BeforeDocumentSaveAs([in] IVDocument* doc);
            [id(0x00003000), helpstring("Fires after a cell's formula changes."), helpcontext(0x0098e158)]
            void FormulaChanged([in] IVCell* Cell);
            [id(0x00008100), helpcontext(0x0098e117)]
            void ConnectionsAdded([in] IVConnects* Connects);
            [id(0x00004100), helpcontext(0x0098e11c)]
            void ConnectionsDeleted([in] IVConnects* Connects);
            [id(0x000000ca), helpcontext(0x0098e149)]
            void EnterScope(
                            [in] IVApplication* app, 
                            [in] long nScopeID, 
                            [in] BSTR bstrDescription);
            [id(0x000000cb), helpcontext(0x0098e153)]
            void ExitScope(
                            [in] IVApplication* app, 
                            [in] long nScopeID, 
                            [in] BSTR bstrDescription, 
                            [in] VARIANT_BOOL bErrOrCancelled);
            [id(0x000000cc), helpstring("Cancel terminate of application? T:Yes F:No"), helpcontext(0x0098e1da)]
            void QueryCancelQuit(
                            [in] IVApplication* app, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x000000cd), helpstring("Terminate application operation was canceled."), helpcontext(0x0098e207)]
            void QuitCanceled([in] IVApplication* app);
            [id(0x00002001), helpstring("Fires after a window's size or position changes"), helpcontext(0x0098e1cb)]
            void WindowChanged([in] IVWindow* Window);
            [id(0x000002c1), helpstring("Fires after scroll or zoom in a drawing window"), helpcontext(0x0098e1bc)]
            void ViewChanged([in] IVWindow* Window);
            [id(0x000002c2), helpstring("Cancel close of window? T:Yes F:No"), helpcontext(0x0098e1e4)]
            void QueryCancelWindowClose(
                            [in] IVWindow* Window, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x000002c3), helpstring("Window close operation was canceled."), helpcontext(0x0098e211)]
            void WindowCloseCanceled([in] IVWindow* Window);
            [id(0x00000009), helpstring("Cancel close of document? T:Yes F:No"), helpcontext(0x0098e1df)]
            void QueryCancelDocumentClose(
                            [in] IVDocument* doc, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000000a), helpstring("Document close operation was canceled."), helpcontext(0x0098e20c)]
            void DocumentCloseCanceled([in] IVDocument* doc);
            [id(0x0000012c), helpstring("Cancel delete of style? T:Yes F:No"), helpcontext(0x0098e1e9)]
            void QueryCancelStyleDelete(
                            [in] IVStyle* Style, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000012d), helpstring("Delete style operation was canceled."), helpcontext(0x0098e216)]
            void StyleDeleteCanceled([in] IVStyle* Style);
            [id(0x00000190), helpstring("Cancel delete of master? T:Yes F:No"), helpcontext(0x0098e1ee)]
            void QueryCancelMasterDelete(
                            [in] IVMaster* Master, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x00000191), helpstring("Delete master operation was canceled."), helpcontext(0x0098e21b)]
            void MasterDeleteCanceled([in] IVMaster* Master);
            [id(0x000001f4), helpstring("Cancel delete of page? T:Yes F:No"), helpcontext(0x0098e1f3)]
            void QueryCancelPageDelete(
                            [in] IVPage* Page, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x000001f5), helpstring("Delete page operation was canceled."), helpcontext(0x0098e220)]
            void PageDeleteCanceled([in] IVPage* Page);
            [id(0x00000322), helpcontext(0x0098e1a3)]
            void ShapeParentChanged([in] IVShape* Shape);
            [id(0x00000323), helpcontext(0x0098e234)]
            void BeforeShapeTextEdit([in] IVShape* Shape);
            [id(0x00000324), helpcontext(0x0098e239)]
            void ShapeExitedTextEdit([in] IVShape* Shape);
            [id(0x00000387), helpstring("Cancel delete of shapes? T:Yes F:No"), helpcontext(0x0098e1f8)]
            void QueryCancelSelectionDelete(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x00000388), helpstring("Delete shapes operation was canceled."), helpcontext(0x0098e225)]
            void SelectionDeleteCanceled([in] IVSelection* Selection);
            [id(0x00000389), helpstring("Cancel ungroup operation? T:Yes F:No"), helpcontext(0x0098e202)]
            void QueryCancelUngroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038a), helpstring("Ungroup operation was canceled."), helpcontext(0x0098e22f)]
            void UngroupCanceled([in] IVSelection* Selection);
            [id(0x0000038b), helpstring("Cancel convert to group operation? T:Yes F:No"), helpcontext(0x0098e1fd)]
            void QueryCancelConvertToGroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038c), helpstring("Convert to group operation was canceled."), helpcontext(0x0098e22a)]
            void ConvertToGroupCanceled([in] IVSelection* Selection);
            [id(0x000000ce), helpstring("Cancel suspension of application? T:Yes F:No"), helpcontext(0x0098e23e)]
            void QueryCancelSuspend(
                            [in] IVApplication* app, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x000000cf), helpstring("Suspend application operation was canceled."), helpcontext(0x0098e243)]
            void SuspendCanceled([in] IVApplication* app);
            [id(0x000000d0), helpcontext(0x0098e248)]
            void BeforeSuspend([in] IVApplication* app);
            [id(0x000000d1), helpcontext(0x0098e24d)]
            void AfterResume([in] IVApplication* app);
            [id(0x000002c4), helpstring("Called when keystroke message received for Addon window. True return indicates message was handled."), helpcontext(0x00995cb4)]
            void OnKeystrokeMessageForAddon(
                            [in] IVMSGWrap* MSG, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x000002c5), helpstring("Called when mousedown message received for window. If you set CancelDefault to True then Visio will not process this message."), helpcontext(0x00995eee)]
            void MouseDown(
                            [in] long Button, 
                            [in] long KeyButtonState, 
                            [in] double x, 
                            [in] double y, 
                            [in, out] VARIANT_BOOL* CancelDefault);
            [id(0x000002c6), helpstring("Called when mousemove message received for window. If you set CancelDefault to True then Visio will not process this message."), helpcontext(0x00995ee9)]
            void MouseMove(
                            [in] long Button, 
                            [in] long KeyButtonState, 
                            [in] double x, 
                            [in] double y, 
                            [in, out] VARIANT_BOOL* CancelDefault);
            [id(0x000002c7), helpstring("Called when mouseup message received for window. If you set CancelDefault to True then Visio will not process this message."), helpcontext(0x00995ee4)]
            void MouseUp(
                            [in] long Button, 
                            [in] long KeyButtonState, 
                            [in] double x, 
                            [in] double y, 
                            [in, out] VARIANT_BOOL* CancelDefault);
            [id(0x000002c8), helpstring("Called when keydown message received for window. If you set CancelDefault to True then Visio will not process this message."), helpcontext(0x00995efd)]
            void KeyDown(
                            [in] long KeyCode, 
                            [in] long KeyButtonState, 
                            [in, out] VARIANT_BOOL* CancelDefault);
            [id(0x000002c9), helpstring("Called when keypress message received for window. If you set CancelDefault to True then Visio will not process this message."), helpcontext(0x00995ef8)]
            void KeyPress(
                            [in] long KeyAscii, 
                            [in, out] VARIANT_BOOL* CancelDefault);
            [id(0x000002ca), helpstring("Called when keyup message received for window. If you set CancelDefault to True then Visio will not process this message."), helpcontext(0x00995ef3)]
            void KeyUp(
                            [in] long KeyCode, 
                            [in] long KeyButtonState, 
                            [in, out] VARIANT_BOOL* CancelDefault);
            [id(0x000000d2), helpstring("Cancel suspension of application events? T:Yes F:No"), helpcontext(0x009988dd)]
            void QueryCancelSuspendEvents(
                            [in] IVApplication* app, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x000000d3), helpstring("Suspend application events operation was canceled."), helpcontext(0x009988e2)]
            void SuspendEventsCanceled([in] IVApplication* app);
            [id(0x000000d4), helpcontext(0x009988e7)]
            void BeforeSuspendEvents([in] IVApplication* app);
            [id(0x000000d5), helpcontext(0x009988ec)]
            void AfterResumeEvents([in] IVApplication* app);
            [id(0x0000038d), helpstring("Cancel group operation? T:Yes F:No"), helpcontext(0x009988b0)]
            void QueryCancelGroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038e), helpstring("Group operation was canceled."), helpcontext(0x009988b5)]
            void GroupCanceled([in] IVSelection* Selection);
            [id(0x00000327), helpcontext(0x009988ba)]
            void ShapeDataGraphicChanged([in] IVShape* Shape);
            [id(0x00004020), helpcontext(0x009988ce)]
            void BeforeDataRecordsetDelete([in] IVDataRecordset* DataRecordset);
            [id(0x00002020), helpcontext(0x009988c9)]
            void DataRecordsetChanged([in] IVDataRecordsetChangedEvent* DataRecordsetChanged);
            [id(0x00008020), helpcontext(0x009988d3)]
            void DataRecordsetAdded([in] IVDataRecordset* DataRecordset);
            [id(0x00000325), helpcontext(0x009988bf)]
            void ShapeLinkAdded(
                            [in] IVShape* Shape, 
                            [in] long DataRecordsetID, 
                            [in] long DataRowID);
            [id(0x00000326), helpcontext(0x009988c4)]
            void ShapeLinkDeleted(
                            [in] IVShape* Shape, 
                            [in] long DataRecordsetID, 
                            [in] long DataRowID);
            [id(0x0000000b), helpcontext(0x009988d8)]
            void AfterRemoveHiddenInformation([in] IVDocument* doc);
    };

    [
      uuid(000D0B01-0000-0000-C000-000000000046),
      helpstring("Visio Windows Event Interface"),
      hidden
    ]
    dispinterface EWindows {
        properties:
        methods:
            [id(0x00008001), helpcontext(0x00b2d270)]
            void WindowOpened([in] IVWindow* Window);
            [id(0x000002bd), helpcontext(0x00b2d234)]
            void SelectionChanged([in] IVWindow* Window);
            [id(0x00004001), helpcontext(0x00b2d1a3)]
            void BeforeWindowClosed([in] IVWindow* Window);
            [id(0x00001080), helpcontext(0x00b2d266)]
            void WindowActivated([in] IVWindow* Window);
            [id(0x000002be), helpcontext(0x00b2d1ad)]
            void BeforeWindowSelDelete([in] IVWindow* Window);
            [id(0x000002bf), helpcontext(0x00b2d1a8)]
            void BeforeWindowPageTurn([in] IVWindow* Window);
            [id(0x000002c0), helpcontext(0x00b2d275)]
            void WindowTurnedToPage([in] IVWindow* Window);
            [id(0x00002001), helpstring("Fires after a window's size or position changes"), helpcontext(0x00b2d26b)]
            void WindowChanged([in] IVWindow* Window);
            [id(0x000002c1), helpstring("Fires after scroll or zoom in a drawing window"), helpcontext(0x00b2d25c)]
            void ViewChanged([in] IVWindow* Window);
            [id(0x000002c2), helpstring("Cancel close of window? T:Yes F:No"), helpcontext(0x00b2d284)]
            void QueryCancelWindowClose(
                            [in] IVWindow* Window, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x000002c3), helpstring("Window close operation was canceled."), helpcontext(0x00b2d2b1)]
            void WindowCloseCanceled([in] IVWindow* Window);
            [id(0x000002c4), helpstring("Called when keystroke message received for Addon window. True return indicates message was handled."), helpcontext(0x00b34d54)]
            void OnKeystrokeMessageForAddon(
                            [in] IVMSGWrap* MSG, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x000002c5), helpstring("Called when mousedown message received for window. If you set CancelDefault to True then Visio will not process this message."), helpcontext(0x00b34f8e)]
            void MouseDown(
                            [in] long Button, 
                            [in] long KeyButtonState, 
                            [in] double x, 
                            [in] double y, 
                            [in, out] VARIANT_BOOL* CancelDefault);
            [id(0x000002c6), helpstring("Called when mousemove message received for window. If you set CancelDefault to True then Visio will not process this message."), helpcontext(0x00b34f89)]
            void MouseMove(
                            [in] long Button, 
                            [in] long KeyButtonState, 
                            [in] double x, 
                            [in] double y, 
                            [in, out] VARIANT_BOOL* CancelDefault);
            [id(0x000002c7), helpstring("Called when mouseup message received for window. If you set CancelDefault to True then Visio will not process this message."), helpcontext(0x00b34f84)]
            void MouseUp(
                            [in] long Button, 
                            [in] long KeyButtonState, 
                            [in] double x, 
                            [in] double y, 
                            [in, out] VARIANT_BOOL* CancelDefault);
            [id(0x000002c8), helpstring("Called when keydown message received for window. If you set CancelDefault to True then Visio will not process this message."), helpcontext(0x00b34f9d)]
            void KeyDown(
                            [in] long KeyCode, 
                            [in] long KeyButtonState, 
                            [in, out] VARIANT_BOOL* CancelDefault);
            [id(0x000002c9), helpstring("Called when keypress message received for window. If you set CancelDefault to True then Visio will not process this message."), helpcontext(0x00b34f98)]
            void KeyPress(
                            [in] long KeyAscii, 
                            [in, out] VARIANT_BOOL* CancelDefault);
            [id(0x000002ca), helpstring("Called when keyup message received for window. If you set CancelDefault to True then Visio will not process this message."), helpcontext(0x00b34f93)]
            void KeyUp(
                            [in] long KeyCode, 
                            [in] long KeyButtonState, 
                            [in, out] VARIANT_BOOL* CancelDefault);
    };

    [
      uuid(000D0B02-0000-0000-C000-000000000046),
      helpstring("Visio Window Event Interface"),
      hidden
    ]
    dispinterface EWindow {
        properties:
        methods:
            [id(0x000002bd), helpcontext(0x00b14b94)]
            void SelectionChanged([in] IVWindow* Window);
            [id(0x00004001), helpcontext(0x00b14b03)]
            void BeforeWindowClosed([in] IVWindow* Window);
            [id(0x00001080), helpcontext(0x00b14bc6)]
            void WindowActivated([in] IVWindow* Window);
            [id(0x000002be), helpcontext(0x00b14b0d)]
            void BeforeWindowSelDelete([in] IVWindow* Window);
            [id(0x000002bf), helpcontext(0x00b14b08)]
            void BeforeWindowPageTurn([in] IVWindow* Window);
            [id(0x000002c0), helpcontext(0x00b14bd5)]
            void WindowTurnedToPage([in] IVWindow* Window);
            [id(0x00002001), helpstring("Fires after a window's size or position changes"), helpcontext(0x00b14bcb)]
            void WindowChanged([in] IVWindow* Window);
            [id(0x000002c1), helpstring("Fires after scroll or zoom in a drawing window"), helpcontext(0x00b14bbc)]
            void ViewChanged([in] IVWindow* Window);
            [id(0x000002c2), helpstring("Cancel close of window? T:Yes F:No"), helpcontext(0x00b14be4)]
            void QueryCancelWindowClose(
                            [in] IVWindow* Window, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x000002c3), helpstring("Window close operation was canceled."), helpcontext(0x00b14c11)]
            void WindowCloseCanceled([in] IVWindow* Window);
            [id(0x000002c4), helpstring("Called when keystroke message received for Addon window. True return indicates message was handled."), helpcontext(0x00b1c6b4)]
            void OnKeystrokeMessageForAddon(
                            [in] IVMSGWrap* MSG, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x000002c5), helpstring("Called when mousedown message received for window. If you set CancelDefault to True then Visio will not process this message."), helpcontext(0x00b1c8ee)]
            void MouseDown(
                            [in] long Button, 
                            [in] long KeyButtonState, 
                            [in] double x, 
                            [in] double y, 
                            [in, out] VARIANT_BOOL* CancelDefault);
            [id(0x000002c6), helpstring("Called when mousemove message received for window. If you set CancelDefault to True then Visio will not process this message."), helpcontext(0x00b1c8e9)]
            void MouseMove(
                            [in] long Button, 
                            [in] long KeyButtonState, 
                            [in] double x, 
                            [in] double y, 
                            [in, out] VARIANT_BOOL* CancelDefault);
            [id(0x000002c7), helpstring("Called when mouseup message received for window. If you set CancelDefault to True then Visio will not process this message."), helpcontext(0x00b1c8e4)]
            void MouseUp(
                            [in] long Button, 
                            [in] long KeyButtonState, 
                            [in] double x, 
                            [in] double y, 
                            [in, out] VARIANT_BOOL* CancelDefault);
            [id(0x000002c8), helpstring("Called when keydown message received for window. If you set CancelDefault to True then Visio will not process this message."), helpcontext(0x00b1c8fd)]
            void KeyDown(
                            [in] long KeyCode, 
                            [in] long KeyButtonState, 
                            [in, out] VARIANT_BOOL* CancelDefault);
            [id(0x000002c9), helpstring("Called when keypress message received for window. If you set CancelDefault to True then Visio will not process this message."), helpcontext(0x00b1ccd6)]
            void KeyPress(
                            [in] long KeyAscii, 
                            [in, out] VARIANT_BOOL* CancelDefault);
            [id(0x000002ca), helpstring("Called when keyup message received for window. If you set CancelDefault to True then Visio will not process this message."), helpcontext(0x00b1c8f3)]
            void KeyUp(
                            [in] long KeyCode, 
                            [in] long KeyButtonState, 
                            [in, out] VARIANT_BOOL* CancelDefault);
    };

    [
      uuid(000D0B03-0000-0000-C000-000000000046),
      helpstring("Visio Documents Event Interface"),
      hidden
    ]
    dispinterface EDocuments {
        properties:
        methods:
            [id(0x00000002), helpcontext(0x00a208fa)]
            void DocumentOpened([in] IVDocument* doc);
            [id(0x00000001), helpcontext(0x00a208f5)]
            void DocumentCreated([in] IVDocument* doc);
            [id(0x00000003), helpcontext(0x00a208ff)]
            void DocumentSaved([in] IVDocument* doc);
            [id(0x00000004), helpcontext(0x00a20904)]
            void DocumentSavedAs([in] IVDocument* doc);
            [id(0x00002002), helpcontext(0x00a208f0)]
            void DocumentChanged([in] IVDocument* doc);
            [id(0x00004002), helpcontext(0x00a20891)]
            void BeforeDocumentClose([in] IVDocument* doc);
            [id(0x00008004), helpcontext(0x00a2096d)]
            void StyleAdded([in] IVStyle* Style);
            [id(0x00002004), helpcontext(0x00a20972)]
            void StyleChanged([in] IVStyle* Style);
            [id(0x00004004), helpcontext(0x00a208be)]
            void BeforeStyleDelete([in] IVStyle* Style);
            [id(0x00008008), helpcontext(0x00a20922)]
            void MasterAdded([in] IVMaster* Master);
            [id(0x00002008), helpcontext(0x00a20927)]
            void MasterChanged([in] IVMaster* Master);
            [id(0x00004008), helpcontext(0x00a208a0)]
            void BeforeMasterDelete([in] IVMaster* Master);
            [id(0x00008010), helpcontext(0x00a20940)]
            void PageAdded([in] IVPage* Page);
            [id(0x00002010), helpcontext(0x00a20945)]
            void PageChanged([in] IVPage* Page);
            [id(0x00004010), helpcontext(0x00a208aa)]
            void BeforePageDelete([in] IVPage* Page);
            [id(0x00008040), helpcontext(0x00a20959)]
            void ShapeAdded([in] IVShape* Shape);
            [id(0x00000385), helpcontext(0x00a208b4)]
            void BeforeSelectionDelete([in] IVSelection* Selection);
            [id(0x00002040), helpcontext(0x00a2095e)]
            void ShapeChanged([in] IVShape* Shape);
            [id(0x00000386), helpcontext(0x00a2094f)]
            void SelectionAdded([in] IVSelection* Selection);
            [id(0x00004040), helpcontext(0x00a208b9)]
            void BeforeShapeDelete([in] IVShape* Shape);
            [id(0x00002080), helpcontext(0x00a20977)]
            void TextChanged([in] IVShape* Shape);
            [id(0x00002800), helpstring("Fires after a cell's value changes."), helpcontext(0x00a208d2)]
            void CellChanged([in] IVCell* Cell);
            [id(0x00000005), helpcontext(0x00a2094a)]
            void RunModeEntered([in] IVDocument* doc);
            [id(0x00000006), helpcontext(0x00a208e6)]
            void DesignModeEntered([in] IVDocument* doc);
            [id(0x00000007), helpcontext(0x00a20896)]
            void BeforeDocumentSave([in] IVDocument* doc);
            [id(0x00000008), helpcontext(0x00a2089b)]
            void BeforeDocumentSaveAs([in] IVDocument* doc);
            [id(0x00003000), helpstring("Fires after a cell's formula changes."), helpcontext(0x00a20918)]
            void FormulaChanged([in] IVCell* Cell);
            [id(0x00008100), helpcontext(0x00a208d7)]
            void ConnectionsAdded([in] IVConnects* Connects);
            [id(0x00004100), helpcontext(0x00a208dc)]
            void ConnectionsDeleted([in] IVConnects* Connects);
            [id(0x00000009), helpstring("Cancel close of document? T:Yes F:No"), helpcontext(0x00a2099f)]
            void QueryCancelDocumentClose(
                            [in] IVDocument* doc, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000000a), helpstring("Document close operation was canceled."), helpcontext(0x00a209cc)]
            void DocumentCloseCanceled([in] IVDocument* doc);
            [id(0x0000012c), helpstring("Cancel delete of style? T:Yes F:No"), helpcontext(0x00a209a9)]
            void QueryCancelStyleDelete(
                            [in] IVStyle* Style, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000012d), helpstring("Delete style operation was canceled."), helpcontext(0x00a209d6)]
            void StyleDeleteCanceled([in] IVStyle* Style);
            [id(0x00000190), helpstring("Cancel delete of master? T:Yes F:No"), helpcontext(0x00a209ae)]
            void QueryCancelMasterDelete(
                            [in] IVMaster* Master, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x00000191), helpstring("Delete master operation was canceled."), helpcontext(0x00a209db)]
            void MasterDeleteCanceled([in] IVMaster* Master);
            [id(0x000001f4), helpstring("Cancel delete of page? T:Yes F:No"), helpcontext(0x00a209b3)]
            void QueryCancelPageDelete(
                            [in] IVPage* Page, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x000001f5), helpstring("Delete page operation was canceled."), helpcontext(0x00a209e0)]
            void PageDeleteCanceled([in] IVPage* Page);
            [id(0x00000322), helpcontext(0x00a20963)]
            void ShapeParentChanged([in] IVShape* Shape);
            [id(0x00000323), helpcontext(0x00a209f4)]
            void BeforeShapeTextEdit([in] IVShape* Shape);
            [id(0x00000324), helpcontext(0x00a209f9)]
            void ShapeExitedTextEdit([in] IVShape* Shape);
            [id(0x00000387), helpstring("Cancel delete of shapes? T:Yes F:No"), helpcontext(0x00a209b8)]
            void QueryCancelSelectionDelete(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x00000388), helpstring("Delete shapes operation was canceled."), helpcontext(0x00a209e5)]
            void SelectionDeleteCanceled([in] IVSelection* Selection);
            [id(0x00000389), helpstring("Cancel ungroup operation? T:Yes F:No"), helpcontext(0x00a209c2)]
            void QueryCancelUngroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038a), helpstring("Ungroup operation was canceled."), helpcontext(0x00a209ef)]
            void UngroupCanceled([in] IVSelection* Selection);
            [id(0x0000038b), helpstring("Cancel convert to group operation? T:Yes F:No"), helpcontext(0x00a209bd)]
            void QueryCancelConvertToGroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038c), helpstring("Convert to group operation was canceled."), helpcontext(0x00a209ea)]
            void ConvertToGroupCanceled([in] IVSelection* Selection);
            [id(0x0000038d), helpstring("Cancel group operation? T:Yes F:No"), helpcontext(0x00a2b070)]
            void QueryCancelGroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038e), helpstring("Group operation was canceled."), helpcontext(0x00a2b075)]
            void GroupCanceled([in] IVSelection* Selection);
            [id(0x00000327), helpcontext(0x00a2b07a)]
            void ShapeDataGraphicChanged([in] IVShape* Shape);
            [id(0x00004020), helpcontext(0x00a2b08e)]
            void BeforeDataRecordsetDelete([in] IVDataRecordset* DataRecordset);
            [id(0x00002020), helpcontext(0x00a2b089)]
            void DataRecordsetChanged([in] IVDataRecordsetChangedEvent* DataRecordsetChanged);
            [id(0x00008020), helpcontext(0x00a2b093)]
            void DataRecordsetAdded([in] IVDataRecordset* DataRecordset);
            [id(0x00000325), helpcontext(0x00a2b07f)]
            void ShapeLinkAdded(
                            [in] IVShape* Shape, 
                            [in] long DataRecordsetID, 
                            [in] long DataRowID);
            [id(0x00000326), helpcontext(0x00a2b084)]
            void ShapeLinkDeleted(
                            [in] IVShape* Shape, 
                            [in] long DataRecordsetID, 
                            [in] long DataRowID);
            [id(0x0000000b), helpcontext(0x00a2b098)]
            void AfterRemoveHiddenInformation([in] IVDocument* doc);
    };

    [
      uuid(000D0B05-0000-0000-C000-000000000046),
      helpstring("Visio Styles Event Interface"),
      hidden
    ]
    dispinterface EStyles {
        properties:
        methods:
            [id(0x00008004), helpcontext(0x00afc50d)]
            void StyleAdded([in] IVStyle* Style);
            [id(0x00002004), helpcontext(0x00afc512)]
            void StyleChanged([in] IVStyle* Style);
            [id(0x00004004), helpcontext(0x00afc45e)]
            void BeforeStyleDelete([in] IVStyle* Style);
            [id(0x0000012c), helpstring("Cancel delete of style? T:Yes F:No"), helpcontext(0x00afc549)]
            void QueryCancelStyleDelete(
                            [in] IVStyle* Style, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000012d), helpstring("Delete style operation was canceled."), helpcontext(0x00afc576)]
            void StyleDeleteCanceled([in] IVStyle* Style);
    };

    [
      uuid(000D0B06-0000-0000-C000-000000000046),
      helpstring("Visio Style Event Interface"),
      hidden
    ]
    dispinterface EStyle {
        properties:
        methods:
            [id(0x00002004), helpcontext(0x00ae3e72)]
            void StyleChanged([in] IVStyle* Style);
            [id(0x00004004), helpcontext(0x00ae3dbe)]
            void BeforeStyleDelete([in] IVStyle* Style);
            [id(0x0000012c), helpstring("Cancel delete of style? T:Yes F:No"), helpcontext(0x00ae3ea9)]
            void QueryCancelStyleDelete(
                            [in] IVStyle* Style, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000012d), helpstring("Delete style operation was canceled."), helpcontext(0x00ae3ed6)]
            void StyleDeleteCanceled([in] IVStyle* Style);
    };

    [
      uuid(000D0B07-0000-0000-C000-000000000046),
      helpstring("Visio Masters Event Interface"),
      hidden
    ]
    dispinterface EMasters {
        properties:
        methods:
            [id(0x00008008), helpcontext(0x00a51662)]
            void MasterAdded([in] IVMaster* Master);
            [id(0x00002008), helpcontext(0x00a51667)]
            void MasterChanged([in] IVMaster* Master);
            [id(0x00004008), helpcontext(0x00a515e0)]
            void BeforeMasterDelete([in] IVMaster* Master);
            [id(0x00008040), helpcontext(0x00a51699)]
            void ShapeAdded([in] IVShape* Shape);
            [id(0x00000385), helpcontext(0x00a515f4)]
            void BeforeSelectionDelete([in] IVSelection* Selection);
            [id(0x00002040), helpcontext(0x00a5169e)]
            void ShapeChanged([in] IVShape* Shape);
            [id(0x00000386), helpcontext(0x00a5168f)]
            void SelectionAdded([in] IVSelection* Selection);
            [id(0x00004040), helpcontext(0x00a515f9)]
            void BeforeShapeDelete([in] IVShape* Shape);
            [id(0x00002080), helpcontext(0x00a516b7)]
            void TextChanged([in] IVShape* Shape);
            [id(0x00002800), helpstring("Fires after a cell's value changes."), helpcontext(0x00a51612)]
            void CellChanged([in] IVCell* Cell);
            [id(0x00003000), helpstring("Fires after a cell's formula changes."), helpcontext(0x00a51658)]
            void FormulaChanged([in] IVCell* Cell);
            [id(0x00008100), helpcontext(0x00a51617)]
            void ConnectionsAdded([in] IVConnects* Connects);
            [id(0x00004100), helpcontext(0x00a5161c)]
            void ConnectionsDeleted([in] IVConnects* Connects);
            [id(0x00000190), helpstring("Cancel delete of master? T:Yes F:No"), helpcontext(0x00a516ee)]
            void QueryCancelMasterDelete(
                            [in] IVMaster* Master, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x00000191), helpstring("Delete master operation was canceled."), helpcontext(0x00a5171b)]
            void MasterDeleteCanceled([in] IVMaster* Master);
            [id(0x00000322), helpcontext(0x00a516a3)]
            void ShapeParentChanged([in] IVShape* Shape);
            [id(0x00000323), helpcontext(0x00a51734)]
            void BeforeShapeTextEdit([in] IVShape* Shape);
            [id(0x00000324), helpcontext(0x00a51739)]
            void ShapeExitedTextEdit([in] IVShape* Shape);
            [id(0x00000387), helpstring("Cancel delete of shapes? T:Yes F:No"), helpcontext(0x00a516f8)]
            void QueryCancelSelectionDelete(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x00000388), helpstring("Delete shapes operation was canceled."), helpcontext(0x00a51725)]
            void SelectionDeleteCanceled([in] IVSelection* Selection);
            [id(0x00000389), helpstring("Cancel ungroup operation? T:Yes F:No"), helpcontext(0x00a51702)]
            void QueryCancelUngroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038a), helpstring("Ungroup operation was canceled."), helpcontext(0x00a5172f)]
            void UngroupCanceled([in] IVSelection* Selection);
            [id(0x0000038b), helpstring("Cancel convert to group operation? T:Yes F:No"), helpcontext(0x00a516fd)]
            void QueryCancelConvertToGroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038c), helpstring("Convert to group operation was canceled."), helpcontext(0x00a5172a)]
            void ConvertToGroupCanceled([in] IVSelection* Selection);
            [id(0x0000038d), helpstring("Cancel group operation? T:Yes F:No"), helpcontext(0x00a5bdb0)]
            void QueryCancelGroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038e), helpstring("Group operation was canceled."), helpcontext(0x00a5bdb5)]
            void GroupCanceled([in] IVSelection* Selection);
            [id(0x00000327), helpcontext(0x00a5bdba)]
            void ShapeDataGraphicChanged([in] IVShape* Shape);
    };

    [
      uuid(000D0B08-0000-0000-C000-000000000046),
      helpstring("Visio Master Event Interface"),
      hidden
    ]
    dispinterface EMaster {
        properties:
        methods:
            [id(0x00002008), helpcontext(0x00a38fc7)]
            void MasterChanged([in] IVMaster* Master);
            [id(0x00004008), helpcontext(0x00a38f40)]
            void BeforeMasterDelete([in] IVMaster* Master);
            [id(0x00008040), helpcontext(0x00a38ff9)]
            void ShapeAdded([in] IVShape* Shape);
            [id(0x00000385), helpcontext(0x00a38f54)]
            void BeforeSelectionDelete([in] IVSelection* Selection);
            [id(0x00002040), helpcontext(0x00a38ffe)]
            void ShapeChanged([in] IVShape* Shape);
            [id(0x00000386), helpcontext(0x00a38fef)]
            void SelectionAdded([in] IVSelection* Selection);
            [id(0x00004040), helpcontext(0x00a38f59)]
            void BeforeShapeDelete([in] IVShape* Shape);
            [id(0x00002080), helpcontext(0x00a39017)]
            void TextChanged([in] IVShape* Shape);
            [id(0x00002800), helpstring("Fires after a cell's value changes."), helpcontext(0x00a38f72)]
            void CellChanged([in] IVCell* Cell);
            [id(0x00003000), helpstring("Fires after a cell's formula changes."), helpcontext(0x00a38fb8)]
            void FormulaChanged([in] IVCell* Cell);
            [id(0x00008100), helpcontext(0x00a38f77)]
            void ConnectionsAdded([in] IVConnects* Connects);
            [id(0x00004100), helpcontext(0x00a38f7c)]
            void ConnectionsDeleted([in] IVConnects* Connects);
            [id(0x00000190), helpstring("Cancel delete of master? T:Yes F:No"), helpcontext(0x00a3904e)]
            void QueryCancelMasterDelete(
                            [in] IVMaster* Master, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x00000191), helpstring("Delete master operation was canceled."), helpcontext(0x00a3907b)]
            void MasterDeleteCanceled([in] IVMaster* Master);
            [id(0x00000322), helpcontext(0x00a39003)]
            void ShapeParentChanged([in] IVShape* Shape);
            [id(0x00000323), helpcontext(0x00a39094)]
            void BeforeShapeTextEdit([in] IVShape* Shape);
            [id(0x00000324), helpcontext(0x00a39099)]
            void ShapeExitedTextEdit([in] IVShape* Shape);
            [id(0x00000387), helpstring("Cancel delete of shapes? T:Yes F:No"), helpcontext(0x00a39058)]
            void QueryCancelSelectionDelete(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x00000388), helpstring("Delete shapes operation was canceled."), helpcontext(0x00a39085)]
            void SelectionDeleteCanceled([in] IVSelection* Selection);
            [id(0x00000389), helpstring("Cancel ungroup operation? T:Yes F:No"), helpcontext(0x00a39062)]
            void QueryCancelUngroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038a), helpstring("Ungroup operation was canceled."), helpcontext(0x00a3908f)]
            void UngroupCanceled([in] IVSelection* Selection);
            [id(0x0000038b), helpstring("Cancel convert to group operation? T:Yes F:No"), helpcontext(0x00a3905d)]
            void QueryCancelConvertToGroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038c), helpstring("Convert to group operation was canceled."), helpcontext(0x00a3908a)]
            void ConvertToGroupCanceled([in] IVSelection* Selection);
            [id(0x0000038d), helpstring("Cancel group operation? T:Yes F:No"), helpcontext(0x00a43710)]
            void QueryCancelGroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038e), helpstring("Group operation was canceled."), helpcontext(0x00a43715)]
            void GroupCanceled([in] IVSelection* Selection);
            [id(0x00000327), helpcontext(0x00a4371a)]
            void ShapeDataGraphicChanged([in] IVShape* Shape);
    };

    [
      uuid(000D0B09-0000-0000-C000-000000000046),
      helpstring("Visio Pages Event Interface"),
      hidden
    ]
    dispinterface EPages {
        properties:
        methods:
            [id(0x00008010), helpcontext(0x00a823c0)]
            void PageAdded([in] IVPage* Page);
            [id(0x00002010), helpcontext(0x00a823c5)]
            void PageChanged([in] IVPage* Page);
            [id(0x00004010), helpcontext(0x00a8232a)]
            void BeforePageDelete([in] IVPage* Page);
            [id(0x00008040), helpcontext(0x00a823d9)]
            void ShapeAdded([in] IVShape* Shape);
            [id(0x00000385), helpcontext(0x00a82334)]
            void BeforeSelectionDelete([in] IVSelection* Selection);
            [id(0x00002040), helpcontext(0x00a823de)]
            void ShapeChanged([in] IVShape* Shape);
            [id(0x00000386), helpcontext(0x00a823cf)]
            void SelectionAdded([in] IVSelection* Selection);
            [id(0x00004040), helpcontext(0x00a82339)]
            void BeforeShapeDelete([in] IVShape* Shape);
            [id(0x00002080), helpcontext(0x00a823f7)]
            void TextChanged([in] IVShape* Shape);
            [id(0x00002800), helpstring("Fires after a cell's value changes."), helpcontext(0x00a82352)]
            void CellChanged([in] IVCell* Cell);
            [id(0x00003000), helpstring("Fires after a cell's formula changes."), helpcontext(0x00a82398)]
            void FormulaChanged([in] IVCell* Cell);
            [id(0x00008100), helpcontext(0x00a82357)]
            void ConnectionsAdded([in] IVConnects* Connects);
            [id(0x00004100), helpcontext(0x00a8235c)]
            void ConnectionsDeleted([in] IVConnects* Connects);
            [id(0x000001f4), helpstring("Cancel delete of page? T:Yes F:No"), helpcontext(0x00a82433)]
            void QueryCancelPageDelete(
                            [in] IVPage* Page, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x000001f5), helpstring("Delete page operation was canceled."), helpcontext(0x00a82460)]
            void PageDeleteCanceled([in] IVPage* Page);
            [id(0x00000322), helpcontext(0x00a823e3)]
            void ShapeParentChanged([in] IVShape* Shape);
            [id(0x00000323), helpcontext(0x00a82474)]
            void BeforeShapeTextEdit([in] IVShape* Shape);
            [id(0x00000324), helpcontext(0x00a82479)]
            void ShapeExitedTextEdit([in] IVShape* Shape);
            [id(0x00000387), helpstring("Cancel delete of shapes? T:Yes F:No"), helpcontext(0x00a82438)]
            void QueryCancelSelectionDelete(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x00000388), helpstring("Delete shapes operation was canceled."), helpcontext(0x00a82465)]
            void SelectionDeleteCanceled([in] IVSelection* Selection);
            [id(0x00000389), helpstring("Cancel ungroup operation? T:Yes F:No"), helpcontext(0x00a82442)]
            void QueryCancelUngroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038a), helpstring("Ungroup operation was canceled."), helpcontext(0x00a8246f)]
            void UngroupCanceled([in] IVSelection* Selection);
            [id(0x0000038b), helpstring("Cancel convert to group operation? T:Yes F:No"), helpcontext(0x00a8243d)]
            void QueryCancelConvertToGroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038c), helpstring("Convert to group operation was canceled."), helpcontext(0x00a8246a)]
            void ConvertToGroupCanceled([in] IVSelection* Selection);
            [id(0x0000038d), helpstring("Cancel group operation? T:Yes F:No"), helpcontext(0x00a8caf0)]
            void QueryCancelGroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038e), helpstring("Group operation was canceled."), helpcontext(0x00a8caf5)]
            void GroupCanceled([in] IVSelection* Selection);
            [id(0x00000327), helpcontext(0x00a8cafa)]
            void ShapeDataGraphicChanged([in] IVShape* Shape);
            [id(0x00000325), helpcontext(0x00a8caff)]
            void ShapeLinkAdded(
                            [in] IVShape* Shape, 
                            [in] long DataRecordsetID, 
                            [in] long DataRowID);
            [id(0x00000326), helpcontext(0x00a8cb04)]
            void ShapeLinkDeleted(
                            [in] IVShape* Shape, 
                            [in] long DataRecordsetID, 
                            [in] long DataRowID);
    };

    [
      uuid(000D0B0A-0000-0000-C000-000000000046),
      helpstring("Visio Page Event Interface"),
      hidden
    ]
    dispinterface EPage {
        properties:
        methods:
            [id(0x00002010), helpcontext(0x00a69d25)]
            void PageChanged([in] IVPage* Page);
            [id(0x00004010), helpcontext(0x00a69c8a)]
            void BeforePageDelete([in] IVPage* Page);
            [id(0x00008040), helpcontext(0x00a69d39)]
            void ShapeAdded([in] IVShape* Shape);
            [id(0x00000385), helpcontext(0x00a69c94)]
            void BeforeSelectionDelete([in] IVSelection* Selection);
            [id(0x00002040), helpcontext(0x00a69d3e)]
            void ShapeChanged([in] IVShape* Shape);
            [id(0x00000386), helpcontext(0x00a69d2f)]
            void SelectionAdded([in] IVSelection* Selection);
            [id(0x00004040), helpcontext(0x00a69c99)]
            void BeforeShapeDelete([in] IVShape* Shape);
            [id(0x00002080), helpcontext(0x00a69d57)]
            void TextChanged([in] IVShape* Shape);
            [id(0x00002800), helpstring("Fires after a cell's value changes."), helpcontext(0x00a69cb2)]
            void CellChanged([in] IVCell* Cell);
            [id(0x00003000), helpstring("Fires after a cell's formula changes."), helpcontext(0x00a69cf8)]
            void FormulaChanged([in] IVCell* Cell);
            [id(0x00008100), helpcontext(0x00a69cb7)]
            void ConnectionsAdded([in] IVConnects* Connects);
            [id(0x00004100), helpcontext(0x00a69cbc)]
            void ConnectionsDeleted([in] IVConnects* Connects);
            [id(0x000001f4), helpstring("Cancel delete of page? T:Yes F:No"), helpcontext(0x00a69d93)]
            void QueryCancelPageDelete(
                            [in] IVPage* Page, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x000001f5), helpstring("Delete page operation was canceled."), helpcontext(0x00a69dc0)]
            void PageDeleteCanceled([in] IVPage* Page);
            [id(0x00000322), helpcontext(0x00a69d43)]
            void ShapeParentChanged([in] IVShape* Shape);
            [id(0x00000323), helpcontext(0x00a69dd4)]
            void BeforeShapeTextEdit([in] IVShape* Shape);
            [id(0x00000324), helpcontext(0x00a69dd9)]
            void ShapeExitedTextEdit([in] IVShape* Shape);
            [id(0x00000387), helpstring("Cancel delete of shapes? T:Yes F:No"), helpcontext(0x00a69d98)]
            void QueryCancelSelectionDelete(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x00000388), helpstring("Delete shapes operation was canceled."), helpcontext(0x00a69dc5)]
            void SelectionDeleteCanceled([in] IVSelection* Selection);
            [id(0x00000389), helpstring("Cancel ungroup operation? T:Yes F:No"), helpcontext(0x00a69da2)]
            void QueryCancelUngroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038a), helpstring("Ungroup operation was canceled."), helpcontext(0x00a69dcf)]
            void UngroupCanceled([in] IVSelection* Selection);
            [id(0x0000038b), helpstring("Cancel convert to group operation? T:Yes F:No"), helpcontext(0x00a69d9d)]
            void QueryCancelConvertToGroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038c), helpstring("Convert to group operation was canceled."), helpcontext(0x00a69dca)]
            void ConvertToGroupCanceled([in] IVSelection* Selection);
            [id(0x0000038d), helpstring("Cancel group operation? T:Yes F:No"), helpcontext(0x00a74450)]
            void QueryCancelGroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038e), helpstring("Group operation was canceled."), helpcontext(0x00a74455)]
            void GroupCanceled([in] IVSelection* Selection);
            [id(0x00000327), helpcontext(0x00a7445a)]
            void ShapeDataGraphicChanged([in] IVShape* Shape);
            [id(0x00000325), helpcontext(0x00a7445f)]
            void ShapeLinkAdded(
                            [in] IVShape* Shape, 
                            [in] long DataRecordsetID, 
                            [in] long DataRowID);
            [id(0x00000326), helpcontext(0x00a74464)]
            void ShapeLinkDeleted(
                            [in] IVShape* Shape, 
                            [in] long DataRecordsetID, 
                            [in] long DataRowID);
    };

    [
      uuid(000D0B0B-0000-0000-C000-000000000046),
      helpstring("Visio Shape Event Interface"),
      hidden
    ]
    dispinterface EShape {
        properties:
        methods:
            [id(0x00002800), helpstring("Fires after a cell's value changes."), helpcontext(0x00ab3092)]
            void CellChanged([in] IVCell* Cell);
            [id(0x00008040), helpcontext(0x00ab3137)]
            void ShapeAdded([in] IVShape* Shape);
            [id(0x00000385), helpcontext(0x00ab3074)]
            void BeforeSelectionDelete([in] IVSelection* Selection);
            [id(0x00002040), helpcontext(0x00ab311e)]
            void ShapeChanged([in] IVShape* Shape);
            [id(0x00000386), helpcontext(0x00ab310f)]
            void SelectionAdded([in] IVSelection* Selection);
            [id(0x00004040), helpcontext(0x00ab3079)]
            void BeforeShapeDelete([in] IVShape* Shape);
            [id(0x00002080), helpcontext(0x00ab3137)]
            void TextChanged([in] IVShape* Shape);
            [id(0x00003000), helpstring("Fires after a cell's formula changes."), helpcontext(0x00ab30d8)]
            void FormulaChanged([in] IVCell* Cell);
            [id(0x00000322), helpcontext(0x00ab3123)]
            void ShapeParentChanged([in] IVShape* Shape);
            [id(0x00000323), helpcontext(0x00ab31b4)]
            void BeforeShapeTextEdit([in] IVShape* Shape);
            [id(0x00000324), helpcontext(0x00ab31b9)]
            void ShapeExitedTextEdit([in] IVShape* Shape);
            [id(0x00000387), helpstring("Cancel delete of shapes? T:Yes F:No"), helpcontext(0x00ab3178)]
            void QueryCancelSelectionDelete(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x00000388), helpstring("Delete shapes operation was canceled."), helpcontext(0x00ab31a5)]
            void SelectionDeleteCanceled([in] IVSelection* Selection);
            [id(0x00000389), helpstring("Cancel ungroup operation? T:Yes F:No"), helpcontext(0x00ab3182)]
            void QueryCancelUngroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038a), helpstring("Ungroup operation was canceled."), helpcontext(0x00ab31af)]
            void UngroupCanceled([in] IVSelection* Selection);
            [id(0x0000038b), helpstring("Cancel convert to group operation? T:Yes F:No"), helpcontext(0x00ab317d)]
            void QueryCancelConvertToGroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038c), helpstring("Convert to group operation was canceled."), helpcontext(0x00ab31aa)]
            void ConvertToGroupCanceled([in] IVSelection* Selection);
            [id(0x0000038d), helpstring("Cancel group operation? T:Yes F:No"), helpcontext(0x00abd830)]
            void QueryCancelGroup(
                            [in] IVSelection* Selection, 
                            [out, retval] VARIANT_BOOL* lpboolRet);
            [id(0x0000038e), helpstring("Group operation was canceled."), helpcontext(0x00abd835)]
            void GroupCanceled([in] IVSelection* Selection);
            [id(0x00000327), helpcontext(0x00abd83a)]
            void ShapeDataGraphicChanged([in] IVShape* Shape);
            [id(0x00000325), helpcontext(0x00abd83f)]
            void ShapeLinkAdded(
                            [in] IVShape* Shape, 
                            [in] long DataRecordsetID, 
                            [in] long DataRowID);
            [id(0x00000326), helpcontext(0x00abd844)]
            void ShapeLinkDeleted(
                            [in] IVShape* Shape, 
                            [in] long DataRecordsetID, 
                            [in] long DataRowID);
    };

    [
      uuid(000D0B0C-0000-0000-C000-000000000046),
      helpstring("Visio Characters Event Interface"),
      hidden
    ]
    dispinterface ECharacters {
        properties:
        methods:
            [id(0x00002080), helpcontext(0x009beef7)]
            void TextChanged([in] IVShape* Shape);
    };

    [
      uuid(000D0B0D-0000-0000-C000-000000000046),
      helpstring("Visio Cell Event Interface"),
      hidden
    ]
    dispinterface ECell {
        properties:
        methods:
            [id(0x00002800), helpstring("Fires after a cell's value changes."), helpcontext(0x009a67b2)]
            void CellChanged([in] IVCell* Cell);
            [id(0x00003000), helpstring("Fires after a cell's formula changes."), helpcontext(0x009a67f8)]
            void FormulaChanged([in] IVCell* Cell);
    };

    [
      uuid(00021A20-0000-0000-C000-000000000046),
      helpstring("A running instance of Visio. ProgId: Visio.Application"),
      helpcontext(0x00002738)
    ]
    coclass Application {
        [default] interface IVApplication;
        [default, source] dispinterface EApplication;
    };

    [
      uuid(00021A21-0000-0000-C000-000000000046),
      helpstring("A document open in a Visio Application."),
      helpcontext(0x00002760),
      noncreatable
    ]
    coclass Document {
        [default] interface IVDocument;
        [default, source] dispinterface EDocument;
    };

    [
      uuid(000D0A00-0000-0000-C000-000000000046),
      helpstring("The documents open in a Visio Application. The first Document in a Documents collection is item 1."),
      helpcontext(0x00002765),
      noncreatable
    ]
    coclass Documents {
        [default] interface IVDocuments;
        [default, source] dispinterface EDocuments;
    };

    [
      uuid(000D0A01-0000-0000-C000-000000000046),
      helpstring("The styles in a Visio Document. The first Style in a Styles collection is item 1."),
      helpcontext(0x00002814),
      noncreatable
    ]
    coclass Styles {
        [default] interface IVStyles;
        [default, source] dispinterface EStyles;
    };

    [
      uuid(000D0A02-0000-0000-C000-000000000046),
      helpstring("A style in a Visio Document. A Style is a bundle of attributes that can be applied to Shape objects."),
      helpcontext(0x0000280f),
      noncreatable
    ]
    coclass Style {
        [default] interface IVStyle;
        [default, source] dispinterface EStyle;
    };

    [
      uuid(000D0A03-0000-0000-C000-000000000046),
      helpstring("The masters in a Visio Document. The first Master in a Masters collection is item 1."),
      helpcontext(0x00002797),
      noncreatable
    ]
    coclass Masters {
        [default] interface IVMasters;
        [default, source] dispinterface EMasters;
    };

    [
      uuid(000D0A04-0000-0000-C000-000000000046),
      helpstring("A master in a Visio Document. A Master is a factory for Shape objects (its instances)."),
      helpcontext(0x00002792),
      noncreatable
    ]
    coclass Master {
        [default] interface IVMaster;
        [default, source] dispinterface EMaster;
    };

    [
      uuid(000D0A05-0000-0000-C000-000000000046),
      helpstring("The pages in a Visio Document. The first Page in a Pages collection is item 1."),
      helpcontext(0x000027d3),
      noncreatable
    ]
    coclass Pages {
        [default] interface IVPages;
        [default, source] dispinterface EPages;
    };

    [
      uuid(000D0A06-0000-0000-C000-000000000046),
      helpstring("A page in a Visio Document. A page is a collection of Shape objects drawn and printed as a unit."),
      helpcontext(0x000027ce),
      noncreatable
    ]
    coclass Page {
        [default] interface IVPage;
        [default, source] dispinterface EPage;
    };

    [
      uuid(000D0A07-0000-0000-C000-000000000046),
      helpstring("The layers of a Visio Page or Master. The first Layer in a Layers collection is item 1."),
      helpcontext(0x0000278d),
      noncreatable
    ]
    coclass Layers {
        [default] interface IVLayers;
    };

    [
      uuid(000D0A08-0000-0000-C000-000000000046),
      helpstring("A layer of a Visio Page or Master. Identifies a subset of the Page's or Master's shapes that are logically related."),
      helpcontext(0x00002788),
      noncreatable
    ]
    coclass Layer {
        [default] interface IVLayer;
    };

    [
      uuid(000D0A09-0000-0000-C000-000000000046),
      helpstring("The shapes of a Visio Page or Master, or the sub-shapes of a Shape. The first Shape in a Shapes collection is item 1."),
      helpcontext(0x000027f6),
      noncreatable
    ]
    coclass Shapes {
        [default] interface IVShapes;
    };

    [
      uuid(000D0A0A-0000-0000-C000-000000000046),
      helpstring("An object of a Visio Page or Master, a sub-shape of another Shape, the PageSheet of a Page or Master, or the DocumentSheet of a Document."),
      helpcontext(0x000027f1),
      noncreatable
    ]
    coclass Shape {
        [default] interface IVShape;
        [default, source] dispinterface EShape;
    };

    [
      uuid(000D0A0B-0000-0000-C000-000000000046),
      helpstring("The windows open in a Visio Application or Window. The first Window in a Windows collection is item 1."),
      helpcontext(0x00002846),
      noncreatable
    ]
    coclass Windows {
        [default] interface IVWindows;
        [default, source] dispinterface EWindows;
    };

    [
      uuid(000D0A0C-0000-0000-C000-000000000046),
      helpstring("A window open in a Visio Application."),
      helpcontext(0x00002841),
      noncreatable
    ]
    coclass Window {
        [default] interface IVWindow;
        [default, source] dispinterface EWindow;
    };

    [
      uuid(000D0A0D-0000-0000-C000-000000000046),
      helpstring("A formula that evaluates to a value. Represents a property of a Shape or Style."),
      helpcontext(0x0000273d),
      noncreatable
    ]
    coclass Cell {
        [default] interface IVCell;
        [default, source] dispinterface ECell;
    };

    [
      uuid(000D0A0E-0000-0000-C000-000000000046),
      helpstring("References to a subset of the shapes of a Page or Master. The first Shape in a Selection is item 1."),
      helpcontext(0x000027ec),
      noncreatable
    ]
    coclass Selection {
        [default] interface IVSelection;
    };

    [
      uuid(000D0A0F-0000-0000-C000-000000000046),
      helpstring("Identifies a typeface available for use by Shapes or Styles in a Visio Document."),
      helpcontext(0x00002774),
      noncreatable
    ]
    coclass Font {
        [default] interface IVFont;
    };

    [
      uuid(000D0A10-0000-0000-C000-000000000046),
      helpstring("The fonts in a Visio Document. The first Font in a Fonts collection is item 1."),
      helpcontext(0x00002779),
      noncreatable
    ]
    coclass Fonts {
        [default] interface IVFonts;
    };

    [
      uuid(000D0A11-0000-0000-C000-000000000046),
      helpstring("A color available for use by Shapes or Styles in a Visio Document."),
      helpcontext(0x00002747),
      noncreatable
    ]
    coclass Color {
        [default] interface IVColor;
    };

    [
      uuid(000D0A12-0000-0000-C000-000000000046),
      helpstring("The colors in a Visio Document. The first Color in a Colors collection is item 0."),
      helpcontext(0x0000274c),
      noncreatable
    ]
    coclass Colors {
        [default] interface IVColors;
    };

    [
      uuid(000D0A13-0000-0000-C000-000000000046),
      helpstring("An operation implemented by an EXE or VSL that can be invoked from a Visio Application."),
      helpcontext(0x0000272e),
      noncreatable
    ]
    coclass Addon {
        [default] interface IVAddon;
    };

    [
      uuid(000D0A14-0000-0000-C000-000000000046),
      helpstring("The add-ons available in a Visio Application. The first Addon in an Addons collection is item 1."),
      helpcontext(0x00002733),
      noncreatable
    ]
    coclass Addons {
        [default] interface IVAddons;
    };

    [
      uuid(000D0A15-0000-0000-C000-000000000046),
      helpstring("An item in a Visio object's EventList. An (Event,Action) pair indicating what causes it to fire and what it does when it does fire."),
      helpcontext(0x0000276a),
      noncreatable
    ]
    coclass Event {
        [default] interface IVEvent;
    };

    [
      uuid(000D0A16-0000-0000-C000-000000000046),
      helpstring("The Event objects a Visio object is set up to fire as things happen to it. The first Event in an EventList is item 1."),
      helpcontext(0x0000276f),
      noncreatable
    ]
    coclass EventList {
        [default] interface IVEventList;
    };

    [
      uuid(000D0A17-0000-0000-C000-000000000046),
      helpstring("Represents the text of a Shape in a Visio Document."),
      helpcontext(0x00002742),
      noncreatable
    ]
    coclass Characters {
        [default] interface IVCharacters;
        [default, source] dispinterface ECharacters;
    };

    [
      uuid(000D0A18-0000-0000-C000-000000000046),
      helpstring("Represents a positional association from one Visio Shape to another."),
      helpcontext(0x00002751),
      noncreatable
    ]
    coclass Connect {
        [default] interface IVConnect;
    };

    [
      uuid(000D0A19-0000-0000-C000-000000000046),
      helpstring("The Connect objects associated with a Visio Shape, Page or Master. The first Connect in a Connects collection is item 1."),
      helpcontext(0x00002756),
      noncreatable
    ]
    coclass Connects {
        [default] interface IVConnects;
    };

    [
      uuid(000D0A1A-0000-0000-C000-000000000046),
      helpstring("Properties provided by a Visio Application that are members of no class. Use these properties from code in a Visio Document's VBA project."),
      helpcontext(0x00002710),
      appobject,
      noncreatable
    ]
    coclass Global {
        [default] interface IVGlobal;
    };

    [
      uuid(000D0201-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("The menus, toolbars and accelerators associated with a Visio Application or Document."),
      helpcontext(0x0000283c),
      noncreatable
    ]
    coclass UIObject {
        [default] interface IVUIObject;
    };

    [
      uuid(000D0210-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("An item in a Visio Menu."),
      helpcontext(0x000027ab),
      noncreatable
    ]
    coclass MenuItem {
        [default] interface IVMenuItem;
    };

    [
      uuid(000D0215-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("The items of a Visio Menu or subitems of a MenuItem. The first MenuItem in a MenuItems collection is item 0."),
      helpcontext(0x000027b0),
      noncreatable
    ]
    coclass MenuItems {
        [default] interface IVMenuItems;
    };

    [
      uuid(000D0220-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("The MenuItems constituting a menu."),
      helpcontext(0x000027a6),
      noncreatable
    ]
    coclass Menu {
        [default] interface IVMenu;
    };

    [
      uuid(000D0224-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("The menus of a Visio MenuSet. The first Menu in a Menus collection is item 0."),
      helpcontext(0x000027b5),
      noncreatable
    ]
    coclass Menus {
        [default] interface IVMenus;
    };

    [
      uuid(000D0230-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("A set of Menus associated with an interactive state, such as drawing window active, etc."),
      helpcontext(0x000027ba),
      noncreatable
    ]
    coclass MenuSet {
        [default] interface IVMenuSet;
    };

    [
      uuid(000D0235-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("The menu sets associated with a Visio UIObject. The first MenuSet in a MenuSets collection is item 0."),
      helpcontext(0x000027bf),
      noncreatable
    ]
    coclass MenuSets {
        [default] interface IVMenuSets;
    };

    [
      uuid(000D0240-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("An item such as a button in a Visio Toolbar."),
      helpcontext(0x00002823),
      noncreatable
    ]
    coclass ToolbarItem {
        [default] interface IVToolbarItem;
    };

    [
      uuid(000D0244-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("The items of a Visio Toolbar or subitems of a ToolbarItem. The first ToolbarItem in a ToolbarItems collection is item 0."),
      helpcontext(0x00002828),
      noncreatable
    ]
    coclass ToolbarItems {
        [default] interface IVToolbarItems;
    };

    [
      uuid(000D0250-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("The ToolbarItems constituting a toolbar."),
      helpcontext(0x0000281e),
      noncreatable
    ]
    coclass Toolbar {
        [default] interface IVToolbar;
    };

    [
      uuid(000D0254-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("The toolbars of a Visio ToolbarSet. The first Toolbar in a Toolbars collection is item 0."),
      helpcontext(0x0000282d),
      noncreatable
    ]
    coclass Toolbars {
        [default] interface IVToolbars;
    };

    [
      uuid(000D0260-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("A set of Toolbars associated with an interactive state, such as drawing window active, etc."),
      helpcontext(0x00002832),
      noncreatable
    ]
    coclass ToolbarSet {
        [default] interface IVToolbarSet;
    };

    [
      uuid(000D0265-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("The toolbar sets associated with a Visio UIObject. The first ToolbarSet in a ToolbarSets collection is item 0."),
      helpcontext(0x00002837),
      noncreatable
    ]
    coclass ToolbarSets {
        [default] interface IVToolbarSets;
    };

    [
      uuid(000D0270-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("StatusBarItem is obsolete as of Visio 2002."),
      helpcontext(0x00002800),
      noncreatable,
      hidden
    ]
    coclass StatusBarItem {
        [default] interface IVStatusBarItem;
    };

    [
      uuid(000D0274-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("StatusBarItems is obsolete as of Visio 2002. The first StatusBarItem in a StatusBarItems collection is item 0."),
      helpcontext(0x00002805),
      noncreatable,
      hidden
    ]
    coclass StatusBarItems {
        [default] interface IVStatusBarItems;
    };

    [
      uuid(000D0280-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("StatusBar is obsolete as of Visio 2002."),
      helpcontext(0x000027fb),
      noncreatable,
      hidden
    ]
    coclass StatusBar {
        [default] interface IVStatusBar;
    };

    [
      uuid(000D0284-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("StatusBars is obsolete as of Visio 2002. The first StatusBar in a StatusBars collection is item 0."),
      helpcontext(0x0000280a),
      noncreatable,
      hidden
    ]
    coclass StatusBars {
        [default] interface IVStatusBars;
    };

    [
      uuid(000D0290-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("A map from a keystroke combination to an action such as invoking a Visio command."),
      helpcontext(0x0000271a),
      noncreatable
    ]
    coclass AccelItem {
        [default] interface IVAccelItem;
    };

    [
      uuid(000D0294-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("The items of a Visio AccelTable. The first AccelItem in an AccelItems collection is item 0."),
      helpcontext(0x0000271f),
      noncreatable
    ]
    coclass AccelItems {
        [default] interface IVAccelItems;
    };

    [
      uuid(000D02A0-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("The AccelItems associated with an interactive state, such as drawing window active, etc."),
      helpcontext(0x00002724),
      noncreatable
    ]
    coclass AccelTable {
        [default] interface IVAccelTable;
    };

    [
      uuid(000D02A4-0000-0000-C000-000000000046),
      version(4.12),
      helpstring("The accelerator tables associated with a Visio UIObject. The first AccelTable in an AccelTables collection is item 0."),
      helpcontext(0x00002729),
      noncreatable
    ]
    coclass AccelTables {
        [default] interface IVAccelTables;
    };

    typedef [public]
    IVHyperlink* LPVISIOHYPERLINK;

    typedef [public]
    IVOLEObjects* LPVISIOOBJECTS;

    typedef [public]
    IVOLEObject* LPVISIOOBJECT;

    typedef [public]
    IVPaths* LPVISIOPATHS;

    typedef [public]
    IVPath* LPVISIOPATH;

    typedef [public]
    IVCurve* LPVISIOCURVE;

    [
      odl,
      uuid(000D0D0E-0000-0000-C000-000000000046),
      helpstring("Dual interface of extensions Visio gives to a control contained in a Visio Document."),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface IVExtender : IDispatch {
        [id(0x80010000), propget]
        HRESULT Name([out, retval] BSTR* pbstr);
        [id(0x80010000), propput]
        HRESULT Name([in] BSTR pbstr);
        [id(0xfffffcde), propget]
        HRESULT Object([out, retval] IUnknown** ppunk);
        [id(0x80010008), propget]
        HRESULT Parent([out, retval] IUnknown** ppunk);
        [id(0xfffffcdf), hidden]
        HRESULT Delete();
        [id(0xfffffcdc), hidden]
        HRESULT Index();
        [id(0x80010100), propget]
        HRESULT Shape([out, retval] IVShape** lpdispRet);
        [id(0x8001012d), hidden, helpcontext(0x00ab25d9)]
        HRESULT VoidGroup();
        [id(0x8001012e), helpcontext(0x00ab24df)]
        HRESULT BringForward();
        [id(0x8001012f), helpcontext(0x00ab24e4)]
        HRESULT BringToFront();
        [id(0x80010130), helpcontext(0x00ab250c)]
        HRESULT ConvertToGroup();
        [id(0x80010134), helpcontext(0x00ab269c)]
        HRESULT SendBackward();
        [id(0x80010135), helpcontext(0x00ab26a1)]
        HRESULT SendToBack();
        [id(0x8001012c), propget, helpcontext(0x00ab1a76)]
        HRESULT Document([out, retval] IVDocument** lpdispRet);
        [id(0x80010138), propget, helpcontext(0x00abac43)]
        HRESULT ShapeParent([out, retval] IDispatch** lpdispRet);
        [id(0x80010101), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00ab1922)]
        HRESULT Application([out, retval] IVApplication** lpdispRet);
        [id(0x80010115), propget, helpcontext(0x00ab1c2e)]
        HRESULT Master([out, retval] IVMaster** lpdispRet);
        [id(0x8001010d), propget, helpcontext(0x00ab1986)]
        HRESULT Cells(
                        [in] BSTR localeSpecificCellName, 
                        [out, retval] IVCell** lpdispRet);
        [id(0x8001010e), propget, helpcontext(0x00ab1995)]
        HRESULT CellsSRC(
                        [in] short Section, 
                        [in] short Row, 
                        [in] short Column, 
                        [out, retval] IVCell** lpdispRet);
        [id(0x8001010f), propget, helpcontext(0x00ab1a35)]
        HRESULT Data1([out, retval] BSTR* lpbstrRet);
        [id(0x8001010f), propput, helpcontext(0x00ab1a35)]
        HRESULT Data1([in] BSTR lpbstrRet);
        [id(0x80010110), propget, helpcontext(0x00ab1a3a)]
        HRESULT Data2([out, retval] BSTR* lpbstrRet);
        [id(0x80010110), propput, helpcontext(0x00ab1a3a)]
        HRESULT Data2([in] BSTR lpbstrRet);
        [id(0x80010111), propget, helpcontext(0x00ab1a3f)]
        HRESULT Data3([out, retval] BSTR* lpbstrRet);
        [id(0x80010111), propput, helpcontext(0x00ab1a3f)]
        HRESULT Data3([in] BSTR lpbstrRet);
        [id(0x80010112), propget, helpcontext(0x00ab1b34)]
        HRESULT Help([out, retval] BSTR* lpbstrRet);
        [id(0x80010112), propput, helpcontext(0x00ab1b34)]
        HRESULT Help([in] BSTR lpbstrRet);
        [id(0x80010104), propget, helpcontext(0x00ab1c6f)]
        HRESULT NameID([out, retval] BSTR* lpLocaleIndependentName);
        [id(0x80010109), helpcontext(0x00abad3d)]
        HRESULT ShapeCopy();
        [id(0x8001010a), helpcontext(0x00ab2520)]
        HRESULT ShapeCut();
        [id(0x8001010b), helpcontext(0x00ab2525)]
        HRESULT ShapeDelete();
        [id(0x8001010c), hidden, helpcontext(0x00ab2575)]
        HRESULT VoidShapeDuplicate();
        [id(0x80010118), propget, helpcontext(0x00ab1da5)]
        HRESULT RowCount(
                        [in] short Section, 
                        [out, retval] short* lpi2Ret);
        [id(0x80010119), helpcontext(0x00ab24bc)]
        HRESULT AddSection(
                        [in] short Section, 
                        [out, retval] short* lpi2Ret);
        [id(0x8001011a), helpcontext(0x00ab252f)]
        HRESULT DeleteSection([in] short Section);
        [id(0x8001011b), helpcontext(0x00ab24b2)]
        HRESULT AddRow(
                        [in] short Section, 
                        [in] short Row, 
                        [in] short RowTag, 
                        [out, retval] short* lpi2Ret);
        [id(0x8001011c), helpcontext(0x00ab252a)]
        HRESULT DeleteRow(
                        [in] short Section, 
                        [in] short Row);
        [id(0x8001011d), propget, helpcontext(0x00ab1db9)]
        HRESULT RowsCellCount(
                        [in] short Section, 
                        [in] short Row, 
                        [out, retval] short* lpi2Ret);
        [id(0x8001011e), propget, helpcontext(0x00ab1dbe)]
        HRESULT RowType(
                        [in] short Section, 
                        [in] short Row, 
                        [out, retval] short* lpi2Ret);
        [id(0x8001011e), propput, helpcontext(0x00ab1dbe)]
        HRESULT RowType(
                        [in] short Section, 
                        [in] short Row, 
                        [in] short lpi2Ret);
        [id(0x8001011f), helpcontext(0x00ab26ab)]
        HRESULT SetCenter(
                        [in] double xPos, 
                        [in] double yPos);
        [id(0x80010122), propget, helpcontext(0x00ab19ea)]
        HRESULT Connects([out, retval] IVConnects** lpdispRet);
        [id(0x80010123), propget, hidden, helpcontext(0x00ab1b7f)]
        HRESULT ShapeIndex16([out, retval] short* lpi2Ret);
        [id(0x80010124), propget, helpcontext(0x00abadd8)]
        HRESULT Style([out, retval] BSTR* lpbstrRet);
        [id(0x80010124), propput, helpcontext(0x00abadd8)]
        HRESULT Style([in] BSTR lpbstrRet);
        [id(0x80010128), propput, helpcontext(0x00ab1e72)]
        HRESULT StyleKeepFmt([in] BSTR rhs);
        [id(0x80010125), propget, helpcontext(0x00ab1c15)]
        HRESULT LineStyle([out, retval] BSTR* lpbstrRet);
        [id(0x80010125), propput, helpcontext(0x00ab1c15)]
        HRESULT LineStyle([in] BSTR lpbstrRet);
        [id(0x80010129), propput, helpcontext(0x00ab1c1a)]
        HRESULT LineStyleKeepFmt([in] BSTR rhs);
        [id(0x80010126), propget, helpcontext(0x00ab1ad5)]
        HRESULT FillStyle([out, retval] BSTR* lpbstrRet);
        [id(0x80010126), propput, helpcontext(0x00ab1ad5)]
        HRESULT FillStyle([in] BSTR lpbstrRet);
        [id(0x8001012a), propput, helpcontext(0x00ab1ada)]
        HRESULT FillStyleKeepFmt([in] BSTR rhs);
        [id(0x80010139), helpcontext(0x00ab2589)]
        HRESULT Export([in] BSTR FileName);
        [id(0x8001013d), propget, helpcontext(0x00ab1f17)]
        HRESULT UniqueID(
                        [in] short fUniqueID, 
                        [out, retval] BSTR* lpbstrRet);
        [id(0x8001013e), propget, helpcontext(0x00ab19f9)]
        HRESULT ContainingPage([out, retval] IVPage** lpdispRet);
        [id(0x8001013f), propget, helpcontext(0x00ab19f4)]
        HRESULT ContainingMaster([out, retval] IVMaster** lpdispRet);
        [id(0x80010140), propget, helpcontext(0x00ab1a08)]
        HRESULT ContainingShape([out, retval] IVShape** lpdispRet);
        [id(0x80010141), propget, helpcontext(0x00ab1de1)]
        HRESULT SectionExists(
                        [in] short Section, 
                        [in] short fExistsLocally, 
                        [out, retval] short* lpi2Ret);
        [id(0x80010142), propget, helpcontext(0x00ab1daa)]
        HRESULT RowExists(
                        [in] short Section, 
                        [in] short Row, 
                        [in] short fExistsLocally, 
                        [out, retval] short* lpi2Ret);
        [id(0x80010143), propget, helpcontext(0x00ab1981)]
        HRESULT CellExists(
                        [in] BSTR localeSpecificCellName, 
                        [in] short fExistsLocally, 
                        [out, retval] short* lpi2Ret);
        [id(0x80010144), propget, helpcontext(0x00ab199a)]
        HRESULT CellsSRCExists(
                        [in] short Section, 
                        [in] short Row, 
                        [in] short Column, 
                        [in] short fExistsLocally, 
                        [out, retval] short* lpi2Ret);
        [id(0x80010145), propget, helpcontext(0x00ab1bf7)]
        HRESULT LayerCount([out, retval] short* lpi2Ret);
        [id(0x80010146), propget, helpcontext(0x00ab1bf2)]
        HRESULT Layer(
                        [in] short Index, 
                        [out, retval] IVLayer** lpdispRet);
        [id(0x80010147), helpcontext(0x00ab24ad)]
        HRESULT AddNamedRow(
                        [in] short Section, 
                        [in] BSTR RowName, 
                        [in] short RowTag, 
                        [out, retval] short* lpi2Ret);
        [id(0x80010148), helpcontext(0x00ab24b7)]
        HRESULT AddRows(
                        [in] short Section, 
                        [in] short Row, 
                        [in] short RowTag, 
                        [in] short RowCount, 
                        [out, retval] short* lpi2Ret);
        [id(0x80010149), propget, helpcontext(0x00ab1aa8)]
        HRESULT EventList([out, retval] IVEventList** lpdispRet);
        [id(0x8001014a), propget, helpcontext(0x00ab1d00)]
        HRESULT PersistsEvents([out, retval] short* lpboolRet);
        [id(0x80010156), propget, helpcontext(0x00ab19b8)]
        HRESULT ClassID([out, retval] BSTR* lpbstrRet);
        [id(0x80010158), propget, helpcontext(0x00ab1c7e)]
        HRESULT ShapeObject([out, retval] IDispatch** lpdispRet);
        [id(0x8001015a), helpcontext(0x00ab261f)]
        HRESULT OpenSheetWindow([out, retval] IVWindow** lpdispRet);
        [id(0x8001015b), propget, hidden, helpcontext(0x00ab1b6b)]
        HRESULT ShapeID16([out, retval] short* lpi2Ret);
        [id(0x8001015d), helpcontext(0x00ab25b6)]
        HRESULT GetFormulas(
                        [in] SAFEARRAY(short)* SRCStream, 
                        [out] SAFEARRAY(VARIANT)* formulaArray);
        [id(0x8001015e), helpcontext(0x00ab25c0)]
        HRESULT GetResults(
                        [in] SAFEARRAY(short)* SRCStream, 
                        [in] short Flags, 
                        [in] SAFEARRAY(VARIANT)* UnitsNamesOrCodes, 
                        [out] SAFEARRAY(VARIANT)* resultArray);
        [id(0x8001015f), helpcontext(0x00ab26bf)]
        HRESULT SetFormulas(
                        [in] SAFEARRAY(short)* SRCStream, 
                        [in] SAFEARRAY(VARIANT)* formulaArray, 
                        [in] short Flags, 
                        [out, retval] short* lpi2Ret);
        [id(0x80010160), helpcontext(0x00ab26c4)]
        HRESULT SetResults(
                        [in] SAFEARRAY(short)* SRCStream, 
                        [in] SAFEARRAY(VARIANT)* UnitsNamesOrCodes, 
                        [in] SAFEARRAY(VARIANT)* resultArray, 
                        [in] short Flags, 
                        [out, retval] short* lpi2Ret);
        [id(0x80010161), propget, helpcontext(0x00ab1b0c)]
        HRESULT FromConnects([out, retval] IVConnects** lpdispRet);
        [id(0x80010163), helpcontext(0x00ab24da)]
        HRESULT BoundingBox(
                        [in] short Flags, 
                        [out] double* lpr8Left, 
                        [out] double* lpr8Bottom, 
                        [out] double* lpr8Right, 
                        [out] double* lpr8Top);
        [id(0x80010164), helpcontext(0x00ab1b4d)]
        HRESULT HitTest(
                        [in] double xPos, 
                        [in] double yPos, 
                        [in] double Tolerance, 
                        [out, retval] short* lpi2Ret);
        [id(0x80010165), propget, helpcontext(0x00abadb5)]
        HRESULT Hyperlink([out, retval] IVHyperlink** lpdispRet);
        [id(0x80010166), propget, helpcontext(0x00ab1d50)]
        HRESULT ProgID([out, retval] BSTR* lpbstrRet);
        [id(0x80010167), propget, helpcontext(0x00ab1c83)]
        HRESULT ObjectIsInherited([out, retval] short* lpboolRet);
        [id(0x8001016b), propget, helpcontext(0x00ab1b6b)]
        HRESULT ShapeID([out, retval] long* lpi4Ret);
        [id(0x8001016c), propget, helpcontext(0x00ab1b7f)]
        HRESULT ShapeIndex([out, retval] long* lpi4Ret);
        [id(0x80010182), helpstring("Returns the created group shape"), helpcontext(0x00ab25d9)]
        HRESULT Group([out, retval] IVShape** ppShape);
        [id(0x80010183), helpstring("Returns the duplicated shape"), helpcontext(0x00ab2575)]
        HRESULT ShapeDuplicate([out, retval] IVShape** ppShape);
    };

    [
      uuid(000D0D0F-0000-0000-C000-000000000046),
      helpstring("Dispatch interface of extensions Visio gives to a control contained in a Visio Document."),
      hidden
    ]
    dispinterface IVDispExtender {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x80010000), propget]
            BSTR Name();
            [id(0x80010000), propput]
            void Name([in] BSTR rhs);
            [id(0xfffffcde), propget]
            IUnknown* Object();
            [id(0x80010008), propget]
            IUnknown* Parent();
            [id(0xfffffcdf), hidden]
            void Delete();
            [id(0xfffffcdc), hidden]
            void Index();
            [id(0x80010100), propget]
            IVShape* Shape();
            [id(0x8001012d), hidden, helpcontext(0x00ab25d9)]
            void VoidGroup();
            [id(0x8001012e), helpcontext(0x00ab24df)]
            void BringForward();
            [id(0x8001012f), helpcontext(0x00ab24e4)]
            void BringToFront();
            [id(0x80010130), helpcontext(0x00ab250c)]
            void ConvertToGroup();
            [id(0x80010134), helpcontext(0x00ab269c)]
            void SendBackward();
            [id(0x80010135), helpcontext(0x00ab26a1)]
            void SendToBack();
            [id(0x8001012c), propget, helpcontext(0x00ab1a76)]
            IVDocument* Document();
            [id(0x80010138), propget, helpcontext(0x00abac43)]
            IDispatch* ShapeParent();
            [id(0x80010101), propget, helpstring("Returns Visio Application instance hosting the object."), helpcontext(0x00ab1922)]
            IVApplication* Application();
            [id(0x80010115), propget, helpcontext(0x00ab1c2e)]
            IVMaster* Master();
            [id(0x8001010d), propget, helpcontext(0x00ab1986)]
            IVCell* Cells([in] BSTR localeSpecificCellName);
            [id(0x8001010e), propget, helpcontext(0x00ab1995)]
            IVCell* CellsSRC(
                            [in] short Section, 
                            [in] short Row, 
                            [in] short Column);
            [id(0x8001010f), propget, helpcontext(0x00ab1a35)]
            BSTR Data1();
            [id(0x8001010f), propput, helpcontext(0x00ab1a35)]
            void Data1([in] BSTR rhs);
            [id(0x80010110), propget, helpcontext(0x00ab1a3a)]
            BSTR Data2();
            [id(0x80010110), propput, helpcontext(0x00ab1a3a)]
            void Data2([in] BSTR rhs);
            [id(0x80010111), propget, helpcontext(0x00ab1a3f)]
            BSTR Data3();
            [id(0x80010111), propput, helpcontext(0x00ab1a3f)]
            void Data3([in] BSTR rhs);
            [id(0x80010112), propget, helpcontext(0x00ab1b34)]
            BSTR Help();
            [id(0x80010112), propput, helpcontext(0x00ab1b34)]
            void Help([in] BSTR rhs);
            [id(0x80010104), propget, helpcontext(0x00ab1c6f)]
            BSTR NameID();
            [id(0x80010109), helpcontext(0x00abad3d)]
            void ShapeCopy();
            [id(0x8001010a), helpcontext(0x00ab2520)]
            void ShapeCut();
            [id(0x8001010b), helpcontext(0x00ab2525)]
            void ShapeDelete();
            [id(0x8001010c), hidden, helpcontext(0x00ab2575)]
            void VoidShapeDuplicate();
            [id(0x80010118), propget, helpcontext(0x00ab1da5)]
            short RowCount([in] short Section);
            [id(0x80010119), helpcontext(0x00ab24bc)]
            short AddSection([in] short Section);
            [id(0x8001011a), helpcontext(0x00ab252f)]
            void DeleteSection([in] short Section);
            [id(0x8001011b), helpcontext(0x00ab24b2)]
            short AddRow(
                            [in] short Section, 
                            [in] short Row, 
                            [in] short RowTag);
            [id(0x8001011c), helpcontext(0x00ab252a)]
            void DeleteRow(
                            [in] short Section, 
                            [in] short Row);
            [id(0x8001011d), propget, helpcontext(0x00ab1db9)]
            short RowsCellCount(
                            [in] short Section, 
                            [in] short Row);
            [id(0x8001011e), propget, helpcontext(0x00ab1dbe)]
            short RowType(
                            [in] short Section, 
                            [in] short Row);
            [id(0x8001011e), propput, helpcontext(0x00ab1dbe)]
            void RowType(
                            [in] short Section, 
                            [in] short Row, 
                            [in] short rhs);
            [id(0x8001011f), helpcontext(0x00ab26ab)]
            void SetCenter(
                            [in] double xPos, 
                            [in] double yPos);
            [id(0x80010122), propget, helpcontext(0x00ab19ea)]
            IVConnects* Connects();
            [id(0x80010123), propget, hidden, helpcontext(0x00ab1b7f)]
            short ShapeIndex16();
            [id(0x80010124), propget, helpcontext(0x00abadd8)]
            BSTR Style();
            [id(0x80010124), propput, helpcontext(0x00abadd8)]
            void Style([in] BSTR rhs);
            [id(0x80010128), propput, helpcontext(0x00ab1e72)]
            void StyleKeepFmt([in] BSTR rhs);
            [id(0x80010125), propget, helpcontext(0x00ab1c15)]
            BSTR LineStyle();
            [id(0x80010125), propput, helpcontext(0x00ab1c15)]
            void LineStyle([in] BSTR rhs);
            [id(0x80010129), propput, helpcontext(0x00ab1c1a)]
            void LineStyleKeepFmt([in] BSTR rhs);
            [id(0x80010126), propget, helpcontext(0x00ab1ad5)]
            BSTR FillStyle();
            [id(0x80010126), propput, helpcontext(0x00ab1ad5)]
            void FillStyle([in] BSTR rhs);
            [id(0x8001012a), propput, helpcontext(0x00ab1ada)]
            void FillStyleKeepFmt([in] BSTR rhs);
            [id(0x80010139), helpcontext(0x00ab2589)]
            void Export([in] BSTR FileName);
            [id(0x8001013d), propget, helpcontext(0x00ab1f17)]
            BSTR UniqueID([in] short fUniqueID);
            [id(0x8001013e), propget, helpcontext(0x00ab19f9)]
            IVPage* ContainingPage();
            [id(0x8001013f), propget, helpcontext(0x00ab19f4)]
            IVMaster* ContainingMaster();
            [id(0x80010140), propget, helpcontext(0x00ab1a08)]
            IVShape* ContainingShape();
            [id(0x80010141), propget, helpcontext(0x00ab1de1)]
            short SectionExists(
                            [in] short Section, 
                            [in] short fExistsLocally);
            [id(0x80010142), propget, helpcontext(0x00ab1daa)]
            short RowExists(
                            [in] short Section, 
                            [in] short Row, 
                            [in] short fExistsLocally);
            [id(0x80010143), propget, helpcontext(0x00ab1981)]
            short CellExists(
                            [in] BSTR localeSpecificCellName, 
                            [in] short fExistsLocally);
            [id(0x80010144), propget, helpcontext(0x00ab199a)]
            short CellsSRCExists(
                            [in] short Section, 
                            [in] short Row, 
                            [in] short Column, 
                            [in] short fExistsLocally);
            [id(0x80010145), propget, helpcontext(0x00ab1bf7)]
            short LayerCount();
            [id(0x80010146), propget, helpcontext(0x00ab1bf2)]
            IVLayer* Layer([in] short Index);
            [id(0x80010147), helpcontext(0x00ab24ad)]
            short AddNamedRow(
                            [in] short Section, 
                            [in] BSTR RowName, 
                            [in] short RowTag);
            [id(0x80010148), helpcontext(0x00ab24b7)]
            short AddRows(
                            [in] short Section, 
                            [in] short Row, 
                            [in] short RowTag, 
                            [in] short RowCount);
            [id(0x80010149), propget, helpcontext(0x00ab1aa8)]
            IVEventList* EventList();
            [id(0x8001014a), propget, helpcontext(0x00ab1d00)]
            short PersistsEvents();
            [id(0x80010156), propget, helpcontext(0x00ab19b8)]
            BSTR ClassID();
            [id(0x80010158), propget, helpcontext(0x00ab1c7e)]
            IDispatch* ShapeObject();
            [id(0x8001015a), helpcontext(0x00ab261f)]
            IVWindow* OpenSheetWindow();
            [id(0x8001015b), propget, hidden, helpcontext(0x00ab1b6b)]
            short ShapeID16();
            [id(0x8001015d), helpcontext(0x00ab25b6)]
            void GetFormulas(
                            [in] SAFEARRAY(short)* SRCStream, 
                            [out] SAFEARRAY(VARIANT)* formulaArray);
            [id(0x8001015e), helpcontext(0x00ab25c0)]
            void GetResults(
                            [in] SAFEARRAY(short)* SRCStream, 
                            [in] short Flags, 
                            [in] SAFEARRAY(VARIANT)* UnitsNamesOrCodes, 
                            [out] SAFEARRAY(VARIANT)* resultArray);
            [id(0x8001015f), helpcontext(0x00ab26bf)]
            short SetFormulas(
                            [in] SAFEARRAY(short)* SRCStream, 
                            [in] SAFEARRAY(VARIANT)* formulaArray, 
                            [in] short Flags);
            [id(0x80010160), helpcontext(0x00ab26c4)]
            short SetResults(
                            [in] SAFEARRAY(short)* SRCStream, 
                            [in] SAFEARRAY(VARIANT)* UnitsNamesOrCodes, 
                            [in] SAFEARRAY(VARIANT)* resultArray, 
                            [in] short Flags);
            [id(0x80010161), propget, helpcontext(0x00ab1b0c)]
            IVConnects* FromConnects();
            [id(0x80010163), helpcontext(0x00ab24da)]
            void BoundingBox(
                            [in] short Flags, 
                            [out] double* lpr8Left, 
                            [out] double* lpr8Bottom, 
                            [out] double* lpr8Right, 
                            [out] double* lpr8Top);
            [id(0x80010164), helpcontext(0x00ab1b4d)]
            short HitTest(
                            [in] double xPos, 
                            [in] double yPos, 
                            [in] double Tolerance);
            [id(0x80010165), propget, helpcontext(0x00abadb5)]
            IVHyperlink* Hyperlink();
            [id(0x80010166), propget, helpcontext(0x00ab1d50)]
            BSTR ProgID();
            [id(0x80010167), propget, helpcontext(0x00ab1c83)]
            short ObjectIsInherited();
            [id(0x8001016b), propget, helpcontext(0x00ab1b6b)]
            long ShapeID();
            [id(0x8001016c), propget, helpcontext(0x00ab1b7f)]
            long ShapeIndex();
            [id(0x80010182), helpstring("Returns the created group shape"), helpcontext(0x00ab25d9)]
            IVShape* Group();
            [id(0x80010183), helpstring("Returns the duplicated shape"), helpcontext(0x00ab2575)]
            IVShape* ShapeDuplicate();
    };

    [
      odl,
      uuid(000D0D10-0000-0000-C000-000000000046),
      helpstring("Ambient properties a Visio control site provides to a control contained in a Visio Document."),
      hidden,
      dual,
      oleautomation
    ]
    interface IVAmbients : IDispatch {
        [id(0xfffffd43), propget, hidden]
        HRESULT BackColor([out, retval] long* lpColorRet);
        [id(0xfffffd42), propget, hidden]
        HRESULT DisplayName([out, retval] BSTR* bstr);
        [id(0xfffffd41), propget, hidden]
        HRESULT Font([out, retval] IDispatch** ppDisp);
        [id(0xfffffd40), propget, hidden]
        HRESULT ForeColor([out, retval] long* lpColorRet);
        [id(0xfffffd3f), propget, hidden]
        HRESULT LocaleID([out, retval] long* lpi4Ret);
        [id(0xfffffd3e), propget, hidden]
        HRESULT MessageReflect([out, retval] VARIANT_BOOL* pbRet);
        [id(0xfffffd3d), propget, hidden]
        HRESULT ScaleUnits([out, retval] BSTR* bstr);
        [id(0xfffffd3c), propget, hidden]
        HRESULT TextAlign([out, retval] short* lpi2Ret);
        [id(0xfffffd3b), propget, hidden]
        HRESULT UserMode([out, retval] VARIANT_BOOL* pbRet);
        [id(0xfffffd3a), propget, hidden]
        HRESULT UIDead([out, retval] VARIANT_BOOL* pbRet);
        [id(0xfffffd39), propget, hidden]
        HRESULT ShowGrabHandles([out, retval] VARIANT_BOOL* pbRet);
        [id(0xfffffd38), propget, hidden]
        HRESULT ShowHatching([out, retval] VARIANT_BOOL* pbRet);
        [id(0xfffffd37), propget, hidden]
        HRESULT DisplayAsDefault([out, retval] VARIANT_BOOL* pbRet);
        [id(0xfffffd36), propget, hidden]
        HRESULT SupportsMnemonics([out, retval] VARIANT_BOOL* pbRet);
        [id(0xfffffd35), propget, hidden]
        HRESULT AutoClip([out, retval] VARIANT_BOOL* pbRet);
        [id(0xfffffd34), propget, hidden]
        HRESULT Appearance([out, retval] long* lpi2Ret);
        [id(0x60020010), propget, helpstring("The Visio Shape associated with an OLE embedded object.")]
        HRESULT Shape([out, retval] IVShape** ppShape);
    };

    [
      uuid(000D0D06-0000-0000-C000-000000000046),
      helpstring("Object that provides the extensions Visio gives to a control contained in a Visio Document."),
      noncreatable,
      hidden
    ]
    coclass Extender {
        [default] dispinterface IVDispExtender;
        [default, source] dispinterface EShape;
    };

    [
      uuid(000D0A1B-0000-0000-C000-000000000046),
      helpstring("A navigable link from a Visio Shape to another Visio or non-Visio object."),
      helpcontext(0x0000277e),
      noncreatable
    ]
    coclass Hyperlink {
        [default] interface IVHyperlink;
    };

    [
      uuid(000D0A1C-0000-0000-C000-000000000046),
      helpstring("The COM objects contained in or linked to a Visio Document, Page or Master. The first OLEObject in an OLEObjects collection is item 1."),
      helpcontext(0x000027c9),
      noncreatable
    ]
    coclass OLEObjects {
        [default] interface IVOLEObjects;
    };

    [
      uuid(000D0A1D-0000-0000-C000-000000000046),
      helpstring("A control, object link or embedded object in a Visio Document."),
      helpcontext(0x000027c4),
      noncreatable
    ]
    coclass OLEObject {
        [default] interface IVOLEObject;
    };

    [
      uuid(000D0A1E-0000-0000-C000-000000000046),
      helpstring("The paths described by a Visio Shape's geometry. The first Path in a Paths collection is item 1."),
      helpcontext(0x000027dd),
      noncreatable
    ]
    coclass Paths {
        [default] interface IVPaths;
    };

    [
      uuid(000D0A1F-0000-0000-C000-000000000046),
      helpstring("A contiguous sequence of curves describing one path of a Shape's geometry. The first Curve in a Path is item 1."),
      helpcontext(0x000027d8),
      noncreatable
    ]
    coclass Path {
        [default] interface IVPath;
    };

    [
      uuid(000D0A20-0000-0000-C000-000000000046),
      helpstring("Geometric description of the stroke used to draw part of a Path of a Visio Shape."),
      helpcontext(0x0000275b),
      noncreatable
    ]
    coclass Curve {
        [default] interface IVCurve;
    };

    typedef [public]
    IVHyperlinks* LPVISIOHYPERLINKS;

    typedef [public]
    IVSection* LPVISIOSECTION;

    typedef [public]
    IVRow* LPVISIOROW;

    typedef [public]
    IVMasterShortcuts* LPVISIOMASTERSHORTCUTS;

    typedef [public]
    IVMasterShortcut* LPVISIOMASTERSHORTCUT;

    [
      odl,
      uuid(000D0D11-0000-0000-C000-000000000046),
      helpstring("Interface provided to OLE embedded objects through the Visio IOleClientSite object."),
      hidden,
      oleautomation
    ]
    interface IVClientSite : IUnknown {
        [propget, helpstring("The Visio Shape associated with an OLE embedded object.")]
        HRESULT _stdcall Shape([out, retval] IVShape** ppShape);
    };

    [
      odl,
      uuid(000D1306-0000-0000-C000-000000000046),
      helpstring("VB Undo Manager - VB classes that implement IVBUndoUnit require this for their Do method."),
      hidden,
      dual,
      oleautomation
    ]
    interface IVBUndoManager : IDispatch {
        [id(0x60020000)]
        HRESULT Add([in] IVBUndoUnit* pUnit);
    };

    [
      odl,
      uuid(000D1305-0000-0000-C000-000000000046),
      helpstring("VB-Implements-Capable undo unit interface definition. Use an object that implements this interface in AddUndoUnit calls."),
      helpcontext(0x0000eaf1),
      dual,
      oleautomation
    ]
    interface IVBUndoUnit : IDispatch {
        [id(0x60020000), helpcontext(0x0108e51b)]
        HRESULT Do([in] IVBUndoManager* pMgr);
        [id(00000000), propget, helpcontext(0x01082e7d)]
        HRESULT Description([out, retval] BSTR* pbstrDesc);
        [id(0x60020002), propget, helpcontext(0x0108e52a)]
        HRESULT UnitTypeCLSID([out, retval] BSTR* pbstrCLSID);
        [id(0x60020003), helpcontext(0x0108e520)]
        HRESULT OnNextAdd();
        [id(0x60020004), propget, helpcontext(0x0108e52f)]
        HRESULT UnitTypeLong([out, retval] long* pnType);
        [id(0x60020005), propget, helpstring("Size in bytes. Used to measure how much memory undo information is using."), helpcontext(0x0108e525)]
        HRESULT UnitSize([out, retval] long* pnSize);
    };

    [
      odl,
      uuid(000D0728-0000-0000-C000-000000000046),
      helpstring("VB-Implements-Capable Visio event sink interface definition. Use an object that implements this interface as the sink argument in AddAdvise calls."),
      helpcontext(0x0000eaf6),
      dual,
      oleautomation
    ]
    interface IVisEventProc : IDispatch {
        [id(0x60020000), helpstring("If nEventCode identifies a query event then return True from VisEventProc to cancel the operation."), helpcontext(0x010a6bd4)]
        HRESULT VisEventProc(
                        [in] short nEventCode, 
                        [in] IDispatch* pSourceObj, 
                        [in] long nEventID, 
                        [in] long nEventSeqNum, 
                        [in] IDispatch* pSubjectObj, 
                        [in] VARIANT vMoreInfo, 
                        [out, retval] VARIANT* pvResult);
    };

    [
      uuid(000D0B0E-0000-0000-C000-000000000046),
      helpstring("Visio Section Event Interface"),
      hidden
    ]
    dispinterface ESection {
        properties:
        methods:
            [id(0x00002800), helpstring("Fires after a cell's value changes."), helpcontext(0x00efdab2)]
            void CellChanged([in] IVCell* Cell);
            [id(0x00003000), helpstring("Fires after a cell's formula changes."), helpcontext(0x00efdaf8)]
            void FormulaChanged([in] IVCell* Cell);
    };

    [
      uuid(000D0B0F-0000-0000-C000-000000000046),
      helpstring("Visio Row Event Interface"),
      hidden
    ]
    dispinterface ERow {
        properties:
        methods:
            [id(0x00002800), helpstring("Fires after a cell's value changes."), helpcontext(0x00f16152)]
            void CellChanged([in] IVCell* Cell);
            [id(0x00003000), helpstring("Fires after a cell's formula changes."), helpcontext(0x00f16198)]
            void FormulaChanged([in] IVCell* Cell);
    };

    [
      uuid(000D0A21-0000-0000-C000-000000000046),
      helpstring("The hyperlinks of a Visio Shape. The first Hyperlink in a Hyperlinks collection is item 0."),
      helpcontext(0x00002783),
      noncreatable
    ]
    coclass Hyperlinks {
        [default] interface IVHyperlinks;
    };

    [
      uuid(000D0A22-0000-0000-C000-000000000046),
      helpstring("A subset of a Visio Shape's Cells that are logically related."),
      helpcontext(0x000027e7),
      noncreatable
    ]
    coclass Section {
        [default] interface IVSection;
        [default, source] dispinterface ESection;
    };

    [
      uuid(000D0A23-0000-0000-C000-000000000046),
      helpstring("A group of related Cells in a Section that describe some of a Shape's attributes."),
      helpcontext(0x000027e2),
      noncreatable
    ]
    coclass Row {
        [default] interface IVRow;
        [default, source] dispinterface ERow;
    };

    [
      uuid(000D0A24-0000-0000-C000-000000000046),
      helpstring("The master shortcuts in a Visio Document. The first MasterShortcut in a MasterShortcuts collection is item 1."),
      helpcontext(0x000027a1),
      noncreatable
    ]
    coclass MasterShortcuts {
        [default] interface IVMasterShortcuts;
    };

    [
      uuid(000D0A25-0000-0000-C000-000000000046),
      helpstring("A reference to a Visio Master that behaves like the master when operated on."),
      helpcontext(0x0000279c),
      noncreatable
    ]
    coclass MasterShortcut {
        [default] interface IVMasterShortcut;
    };

    [
      uuid(000D0A26-0000-0000-C000-000000000046),
      helpstring("The object to create to make an invisible Visio instance. ProgId: Visio.InvisibleApp."),
      helpcontext(0x0000eb19)
    ]
    coclass InvisibleApp {
        [default] interface IVInvisibleApp;
        [default, source] dispinterface EApplication;
    };

    typedef [public]
    IVMSGWrap* LPVISIOMSGWRAP;

    [
      uuid(000D0A27-0000-0000-C000-000000000046),
      helpstring("Wraps the MSG structure used by Windows to pass messages to applications."),
      helpcontext(0x0000c62f),
      noncreatable
    ]
    coclass MSGWrap {
        [default] interface IVMSGWrap;
    };

    typedef [public]
    IVApplicationSettings* LPVISIOAPPSETTINGS;

    [
      odl,
      uuid(000D0D21-0000-0000-C000-000000000046),
      helpstring("Interface to enable VisOcx.DrawingControl interactions with VisLib."),
      hidden,
      oleautomation
    ]
    interface IVisLibOcxSupport : IUnknown {
        [propget, helpstring("A string set by the Drawing Control's host application to qualify registry entry lookup. Recommendation: use a GUID.")]
        HRESULT _stdcall HostID([out, retval] BSTR* pbstr);
        [propput, helpstring("A string set by the Drawing Control's host application to qualify registry entry lookup. Recommendation: use a GUID.")]
        HRESULT _stdcall HostID([in] BSTR pbstr);
        [propget, helpstring("The Visio.Window of the inplace active control.")]
        HRESULT _stdcall Window([out, retval] IVWindow** ppWin);
        [propget, helpstring("The Visio.Document of the control.")]
        HRESULT _stdcall Document([out, retval] IVDocument** ppDoc);
        [propget, helpstring("Name of a file to load into the control.")]
        HRESULT _stdcall Src([out, retval] BSTR* pbstr);
        [propput, helpstring("Name of a file to load into the control.")]
        HRESULT _stdcall Src([in] BSTR pbstr);
        [propget, helpstring("True if menu negotiation with the container is required.")]
        HRESULT _stdcall NegotiateMenus([out, retval] VARIANT_BOOL* pbVal);
        [propput, helpstring("True if menu negotiation with the container is required.")]
        HRESULT _stdcall NegotiateMenus([in] VARIANT_BOOL pbVal);
        [propget, helpstring("True if toolbar negotiation with the container is required.")]
        HRESULT _stdcall NegotiateToolbars([out, retval] VARIANT_BOOL* pbVal);
        [propput, helpstring("True if toolbar negotiation with the container is required.")]
        HRESULT _stdcall NegotiateToolbars([in] VARIANT_BOOL pbVal);
        [helpstring("Custom method to display an About dialog with information about this installation of the Microsoft Visio 11.0 Drawing Control.")]
        HRESULT _stdcall About();
        [propget, helpstring("Determines how Visio pages react when control resizes or loads a new file via Src.")]
        HRESULT _stdcall PageSizingBehavior([out, retval] VisPageSizingBehaviors* peVal);
        [propput, helpstring("Determines how Visio pages react when control resizes or loads a new file via Src.")]
        HRESULT _stdcall PageSizingBehavior([in] VisPageSizingBehaviors peVal);
    };

    [
      uuid(000D0A28-0000-0000-C000-000000000046),
      helpstring("Object passed as subject of MouseDown, MouseMove and MouseUp events."),
      helpcontext(0x0000cb5c),
      noncreatable
    ]
    coclass MouseEvent {
        [default] interface IVMouseEvent;
    };

    [
      uuid(000D0A29-0000-0000-C000-000000000046),
      helpstring("Object passed as subject of KeyDown, KeyPress and KeyUp events."),
      helpcontext(0x0000cb57),
      noncreatable
    ]
    coclass KeyboardEvent {
        [default] interface IVKeyboardEvent;
    };

    [
      uuid(000D0A2A-0000-0000-C000-000000000046),
      helpstring("Setting Properties for the Application Object"),
      helpcontext(0x0000ea60),
      noncreatable
    ]
    coclass ApplicationSettings {
        [default] interface IVApplicationSettings;
    };

    typedef [public]
    IVDataRecordsets* LPVISIODATARECORDSETS;

    typedef [public]
    IVDataRecordset* LPVISIODATARECORDSET;

    typedef [public]
    IVDataConnection* LPVISIODATACONNECTION;

    typedef [public]
    IVDataColumns* LPVISIODATACOLUMNS;

    typedef [public]
    IVDataColumn* LPVISIODATACOLUMN;

    typedef [public]
    IVDataRecordsetChangedEvent* LPVISIODATARECORDSETCHANGEDEVENT;

    typedef [public]
    IVGraphicItems* LPVISIOGRAPHICITEMS;

    typedef [public]
    IVGraphicItem* LPVISIOGRAPHICITEM;

    typedef [uuid(000D0C4D-0000-0000-C000-000000000046), helpstring("Event Action that can be filtered using SetFilterActions"), helpcontext(0x000113a0)]
    enum {
        visFilterMouseMoveNoDrag = 0,
        visFilterMouseMoveDragBegin = 1,
        visFilterMouseMoveDragEnter = 2,
        visFilterMouseMoveDragOver = 3,
        visFilterMouseMoveDragLeave = 4,
        visFilterMouseMoveDragDrop = 5
    } VisFilterActions;

    [
      uuid(000D0B11-0000-0000-C000-000000000046),
      helpstring("Visio DataRecordset Event Interface"),
      hidden
    ]
    dispinterface EDataRecordset {
        properties:
        methods:
            [id(0x00002020), helpcontext(0x00f9aa29)]
            void DataRecordsetChanged([in] IVDataRecordsetChangedEvent* DataRecordsetChanged);
            [id(0x00004020), helpcontext(0x00fb30ce)]
            void BeforeDataRecordsetDelete([in] IVDataRecordset* DataRecordset);
    };

    [
      uuid(000D0B10-0000-0000-C000-000000000046),
      helpstring("Visio DataRecordsets Event Interface"),
      hidden
    ]
    dispinterface EDataRecordsets {
        properties:
        methods:
            [id(0x00008020), helpcontext(0x00f9aa33)]
            void DataRecordsetAdded([in] IVDataRecordset* DataRecordset);
            [id(0x00004020), helpcontext(0x00f9aa2e)]
            void BeforeDataRecordsetDelete([in] IVDataRecordset* DataRecordset);
            [id(0x00002020), helpcontext(0x00f9aa29)]
            void DataRecordsetChanged([in] IVDataRecordsetChangedEvent* DataRecordsetChanged);
    };

    [
      uuid(000D0A2B-0000-0000-C000-000000000046),
      helpstring("Data Recordsets collection in a Document"),
      helpcontext(0x0000ee48),
      noncreatable
    ]
    coclass DataRecordsets {
        [default] interface IVDataRecordsets;
        [default, source] dispinterface EDataRecordsets;
    };

    [
      uuid(000D0A2C-0000-0000-C000-000000000046),
      helpstring("Data Recordset oject"),
      helpcontext(0x0000ee4d),
      noncreatable
    ]
    coclass DataRecordset {
        [default] interface IVDataRecordset;
        [default, source] dispinterface EDataRecordset;
    };

    [
      uuid(000D0A2D-0000-0000-C000-000000000046),
      helpstring("Data Connection oject"),
      helpcontext(0x0000ee52),
      noncreatable
    ]
    coclass DataConnection {
        [default] interface IVDataConnection;
    };

    [
      uuid(000D0A2E-0000-0000-C000-000000000046),
      helpstring("Data Columns collection in a Data Recordset"),
      helpcontext(0x0000ee57),
      noncreatable
    ]
    coclass DataColumns {
        [default] interface IVDataColumns;
    };

    [
      uuid(000D0A2F-0000-0000-C000-000000000046),
      helpstring("Data Column of a Data Recordset"),
      helpcontext(0x0000ee5c),
      noncreatable
    ]
    coclass DataColumn {
        [default] interface IVDataColumn;
    };

    [
      uuid(000D0A30-0000-0000-C000-000000000046),
      helpstring("Data Recordset changed object"),
      helpcontext(0x0000ee61),
      noncreatable
    ]
    coclass DataRecordsetChangedEvent {
        [default] interface IVDataRecordsetChangedEvent;
    };

    [
      uuid(000D0A31-0000-0000-C000-000000000046),
      helpstring("Grahic Items collection"),
      helpcontext(0x0000ee66),
      noncreatable
    ]
    coclass GraphicItems {
        [default] interface IVGraphicItems;
    };

    [
      uuid(000D0A32-0000-0000-C000-000000000046),
      helpstring("Graphic Item object"),
      helpcontext(0x0000ee6b),
      noncreatable
    ]
    coclass GraphicItem {
        [default] interface IVGraphicItem;
    };
};
