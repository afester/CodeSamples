// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: EXCEL.EXE

[
  uuid(00020813-0000-0000-C000-000000000046),
  version(1.6),
  helpstring("Microsoft Excel 12.0 Object Library"),
  helpfile("VBAXL10.CHM"),
  helpcontext(0x0000ffff),
  custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, Microsoft.Office.Interop.Excel.dll)

]
library Excel
{
    // TLib :     // TLib : Microsoft Visual Basic for Applications Extensibility 5.3 : {0002E157-0000-0000-C000-000000000046}
    importlib("VBE6EXT.OLB");
    // TLib : Microsoft Office 12.0 Object Library : {2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}
    importlib("MSO.DLL");
    // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    // Forward declare all types defined in this typelib
    interface Adjustments;
    interface CalloutFormat;
    interface ColorFormat;
    interface LineFormat;
    interface ShapeNode;
    interface ShapeNodes;
    interface PictureFormat;
    interface ShadowFormat;
    interface TextEffectFormat;
    interface ThreeDFormat;
    interface FillFormat;
    interface DiagramNodes;
    interface DiagramNodeChildren;
    interface DiagramNode;
    interface IRTDUpdateEvent;
    interface IRtdServer;
    interface TextFrame2;
    interface IFont;
    interface IWindow;
    interface IWindows;
    interface IAppEvents;
    interface _Application;
    interface IWorksheetFunction;
    interface IRange;
    interface IChartEvents;
    interface _Chart;
    interface Sheets;
    interface IVPageBreak;
    interface IHPageBreak;
    interface IHPageBreaks;
    interface IVPageBreaks;
    interface IRecentFile;
    interface IRecentFiles;
    interface IDocEvents;
    interface _Worksheet;
    interface IStyle;
    interface IStyles;
    interface IBorders;
    interface _Global;
    interface IAddIn;
    interface IAddIns;
    interface IToolbar;
    interface IToolbars;
    interface IToolbarButton;
    interface IToolbarButtons;
    interface IAreas;
    interface IWorkbookEvents;
    interface _Workbook;
    interface Workbooks;
    interface IMenuBars;
    interface IMenuBar;
    interface IMenus;
    interface IMenu;
    interface IMenuItems;
    interface IMenuItem;
    interface ICharts;
    interface IDrawingObjects;
    interface IPivotCache;
    interface IPivotCaches;
    interface IPivotFormula;
    interface IPivotFormulas;
    interface IPivotTable;
    interface IPivotTables;
    interface IPivotField;
    interface IPivotFields;
    interface ICalculatedFields;
    interface IPivotItem;
    interface IPivotItems;
    interface ICalculatedItems;
    interface ICharacters;
    interface IDialogs;
    interface IDialog;
    interface ISoundNote;
    interface IButton;
    interface IButtons;
    interface ICheckBox;
    interface ICheckBoxes;
    interface IOptionButton;
    interface IOptionButtons;
    interface IEditBox;
    interface IEditBoxes;
    interface IScrollBar;
    interface IScrollBars;
    interface IListBox;
    interface IListBoxes;
    interface IGroupBox;
    interface IGroupBoxes;
    interface IDropDown;
    interface IDropDowns;
    interface ISpinner;
    interface ISpinners;
    interface IDialogFrame;
    interface ILabel;
    interface ILabels;
    interface IPanes;
    interface IPane;
    interface IScenarios;
    interface IScenario;
    interface IGroupObject;
    interface IGroupObjects;
    interface ILine;
    interface ILines;
    interface IRectangle;
    interface IRectangles;
    interface IOval;
    interface IOvals;
    interface IArc;
    interface IArcs;
    interface IOLEObjectEvents;
    interface _IOLEObject;
    interface IOLEObjects;
    interface ITextBox;
    interface ITextBoxes;
    interface IPicture;
    interface IPictures;
    interface IDrawing;
    interface IDrawings;
    interface IRoutingSlip;
    interface IOutline;
    interface IModule;
    interface IModules;
    interface IDialogSheet;
    interface IDialogSheets;
    interface IWorksheets;
    interface IPageSetup;
    interface INames;
    interface IName;
    interface IChartObject;
    interface IChartObjects;
    interface IMailer;
    interface ICustomViews;
    interface ICustomView;
    interface IFormatConditions;
    interface IFormatCondition;
    interface IComments;
    interface IComment;
    interface IRefreshEvents;
    interface _IQueryTable;
    interface IQueryTables;
    interface IParameter;
    interface IParameters;
    interface IODBCError;
    interface IODBCErrors;
    interface IValidation;
    interface IHyperlinks;
    interface IHyperlink;
    interface IAutoFilter;
    interface IFilters;
    interface IFilter;
    interface IAutoCorrect;
    interface IBorder;
    interface IInterior;
    interface IChartFillFormat;
    interface IChartColorFormat;
    interface IAxis;
    interface IChartTitle;
    interface IAxisTitle;
    interface IChartGroup;
    interface IChartGroups;
    interface IAxes;
    interface IPoints;
    interface IPoint;
    interface ISeries;
    interface ISeriesCollection;
    interface IDataLabel;
    interface IDataLabels;
    interface ILegendEntry;
    interface ILegendEntries;
    interface ILegendKey;
    interface ITrendlines;
    interface ITrendline;
    interface ICorners;
    interface ISeriesLines;
    interface IHiLoLines;
    interface IGridlines;
    interface IDropLines;
    interface ILeaderLines;
    interface IUpBars;
    interface IDownBars;
    interface IFloor;
    interface IWalls;
    interface ITickLabels;
    interface IPlotArea;
    interface IChartArea;
    interface ILegend;
    interface IErrorBars;
    interface IDataTable;
    interface IPhonetic;
    interface IShape;
    interface IShapes;
    interface IShapeRange;
    interface IGroupShapes;
    interface ITextFrame;
    interface IConnectorFormat;
    interface IFreeformBuilder;
    interface IControlFormat;
    interface IOLEFormat;
    interface ILinkFormat;
    interface IPublishObjects;
    interface PublishObject;
    interface IOLEDBError;
    interface IOLEDBErrors;
    interface IPhonetics;
    interface DefaultWebOptions;
    interface WebOptions;
    interface IPivotLayout;
    interface TreeviewControl;
    interface CubeField;
    interface CubeFields;
    interface IDisplayUnitLabel;
    interface ICellFormat;
    interface IUsedObjects;
    interface ICustomProperties;
    interface ICustomProperty;
    interface ICalculatedMembers;
    interface ICalculatedMember;
    interface IWatches;
    interface IWatch;
    interface IPivotCell;
    interface IGraphic;
    interface IAutoRecover;
    interface IErrorCheckingOptions;
    interface IErrors;
    interface IError;
    interface ISmartTagAction;
    interface ISmartTagActions;
    interface ISmartTag;
    interface ISmartTags;
    interface ISmartTagRecognizer;
    interface ISmartTagRecognizers;
    interface ISmartTagOptions;
    interface ISpellingOptions;
    interface ISpeech;
    interface IProtection;
    interface IPivotItemList;
    interface ITab;
    interface IAllowEditRanges;
    interface IAllowEditRange;
    interface IUserAccessList;
    interface IUserAccess;
    interface IRTD;
    interface IDiagram;
    interface IListObjects;
    interface IListObject;
    interface IListColumns;
    interface IListColumn;
    interface IListRows;
    interface IListRow;
    interface IXmlNamespace;
    interface IXmlNamespaces;
    interface IXmlDataBinding;
    interface IXmlSchema;
    interface IXmlSchemas;
    interface IXmlMap;
    interface IXmlMaps;
    interface IListDataFormat;
    interface IXPath;
    interface IPivotLineCells;
    interface IPivotLine;
    interface IPivotLines;
    interface IPivotAxis;
    interface IPivotFilter;
    interface IPivotFilters;
    interface IWorkbookConnection;
    interface IConnections;
    interface IWorksheetView;
    interface IChartView;
    interface IModuleView;
    interface IDialogSheetView;
    interface ISheetViews;
    interface IOLEDBConnection;
    interface IODBCConnection;
    interface IAction;
    interface IActions;
    interface IFormatColor;
    interface IConditionValue;
    interface IColorScale;
    interface IColorScaleCriteria;
    interface IColorScaleCriterion;
    interface IDatabar;
    interface IIconSetCondition;
    interface IIconCriteria;
    interface IIconCriterion;
    interface IIcon;
    interface IIconSet;
    interface IIconSets;
    interface ITop10;
    interface IAboveAverage;
    interface IUniqueValues;
    interface IRanges;
    interface IHeaderFooter;
    interface IPage;
    interface IPages;
    interface IServerViewableItems;
    interface ITableStyleElement;
    interface ITableStyleElements;
    interface ITableStyle;
    interface ITableStyles;
    interface ISortField;
    interface ISortFields;
    interface ISort;
    interface IResearch;
    interface IColorStop;
    interface IColorStops;
    interface ILinearGradient;
    interface IRectangularGradient;
    interface IMultiThreadedCalculation;
    interface IChartFormat;
    interface IFileExportConverter;
    interface IFileExportConverters;
    dispinterface Font;
    dispinterface Window;
    dispinterface Windows;
    dispinterface AppEvents;
    dispinterface WorksheetFunction;
    dispinterface Range;
    dispinterface ChartEvents;
    dispinterface VPageBreak;
    dispinterface HPageBreak;
    dispinterface HPageBreaks;
    dispinterface VPageBreaks;
    dispinterface RecentFile;
    dispinterface RecentFiles;
    dispinterface DocEvents;
    dispinterface Style;
    dispinterface Styles;
    dispinterface Borders;
    dispinterface AddIn;
    dispinterface AddIns;
    dispinterface Toolbar;
    dispinterface Toolbars;
    dispinterface ToolbarButton;
    dispinterface ToolbarButtons;
    dispinterface Areas;
    dispinterface WorkbookEvents;
    dispinterface MenuBars;
    dispinterface MenuBar;
    dispinterface Menus;
    dispinterface Menu;
    dispinterface MenuItems;
    dispinterface MenuItem;
    dispinterface Charts;
    dispinterface DrawingObjects;
    dispinterface PivotCache;
    dispinterface PivotCaches;
    dispinterface PivotFormula;
    dispinterface PivotFormulas;
    dispinterface PivotTable;
    dispinterface PivotTables;
    dispinterface PivotField;
    dispinterface PivotFields;
    dispinterface CalculatedFields;
    dispinterface PivotItem;
    dispinterface PivotItems;
    dispinterface CalculatedItems;
    dispinterface Characters;
    dispinterface Dialogs;
    dispinterface Dialog;
    dispinterface SoundNote;
    dispinterface Button;
    dispinterface Buttons;
    dispinterface CheckBox;
    dispinterface CheckBoxes;
    dispinterface OptionButton;
    dispinterface OptionButtons;
    dispinterface EditBox;
    dispinterface EditBoxes;
    dispinterface ScrollBar;
    dispinterface ScrollBars;
    dispinterface ListBox;
    dispinterface ListBoxes;
    dispinterface GroupBox;
    dispinterface GroupBoxes;
    dispinterface DropDown;
    dispinterface DropDowns;
    dispinterface Spinner;
    dispinterface Spinners;
    dispinterface DialogFrame;
    dispinterface Label;
    dispinterface Labels;
    dispinterface Panes;
    dispinterface Pane;
    dispinterface Scenarios;
    dispinterface Scenario;
    dispinterface GroupObject;
    dispinterface GroupObjects;
    dispinterface Line;
    dispinterface Lines;
    dispinterface Rectangle;
    dispinterface Rectangles;
    dispinterface Oval;
    dispinterface Ovals;
    dispinterface Arc;
    dispinterface Arcs;
    dispinterface OLEObjectEvents;
    dispinterface _OLEObject;
    dispinterface OLEObjects;
    dispinterface TextBox;
    dispinterface TextBoxes;
    dispinterface Picture;
    dispinterface Pictures;
    dispinterface Drawing;
    dispinterface Drawings;
    dispinterface RoutingSlip;
    dispinterface Outline;
    dispinterface Module;
    dispinterface Modules;
    dispinterface DialogSheet;
    dispinterface DialogSheets;
    dispinterface Worksheets;
    dispinterface PageSetup;
    dispinterface Names;
    dispinterface Name;
    dispinterface ChartObject;
    dispinterface ChartObjects;
    dispinterface Mailer;
    dispinterface CustomViews;
    dispinterface CustomView;
    dispinterface FormatConditions;
    dispinterface FormatCondition;
    dispinterface Comments;
    dispinterface Comment;
    dispinterface RefreshEvents;
    dispinterface _QueryTable;
    dispinterface QueryTables;
    dispinterface Parameter;
    dispinterface Parameters;
    dispinterface ODBCError;
    dispinterface ODBCErrors;
    dispinterface Validation;
    dispinterface Hyperlinks;
    dispinterface Hyperlink;
    dispinterface AutoFilter;
    dispinterface Filters;
    dispinterface Filter;
    dispinterface AutoCorrect;
    dispinterface Border;
    dispinterface Interior;
    dispinterface ChartFillFormat;
    dispinterface ChartColorFormat;
    dispinterface Axis;
    dispinterface ChartTitle;
    dispinterface AxisTitle;
    dispinterface ChartGroup;
    dispinterface ChartGroups;
    dispinterface Axes;
    dispinterface Points;
    dispinterface Point;
    dispinterface Series;
    dispinterface SeriesCollection;
    dispinterface DataLabel;
    dispinterface DataLabels;
    dispinterface LegendEntry;
    dispinterface LegendEntries;
    dispinterface LegendKey;
    dispinterface Trendlines;
    dispinterface Trendline;
    dispinterface Corners;
    dispinterface SeriesLines;
    dispinterface HiLoLines;
    dispinterface Gridlines;
    dispinterface DropLines;
    dispinterface LeaderLines;
    dispinterface UpBars;
    dispinterface DownBars;
    dispinterface Floor;
    dispinterface Walls;
    dispinterface TickLabels;
    dispinterface PlotArea;
    dispinterface ChartArea;
    dispinterface Legend;
    dispinterface ErrorBars;
    dispinterface DataTable;
    dispinterface Phonetic;
    dispinterface Shape;
    dispinterface Shapes;
    dispinterface ShapeRange;
    dispinterface GroupShapes;
    dispinterface TextFrame;
    dispinterface ConnectorFormat;
    dispinterface FreeformBuilder;
    dispinterface ControlFormat;
    dispinterface OLEFormat;
    dispinterface LinkFormat;
    dispinterface PublishObjects;
    dispinterface OLEDBError;
    dispinterface OLEDBErrors;
    dispinterface Phonetics;
    dispinterface PivotLayout;
    dispinterface DisplayUnitLabel;
    dispinterface CellFormat;
    dispinterface UsedObjects;
    dispinterface CustomProperties;
    dispinterface CustomProperty;
    dispinterface CalculatedMembers;
    dispinterface CalculatedMember;
    dispinterface Watches;
    dispinterface Watch;
    dispinterface PivotCell;
    dispinterface Graphic;
    dispinterface AutoRecover;
    dispinterface ErrorCheckingOptions;
    dispinterface Errors;
    dispinterface Error;
    dispinterface SmartTagAction;
    dispinterface SmartTagActions;
    dispinterface SmartTag;
    dispinterface SmartTags;
    dispinterface SmartTagRecognizer;
    dispinterface SmartTagRecognizers;
    dispinterface SmartTagOptions;
    dispinterface SpellingOptions;
    dispinterface Speech;
    dispinterface Protection;
    dispinterface PivotItemList;
    dispinterface Tab;
    dispinterface AllowEditRanges;
    dispinterface AllowEditRange;
    dispinterface UserAccessList;
    dispinterface UserAccess;
    dispinterface RTD;
    dispinterface Diagram;
    dispinterface ListObjects;
    dispinterface ListObject;
    dispinterface ListColumns;
    dispinterface ListColumn;
    dispinterface ListRows;
    dispinterface ListRow;
    dispinterface XmlNamespace;
    dispinterface XmlNamespaces;
    dispinterface XmlDataBinding;
    dispinterface XmlSchema;
    dispinterface XmlSchemas;
    dispinterface XmlMap;
    dispinterface XmlMaps;
    dispinterface ListDataFormat;
    dispinterface XPath;
    dispinterface PivotLineCells;
    dispinterface PivotLine;
    dispinterface PivotLines;
    dispinterface PivotAxis;
    dispinterface PivotFilter;
    dispinterface PivotFilters;
    dispinterface WorkbookConnection;
    dispinterface Connections;
    dispinterface WorksheetView;
    dispinterface ChartView;
    dispinterface ModuleView;
    dispinterface DialogSheetView;
    dispinterface SheetViews;
    dispinterface OLEDBConnection;
    dispinterface ODBCConnection;
    dispinterface Action;
    dispinterface Actions;
    dispinterface FormatColor;
    dispinterface ConditionValue;
    dispinterface ColorScale;
    dispinterface ColorScaleCriteria;
    dispinterface ColorScaleCriterion;
    dispinterface Databar;
    dispinterface IconSetCondition;
    dispinterface IconCriteria;
    dispinterface IconCriterion;
    dispinterface Icon;
    dispinterface IconSet;
    dispinterface IconSets;
    dispinterface Top10;
    dispinterface AboveAverage;
    dispinterface UniqueValues;
    dispinterface Ranges;
    dispinterface HeaderFooter;
    dispinterface Page;
    dispinterface Pages;
    dispinterface ServerViewableItems;
    dispinterface TableStyleElement;
    dispinterface TableStyleElements;
    dispinterface TableStyle;
    dispinterface TableStyles;
    dispinterface SortField;
    dispinterface SortFields;
    dispinterface Sort;
    dispinterface Research;
    dispinterface ColorStop;
    dispinterface ColorStops;
    dispinterface LinearGradient;
    dispinterface RectangularGradient;
    dispinterface MultiThreadedCalculation;
    dispinterface ChartFormat;
    dispinterface FileExportConverter;
    dispinterface FileExportConverters;
    interface IDummy;
    interface ICanvasShapes;

    [
      odl,
      uuid(000C0310-0000-0000-C000-000000000046),
      helpcontext(0x00019258),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Adjustments : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x00019259)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget, helpcontext(0x0001925a)]
        HRESULT Count([out, retval] int* Count);
        [id(00000000), propget, helpcontext(0x0001925b)]
        HRESULT Item(
                        [in] int Index, 
                        [out, retval] single* Val);
        [id(00000000), propput, helpcontext(0x0001925b)]
        HRESULT Item(
                        [in] int Index, 
                        [in] single Val);
    };

    [
      odl,
      uuid(000C0311-0000-0000-C000-000000000046),
      helpcontext(0x00019640),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CalloutFormat : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x00019641)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a), helpcontext(0x00019642)]
        HRESULT AutomaticLength();
        [id(0x0000000b), helpcontext(0x00019643)]
        HRESULT CustomDrop([in] single Drop);
        [id(0x0000000c), helpcontext(0x00019644)]
        HRESULT CustomLength([in] single Length);
        [id(0x0000000d), helpcontext(0x00019645)]
        HRESULT PresetDrop([in] MsoCalloutDropType DropType);
        [id(0x00000064), propget, helpcontext(0x00019646)]
        HRESULT Accent([out, retval] MsoTriState* Accent);
        [id(0x00000064), propput, helpcontext(0x00019646)]
        HRESULT Accent([in] MsoTriState Accent);
        [id(0x00000065), propget, helpcontext(0x00019647)]
        HRESULT Angle([out, retval] MsoCalloutAngleType* Angle);
        [id(0x00000065), propput, helpcontext(0x00019647)]
        HRESULT Angle([in] MsoCalloutAngleType Angle);
        [id(0x00000066), propget, helpcontext(0x00019648)]
        HRESULT AutoAttach([out, retval] MsoTriState* AutoAttach);
        [id(0x00000066), propput, helpcontext(0x00019648)]
        HRESULT AutoAttach([in] MsoTriState AutoAttach);
        [id(0x00000067), propget, helpcontext(0x00019649)]
        HRESULT AutoLength([out, retval] MsoTriState* AutoLength);
        [id(0x00000068), propget, helpcontext(0x0001964a)]
        HRESULT Border([out, retval] MsoTriState* Border);
        [id(0x00000068), propput, helpcontext(0x0001964a)]
        HRESULT Border([in] MsoTriState Border);
        [id(0x00000069), propget, helpcontext(0x0001964b)]
        HRESULT Drop([out, retval] single* Drop);
        [id(0x0000006a), propget, helpcontext(0x0001964c)]
        HRESULT DropType([out, retval] MsoCalloutDropType* DropType);
        [id(0x0000006b), propget, helpcontext(0x0001964d)]
        HRESULT Gap([out, retval] single* Gap);
        [id(0x0000006b), propput, helpcontext(0x0001964d)]
        HRESULT Gap([in] single Gap);
        [id(0x0000006c), propget, helpcontext(0x0001964e)]
        HRESULT Length([out, retval] single* Length);
        [id(0x0000006d), propget, helpcontext(0x0001964f)]
        HRESULT Type([out, retval] MsoCalloutType* Type);
        [id(0x0000006d), propput, helpcontext(0x0001964f)]
        HRESULT Type([in] MsoCalloutType Type);
    };

    [
      odl,
      uuid(000C0312-0000-0000-C000-000000000046),
      helpcontext(0x00019a28),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ColorFormat : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x00019a29)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(00000000), propget, helpcontext(0x00019a2a)]
        HRESULT RGB([out, retval] MsoRGBType* RGB);
        [id(00000000), propput, helpcontext(0x00019a2a)]
        HRESULT RGB([in] MsoRGBType RGB);
        [id(0x00000064), propget, helpcontext(0x00019a2b)]
        HRESULT SchemeColor([out, retval] int* SchemeColor);
        [id(0x00000064), propput, helpcontext(0x00019a2b)]
        HRESULT SchemeColor([in] int SchemeColor);
        [id(0x00000065), propget, helpcontext(0x00019a2c)]
        HRESULT Type([out, retval] MsoColorType* Type);
        [id(0x00000066), propget, helpcontext(0x00019a2e)]
        HRESULT TintAndShade([out, retval] single* pValue);
        [id(0x00000066), propput, helpcontext(0x00019a2e)]
        HRESULT TintAndShade([in] single pValue);
        [id(0x00000068), propget]
        HRESULT ObjectThemeColor([out, retval] MsoThemeColorIndex* ObjectThemeColor);
        [id(0x00000068), propput]
        HRESULT ObjectThemeColor([in] MsoThemeColorIndex ObjectThemeColor);
    };

    [
      odl,
      uuid(000C0317-0000-0000-C000-000000000046),
      helpcontext(0x0001adb0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface LineFormat : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x0001adb1)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000064), propget, helpcontext(0x0001adb2)]
        HRESULT BackColor([out, retval] ColorFormat** BackColor);
        [id(0x00000064), propput, helpcontext(0x0001adb2)]
        HRESULT BackColor([in] ColorFormat* BackColor);
        [id(0x00000065), propget, helpcontext(0x0001adb3)]
        HRESULT BeginArrowheadLength([out, retval] MsoArrowheadLength* BeginArrowheadLength);
        [id(0x00000065), propput, helpcontext(0x0001adb3)]
        HRESULT BeginArrowheadLength([in] MsoArrowheadLength BeginArrowheadLength);
        [id(0x00000066), propget, helpcontext(0x0001adb4)]
        HRESULT BeginArrowheadStyle([out, retval] MsoArrowheadStyle* BeginArrowheadStyle);
        [id(0x00000066), propput, helpcontext(0x0001adb4)]
        HRESULT BeginArrowheadStyle([in] MsoArrowheadStyle BeginArrowheadStyle);
        [id(0x00000067), propget, helpcontext(0x0001adb5)]
        HRESULT BeginArrowheadWidth([out, retval] MsoArrowheadWidth* BeginArrowheadWidth);
        [id(0x00000067), propput, helpcontext(0x0001adb5)]
        HRESULT BeginArrowheadWidth([in] MsoArrowheadWidth BeginArrowheadWidth);
        [id(0x00000068), propget, helpcontext(0x0001adb6)]
        HRESULT DashStyle([out, retval] MsoLineDashStyle* DashStyle);
        [id(0x00000068), propput, helpcontext(0x0001adb6)]
        HRESULT DashStyle([in] MsoLineDashStyle DashStyle);
        [id(0x00000069), propget, helpcontext(0x0001adb7)]
        HRESULT EndArrowheadLength([out, retval] MsoArrowheadLength* EndArrowheadLength);
        [id(0x00000069), propput, helpcontext(0x0001adb7)]
        HRESULT EndArrowheadLength([in] MsoArrowheadLength EndArrowheadLength);
        [id(0x0000006a), propget, helpcontext(0x0001adb8)]
        HRESULT EndArrowheadStyle([out, retval] MsoArrowheadStyle* EndArrowheadStyle);
        [id(0x0000006a), propput, helpcontext(0x0001adb8)]
        HRESULT EndArrowheadStyle([in] MsoArrowheadStyle EndArrowheadStyle);
        [id(0x0000006b), propget, helpcontext(0x0001adb9)]
        HRESULT EndArrowheadWidth([out, retval] MsoArrowheadWidth* EndArrowheadWidth);
        [id(0x0000006b), propput, helpcontext(0x0001adb9)]
        HRESULT EndArrowheadWidth([in] MsoArrowheadWidth EndArrowheadWidth);
        [id(0x0000006c), propget, helpcontext(0x0001adba)]
        HRESULT ForeColor([out, retval] ColorFormat** ForeColor);
        [id(0x0000006c), propput, helpcontext(0x0001adba)]
        HRESULT ForeColor([in] ColorFormat* ForeColor);
        [id(0x0000006d), propget, helpcontext(0x0001adbb)]
        HRESULT Pattern([out, retval] MsoPatternType* Pattern);
        [id(0x0000006d), propput, helpcontext(0x0001adbb)]
        HRESULT Pattern([in] MsoPatternType Pattern);
        [id(0x0000006e), propget, helpcontext(0x0001adbc)]
        HRESULT Style([out, retval] MsoLineStyle* Style);
        [id(0x0000006e), propput, helpcontext(0x0001adbc)]
        HRESULT Style([in] MsoLineStyle Style);
        [id(0x0000006f), propget, helpcontext(0x0001a205)]
        HRESULT Transparency([out, retval] single* Transparency);
        [id(0x0000006f), propput, helpcontext(0x0001a205)]
        HRESULT Transparency([in] single Transparency);
        [id(0x00000070), propget, helpcontext(0x0001adbe)]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x00000070), propput, helpcontext(0x0001adbe)]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x00000071), propget, helpcontext(0x0001adbf)]
        HRESULT Weight([out, retval] single* Weight);
        [id(0x00000071), propput, helpcontext(0x0001adbf)]
        HRESULT Weight([in] single Weight);
    };

    [
      odl,
      uuid(000C0318-0000-0000-C000-000000000046),
      helpcontext(0x0001b198),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShapeNode : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x0001b199)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000064), propget, helpcontext(0x0001b19b)]
        HRESULT EditingType([out, retval] MsoEditingType* EditingType);
        [id(0x00000065), propget, helpcontext(0x0001b19c)]
        HRESULT Points([out, retval] VARIANT* Points);
        [id(0x00000066), propget, helpcontext(0x0001b19d)]
        HRESULT SegmentType([out, retval] MsoSegmentType* SegmentType);
    };

    [
      odl,
      uuid(000C0319-0000-0000-C000-000000000046),
      helpcontext(0x0001b580),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShapeNodes : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x0001b581)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000002), propget, helpcontext(0x0001b582)]
        HRESULT Count([out, retval] int* Count);
        [id(00000000), helpcontext(0x0001b583)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] ShapeNode** Item);
        [id(0xfffffffc), propget, helpcontext(0x0001b19c)]
        HRESULT _NewEnum([out, retval] IUnknown** _NewEnum);
        [id(0x0000000b), helpcontext(0x0001b587)]
        HRESULT Delete([in] int Index);
        [id(0x0000000c), helpcontext(0x0001b588)]
        HRESULT Insert(
                        [in] int Index, 
                        [in] MsoSegmentType SegmentType, 
                        [in] MsoEditingType EditingType, 
                        [in] single X1, 
                        [in] single Y1, 
                        [in, optional, defaultvalue(0)] single X2, 
                        [in, optional, defaultvalue(0)] single Y2, 
                        [in, optional, defaultvalue(0)] single X3, 
                        [in, optional, defaultvalue(0)] single Y3);
        [id(0x0000000d), helpcontext(0x0001b589)]
        HRESULT SetEditingType(
                        [in] int Index, 
                        [in] MsoEditingType EditingType);
        [id(0x0000000e), helpcontext(0x0001b58a)]
        HRESULT SetPosition(
                        [in] int Index, 
                        [in] single X1, 
                        [in] single Y1);
        [id(0x0000000f), helpcontext(0x0001b58b)]
        HRESULT SetSegmentType(
                        [in] int Index, 
                        [in] MsoSegmentType SegmentType);
    };

    [
      odl,
      uuid(000C031A-0000-0000-C000-000000000046),
      helpcontext(0x0001b968),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PictureFormat : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x0001b969)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a), helpcontext(0x0001b97c)]
        HRESULT IncrementBrightness([in] single Increment);
        [id(0x0000000b), helpcontext(0x0001b97d)]
        HRESULT IncrementContrast([in] single Increment);
        [id(0x00000064), propget, helpcontext(0x0001b96a)]
        HRESULT Brightness([out, retval] single* Brightness);
        [id(0x00000064), propput, helpcontext(0x0001b96a)]
        HRESULT Brightness([in] single Brightness);
        [id(0x00000065), propget, helpcontext(0x0001b96b)]
        HRESULT ColorType([out, retval] MsoPictureColorType* ColorType);
        [id(0x00000065), propput, helpcontext(0x0001b96b)]
        HRESULT ColorType([in] MsoPictureColorType ColorType);
        [id(0x00000066), propget, helpcontext(0x0001b96c)]
        HRESULT Contrast([out, retval] single* Contrast);
        [id(0x00000066), propput, helpcontext(0x0001b96c)]
        HRESULT Contrast([in] single Contrast);
        [id(0x00000067), propget, helpcontext(0x0001b96d)]
        HRESULT CropBottom([out, retval] single* CropBottom);
        [id(0x00000067), propput, helpcontext(0x0001b96d)]
        HRESULT CropBottom([in] single CropBottom);
        [id(0x00000068), propget, helpcontext(0x0001b96e)]
        HRESULT CropLeft([out, retval] single* CropLeft);
        [id(0x00000068), propput, helpcontext(0x0001b96e)]
        HRESULT CropLeft([in] single CropLeft);
        [id(0x00000069), propget, helpcontext(0x0001b96f)]
        HRESULT CropRight([out, retval] single* CropRight);
        [id(0x00000069), propput, helpcontext(0x0001b96f)]
        HRESULT CropRight([in] single CropRight);
        [id(0x0000006a), propget, helpcontext(0x0001b970)]
        HRESULT CropTop([out, retval] single* CropTop);
        [id(0x0000006a), propput, helpcontext(0x0001b970)]
        HRESULT CropTop([in] single CropTop);
        [id(0x0000006b), propget, helpcontext(0x0001b971)]
        HRESULT TransparencyColor([out, retval] MsoRGBType* TransparencyColor);
        [id(0x0000006b), propput, helpcontext(0x0001b971)]
        HRESULT TransparencyColor([in] MsoRGBType TransparencyColor);
        [id(0x0000006c), propget, helpcontext(0x0001b972)]
        HRESULT TransparentBackground([out, retval] MsoTriState* TransparentBackground);
        [id(0x0000006c), propput, helpcontext(0x0001b972)]
        HRESULT TransparentBackground([in] MsoTriState TransparentBackground);
    };

    [
      odl,
      uuid(000C031B-0000-0000-C000-000000000046),
      helpcontext(0x0001bd50),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ShadowFormat : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x0001bd51)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a), helpcontext(0x0001bd64)]
        HRESULT IncrementOffsetX([in] single Increment);
        [id(0x0000000b), helpcontext(0x0001bd65)]
        HRESULT IncrementOffsetY([in] single Increment);
        [id(0x00000064), propget, helpcontext(0x0001bd52)]
        HRESULT ForeColor([out, retval] ColorFormat** ForeColor);
        [id(0x00000064), propput, helpcontext(0x0001bd52)]
        HRESULT ForeColor([in] ColorFormat* ForeColor);
        [id(0x00000065), propget, helpcontext(0x0001bd53)]
        HRESULT Obscured([out, retval] MsoTriState* Obscured);
        [id(0x00000065), propput, helpcontext(0x0001bd53)]
        HRESULT Obscured([in] MsoTriState Obscured);
        [id(0x00000066), propget, helpcontext(0x0001bd54)]
        HRESULT OffsetX([out, retval] single* OffsetX);
        [id(0x00000066), propput, helpcontext(0x0001bd54)]
        HRESULT OffsetX([in] single OffsetX);
        [id(0x00000067), propget, helpcontext(0x0001bd55)]
        HRESULT OffsetY([out, retval] single* OffsetY);
        [id(0x00000067), propput, helpcontext(0x0001bd55)]
        HRESULT OffsetY([in] single OffsetY);
        [id(0x00000068), propget, helpcontext(0x0001bd56)]
        HRESULT Transparency([out, retval] single* Transparency);
        [id(0x00000068), propput, helpcontext(0x0001bd56)]
        HRESULT Transparency([in] single Transparency);
        [id(0x00000069), propget, helpcontext(0x0001bd57)]
        HRESULT Type([out, retval] MsoShadowType* Type);
        [id(0x00000069), propput, helpcontext(0x0001bd57)]
        HRESULT Type([in] MsoShadowType Type);
        [id(0x0000006a), propget, helpcontext(0x0001bd58)]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x0000006a), propput, helpcontext(0x0001bd58)]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x0000006b), propget, helpcontext(0x0001bd59)]
        HRESULT Style([out, retval] MsoShadowStyle* ShadowStyle);
        [id(0x0000006b), propput, helpcontext(0x0001bd59)]
        HRESULT Style([in] MsoShadowStyle ShadowStyle);
        [id(0x0000006c), propget, helpcontext(0x0001bd5a)]
        HRESULT Blur([out, retval] single* Blur);
        [id(0x0000006c), propput, helpcontext(0x0001bd5a)]
        HRESULT Blur([in] single Blur);
        [id(0x0000006d), propget, helpcontext(0x0001bd5b)]
        HRESULT Size([out, retval] single* Size);
        [id(0x0000006d), propput, helpcontext(0x0001bd5b)]
        HRESULT Size([in] single Size);
        [id(0x0000006e), propget, helpcontext(0x0001bd5c)]
        HRESULT RotateWithShape([out, retval] MsoTriState* RotateWithShape);
        [id(0x0000006e), propput, helpcontext(0x0001bd5c)]
        HRESULT RotateWithShape([in] MsoTriState RotateWithShape);
    };

    [
      odl,
      uuid(000C031F-0000-0000-C000-000000000046),
      helpcontext(0x0001ccf0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextEffectFormat : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x0001ccf1)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a), helpcontext(0x0001cd04)]
        HRESULT ToggleVerticalText();
        [id(0x00000064), propget, helpcontext(0x0001ccf2)]
        HRESULT Alignment([out, retval] MsoTextEffectAlignment* Alignment);
        [id(0x00000064), propput, helpcontext(0x0001ccf2)]
        HRESULT Alignment([in] MsoTextEffectAlignment Alignment);
        [id(0x00000065), propget, helpcontext(0x0001ccf3)]
        HRESULT FontBold([out, retval] MsoTriState* FontBold);
        [id(0x00000065), propput, helpcontext(0x0001ccf3)]
        HRESULT FontBold([in] MsoTriState FontBold);
        [id(0x00000066), propget, helpcontext(0x0001ccf4)]
        HRESULT FontItalic([out, retval] MsoTriState* FontItalic);
        [id(0x00000066), propput, helpcontext(0x0001ccf4)]
        HRESULT FontItalic([in] MsoTriState FontItalic);
        [id(0x00000067), propget, helpcontext(0x0001ccf5)]
        HRESULT FontName([out, retval] BSTR* FontName);
        [id(0x00000067), propput, helpcontext(0x0001ccf5)]
        HRESULT FontName([in] BSTR FontName);
        [id(0x00000068), propget, helpcontext(0x0001ccf6)]
        HRESULT FontSize([out, retval] single* FontSize);
        [id(0x00000068), propput, helpcontext(0x0001ccf6)]
        HRESULT FontSize([in] single FontSize);
        [id(0x00000069), propget, helpcontext(0x0001ccf7)]
        HRESULT KernedPairs([out, retval] MsoTriState* KernedPairs);
        [id(0x00000069), propput, helpcontext(0x0001ccf7)]
        HRESULT KernedPairs([in] MsoTriState KernedPairs);
        [id(0x0000006a), propget, helpcontext(0x0001ccf8)]
        HRESULT NormalizedHeight([out, retval] MsoTriState* NormalizedHeight);
        [id(0x0000006a), propput, helpcontext(0x0001ccf8)]
        HRESULT NormalizedHeight([in] MsoTriState NormalizedHeight);
        [id(0x0000006b), propget, helpcontext(0x0001ccf9)]
        HRESULT PresetShape([out, retval] MsoPresetTextEffectShape* PresetShape);
        [id(0x0000006b), propput, helpcontext(0x0001ccf9)]
        HRESULT PresetShape([in] MsoPresetTextEffectShape PresetShape);
        [id(0x0000006c), propget, helpcontext(0x0001ccfa)]
        HRESULT PresetTextEffect([out, retval] MsoPresetTextEffect* Preset);
        [id(0x0000006c), propput, helpcontext(0x0001ccfa)]
        HRESULT PresetTextEffect([in] MsoPresetTextEffect Preset);
        [id(0x0000006d), propget, helpcontext(0x0001ccfb)]
        HRESULT RotatedChars([out, retval] MsoTriState* RotatedChars);
        [id(0x0000006d), propput, helpcontext(0x0001ccfb)]
        HRESULT RotatedChars([in] MsoTriState RotatedChars);
        [id(0x0000006e), propget, helpcontext(0x0001ccfc)]
        HRESULT Text([out, retval] BSTR* Text);
        [id(0x0000006e), propput, helpcontext(0x0001ccfc)]
        HRESULT Text([in] BSTR Text);
        [id(0x0000006f), propget, helpcontext(0x0001ccfd)]
        HRESULT Tracking([out, retval] single* Tracking);
        [id(0x0000006f), propput, helpcontext(0x0001ccfd)]
        HRESULT Tracking([in] single Tracking);
    };

    [
      odl,
      uuid(000C0321-0000-0000-C000-000000000046),
      helpcontext(0x0001d4c0),
      dual,
      nonextensible,
      oleautomation
    ]
    interface ThreeDFormat : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x0001d0d9)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a), helpcontext(0x0001d0ec)]
        HRESULT IncrementRotationX([in] single Increment);
        [id(0x0000000b), helpcontext(0x0001d0ed)]
        HRESULT IncrementRotationY([in] single Increment);
        [id(0x0000000c), helpcontext(0x0001d0da)]
        HRESULT ResetRotation();
        [id(0x0000000d), helpcontext(0x0001d0db)]
        HRESULT SetThreeDFormat([in] MsoPresetThreeDFormat PresetThreeDFormat);
        [id(0x0000000e), helpcontext(0x0001d0dc)]
        HRESULT SetExtrusionDirection([in] MsoPresetExtrusionDirection PresetExtrusionDirection);
        [id(0x00000064), propget, helpcontext(0x0001d0dd)]
        HRESULT Depth([out, retval] single* Depth);
        [id(0x00000064), propput, helpcontext(0x0001d0dd)]
        HRESULT Depth([in] single Depth);
        [id(0x00000065), propget, helpcontext(0x0001d0de)]
        HRESULT ExtrusionColor([out, retval] ColorFormat** ExtrusionColor);
        [id(0x00000066), propget, helpcontext(0x0001d0df)]
        HRESULT ExtrusionColorType([out, retval] MsoExtrusionColorType* ExtrusionColorType);
        [id(0x00000066), propput, helpcontext(0x0001d0df)]
        HRESULT ExtrusionColorType([in] MsoExtrusionColorType ExtrusionColorType);
        [id(0x00000067), propget, helpcontext(0x0001d0e0)]
        HRESULT Perspective([out, retval] MsoTriState* Perspective);
        [id(0x00000067), propput, helpcontext(0x0001d0e0)]
        HRESULT Perspective([in] MsoTriState Perspective);
        [id(0x00000068), propget, helpcontext(0x0001d0e1)]
        HRESULT PresetExtrusionDirection([out, retval] MsoPresetExtrusionDirection* PresetExtrusionDirection);
        [id(0x00000069), propget, helpcontext(0x0001d0e2)]
        HRESULT PresetLightingDirection([out, retval] MsoPresetLightingDirection* PresetLightingDirection);
        [id(0x00000069), propput, helpcontext(0x0001d0e2)]
        HRESULT PresetLightingDirection([in] MsoPresetLightingDirection PresetLightingDirection);
        [id(0x0000006a), propget, helpcontext(0x0001d0e3)]
        HRESULT PresetLightingSoftness([out, retval] MsoPresetLightingSoftness* PresetLightingSoftness);
        [id(0x0000006a), propput, helpcontext(0x0001d0e3)]
        HRESULT PresetLightingSoftness([in] MsoPresetLightingSoftness PresetLightingSoftness);
        [id(0x0000006b), propget, helpcontext(0x0001d0e4)]
        HRESULT PresetMaterial([out, retval] MsoPresetMaterial* PresetMaterial);
        [id(0x0000006b), propput, helpcontext(0x0001d0e4)]
        HRESULT PresetMaterial([in] MsoPresetMaterial PresetMaterial);
        [id(0x0000006c), propget, helpcontext(0x0001d0e5)]
        HRESULT PresetThreeDFormat([out, retval] MsoPresetThreeDFormat* PresetThreeDFormat);
        [id(0x0000006d), propget, helpcontext(0x0001d0e6)]
        HRESULT RotationX([out, retval] single* RotationX);
        [id(0x0000006d), propput, helpcontext(0x0001d0e6)]
        HRESULT RotationX([in] single RotationX);
        [id(0x0000006e), propget, helpcontext(0x0001d0e7)]
        HRESULT RotationY([out, retval] single* RotationY);
        [id(0x0000006e), propput, helpcontext(0x0001d0e7)]
        HRESULT RotationY([in] single RotationY);
        [id(0x0000006f), propget, helpcontext(0x0001d0e8)]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x0000006f), propput, helpcontext(0x0001d0e8)]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x0000000f)]
        HRESULT SetPresetCamera([in] MsoPresetCamera PresetCamera);
        [id(0x00000010)]
        HRESULT IncrementRotationZ([in] single Increment);
        [id(0x00000011)]
        HRESULT IncrementRotationHorizontal([in] single Increment);
        [id(0x00000012)]
        HRESULT IncrementRotationVertical([in] single Increment);
        [id(0x00000070), propget]
        HRESULT PresetLighting([out, retval] MsoLightRigType* PresetLightRigType);
        [id(0x00000070), propput]
        HRESULT PresetLighting([in] MsoLightRigType PresetLightRigType);
        [id(0x00000071), propget]
        HRESULT Z([out, retval] single* Z);
        [id(0x00000071), propput]
        HRESULT Z([in] single Z);
        [id(0x00000072), propget]
        HRESULT BevelTopType([out, retval] MsoBevelType* BevelTopType);
        [id(0x00000072), propput]
        HRESULT BevelTopType([in] MsoBevelType BevelTopType);
        [id(0x00000073), propget]
        HRESULT BevelTopInset([out, retval] single* BevelTopInset);
        [id(0x00000073), propput]
        HRESULT BevelTopInset([in] single BevelTopInset);
        [id(0x00000074), propget]
        HRESULT BevelTopDepth([out, retval] single* BevelTopDepth);
        [id(0x00000074), propput]
        HRESULT BevelTopDepth([in] single BevelTopDepth);
        [id(0x00000075), propget]
        HRESULT BevelBottomType([out, retval] MsoBevelType* BevelBottomType);
        [id(0x00000075), propput]
        HRESULT BevelBottomType([in] MsoBevelType BevelBottomType);
        [id(0x00000076), propget]
        HRESULT BevelBottomInset([out, retval] single* BevelBottomInset);
        [id(0x00000076), propput]
        HRESULT BevelBottomInset([in] single BevelBottomInset);
        [id(0x00000077), propget]
        HRESULT BevelBottomDepth([out, retval] single* BevelBottomDepth);
        [id(0x00000077), propput]
        HRESULT BevelBottomDepth([in] single BevelBottomDepth);
        [id(0x00000078), propget]
        HRESULT PresetCamera([out, retval] MsoPresetCamera* PresetCamera);
        [id(0x00000079), propget]
        HRESULT RotationZ([out, retval] single* RotationZ);
        [id(0x00000079), propput]
        HRESULT RotationZ([in] single RotationZ);
        [id(0x0000007a), propget]
        HRESULT ContourWidth([out, retval] single* Width);
        [id(0x0000007a), propput]
        HRESULT ContourWidth([in] single Width);
        [id(0x0000007b), propget]
        HRESULT ContourColor([out, retval] ColorFormat** ContourColor);
        [id(0x0000007c), propget]
        HRESULT FieldOfView([out, retval] single* FOV);
        [id(0x0000007c), propput]
        HRESULT FieldOfView([in] single FOV);
        [id(0x0000007d), propget]
        HRESULT ProjectText([out, retval] MsoTriState* ProjectText);
        [id(0x0000007d), propput]
        HRESULT ProjectText([in] MsoTriState ProjectText);
        [id(0x0000007e), propget]
        HRESULT LightAngle([out, retval] single* LightAngle);
        [id(0x0000007e), propput]
        HRESULT LightAngle([in] single LightAngle);
    };

    [
      odl,
      uuid(000C0314-0000-0000-C000-000000000046),
      helpcontext(0x0001c138),
      dual,
      nonextensible,
      oleautomation
    ]
    interface FillFormat : _IMsoDispObj {
        [id(0x00000001), propget, helpcontext(0x0001c139)]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x0000000a), hidden, helpcontext(0x0001c13a)]
        HRESULT Background();
        [id(0x0000000b), helpcontext(0x0001c13b)]
        HRESULT OneColorGradient(
                        [in] MsoGradientStyle Style, 
                        [in] int Variant, 
                        [in] single Degree);
        [id(0x0000000c), helpcontext(0x0001c13c)]
        HRESULT Patterned([in] MsoPatternType Pattern);
        [id(0x0000000d), helpcontext(0x0001c13d)]
        HRESULT PresetGradient(
                        [in] MsoGradientStyle Style, 
                        [in] int Variant, 
                        [in] MsoPresetGradientType PresetGradientType);
        [id(0x0000000e), helpcontext(0x0001c13e)]
        HRESULT PresetTextured([in] MsoPresetTexture PresetTexture);
        [id(0x0000000f), helpcontext(0x0001c13f)]
        HRESULT Solid();
        [id(0x00000010), helpcontext(0x0001c140)]
        HRESULT TwoColorGradient(
                        [in] MsoGradientStyle Style, 
                        [in] int Variant);
        [id(0x00000011), helpcontext(0x0001c141)]
        HRESULT UserPicture([in] BSTR PictureFile);
        [id(0x00000012), helpcontext(0x0001c142)]
        HRESULT UserTextured([in] BSTR TextureFile);
        [id(0x00000064), propget, helpcontext(0x0001c143)]
        HRESULT BackColor([out, retval] ColorFormat** BackColor);
        [id(0x00000064), propput, helpcontext(0x0001c143)]
        HRESULT BackColor([in] ColorFormat* BackColor);
        [id(0x00000065), propget, helpcontext(0x0001c144)]
        HRESULT ForeColor([out, retval] ColorFormat** ForeColor);
        [id(0x00000065), propput, helpcontext(0x0001c144)]
        HRESULT ForeColor([in] ColorFormat* ForeColor);
        [id(0x00000066), propget, helpcontext(0x0001c145)]
        HRESULT GradientColorType([out, retval] MsoGradientColorType* GradientColorType);
        [id(0x00000067), propget, helpcontext(0x0001c146)]
        HRESULT GradientDegree([out, retval] single* GradientDegree);
        [id(0x00000068), propget, helpcontext(0x0001c147)]
        HRESULT GradientStyle([out, retval] MsoGradientStyle* GradientStyle);
        [id(0x00000069), propget, helpcontext(0x0001c148)]
        HRESULT GradientVariant([out, retval] int* GradientVariant);
        [id(0x0000006a), propget, helpcontext(0x0001c149)]
        HRESULT Pattern([out, retval] MsoPatternType* Pattern);
        [id(0x0000006b), propget, helpcontext(0x0001c14a)]
        HRESULT PresetGradientType([out, retval] MsoPresetGradientType* PresetGradientType);
        [id(0x0000006c), propget, helpcontext(0x0001c14b)]
        HRESULT PresetTexture([out, retval] MsoPresetTexture* PresetTexture);
        [id(0x0000006d), propget, helpcontext(0x0001c14c)]
        HRESULT TextureName([out, retval] BSTR* TextureName);
        [id(0x0000006e), propget, helpcontext(0x0001c14d)]
        HRESULT TextureType([out, retval] MsoTextureType* TextureType);
        [id(0x0000006f), propget, helpcontext(0x0001c14e)]
        HRESULT Transparency([out, retval] single* Transparency);
        [id(0x0000006f), propput, helpcontext(0x0001c14e)]
        HRESULT Transparency([in] single Transparency);
        [id(0x00000070), propget, helpcontext(0x0001c14f)]
        HRESULT Type([out, retval] MsoFillType* Type);
        [id(0x00000071), propget, helpcontext(0x0001c150)]
        HRESULT Visible([out, retval] MsoTriState* Visible);
        [id(0x00000071), propput, helpcontext(0x0001c150)]
        HRESULT Visible([in] MsoTriState Visible);
        [id(0x00000072), propget]
        HRESULT GradientStops([out, retval] GradientStops** GradientStops);
        [id(0x00000073), propget]
        HRESULT TextureOffsetX([out, retval] single* TextureOffsetX);
        [id(0x00000073), propput]
        HRESULT TextureOffsetX([in] single TextureOffsetX);
        [id(0x00000074), propget]
        HRESULT TextureOffsetY([out, retval] single* TextureOffsetY);
        [id(0x00000074), propput]
        HRESULT TextureOffsetY([in] single TextureOffsetY);
        [id(0x00000075), propget]
        HRESULT TextureAlignment([out, retval] MsoTextureAlignment* TextureAlignment);
        [id(0x00000075), propput]
        HRESULT TextureAlignment([in] MsoTextureAlignment TextureAlignment);
        [id(0x00000076), propget]
        HRESULT TextureHorizontalScale([out, retval] single* HorizontalScale);
        [id(0x00000076), propput]
        HRESULT TextureHorizontalScale([in] single HorizontalScale);
        [id(0x00000077), propget]
        HRESULT TextureVerticalScale([out, retval] single* VerticalScale);
        [id(0x00000077), propput]
        HRESULT TextureVerticalScale([in] single VerticalScale);
        [id(0x00000078), propget]
        HRESULT TextureTile([out, retval] MsoTriState* TextureTile);
        [id(0x00000078), propput]
        HRESULT TextureTile([in] MsoTriState TextureTile);
        [id(0x00000079), propget]
        HRESULT RotateWithObject([out, retval] MsoTriState* RotateWithObject);
        [id(0x00000079), propput]
        HRESULT RotateWithObject([in] MsoTriState RotateWithObject);
    };

    [
      odl,
      uuid(000C036E-0000-0000-C000-000000000046),
      helpcontext(0x0001dc90),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface DiagramNodes : _IMsoDispObj {
        [id(0xfffffffc), propget, helpcontext(0x0001dc91)]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
        [id(00000000), helpcontext(0x0001dc92)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] DiagramNode** ppdn);
        [id(0x0000000a), helpcontext(0x0001dc93)]
        HRESULT SelectAll();
        [id(0x00000064), propget, helpcontext(0x0001dc94)]
        HRESULT Parent([out, retval] IDispatch** ppParent);
        [id(0x00000065), propget, helpcontext(0x0001dc95)]
        HRESULT Count([out, retval] int* pcDiagramNodes);
    };

    [
      odl,
      uuid(000C036F-0000-0000-C000-000000000046),
      helpcontext(0x0001e078),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface DiagramNodeChildren : _IMsoDispObj {
        [id(0xfffffffc), propget, helpcontext(0x0001e079)]
        HRESULT _NewEnum([out, retval] IUnknown** ppunkEnum);
        [id(00000000), helpcontext(0x0001e07a)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] DiagramNode** ppNode);
        [id(0x0000000a), helpcontext(0x0001e07b)]
        HRESULT AddNode(
                        [in, optional, defaultvalue(-1)] VARIANT Index, 
                        [in, optional, defaultvalue(1)] MsoDiagramNodeType nodeType, 
                        [out, retval] DiagramNode** ppNewNode);
        [id(0x0000000b), helpcontext(0x0001e07c)]
        HRESULT SelectAll();
        [id(0x00000064), propget, helpcontext(0x0001e07d)]
        HRESULT Parent([out, retval] IDispatch** ppParent);
        [id(0x00000065), propget, helpcontext(0x0001e07e)]
        HRESULT Count([out, retval] int* pcDiagramNodes);
        [id(0x00000067), propget, helpcontext(0x0001e07f)]
        HRESULT FirstChild([out, retval] DiagramNode** pFirst);
        [id(0x00000068), propget, helpcontext(0x0001e080)]
        HRESULT LastChild([out, retval] DiagramNode** pLast);
    };

    [
      odl,
      uuid(000C0370-0000-0000-C000-000000000046),
      helpcontext(0x0001e460),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface DiagramNode : _IMsoDispObj {
        [id(0x0000000a), helpcontext(0x0001e461)]
        HRESULT AddNode(
                        [in, optional, defaultvalue(2)] MsoRelativeNodePosition pos, 
                        [in, optional, defaultvalue(1)] MsoDiagramNodeType nodeType, 
                        [out, retval] DiagramNode** NewNode);
        [id(0x0000000b), helpcontext(0x0001e462)]
        HRESULT Delete();
        [id(0x0000000c), helpcontext(0x0001e463)]
        HRESULT MoveNode(
                        [in] DiagramNode* pTargetNode, 
                        [in] MsoRelativeNodePosition pos);
        [id(0x0000000d), helpcontext(0x0001e464)]
        HRESULT ReplaceNode([in] DiagramNode* pTargetNode);
        [id(0x0000000e), helpcontext(0x0001e465)]
        HRESULT SwapNode(
                        [in] DiagramNode* pTargetNode, 
                        [in, optional, defaultvalue(-1)] VARIANT_BOOL swapChildren);
        [id(0x0000000f), helpcontext(0x0001e466)]
        HRESULT CloneNode(
                        [in] VARIANT_BOOL copyChildren, 
                        [in] DiagramNode* pTargetNode, 
                        [in, optional, defaultvalue(2)] MsoRelativeNodePosition pos, 
                        [out, retval] DiagramNode** ppNode);
        [id(0x00000010), helpcontext(0x0001e467)]
        HRESULT TransferChildren([in] DiagramNode* pReceivingNode);
        [id(0x00000011), helpcontext(0x0001e468)]
        HRESULT NextNode([out, retval] DiagramNode** ppNextNode);
        [id(0x00000012), helpcontext(0x0001e469)]
        HRESULT PrevNode([out, retval] DiagramNode** ppPrevNode);
        [id(0x00000064), propget, helpcontext(0x0001e46a)]
        HRESULT Parent([out, retval] IDispatch** ppParent);
        [id(0x00000065), propget, helpcontext(0x0001e46b)]
        HRESULT Children([out, retval] DiagramNodeChildren** ppChildren);
        [id(0x00000066), propget, helpcontext(0x0001e46c)]
        HRESULT Shape([out, retval] Shape** ppShape);
        [id(0x00000067), propget, helpcontext(0x0001e46d)]
        HRESULT Root([out, retval] DiagramNode** ppRoot);
        [id(0x00000068), propget, helpcontext(0x0001e46e)]
        HRESULT Diagram([out, retval] IMsoDiagram** ppDiagram);
        [id(0x00000069), propget, helpcontext(0x0001e46f)]
        HRESULT Layout([out, retval] MsoOrgChartLayoutType* pdgmType);
        [id(0x00000069), propput, helpcontext(0x0001e46f)]
        HRESULT Layout([in] MsoOrgChartLayoutType pdgmType);
        [id(0x0000006a), propget, helpcontext(0x0001e471)]
        HRESULT TextShape([out, retval] Shape** Shape);
    };

    [
      odl,
      uuid(A43788C1-D91B-11D3-8F39-00C04F3651B8),
      helpcontext(0x0007a120),
      dual,
      oleautomation
    ]
    interface IRTDUpdateEvent : IDispatch {
        [id(0x0000000a), helpcontext(0x0007a121)]
        HRESULT UpdateNotify();
        [id(0x0000000b), propget, helpcontext(0x0007a122)]
        HRESULT HeartbeatInterval([out, retval] long* plRetVal);
        [id(0x0000000b), propput, helpcontext(0x0007a122)]
        HRESULT HeartbeatInterval([in] long plRetVal);
        [id(0x0000000c), helpcontext(0x0007a123)]
        HRESULT Disconnect();
    };

    [
      odl,
      uuid(EC0E6191-DB51-11D3-8F3E-00C04F3651B8),
      helpcontext(0x0007a124),
      dual,
      oleautomation
    ]
    interface IRtdServer : IDispatch {
        [id(0x0000000a), helpcontext(0x0007a125)]
        HRESULT ServerStart(
                        [in] IRTDUpdateEvent* CallbackObject, 
                        [out, retval] long* pfRes);
        [id(0x0000000b), helpcontext(0x0007a126)]
        HRESULT ConnectData(
                        [in] long TopicID, 
                        [in] SAFEARRAY(VARIANT)* Strings, 
                        [in, out] VARIANT_BOOL* GetNewValues, 
                        [out, retval] VARIANT* pvarOut);
        [id(0x0000000c), helpcontext(0x0007a127)]
        HRESULT RefreshData(
                        [in, out] long* TopicCount, 
                        [out, retval] SAFEARRAY(VARIANT)* parrayOut);
        [id(0x0000000d), helpcontext(0x0007a128)]
        HRESULT DisconnectData([in] long TopicID);
        [id(0x0000000e), helpcontext(0x0007a129)]
        HRESULT Heartbeat([out, retval] long* pfRes);
        [id(0x0000000f), helpcontext(0x0007a12a)]
        HRESULT ServerTerminate();
    };

    [
      odl,
      uuid(000C0398-0000-0000-C000-000000000046),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TextFrame2 : _IMsoDispObj {
        [id(0x00000001), propget]
        HRESULT Parent([out, retval] IDispatch** Parent);
        [id(0x00000064), propget]
        HRESULT MarginBottom([out, retval] single* MarginBottom);
        [id(0x00000064), propput]
        HRESULT MarginBottom([in] single MarginBottom);
        [id(0x00000065), propget]
        HRESULT MarginLeft([out, retval] single* MarginLeft);
        [id(0x00000065), propput]
        HRESULT MarginLeft([in] single MarginLeft);
        [id(0x00000066), propget]
        HRESULT MarginRight([out, retval] single* MarginRight);
        [id(0x00000066), propput]
        HRESULT MarginRight([in] single MarginRight);
        [id(0x00000067), propget]
        HRESULT MarginTop([out, retval] single* MarginTop);
        [id(0x00000067), propput]
        HRESULT MarginTop([in] single MarginTop);
        [id(0x00000068), propget]
        HRESULT Orientation([out, retval] MsoTextOrientation* Orientation);
        [id(0x00000068), propput]
        HRESULT Orientation([in] MsoTextOrientation Orientation);
        [id(0x00000069), propget]
        HRESULT HorizontalAnchor([out, retval] MsoHorizontalAnchor* HorizontalAnchor);
        [id(0x00000069), propput]
        HRESULT HorizontalAnchor([in] MsoHorizontalAnchor HorizontalAnchor);
        [id(0x0000006a), propget]
        HRESULT VerticalAnchor([out, retval] MsoVerticalAnchor* VerticalAnchor);
        [id(0x0000006a), propput]
        HRESULT VerticalAnchor([in] MsoVerticalAnchor VerticalAnchor);
        [id(0x0000006b), propget]
        HRESULT PathFormat([out, retval] MsoPathFormat* PathFormat);
        [id(0x0000006b), propput]
        HRESULT PathFormat([in] MsoPathFormat PathFormat);
        [id(0x0000006c), propget]
        HRESULT WarpFormat([out, retval] MsoWarpFormat* WarpFormat);
        [id(0x0000006c), propput]
        HRESULT WarpFormat([in] MsoWarpFormat WarpFormat);
        [id(0x0000006d), propget]
        HRESULT WordArtformat([out, retval] MsoPresetTextEffect* WordArtformat);
        [id(0x0000006d), propput]
        HRESULT WordArtformat([in] MsoPresetTextEffect WordArtformat);
        [id(0x0000006e), propget]
        HRESULT WordWrap([out, retval] MsoTriState* WordWrap);
        [id(0x0000006e), propput]
        HRESULT WordWrap([in] MsoTriState WordWrap);
        [id(0x0000006f), propget]
        HRESULT AutoSize([out, retval] MsoAutoSize* AutoSize);
        [id(0x0000006f), propput]
        HRESULT AutoSize([in] MsoAutoSize AutoSize);
        [id(0x00000070), propget]
        HRESULT ThreeD([out, retval] ThreeDFormat** ThreeD);
        [id(0x00000071), propget]
        HRESULT HasText([out, retval] MsoTriState* pHasText);
        [id(0x00000072), propget]
        HRESULT TextRange([out, retval] TextRange2** Range);
        [id(0x00000073), propget]
        HRESULT Column([out, retval] TextColumn2** Column);
        [id(0x00000074), propget]
        HRESULT Ruler([out, retval] Ruler2** Ruler);
        [id(0x00000075)]
        HRESULT DeleteText();
    };

    typedef enum {
        xlAll = 0xffffeff8,
        xlAutomatic = 0xffffeff7,
        xlBoth = 1,
        xlCenter = 0xffffeff4,
        xlChecker = 9,
        xlCircle = 8,
        xlCorner = 2,
        xlCrissCross = 16,
        xlCross = 4,
        xlDiamond = 2,
        xlDistributed = 0xffffefeb,
        xlDoubleAccounting = 5,
        xlFixedValue = 1,
        xlFormats = 0xffffefe6,
        xlGray16 = 17,
        xlGray8 = 18,
        xlGrid = 15,
        xlHigh = 0xffffefe1,
        xlInside = 2,
        xlJustify = 0xffffefde,
        xlLightDown = 13,
        xlLightHorizontal = 11,
        xlLightUp = 14,
        xlLightVertical = 12,
        xlLow = 0xffffefda,
        xlManual = 0xffffefd9,
        xlMinusValues = 3,
        xlModule = 0xffffefd3,
        xlNextToAxis = 4,
        xlNone = 0xffffefd2,
        xlNotes = 0xffffefd0,
        xlOff = 0xffffefce,
        xlOn = 1,
        xlPercent = 2,
        xlPlus = 9,
        xlPlusValues = 2,
        xlSemiGray75 = 10,
        xlShowLabel = 4,
        xlShowLabelAndPercent = 5,
        xlShowPercent = 3,
        xlShowValue = 2,
        xlSimple = 0xffffefc6,
        xlSingle = 2,
        xlSingleAccounting = 4,
        xlSolid = 1,
        xlSquare = 1,
        xlStar = 5,
        xlStError = 4,
        xlToolbarButton = 2,
        xlTriangle = 3,
        xlGray25 = 0xffffefe4,
        xlGray50 = 0xffffefe3,
        xlGray75 = 0xffffefe2,
        xlBottom = 0xffffeff5,
        xlLeft = 0xffffefdd,
        xlRight = 0xffffefc8,
        xlTop = 0xffffefc0,
        xl3DBar = 0xffffeffd,
        xl3DSurface = 0xffffeff9,
        xlBar = 2,
        xlColumn = 3,
        xlCombination = 0xffffeff1,
        xlCustom = 0xffffefee,
        xlDefaultAutoFormat = 0xffffffff,
        xlMaximum = 2,
        xlMinimum = 4,
        xlOpaque = 3,
        xlTransparent = 2,
        xlBidi = 0xffffec78,
        xlLatin = 0xffffec77,
        xlContext = 0xffffec76,
        xlLTR = 0xffffec75,
        xlRTL = 0xffffec74,
        xlFullScript = 1,
        xlPartialScript = 2,
        xlMixedScript = 3,
        xlMixedAuthorizedScript = 4,
        xlVisualCursor = 2,
        xlLogicalCursor = 1,
        xlSystem = 1,
        xlPartial = 3,
        xlHindiNumerals = 3,
        xlBidiCalendar = 3,
        xlGregorian = 2,
        xlComplete = 4,
        xlScale = 3,
        xlClosed = 3,
        xlColor1 = 7,
        xlColor2 = 8,
        xlColor3 = 9,
        xlConstants = 2,
        xlContents = 2,
        xlBelow = 1,
        xlCascade = 7,
        xlCenterAcrossSelection = 7,
        xlChart4 = 2,
        xlChartSeries = 17,
        xlChartShort = 6,
        xlChartTitles = 18,
        xlClassic1 = 1,
        xlClassic2 = 2,
        xlClassic3 = 3,
        xl3DEffects1 = 13,
        xl3DEffects2 = 14,
        xlAbove = 0,
        xlAccounting1 = 4,
        xlAccounting2 = 5,
        xlAccounting3 = 6,
        xlAccounting4 = 17,
        xlAdd = 2,
        xlDebugCodePane = 13,
        xlDesktop = 9,
        xlDirect = 1,
        xlDivide = 5,
        xlDoubleClosed = 5,
        xlDoubleOpen = 4,
        xlDoubleQuote = 1,
        xlEntireChart = 20,
        xlExcelMenus = 1,
        xlExtended = 3,
        xlFill = 5,
        xlFirst = 0,
        xlFloating = 5,
        xlFormula = 5,
        xlGeneral = 1,
        xlGridline = 22,
        xlIcons = 1,
        xlImmediatePane = 12,
        xlInteger = 2,
        xlLast = 1,
        xlLastCell = 11,
        xlList1 = 10,
        xlList2 = 11,
        xlList3 = 12,
        xlLocalFormat1 = 15,
        xlLocalFormat2 = 16,
        xlLong = 3,
        xlLotusHelp = 2,
        xlMacrosheetCell = 7,
        xlMixed = 2,
        xlMultiply = 4,
        xlNarrow = 1,
        xlNoDocuments = 3,
        xlOpen = 2,
        xlOutside = 3,
        xlReference = 4,
        xlSemiautomatic = 2,
        xlShort = 1,
        xlSingleQuote = 2,
        xlStrict = 2,
        xlSubtract = 3,
        xlTextBox = 16,
        xlTiled = 1,
        xlTitleBar = 8,
        xlToolbar = 1,
        xlVisible = 12,
        xlWatchPane = 11,
        xlWide = 3,
        xlWorkbookTab = 6,
        xlWorksheet4 = 1,
        xlWorksheetCell = 3,
        xlWorksheetShort = 5,
        xlAllExceptBorders = 7,
        xlLeftToRight = 2,
        xlTopToBottom = 1,
        xlVeryHidden = 2,
        xlDrawingObject = 14
    } Constants;

    typedef enum {
        xlCreatorCode = 0x5843454c
    } XlCreator;

    typedef enum {
        xlBuiltIn = 21,
        xlUserDefined = 22,
        xlAnyGallery = 23
    } XlChartGallery;

    typedef enum {
        xlColorIndexAutomatic = 0xffffeff7,
        xlColorIndexNone = 0xffffefd2
    } XlColorIndex;

    typedef enum {
        xlCap = 1,
        xlNoCap = 2
    } XlEndStyleCap;

    typedef enum {
        xlColumns = 2,
        xlRows = 1
    } XlRowCol;

    typedef enum {
        xlScaleLinear = 0xffffefdc,
        xlScaleLogarithmic = 0xffffefdb
    } XlScaleType;

    typedef enum {
        xlAutoFill = 4,
        xlChronological = 3,
        xlGrowth = 2,
        xlDataSeriesLinear = 0xffffefdc
    } XlDataSeriesType;

    typedef enum {
        xlAxisCrossesAutomatic = 0xffffeff7,
        xlAxisCrossesCustom = 0xffffefee,
        xlAxisCrossesMaximum = 2,
        xlAxisCrossesMinimum = 4
    } XlAxisCrosses;

    typedef enum {
        xlPrimary = 1,
        xlSecondary = 2
    } XlAxisGroup;

    typedef enum {
        xlBackgroundAutomatic = 0xffffeff7,
        xlBackgroundOpaque = 3,
        xlBackgroundTransparent = 2
    } XlBackground;

    typedef enum {
        xlMaximized = 0xffffefd7,
        xlMinimized = 0xffffefd4,
        xlNormal = 0xffffefd1
    } XlWindowState;

    typedef enum {
        xlCategory = 1,
        xlSeriesAxis = 3,
        xlValue = 2
    } XlAxisType;

    typedef enum {
        xlArrowHeadLengthLong = 3,
        xlArrowHeadLengthMedium = 0xffffefd6,
        xlArrowHeadLengthShort = 1
    } XlArrowHeadLength;

    typedef enum {
        xlVAlignBottom = 0xffffeff5,
        xlVAlignCenter = 0xffffeff4,
        xlVAlignDistributed = 0xffffefeb,
        xlVAlignJustify = 0xffffefde,
        xlVAlignTop = 0xffffefc0
    } XlVAlign;

    typedef enum {
        xlTickMarkCross = 4,
        xlTickMarkInside = 2,
        xlTickMarkNone = 0xffffefd2,
        xlTickMarkOutside = 3
    } XlTickMark;

    typedef enum {
        xlX = 0xffffefb8,
        xlY = 1
    } XlErrorBarDirection;

    typedef enum {
        xlErrorBarIncludeBoth = 1,
        xlErrorBarIncludeMinusValues = 3,
        xlErrorBarIncludeNone = 0xffffefd2,
        xlErrorBarIncludePlusValues = 2
    } XlErrorBarInclude;

    typedef enum {
        xlInterpolated = 3,
        xlNotPlotted = 1,
        xlZero = 2
    } XlDisplayBlanksAs;

    typedef enum {
        xlArrowHeadStyleClosed = 3,
        xlArrowHeadStyleDoubleClosed = 5,
        xlArrowHeadStyleDoubleOpen = 4,
        xlArrowHeadStyleNone = 0xffffefd2,
        xlArrowHeadStyleOpen = 2
    } XlArrowHeadStyle;

    typedef enum {
        xlArrowHeadWidthMedium = 0xffffefd6,
        xlArrowHeadWidthNarrow = 1,
        xlArrowHeadWidthWide = 3
    } XlArrowHeadWidth;

    typedef enum {
        xlHAlignCenter = 0xffffeff4,
        xlHAlignCenterAcrossSelection = 7,
        xlHAlignDistributed = 0xffffefeb,
        xlHAlignFill = 5,
        xlHAlignGeneral = 1,
        xlHAlignJustify = 0xffffefde,
        xlHAlignLeft = 0xffffefdd,
        xlHAlignRight = 0xffffefc8
    } XlHAlign;

    typedef enum {
        xlTickLabelPositionHigh = 0xffffefe1,
        xlTickLabelPositionLow = 0xffffefda,
        xlTickLabelPositionNextToAxis = 4,
        xlTickLabelPositionNone = 0xffffefd2
    } XlTickLabelPosition;

    typedef enum {
        xlLegendPositionBottom = 0xffffeff5,
        xlLegendPositionCorner = 2,
        xlLegendPositionLeft = 0xffffefdd,
        xlLegendPositionRight = 0xffffefc8,
        xlLegendPositionTop = 0xffffefc0,
        xlLegendPositionCustom = 0xffffefbf
    } XlLegendPosition;

    typedef enum {
        xlStackScale = 3,
        xlStack = 2,
        xlStretch = 1
    } XlChartPictureType;

    typedef enum {
        xlSides = 1,
        xlEnd = 2,
        xlEndSides = 3,
        xlFront = 4,
        xlFrontSides = 5,
        xlFrontEnd = 6,
        xlAllFaces = 7
    } XlChartPicturePlacement;

    typedef enum {
        xlDownward = 0xffffefb6,
        xlHorizontal = 0xffffefe0,
        xlUpward = 0xffffefb5,
        xlVertical = 0xffffefba
    } XlOrientation;

    typedef enum {
        xlTickLabelOrientationAutomatic = 0xffffeff7,
        xlTickLabelOrientationDownward = 0xffffefb6,
        xlTickLabelOrientationHorizontal = 0xffffefe0,
        xlTickLabelOrientationUpward = 0xffffefb5,
        xlTickLabelOrientationVertical = 0xffffefba
    } XlTickLabelOrientation;

    typedef enum {
        xlHairline = 1,
        xlMedium = 0xffffefd6,
        xlThick = 4,
        xlThin = 2
    } XlBorderWeight;

    typedef enum {
        xlDay = 1,
        xlMonth = 3,
        xlWeekday = 2,
        xlYear = 4
    } XlDataSeriesDate;

    typedef enum {
        xlUnderlineStyleDouble = 0xffffefe9,
        xlUnderlineStyleDoubleAccounting = 5,
        xlUnderlineStyleNone = 0xffffefd2,
        xlUnderlineStyleSingle = 2,
        xlUnderlineStyleSingleAccounting = 4
    } XlUnderlineStyle;

    typedef enum {
        xlErrorBarTypeCustom = 0xffffefee,
        xlErrorBarTypeFixedValue = 1,
        xlErrorBarTypePercent = 2,
        xlErrorBarTypeStDev = 0xffffefc5,
        xlErrorBarTypeStError = 4
    } XlErrorBarType;

    typedef enum {
        xlExponential = 5,
        xlLinear = 0xffffefdc,
        xlLogarithmic = 0xffffefdb,
        xlMovingAvg = 6,
        xlPolynomial = 3,
        xlPower = 4
    } XlTrendlineType;

    typedef enum {
        xlContinuous = 1,
        xlDash = 0xffffefed,
        xlDashDot = 4,
        xlDashDotDot = 5,
        xlDot = 0xffffefea,
        xlDouble = 0xffffefe9,
        xlSlantDashDot = 13,
        xlLineStyleNone = 0xffffefd2
    } XlLineStyle;

    typedef enum {
        xlDataLabelsShowNone = 0xffffefd2,
        xlDataLabelsShowValue = 2,
        xlDataLabelsShowPercent = 3,
        xlDataLabelsShowLabel = 4,
        xlDataLabelsShowLabelAndPercent = 5,
        xlDataLabelsShowBubbleSizes = 6
    } XlDataLabelsType;

    typedef enum {
        xlMarkerStyleAutomatic = 0xffffeff7,
        xlMarkerStyleCircle = 8,
        xlMarkerStyleDash = 0xffffefed,
        xlMarkerStyleDiamond = 2,
        xlMarkerStyleDot = 0xffffefea,
        xlMarkerStyleNone = 0xffffefd2,
        xlMarkerStylePicture = 0xffffefcd,
        xlMarkerStylePlus = 9,
        xlMarkerStyleSquare = 1,
        xlMarkerStyleStar = 5,
        xlMarkerStyleTriangle = 3,
        xlMarkerStyleX = 0xffffefb8
    } XlMarkerStyle;

    typedef enum {
        xlBMP = 1,
        xlCGM = 7,
        xlDRW = 4,
        xlDXF = 5,
        xlEPS = 8,
        xlHGL = 6,
        xlPCT = 13,
        xlPCX = 10,
        xlPIC = 11,
        xlPLT = 12,
        xlTIF = 9,
        xlWMF = 2,
        xlWPG = 3
    } XlPictureConvertorType;

    typedef enum {
        xlPatternAutomatic = 0xffffeff7,
        xlPatternChecker = 9,
        xlPatternCrissCross = 16,
        xlPatternDown = 0xffffefe7,
        xlPatternGray16 = 17,
        xlPatternGray25 = 0xffffefe4,
        xlPatternGray50 = 0xffffefe3,
        xlPatternGray75 = 0xffffefe2,
        xlPatternGray8 = 18,
        xlPatternGrid = 15,
        xlPatternHorizontal = 0xffffefe0,
        xlPatternLightDown = 13,
        xlPatternLightHorizontal = 11,
        xlPatternLightUp = 14,
        xlPatternLightVertical = 12,
        xlPatternNone = 0xffffefd2,
        xlPatternSemiGray75 = 10,
        xlPatternSolid = 1,
        xlPatternUp = 0xffffefbe,
        xlPatternVertical = 0xffffefba,
        xlPatternLinearGradient = 4000,
        xlPatternRectangularGradient = 4001
    } XlPattern;

    typedef enum {
        xlSplitByPosition = 1,
        xlSplitByPercentValue = 3,
        xlSplitByCustomSplit = 4,
        xlSplitByValue = 2
    } XlChartSplitType;

    typedef enum {
        xlHundreds = 0xfffffffe,
        xlThousands = 0xfffffffd,
        xlTenThousands = 0xfffffffc,
        xlHundredThousands = 0xfffffffb,
        xlMillions = 0xfffffffa,
        xlTenMillions = 0xfffffff9,
        xlHundredMillions = 0xfffffff8,
        xlThousandMillions = 0xfffffff7,
        xlMillionMillions = 0xfffffff6
    } XlDisplayUnit;

    typedef enum {
        xlLabelPositionCenter = 0xffffeff4,
        xlLabelPositionAbove = 0,
        xlLabelPositionBelow = 1,
        xlLabelPositionLeft = 0xffffefdd,
        xlLabelPositionRight = 0xffffefc8,
        xlLabelPositionOutsideEnd = 2,
        xlLabelPositionInsideEnd = 3,
        xlLabelPositionInsideBase = 4,
        xlLabelPositionBestFit = 5,
        xlLabelPositionMixed = 6,
        xlLabelPositionCustom = 7
    } XlDataLabelPosition;

    typedef enum {
        xlDays = 0,
        xlMonths = 1,
        xlYears = 2
    } XlTimeUnit;

    typedef enum {
        xlCategoryScale = 2,
        xlTimeScale = 3,
        xlAutomaticScale = 0xffffeff7
    } XlCategoryType;

    typedef enum {
        xlBox = 0,
        xlPyramidToPoint = 1,
        xlPyramidToMax = 2,
        xlCylinder = 3,
        xlConeToPoint = 4,
        xlConeToMax = 5
    } XlBarShape;

    typedef enum {
        xlColumnClustered = 51,
        xlColumnStacked = 52,
        xlColumnStacked100 = 53,
        xl3DColumnClustered = 54,
        xl3DColumnStacked = 55,
        xl3DColumnStacked100 = 56,
        xlBarClustered = 57,
        xlBarStacked = 58,
        xlBarStacked100 = 59,
        xl3DBarClustered = 60,
        xl3DBarStacked = 61,
        xl3DBarStacked100 = 62,
        xlLineStacked = 63,
        xlLineStacked100 = 64,
        xlLineMarkers = 65,
        xlLineMarkersStacked = 66,
        xlLineMarkersStacked100 = 67,
        xlPieOfPie = 68,
        xlPieExploded = 69,
        xl3DPieExploded = 70,
        xlBarOfPie = 71,
        xlXYScatterSmooth = 72,
        xlXYScatterSmoothNoMarkers = 73,
        xlXYScatterLines = 74,
        xlXYScatterLinesNoMarkers = 75,
        xlAreaStacked = 76,
        xlAreaStacked100 = 77,
        xl3DAreaStacked = 78,
        xl3DAreaStacked100 = 79,
        xlDoughnutExploded = 80,
        xlRadarMarkers = 81,
        xlRadarFilled = 82,
        xlSurface = 83,
        xlSurfaceWireframe = 84,
        xlSurfaceTopView = 85,
        xlSurfaceTopViewWireframe = 86,
        xlBubble = 15,
        xlBubble3DEffect = 87,
        xlStockHLC = 88,
        xlStockOHLC = 89,
        xlStockVHLC = 90,
        xlStockVOHLC = 91,
        xlCylinderColClustered = 92,
        xlCylinderColStacked = 93,
        xlCylinderColStacked100 = 94,
        xlCylinderBarClustered = 95,
        xlCylinderBarStacked = 96,
        xlCylinderBarStacked100 = 97,
        xlCylinderCol = 98,
        xlConeColClustered = 99,
        xlConeColStacked = 100,
        xlConeColStacked100 = 101,
        xlConeBarClustered = 102,
        xlConeBarStacked = 103,
        xlConeBarStacked100 = 104,
        xlConeCol = 105,
        xlPyramidColClustered = 106,
        xlPyramidColStacked = 107,
        xlPyramidColStacked100 = 108,
        xlPyramidBarClustered = 109,
        xlPyramidBarStacked = 110,
        xlPyramidBarStacked100 = 111,
        xlPyramidCol = 112,
        xl3DColumn = 0xffffeffc,
        xlLine = 4,
        xl3DLine = 0xffffeffb,
        xl3DPie = 0xffffeffa,
        xlPie = 5,
        xlXYScatter = 0xffffefb7,
        xl3DArea = 0xffffeffe,
        xlArea = 1,
        xlDoughnut = 0xffffefe8,
        xlRadar = 0xffffefc9
    } XlChartType;

    typedef enum {
        xlDataLabel = 0,
        xlChartArea = 2,
        xlSeries = 3,
        xlChartTitle = 4,
        xlWalls = 5,
        xlCorners = 6,
        xlDataTable = 7,
        xlTrendline = 8,
        xlErrorBars = 9,
        xlXErrorBars = 10,
        xlYErrorBars = 11,
        xlLegendEntry = 12,
        xlLegendKey = 13,
        xlShape = 14,
        xlMajorGridlines = 15,
        xlMinorGridlines = 16,
        xlAxisTitle = 17,
        xlUpBars = 18,
        xlPlotArea = 19,
        xlDownBars = 20,
        xlAxis = 21,
        xlSeriesLines = 22,
        xlFloor = 23,
        xlLegend = 24,
        xlHiLoLines = 25,
        xlDropLines = 26,
        xlRadarAxisLabels = 27,
        xlNothing = 28,
        xlLeaderLines = 29,
        xlDisplayUnitLabel = 30,
        xlPivotChartFieldButton = 31,
        xlPivotChartDropZone = 32
    } XlChartItem;

    typedef enum {
        xlSizeIsWidth = 2,
        xlSizeIsArea = 1
    } XlSizeRepresents;

    typedef enum {
        xlShiftDown = 0xffffefe7,
        xlShiftToRight = 0xffffefbf
    } XlInsertShiftDirection;

    typedef enum {
        xlShiftToLeft = 0xffffefc1,
        xlShiftUp = 0xffffefbe
    } XlDeleteShiftDirection;

    typedef enum {
        xlDown = 0xffffefe7,
        xlToLeft = 0xffffefc1,
        xlToRight = 0xffffefbf,
        xlUp = 0xffffefbe
    } XlDirection;

    typedef enum {
        xlAverage = 0xffffeff6,
        xlCount = 0xffffeff0,
        xlCountNums = 0xffffefef,
        xlMax = 0xffffefd8,
        xlMin = 0xffffefd5,
        xlProduct = 0xffffefcb,
        xlStDev = 0xffffefc5,
        xlStDevP = 0xffffefc4,
        xlSum = 0xffffefc3,
        xlVar = 0xffffefbc,
        xlVarP = 0xffffefbb,
        xlUnknown = 1000
    } XlConsolidationFunction;

    typedef enum {
        xlChart = 0xffffeff3,
        xlDialogSheet = 0xffffefec,
        xlExcel4IntlMacroSheet = 4,
        xlExcel4MacroSheet = 3,
        xlWorksheet = 0xffffefb9
    } XlSheetType;

    typedef enum {
        xlColumnHeader = 0xffffeff2,
        xlColumnItem = 5,
        xlDataHeader = 3,
        xlDataItem = 7,
        xlPageHeader = 2,
        xlPageItem = 6,
        xlRowHeader = 0xffffefc7,
        xlRowItem = 4,
        xlTableBody = 8
    } XlLocationInTable;

    typedef enum {
        xlFormulas = 0xffffefe5,
        xlComments = 0xffffefd0,
        xlValues = 0xffffefbd
    } XlFindLookIn;

    typedef enum {
        xlChartAsWindow = 5,
        xlChartInPlace = 4,
        xlClipboard = 3,
        xlInfo = 0xffffefdf,
        xlWorkbook = 1
    } XlWindowType;

    typedef enum {
        xlDate = 2,
        xlNumber = 0xffffefcf,
        xlText = 0xffffefc2
    } XlPivotFieldDataType;

    typedef enum {
        xlBitmap = 2,
        xlPicture = 0xffffefcd
    } XlCopyPictureFormat;

    typedef enum {
        xlScenario = 4,
        xlConsolidation = 3,
        xlDatabase = 1,
        xlExternal = 2,
        xlPivotTable = 0xffffefcc
    } XlPivotTableSourceType;

    typedef enum {
        xlA1 = 1,
        xlR1C1 = 0xffffefca
    } XlReferenceStyle;

    typedef enum {
        xlMicrosoftAccess = 4,
        xlMicrosoftFoxPro = 5,
        xlMicrosoftMail = 3,
        xlMicrosoftPowerPoint = 2,
        xlMicrosoftProject = 6,
        xlMicrosoftSchedulePlus = 7,
        xlMicrosoftWord = 1
    } XlMSApplication;

    typedef enum {
        xlNoButton = 0,
        xlPrimaryButton = 1,
        xlSecondaryButton = 2
    } XlMouseButton;

    typedef enum {
        xlCopy = 1,
        xlCut = 2
    } XlCutCopyMode;

    typedef enum {
        xlFillWithAll = 0xffffeff8,
        xlFillWithContents = 2,
        xlFillWithFormats = 0xffffefe6
    } XlFillWith;

    typedef enum {
        xlFilterCopy = 2,
        xlFilterInPlace = 1
    } XlFilterAction;

    typedef enum {
        xlDownThenOver = 1,
        xlOverThenDown = 2
    } XlOrder;

    typedef enum {
        xlLinkTypeExcelLinks = 1,
        xlLinkTypeOLELinks = 2
    } XlLinkType;

    typedef enum {
        xlColumnThenRow = 2,
        xlRowThenColumn = 1
    } XlApplyNamesOrder;

    typedef enum {
        xlDisabled = 0,
        xlErrorHandler = 2,
        xlInterrupt = 1
    } XlEnableCancelKey;

    typedef enum {
        xlPageBreakAutomatic = 0xffffeff7,
        xlPageBreakManual = 0xffffefd9,
        xlPageBreakNone = 0xffffefd2
    } XlPageBreak;

    typedef enum {
        xlOLEControl = 2,
        xlOLEEmbed = 1,
        xlOLELink = 0
    } XlOLEType;

    typedef enum {
        xlLandscape = 2,
        xlPortrait = 1
    } XlPageOrientation;

    typedef enum {
        xlEditionDate = 2,
        xlUpdateState = 1,
        xlLinkInfoStatus = 3
    } XlLinkInfo;

    typedef enum {
        xlCommandUnderlinesAutomatic = 0xffffeff7,
        xlCommandUnderlinesOff = 0xffffefce,
        xlCommandUnderlinesOn = 1
    } XlCommandUnderlines;

    typedef enum {
        xlVerbOpen = 2,
        xlVerbPrimary = 1
    } XlOLEVerb;

    typedef enum {
        xlCalculationAutomatic = 0xffffeff7,
        xlCalculationManual = 0xffffefd9,
        xlCalculationSemiautomatic = 2
    } XlCalculation;

    typedef enum {
        xlReadOnly = 3,
        xlReadWrite = 2
    } XlFileAccess;

    typedef enum {
        xlPublisher = 1,
        xlSubscriber = 2
    } XlEditionType;

    typedef enum {
        xlFitToPage = 2,
        xlFullPage = 3,
        xlScreenSize = 1
    } XlObjectSize;

    typedef enum {
        xlPart = 2,
        xlWhole = 1
    } XlLookAt;

    typedef enum {
        xlMAPI = 1,
        xlNoMailSystem = 0,
        xlPowerTalk = 2
    } XlMailSystem;

    typedef enum {
        xlLinkInfoOLELinks = 2,
        xlLinkInfoPublishers = 5,
        xlLinkInfoSubscribers = 6
    } XlLinkInfoType;

    typedef enum {
        xlErrDiv0 = 2007,
        xlErrNA = 2042,
        xlErrName = 2029,
        xlErrNull = 2000,
        xlErrNum = 2036,
        xlErrRef = 2023,
        xlErrValue = 2015
    } XlCVError;

    typedef enum {
        xlBIFF = 2,
        xlPICT = 1,
        xlRTF = 4,
        xlVALU = 8
    } XlEditionFormat;

    typedef enum {
        xlExcelLinks = 1,
        xlOLELinks = 2,
        xlPublishers = 5,
        xlSubscribers = 6
    } XlLink;

    typedef enum {
        xlCellTypeBlanks = 4,
        xlCellTypeConstants = 2,
        xlCellTypeFormulas = 0xffffefe5,
        xlCellTypeLastCell = 11,
        xlCellTypeComments = 0xffffefd0,
        xlCellTypeVisible = 12,
        xlCellTypeAllFormatConditions = 0xffffefb4,
        xlCellTypeSameFormatConditions = 0xffffefb3,
        xlCellTypeAllValidation = 0xffffefb2,
        xlCellTypeSameValidation = 0xffffefb1
    } XlCellType;

    typedef enum {
        xlArrangeStyleCascade = 7,
        xlArrangeStyleHorizontal = 0xffffefe0,
        xlArrangeStyleTiled = 1,
        xlArrangeStyleVertical = 0xffffefba
    } XlArrangeStyle;

    typedef enum {
        xlIBeam = 3,
        xlDefault = 0xffffefd1,
        xlNorthwestArrow = 1,
        xlWait = 2
    } XlMousePointer;

    typedef enum {
        xlAutomaticUpdate = 4,
        xlCancel = 1,
        xlChangeAttributes = 6,
        xlManualUpdate = 5,
        xlOpenSource = 3,
        xlSelect = 3,
        xlSendPublisher = 2,
        xlUpdateSubscriber = 2
    } XlEditionOptionsOption;

    typedef enum {
        xlFillCopy = 1,
        xlFillDays = 5,
        xlFillDefault = 0,
        xlFillFormats = 3,
        xlFillMonths = 7,
        xlFillSeries = 2,
        xlFillValues = 4,
        xlFillWeekdays = 6,
        xlFillYears = 8,
        xlGrowthTrend = 10,
        xlLinearTrend = 9
    } XlAutoFillType;

    typedef enum {
        xlAnd = 1,
        xlBottom10Items = 4,
        xlBottom10Percent = 6,
        xlOr = 2,
        xlTop10Items = 3,
        xlTop10Percent = 5,
        xlFilterValues = 7,
        xlFilterCellColor = 8,
        xlFilterFontColor = 9,
        xlFilterIcon = 10,
        xlFilterDynamic = 11,
        xlFilterNoFill = 12,
        xlFilterAutomaticFontColor = 13,
        xlFilterNoIcon = 14
    } XlAutoFilterOperator;

    typedef enum {
        xlClipboardFormatBIFF12 = 63,
        xlClipboardFormatBIFF = 8,
        xlClipboardFormatBIFF2 = 18,
        xlClipboardFormatBIFF3 = 20,
        xlClipboardFormatBIFF4 = 30,
        xlClipboardFormatBinary = 15,
        xlClipboardFormatBitmap = 9,
        xlClipboardFormatCGM = 13,
        xlClipboardFormatCSV = 5,
        xlClipboardFormatDIF = 4,
        xlClipboardFormatDspText = 12,
        xlClipboardFormatEmbeddedObject = 21,
        xlClipboardFormatEmbedSource = 22,
        xlClipboardFormatLink = 11,
        xlClipboardFormatLinkSource = 23,
        xlClipboardFormatLinkSourceDesc = 32,
        xlClipboardFormatMovie = 24,
        xlClipboardFormatNative = 14,
        xlClipboardFormatObjectDesc = 31,
        xlClipboardFormatObjectLink = 19,
        xlClipboardFormatOwnerLink = 17,
        xlClipboardFormatPICT = 2,
        xlClipboardFormatPrintPICT = 3,
        xlClipboardFormatRTF = 7,
        xlClipboardFormatScreenPICT = 29,
        xlClipboardFormatStandardFont = 28,
        xlClipboardFormatStandardScale = 27,
        xlClipboardFormatSYLK = 6,
        xlClipboardFormatTable = 16,
        xlClipboardFormatText = 0,
        xlClipboardFormatToolFace = 25,
        xlClipboardFormatToolFacePICT = 26,
        xlClipboardFormatVALU = 1,
        xlClipboardFormatWK1 = 10
    } XlClipboardFormat;

    typedef enum {
        xlAddIn = 18,
        xlCSV = 6,
        xlCSVMac = 22,
        xlCSVMSDOS = 24,
        xlCSVWindows = 23,
        xlDBF2 = 7,
        xlDBF3 = 8,
        xlDBF4 = 11,
        xlDIF = 9,
        xlExcel2 = 16,
        xlExcel2FarEast = 27,
        xlExcel3 = 29,
        xlExcel4 = 33,
        xlExcel5 = 39,
        xlExcel7 = 39,
        xlExcel9795 = 43,
        xlExcel4Workbook = 35,
        xlIntlAddIn = 26,
        xlIntlMacro = 25,
        xlWorkbookNormal = 0xffffefd1,
        xlSYLK = 2,
        xlTemplate = 17,
        xlCurrentPlatformText = 0xffffefc2,
        xlTextMac = 19,
        xlTextMSDOS = 21,
        xlTextPrinter = 36,
        xlTextWindows = 20,
        xlWJ2WD1 = 14,
        xlWK1 = 5,
        xlWK1ALL = 31,
        xlWK1FMT = 30,
        xlWK3 = 15,
        xlWK4 = 38,
        xlWK3FM3 = 32,
        xlWKS = 4,
        xlWorks2FarEast = 28,
        xlWQ1 = 34,
        xlWJ3 = 40,
        xlWJ3FJ3 = 41,
        xlUnicodeText = 42,
        xlHtml = 44,
        xlWebArchive = 45,
        xlXMLSpreadsheet = 46,
        xlExcel12 = 50,
        xlOpenXMLWorkbook = 51,
        xlOpenXMLWorkbookMacroEnabled = 52,
        xlOpenXMLTemplateMacroEnabled = 53,
        xlTemplate8 = 17,
        xlOpenXMLTemplate = 54,
        xlAddIn8 = 18,
        xlOpenXMLAddIn = 55,
        xlExcel8 = 56,
        xlOpenDocumentSpreadsheet = 60,
        xlWorkbookDefault = 51
    } XlFileFormat;

    typedef enum {
        xl24HourClock = 33,
        xl4DigitYears = 43,
        xlAlternateArraySeparator = 16,
        xlColumnSeparator = 14,
        xlCountryCode = 1,
        xlCountrySetting = 2,
        xlCurrencyBefore = 37,
        xlCurrencyCode = 25,
        xlCurrencyDigits = 27,
        xlCurrencyLeadingZeros = 40,
        xlCurrencyMinusSign = 38,
        xlCurrencyNegative = 28,
        xlCurrencySpaceBefore = 36,
        xlCurrencyTrailingZeros = 39,
        xlDateOrder = 32,
        xlDateSeparator = 17,
        xlDayCode = 21,
        xlDayLeadingZero = 42,
        xlDecimalSeparator = 3,
        xlGeneralFormatName = 26,
        xlHourCode = 22,
        xlLeftBrace = 12,
        xlLeftBracket = 10,
        xlListSeparator = 5,
        xlLowerCaseColumnLetter = 9,
        xlLowerCaseRowLetter = 8,
        xlMDY = 44,
        xlMetric = 35,
        xlMinuteCode = 23,
        xlMonthCode = 20,
        xlMonthLeadingZero = 41,
        xlMonthNameChars = 30,
        xlNoncurrencyDigits = 29,
        xlNonEnglishFunctions = 34,
        xlRightBrace = 13,
        xlRightBracket = 11,
        xlRowSeparator = 15,
        xlSecondCode = 24,
        xlThousandsSeparator = 4,
        xlTimeLeadingZero = 45,
        xlTimeSeparator = 18,
        xlUpperCaseColumnLetter = 7,
        xlUpperCaseRowLetter = 6,
        xlWeekdayNameChars = 31,
        xlYearCode = 19
    } XlApplicationInternational;

    typedef enum {
        xlPageBreakFull = 1,
        xlPageBreakPartial = 2
    } XlPageBreakExtent;

    typedef enum {
        xlOverwriteCells = 0,
        xlInsertDeleteCells = 1,
        xlInsertEntireRows = 2
    } XlCellInsertionMode;

    typedef enum {
        xlNoLabels = 0xffffefd2,
        xlRowLabels = 1,
        xlColumnLabels = 2,
        xlMixedLabels = 3
    } XlFormulaLabel;

    typedef enum {
        xlSinceMyLastSave = 1,
        xlAllChanges = 2,
        xlNotYetReviewed = 3
    } XlHighlightChangesTime;

    typedef enum {
        xlNoIndicator = 0,
        xlCommentIndicatorOnly = 0xffffffff,
        xlCommentAndIndicator = 1
    } XlCommentDisplayMode;

    typedef enum {
        xlCellValue = 1,
        xlExpression = 2,
        xlColorScale = 3,
        xlDatabar = 4,
        xlTop10 = 5,
        xlIconSets = 6,
        xlUniqueValues = 8,
        xlTextString = 9,
        xlBlanksCondition = 10,
        xlTimePeriod = 11,
        xlAboveAverageCondition = 12,
        xlNoBlanksCondition = 13,
        xlErrorsCondition = 16,
        xlNoErrorsCondition = 17
    } XlFormatConditionType;

    typedef enum {
        xlBetween = 1,
        xlNotBetween = 2,
        xlEqual = 3,
        xlNotEqual = 4,
        xlGreater = 5,
        xlLess = 6,
        xlGreaterEqual = 7,
        xlLessEqual = 8
    } XlFormatConditionOperator;

    typedef enum {
        xlNoRestrictions = 0,
        xlUnlockedCells = 1,
        xlNoSelection = 0xffffefd2
    } XlEnableSelection;

    typedef enum {
        xlValidateInputOnly = 0,
        xlValidateWholeNumber = 1,
        xlValidateDecimal = 2,
        xlValidateList = 3,
        xlValidateDate = 4,
        xlValidateTime = 5,
        xlValidateTextLength = 6,
        xlValidateCustom = 7
    } XlDVType;

    typedef enum {
        xlIMEModeNoControl = 0,
        xlIMEModeOn = 1,
        xlIMEModeOff = 2,
        xlIMEModeDisable = 3,
        xlIMEModeHiragana = 4,
        xlIMEModeKatakana = 5,
        xlIMEModeKatakanaHalf = 6,
        xlIMEModeAlphaFull = 7,
        xlIMEModeAlpha = 8,
        xlIMEModeHangulFull = 9,
        xlIMEModeHangul = 10
    } XlIMEMode;

    typedef enum {
        xlValidAlertStop = 1,
        xlValidAlertWarning = 2,
        xlValidAlertInformation = 3
    } XlDVAlertStyle;

    typedef enum {
        xlLocationAsNewSheet = 1,
        xlLocationAsObject = 2,
        xlLocationAutomatic = 3
    } XlChartLocation;

    typedef enum {
        xlPaper10x14 = 16,
        xlPaper11x17 = 17,
        xlPaperA3 = 8,
        xlPaperA4 = 9,
        xlPaperA4Small = 10,
        xlPaperA5 = 11,
        xlPaperB4 = 12,
        xlPaperB5 = 13,
        xlPaperCsheet = 24,
        xlPaperDsheet = 25,
        xlPaperEnvelope10 = 20,
        xlPaperEnvelope11 = 21,
        xlPaperEnvelope12 = 22,
        xlPaperEnvelope14 = 23,
        xlPaperEnvelope9 = 19,
        xlPaperEnvelopeB4 = 33,
        xlPaperEnvelopeB5 = 34,
        xlPaperEnvelopeB6 = 35,
        xlPaperEnvelopeC3 = 29,
        xlPaperEnvelopeC4 = 30,
        xlPaperEnvelopeC5 = 28,
        xlPaperEnvelopeC6 = 31,
        xlPaperEnvelopeC65 = 32,
        xlPaperEnvelopeDL = 27,
        xlPaperEnvelopeItaly = 36,
        xlPaperEnvelopeMonarch = 37,
        xlPaperEnvelopePersonal = 38,
        xlPaperEsheet = 26,
        xlPaperExecutive = 7,
        xlPaperFanfoldLegalGerman = 41,
        xlPaperFanfoldStdGerman = 40,
        xlPaperFanfoldUS = 39,
        xlPaperFolio = 14,
        xlPaperLedger = 4,
        xlPaperLegal = 5,
        xlPaperLetter = 1,
        xlPaperLetterSmall = 2,
        xlPaperNote = 18,
        xlPaperQuarto = 15,
        xlPaperStatement = 6,
        xlPaperTabloid = 3,
        xlPaperUser = 256
    } XlPaperSize;

    typedef enum {
        xlPasteSpecialOperationAdd = 2,
        xlPasteSpecialOperationDivide = 5,
        xlPasteSpecialOperationMultiply = 4,
        xlPasteSpecialOperationNone = 0xffffefd2,
        xlPasteSpecialOperationSubtract = 3
    } XlPasteSpecialOperation;

    typedef enum {
        xlPasteAll = 0xffffeff8,
        xlPasteAllUsingSourceTheme = 13,
        xlPasteAllExceptBorders = 7,
        xlPasteFormats = 0xffffefe6,
        xlPasteFormulas = 0xffffefe5,
        xlPasteComments = 0xffffefd0,
        xlPasteValues = 0xffffefbd,
        xlPasteColumnWidths = 8,
        xlPasteValidation = 6,
        xlPasteFormulasAndNumberFormats = 11,
        xlPasteValuesAndNumberFormats = 12
    } XlPasteType;

    typedef enum {
        xlKatakanaHalf = 0,
        xlKatakana = 1,
        xlHiragana = 2,
        xlNoConversion = 3
    } XlPhoneticCharacterType;

    typedef enum {
        xlPhoneticAlignNoControl = 0,
        xlPhoneticAlignLeft = 1,
        xlPhoneticAlignCenter = 2,
        xlPhoneticAlignDistributed = 3
    } XlPhoneticAlignment;

    typedef enum {
        xlPrinter = 2,
        xlScreen = 1
    } XlPictureAppearance;

    typedef enum {
        xlColumnField = 2,
        xlDataField = 4,
        xlHidden = 0,
        xlPageField = 3,
        xlRowField = 1
    } XlPivotFieldOrientation;

    typedef enum {
        xlDifferenceFrom = 2,
        xlIndex = 9,
        xlNoAdditionalCalculation = 0xffffefd1,
        xlPercentDifferenceFrom = 4,
        xlPercentOf = 3,
        xlPercentOfColumn = 7,
        xlPercentOfRow = 6,
        xlPercentOfTotal = 8,
        xlRunningTotal = 5
    } XlPivotFieldCalculation;

    typedef enum {
        xlFreeFloating = 3,
        xlMove = 2,
        xlMoveAndSize = 1
    } XlPlacement;

    typedef enum {
        xlMacintosh = 1,
        xlMSDOS = 3,
        xlWindows = 2
    } XlPlatform;

    typedef enum {
        xlPrintSheetEnd = 1,
        xlPrintInPlace = 16,
        xlPrintNoComments = 0xffffefd2
    } XlPrintLocation;

    typedef enum {
        xlPriorityHigh = 0xffffefe1,
        xlPriorityLow = 0xffffefda,
        xlPriorityNormal = 0xffffefd1
    } XlPriority;

    typedef enum {
        xlLabelOnly = 1,
        xlDataAndLabel = 0,
        xlDataOnly = 2,
        xlOrigin = 3,
        xlButton = 15,
        xlBlanks = 4,
        xlFirstRow = 256
    } XlPTSelectionMode;

    typedef enum {
        xlRangeAutoFormat3DEffects1 = 13,
        xlRangeAutoFormat3DEffects2 = 14,
        xlRangeAutoFormatAccounting1 = 4,
        xlRangeAutoFormatAccounting2 = 5,
        xlRangeAutoFormatAccounting3 = 6,
        xlRangeAutoFormatAccounting4 = 17,
        xlRangeAutoFormatClassic1 = 1,
        xlRangeAutoFormatClassic2 = 2,
        xlRangeAutoFormatClassic3 = 3,
        xlRangeAutoFormatColor1 = 7,
        xlRangeAutoFormatColor2 = 8,
        xlRangeAutoFormatColor3 = 9,
        xlRangeAutoFormatList1 = 10,
        xlRangeAutoFormatList2 = 11,
        xlRangeAutoFormatList3 = 12,
        xlRangeAutoFormatLocalFormat1 = 15,
        xlRangeAutoFormatLocalFormat2 = 16,
        xlRangeAutoFormatLocalFormat3 = 19,
        xlRangeAutoFormatLocalFormat4 = 20,
        xlRangeAutoFormatReport1 = 21,
        xlRangeAutoFormatReport2 = 22,
        xlRangeAutoFormatReport3 = 23,
        xlRangeAutoFormatReport4 = 24,
        xlRangeAutoFormatReport5 = 25,
        xlRangeAutoFormatReport6 = 26,
        xlRangeAutoFormatReport7 = 27,
        xlRangeAutoFormatReport8 = 28,
        xlRangeAutoFormatReport9 = 29,
        xlRangeAutoFormatReport10 = 30,
        xlRangeAutoFormatClassicPivotTable = 31,
        xlRangeAutoFormatTable1 = 32,
        xlRangeAutoFormatTable2 = 33,
        xlRangeAutoFormatTable3 = 34,
        xlRangeAutoFormatTable4 = 35,
        xlRangeAutoFormatTable5 = 36,
        xlRangeAutoFormatTable6 = 37,
        xlRangeAutoFormatTable7 = 38,
        xlRangeAutoFormatTable8 = 39,
        xlRangeAutoFormatTable9 = 40,
        xlRangeAutoFormatTable10 = 41,
        xlRangeAutoFormatPTNone = 42,
        xlRangeAutoFormatNone = 0xffffefd2,
        xlRangeAutoFormatSimple = 0xffffefc6
    } XlRangeAutoFormat;

    typedef enum {
        xlAbsolute = 1,
        xlAbsRowRelColumn = 2,
        xlRelative = 4,
        xlRelRowAbsColumn = 3
    } XlReferenceType;

    typedef enum {
        xlTabular = 0,
        xlOutline = 1
    } XlLayoutFormType;

    typedef enum {
        xlAllAtOnce = 2,
        xlOneAfterAnother = 1
    } XlRoutingSlipDelivery;

    typedef enum {
        xlNotYetRouted = 0,
        xlRoutingComplete = 2,
        xlRoutingInProgress = 1
    } XlRoutingSlipStatus;

    typedef enum {
        xlAutoActivate = 3,
        xlAutoClose = 2,
        xlAutoDeactivate = 4,
        xlAutoOpen = 1
    } XlRunAutoMacro;

    typedef enum {
        xlDoNotSaveChanges = 2,
        xlSaveChanges = 1
    } XlSaveAction;

    typedef enum {
        xlExclusive = 3,
        xlNoChange = 1,
        xlShared = 2
    } XlSaveAsAccessMode;

    typedef enum {
        xlLocalSessionChanges = 2,
        xlOtherSessionChanges = 3,
        xlUserResolution = 1
    } XlSaveConflictResolution;

    typedef enum {
        xlNext = 1,
        xlPrevious = 2
    } XlSearchDirection;

    typedef enum {
        xlByColumns = 2,
        xlByRows = 1
    } XlSearchOrder;

    typedef enum {
        xlSheetVisible = 0xffffffff,
        xlSheetHidden = 0,
        xlSheetVeryHidden = 2
    } XlSheetVisibility;

    typedef enum {
        xlPinYin = 1,
        xlStroke = 2
    } XlSortMethod;

    typedef enum {
        xlCodePage = 2,
        xlSyllabary = 1
    } XlSortMethodOld;

    typedef enum {
        xlAscending = 1,
        xlDescending = 2
    } XlSortOrder;

    typedef enum {
        xlSortRows = 2,
        xlSortColumns = 1
    } XlSortOrientation;

    typedef enum {
        xlSortLabels = 2,
        xlSortValues = 1
    } XlSortType;

    typedef enum {
        xlErrors = 16,
        xlLogical = 4,
        xlNumbers = 1,
        xlTextValues = 2
    } XlSpecialCellsValue;

    typedef enum {
        xlSubscribeToPicture = 0xffffefcd,
        xlSubscribeToText = 0xffffefc2
    } XlSubscribeToFormat;

    typedef enum {
        xlSummaryAbove = 0,
        xlSummaryBelow = 1
    } XlSummaryRow;

    typedef enum {
        xlSummaryOnLeft = 0xffffefdd,
        xlSummaryOnRight = 0xffffefc8
    } XlSummaryColumn;

    typedef enum {
        xlSummaryPivotTable = 0xffffefcc,
        xlStandardSummary = 1
    } XlSummaryReportType;

    typedef enum {
        xlTabPositionFirst = 0,
        xlTabPositionLast = 1
    } XlTabPosition;

    typedef enum {
        xlDelimited = 1,
        xlFixedWidth = 2
    } XlTextParsingType;

    typedef enum {
        xlTextQualifierDoubleQuote = 1,
        xlTextQualifierNone = 0xffffefd2,
        xlTextQualifierSingleQuote = 2
    } XlTextQualifier;

    typedef enum {
        xlWBATChart = 0xffffeff3,
        xlWBATExcel4IntlMacroSheet = 4,
        xlWBATExcel4MacroSheet = 3,
        xlWBATWorksheet = 0xffffefb9
    } XlWBATemplate;

    typedef enum {
        xlNormalView = 1,
        xlPageBreakPreview = 2,
        xlPageLayoutView = 3
    } XlWindowView;

    typedef enum {
        xlCommand = 2,
        xlFunction = 1,
        xlNotXLM = 3
    } XlXLMMacroType;

    typedef enum {
        xlGuess = 0,
        xlNo = 2,
        xlYes = 1
    } XlYesNoGuess;

    typedef enum {
        xlInsideHorizontal = 12,
        xlInsideVertical = 11,
        xlDiagonalDown = 5,
        xlDiagonalUp = 6,
        xlEdgeBottom = 9,
        xlEdgeLeft = 7,
        xlEdgeRight = 10,
        xlEdgeTop = 8
    } XlBordersIndex;

    typedef enum {
        xlNoButtonChanges = 1,
        xlNoChanges = 4,
        xlNoDockingChanges = 3,
        xlToolbarProtectionNone = 0xffffefd1,
        xlNoShapeChanges = 2
    } XlToolbarProtection;

    typedef enum {
        xlDialogOpen = 1,
        xlDialogOpenLinks = 2,
        xlDialogSaveAs = 5,
        xlDialogFileDelete = 6,
        xlDialogPageSetup = 7,
        xlDialogPrint = 8,
        xlDialogPrinterSetup = 9,
        xlDialogArrangeAll = 12,
        xlDialogWindowSize = 13,
        xlDialogWindowMove = 14,
        xlDialogRun = 17,
        xlDialogSetPrintTitles = 23,
        xlDialogFont = 26,
        xlDialogDisplay = 27,
        xlDialogProtectDocument = 28,
        xlDialogCalculation = 32,
        xlDialogExtract = 35,
        xlDialogDataDelete = 36,
        xlDialogSort = 39,
        xlDialogDataSeries = 40,
        xlDialogTable = 41,
        xlDialogFormatNumber = 42,
        xlDialogAlignment = 43,
        xlDialogStyle = 44,
        xlDialogBorder = 45,
        xlDialogCellProtection = 46,
        xlDialogColumnWidth = 47,
        xlDialogClear = 52,
        xlDialogPasteSpecial = 53,
        xlDialogEditDelete = 54,
        xlDialogInsert = 55,
        xlDialogPasteNames = 58,
        xlDialogDefineName = 61,
        xlDialogCreateNames = 62,
        xlDialogFormulaGoto = 63,
        xlDialogFormulaFind = 64,
        xlDialogGalleryArea = 67,
        xlDialogGalleryBar = 68,
        xlDialogGalleryColumn = 69,
        xlDialogGalleryLine = 70,
        xlDialogGalleryPie = 71,
        xlDialogGalleryScatter = 72,
        xlDialogCombination = 73,
        xlDialogGridlines = 76,
        xlDialogAxes = 78,
        xlDialogAttachText = 80,
        xlDialogPatterns = 84,
        xlDialogMainChart = 85,
        xlDialogOverlay = 86,
        xlDialogScale = 87,
        xlDialogFormatLegend = 88,
        xlDialogFormatText = 89,
        xlDialogParse = 91,
        xlDialogUnhide = 94,
        xlDialogWorkspace = 95,
        xlDialogActivate = 103,
        xlDialogCopyPicture = 108,
        xlDialogDeleteName = 110,
        xlDialogDeleteFormat = 111,
        xlDialogNew = 119,
        xlDialogRowHeight = 127,
        xlDialogFormatMove = 128,
        xlDialogFormatSize = 129,
        xlDialogFormulaReplace = 130,
        xlDialogSelectSpecial = 132,
        xlDialogApplyNames = 133,
        xlDialogReplaceFont = 134,
        xlDialogSplit = 137,
        xlDialogOutline = 142,
        xlDialogSaveWorkbook = 145,
        xlDialogCopyChart = 147,
        xlDialogFormatFont = 150,
        xlDialogNote = 154,
        xlDialogSetUpdateStatus = 159,
        xlDialogColorPalette = 161,
        xlDialogChangeLink = 166,
        xlDialogAppMove = 170,
        xlDialogAppSize = 171,
        xlDialogMainChartType = 185,
        xlDialogOverlayChartType = 186,
        xlDialogOpenMail = 188,
        xlDialogSendMail = 189,
        xlDialogStandardFont = 190,
        xlDialogConsolidate = 191,
        xlDialogSortSpecial = 192,
        xlDialogGallery3dArea = 193,
        xlDialogGallery3dColumn = 194,
        xlDialogGallery3dLine = 195,
        xlDialogGallery3dPie = 196,
        xlDialogView3d = 197,
        xlDialogGoalSeek = 198,
        xlDialogWorkgroup = 199,
        xlDialogFillGroup = 200,
        xlDialogUpdateLink = 201,
        xlDialogPromote = 202,
        xlDialogDemote = 203,
        xlDialogShowDetail = 204,
        xlDialogObjectProperties = 207,
        xlDialogSaveNewObject = 208,
        xlDialogApplyStyle = 212,
        xlDialogAssignToObject = 213,
        xlDialogObjectProtection = 214,
        xlDialogCreatePublisher = 217,
        xlDialogSubscribeTo = 218,
        xlDialogShowToolbar = 220,
        xlDialogPrintPreview = 222,
        xlDialogEditColor = 223,
        xlDialogFormatMain = 225,
        xlDialogFormatOverlay = 226,
        xlDialogEditSeries = 228,
        xlDialogDefineStyle = 229,
        xlDialogGalleryRadar = 249,
        xlDialogEditionOptions = 251,
        xlDialogZoom = 256,
        xlDialogInsertObject = 259,
        xlDialogSize = 261,
        xlDialogMove = 262,
        xlDialogFormatAuto = 269,
        xlDialogGallery3dBar = 272,
        xlDialogGallery3dSurface = 273,
        xlDialogCustomizeToolbar = 276,
        xlDialogWorkbookAdd = 281,
        xlDialogWorkbookMove = 282,
        xlDialogWorkbookCopy = 283,
        xlDialogWorkbookOptions = 284,
        xlDialogSaveWorkspace = 285,
        xlDialogChartWizard = 288,
        xlDialogAssignToTool = 293,
        xlDialogPlacement = 300,
        xlDialogFillWorkgroup = 301,
        xlDialogWorkbookNew = 302,
        xlDialogScenarioCells = 305,
        xlDialogScenarioAdd = 307,
        xlDialogScenarioEdit = 308,
        xlDialogScenarioSummary = 311,
        xlDialogPivotTableWizard = 312,
        xlDialogPivotFieldProperties = 313,
        xlDialogOptionsCalculation = 318,
        xlDialogOptionsEdit = 319,
        xlDialogOptionsView = 320,
        xlDialogAddinManager = 321,
        xlDialogMenuEditor = 322,
        xlDialogAttachToolbars = 323,
        xlDialogOptionsChart = 325,
        xlDialogVbaInsertFile = 328,
        xlDialogVbaProcedureDefinition = 330,
        xlDialogRoutingSlip = 336,
        xlDialogMailLogon = 339,
        xlDialogInsertPicture = 342,
        xlDialogGalleryDoughnut = 344,
        xlDialogChartTrend = 350,
        xlDialogWorkbookInsert = 354,
        xlDialogOptionsTransition = 355,
        xlDialogOptionsGeneral = 356,
        xlDialogFilterAdvanced = 370,
        xlDialogMailNextLetter = 378,
        xlDialogDataLabel = 379,
        xlDialogInsertTitle = 380,
        xlDialogFontProperties = 381,
        xlDialogMacroOptions = 382,
        xlDialogWorkbookUnhide = 384,
        xlDialogWorkbookName = 386,
        xlDialogGalleryCustom = 388,
        xlDialogAddChartAutoformat = 390,
        xlDialogChartAddData = 392,
        xlDialogTabOrder = 394,
        xlDialogSubtotalCreate = 398,
        xlDialogWorkbookTabSplit = 415,
        xlDialogWorkbookProtect = 417,
        xlDialogScrollbarProperties = 420,
        xlDialogPivotShowPages = 421,
        xlDialogTextToColumns = 422,
        xlDialogFormatCharttype = 423,
        xlDialogPivotFieldGroup = 433,
        xlDialogPivotFieldUngroup = 434,
        xlDialogCheckboxProperties = 435,
        xlDialogLabelProperties = 436,
        xlDialogListboxProperties = 437,
        xlDialogEditboxProperties = 438,
        xlDialogOpenText = 441,
        xlDialogPushbuttonProperties = 445,
        xlDialogFilter = 447,
        xlDialogFunctionWizard = 450,
        xlDialogSaveCopyAs = 456,
        xlDialogOptionsListsAdd = 458,
        xlDialogSeriesAxes = 460,
        xlDialogSeriesX = 461,
        xlDialogSeriesY = 462,
        xlDialogErrorbarX = 463,
        xlDialogErrorbarY = 464,
        xlDialogFormatChart = 465,
        xlDialogSeriesOrder = 466,
        xlDialogMailEditMailer = 470,
        xlDialogStandardWidth = 472,
        xlDialogScenarioMerge = 473,
        xlDialogProperties = 474,
        xlDialogSummaryInfo = 474,
        xlDialogFindFile = 475,
        xlDialogActiveCellFont = 476,
        xlDialogVbaMakeAddin = 478,
        xlDialogFileSharing = 481,
        xlDialogAutoCorrect = 485,
        xlDialogCustomViews = 493,
        xlDialogInsertNameLabel = 496,
        xlDialogSeriesShape = 504,
        xlDialogChartOptionsDataLabels = 505,
        xlDialogChartOptionsDataTable = 506,
        xlDialogSetBackgroundPicture = 509,
        xlDialogDataValidation = 525,
        xlDialogChartType = 526,
        xlDialogChartLocation = 527,
        _xlDialogPhonetic = 538,
        xlDialogChartSourceData = 540,
        _xlDialogChartSourceData = 541,
        xlDialogSeriesOptions = 557,
        xlDialogPivotTableOptions = 567,
        xlDialogPivotSolveOrder = 568,
        xlDialogPivotCalculatedField = 570,
        xlDialogPivotCalculatedItem = 572,
        xlDialogConditionalFormatting = 583,
        xlDialogInsertHyperlink = 596,
        xlDialogProtectSharing = 620,
        xlDialogOptionsME = 647,
        xlDialogPublishAsWebPage = 653,
        xlDialogPhonetic = 656,
        xlDialogNewWebQuery = 667,
        xlDialogImportTextFile = 666,
        xlDialogExternalDataProperties = 530,
        xlDialogWebOptionsGeneral = 683,
        xlDialogWebOptionsFiles = 684,
        xlDialogWebOptionsPictures = 685,
        xlDialogWebOptionsEncoding = 686,
        xlDialogWebOptionsFonts = 687,
        xlDialogPivotClientServerSet = 689,
        xlDialogPropertyFields = 754,
        xlDialogSearch = 731,
        xlDialogEvaluateFormula = 709,
        xlDialogDataLabelMultiple = 723,
        xlDialogChartOptionsDataLabelMultiple = 724,
        xlDialogErrorChecking = 732,
        xlDialogWebOptionsBrowsers = 773,
        xlDialogCreateList = 796,
        xlDialogPermission = 832,
        xlDialogMyPermission = 834,
        xlDialogDocumentInspector = 862,
        xlDialogNameManager = 977,
        xlDialogNewName = 978
    } XlBuiltInDialog;

    typedef enum {
        xlPrompt = 0,
        xlConstant = 1,
        xlRange = 2
    } XlParameterType;

    typedef enum {
        xlParamTypeUnknown = 0,
        xlParamTypeChar = 1,
        xlParamTypeNumeric = 2,
        xlParamTypeDecimal = 3,
        xlParamTypeInteger = 4,
        xlParamTypeSmallInt = 5,
        xlParamTypeFloat = 6,
        xlParamTypeReal = 7,
        xlParamTypeDouble = 8,
        xlParamTypeVarChar = 12,
        xlParamTypeDate = 9,
        xlParamTypeTime = 10,
        xlParamTypeTimestamp = 11,
        xlParamTypeLongVarChar = 0xffffffff,
        xlParamTypeBinary = 0xfffffffe,
        xlParamTypeVarBinary = 0xfffffffd,
        xlParamTypeLongVarBinary = 0xfffffffc,
        xlParamTypeBigInt = 0xfffffffb,
        xlParamTypeTinyInt = 0xfffffffa,
        xlParamTypeBit = 0xfffffff9,
        xlParamTypeWChar = 0xfffffff8
    } XlParameterDataType;

    typedef enum {
        xlButtonControl = 0,
        xlCheckBox = 1,
        xlDropDown = 2,
        xlEditBox = 3,
        xlGroupBox = 4,
        xlLabel = 5,
        xlListBox = 6,
        xlOptionButton = 7,
        xlScrollBar = 8,
        xlSpinner = 9
    } XlFormControl;

    typedef enum {
        xlSourceWorkbook = 0,
        xlSourceSheet = 1,
        xlSourcePrintArea = 2,
        xlSourceAutoFilter = 3,
        xlSourceRange = 4,
        xlSourceChart = 5,
        xlSourcePivotTable = 6,
        xlSourceQuery = 7
    } XlSourceType;

    typedef enum {
        xlHtmlStatic = 0,
        xlHtmlCalc = 1,
        xlHtmlList = 2,
        xlHtmlChart = 3
    } XlHtmlType;

    typedef enum {
        xlReport1 = 0,
        xlReport2 = 1,
        xlReport3 = 2,
        xlReport4 = 3,
        xlReport5 = 4,
        xlReport6 = 5,
        xlReport7 = 6,
        xlReport8 = 7,
        xlReport9 = 8,
        xlReport10 = 9,
        xlTable1 = 10,
        xlTable2 = 11,
        xlTable3 = 12,
        xlTable4 = 13,
        xlTable5 = 14,
        xlTable6 = 15,
        xlTable7 = 16,
        xlTable8 = 17,
        xlTable9 = 18,
        xlTable10 = 19,
        xlPTClassic = 20,
        xlPTNone = 21
    } XlPivotFormatType;

    typedef enum {
        xlCmdCube = 1,
        xlCmdSql = 2,
        xlCmdTable = 3,
        xlCmdDefault = 4,
        xlCmdList = 5
    } XlCmdType;

    typedef enum {
        xlGeneralFormat = 1,
        xlTextFormat = 2,
        xlMDYFormat = 3,
        xlDMYFormat = 4,
        xlYMDFormat = 5,
        xlMYDFormat = 6,
        xlDYMFormat = 7,
        xlYDMFormat = 8,
        xlSkipColumn = 9,
        xlEMDFormat = 10
    } XlColumnDataType;

    typedef enum {
        xlODBCQuery = 1,
        xlDAORecordset = 2,
        xlWebQuery = 4,
        xlOLEDBQuery = 5,
        xlTextImport = 6,
        xlADORecordset = 7
    } XlQueryType;

    typedef enum {
        xlEntirePage = 1,
        xlAllTables = 2,
        xlSpecifiedTables = 3
    } XlWebSelectionType;

    typedef enum {
        xlHierarchy = 1,
        xlMeasure = 2,
        xlSet = 3
    } XlCubeFieldType;

    typedef enum {
        xlWebFormattingAll = 1,
        xlWebFormattingRTF = 2,
        xlWebFormattingNone = 3
    } XlWebFormatting;

    typedef enum {
        xlDisplayShapes = 0xffffeff8,
        xlHide = 3,
        xlPlaceholders = 2
    } XlDisplayDrawingObjects;

    typedef enum {
        xlAtTop = 1,
        xlAtBottom = 2
    } XlSubtototalLocationType;

    typedef enum {
        xlPivotTableVersion2000 = 0,
        xlPivotTableVersion10 = 1,
        xlPivotTableVersion11 = 2,
        xlPivotTableVersion12 = 3,
        xlPivotTableVersionCurrent = 0xffffffff
    } XlPivotTableVersionList;

    typedef enum {
        xlPrintErrorsDisplayed = 0,
        xlPrintErrorsBlank = 1,
        xlPrintErrorsDash = 2,
        xlPrintErrorsNA = 3
    } XlPrintErrors;

    typedef enum {
        xlPivotCellValue = 0,
        xlPivotCellPivotItem = 1,
        xlPivotCellSubtotal = 2,
        xlPivotCellGrandTotal = 3,
        xlPivotCellDataField = 4,
        xlPivotCellPivotField = 5,
        xlPivotCellPageFieldItem = 6,
        xlPivotCellCustomSubtotal = 7,
        xlPivotCellDataPivotField = 8,
        xlPivotCellBlankCell = 9
    } XlPivotCellType;

    typedef enum {
        xlMissingItemsDefault = 0xffffffff,
        xlMissingItemsNone = 0,
        xlMissingItemsMax = 32500,
        xlMissingItemsMax2 = 0x00100000
    } XlPivotTableMissingItems;

    typedef enum {
        xlDone = 0,
        xlCalculating = 1,
        xlPending = 2
    } XlCalculationState;

    typedef enum {
        xlNoKey = 0,
        xlEscKey = 1,
        xlAnyKey = 2
    } XlCalculationInterruptKey;

    typedef enum {
        xlSortNormal = 0,
        xlSortTextAsNumbers = 1
    } XlSortDataOption;

    typedef enum {
        xlUpdateLinksUserSetting = 1,
        xlUpdateLinksNever = 2,
        xlUpdateLinksAlways = 3
    } XlUpdateLinks;

    typedef enum {
        xlLinkStatusOK = 0,
        xlLinkStatusMissingFile = 1,
        xlLinkStatusMissingSheet = 2,
        xlLinkStatusOld = 3,
        xlLinkStatusSourceNotCalculated = 4,
        xlLinkStatusIndeterminate = 5,
        xlLinkStatusNotStarted = 6,
        xlLinkStatusInvalidName = 7,
        xlLinkStatusSourceNotOpen = 8,
        xlLinkStatusSourceOpen = 9,
        xlLinkStatusCopiedValues = 10
    } XlLinkStatus;

    typedef enum {
        xlWithinSheet = 1,
        xlWithinWorkbook = 2
    } XlSearchWithin;

    typedef enum {
        xlNormalLoad = 0,
        xlRepairFile = 1,
        xlExtractData = 2
    } XlCorruptLoad;

    typedef enum {
        xlAsRequired = 0,
        xlAlways = 1,
        xlNever = 2
    } XlRobustConnect;

    typedef enum {
        xlEvaluateToError = 1,
        xlTextDate = 2,
        xlNumberAsText = 3,
        xlInconsistentFormula = 4,
        xlOmittedCells = 5,
        xlUnlockedFormulaCells = 6,
        xlEmptyCellReferences = 7,
        xlListDataValidation = 8,
        xlInconsistentListFormula = 9
    } XlErrorChecks;

    typedef enum {
        xlDataLabelSeparatorDefault = 1
    } XlDataLabelSeparator;

    typedef enum {
        xlIndicatorAndButton = 0,
        xlDisplayNone = 1,
        xlButtonOnly = 2
    } XlSmartTagDisplayMode;

    typedef enum {
        xlRangeValueDefault = 10,
        xlRangeValueXMLSpreadsheet = 11,
        xlRangeValueMSPersistXML = 12
    } XlRangeValueDataType;

    typedef enum {
        xlSpeakByRows = 0,
        xlSpeakByColumns = 1
    } XlSpeakDirection;

    typedef enum {
        xlFormatFromLeftOrAbove = 0,
        xlFormatFromRightOrBelow = 1
    } XlInsertFormatOrigin;

    typedef enum {
        xlArabicNone = 0,
        xlArabicStrictAlefHamza = 1,
        xlArabicStrictFinalYaa = 2,
        xlArabicBothStrict = 3
    } XlArabicModes;

    typedef enum {
        xlQueryTable = 0,
        xlPivotTableReport = 1,
        xlTable = 2
    } XlImportDataAs;

    typedef enum {
        xlCalculatedMember = 0,
        xlCalculatedSet = 1
    } XlCalculatedMemberType;

    typedef enum {
        xlHebrewFullScript = 0,
        xlHebrewPartialScript = 1,
        xlHebrewMixedScript = 2,
        xlHebrewMixedAuthorizedScript = 3
    } XlHebrewModes;

    typedef enum {
        xlSrcExternal = 0,
        xlSrcRange = 1,
        xlSrcXml = 2,
        xlSrcQuery = 3
    } XlListObjectSourceType;

    typedef enum {
        xlTextVisualLTR = 1,
        xlTextVisualRTL = 2
    } XlTextVisualLayoutType;

    typedef enum {
        xlListDataTypeNone = 0,
        xlListDataTypeText = 1,
        xlListDataTypeMultiLineText = 2,
        xlListDataTypeNumber = 3,
        xlListDataTypeCurrency = 4,
        xlListDataTypeDateTime = 5,
        xlListDataTypeChoice = 6,
        xlListDataTypeChoiceMulti = 7,
        xlListDataTypeListLookup = 8,
        xlListDataTypeCheckbox = 9,
        xlListDataTypeHyperLink = 10,
        xlListDataTypeCounter = 11,
        xlListDataTypeMultiLineRichText = 12
    } XlListDataType;

    typedef enum {
        xlTotalsCalculationNone = 0,
        xlTotalsCalculationSum = 1,
        xlTotalsCalculationAverage = 2,
        xlTotalsCalculationCount = 3,
        xlTotalsCalculationCountNums = 4,
        xlTotalsCalculationMin = 5,
        xlTotalsCalculationMax = 6,
        xlTotalsCalculationStdDev = 7,
        xlTotalsCalculationVar = 8,
        xlTotalsCalculationCustom = 9
    } XlTotalsCalculation;

    typedef enum {
        xlXmlLoadPromptUser = 0,
        xlXmlLoadOpenXml = 1,
        xlXmlLoadImportToList = 2,
        xlXmlLoadMapXml = 3
    } XlXmlLoadOption;

    typedef enum {
        xlSmartTagControlSmartTag = 1,
        xlSmartTagControlLink = 2,
        xlSmartTagControlHelp = 3,
        xlSmartTagControlHelpURL = 4,
        xlSmartTagControlSeparator = 5,
        xlSmartTagControlButton = 6,
        xlSmartTagControlLabel = 7,
        xlSmartTagControlImage = 8,
        xlSmartTagControlCheckbox = 9,
        xlSmartTagControlTextbox = 10,
        xlSmartTagControlListbox = 11,
        xlSmartTagControlCombo = 12,
        xlSmartTagControlActiveX = 13,
        xlSmartTagControlRadioGroup = 14
    } XlSmartTagControlType;

    typedef enum {
        xlListConflictDialog = 0,
        xlListConflictRetryAllConflicts = 1,
        xlListConflictDiscardAllConflicts = 2,
        xlListConflictError = 3
    } XlListConflict;

    typedef enum {
        xlXmlExportSuccess = 0,
        xlXmlExportValidationFailed = 1
    } XlXmlExportResult;

    typedef enum {
        xlXmlImportSuccess = 0,
        xlXmlImportElementsTruncated = 1,
        xlXmlImportValidationFailed = 2
    } XlXmlImportResult;

    typedef enum {
        xlRDIComments = 1,
        xlRDIRemovePersonalInformation = 4,
        xlRDIEmailHeader = 5,
        xlRDIRoutingSlip = 6,
        xlRDISendForReview = 7,
        xlRDIDocumentProperties = 8,
        xlRDIDocumentWorkspace = 10,
        xlRDIInkAnnotations = 11,
        xlRDIScenarioComments = 12,
        xlRDIPublishInfo = 13,
        xlRDIDocumentServerProperties = 14,
        xlRDIDocumentManagementPolicy = 15,
        xlRDIContentType = 16,
        xlRDIDefinedNameComments = 18,
        xlRDIInactiveDataConnections = 19,
        xlRDIPrinterPath = 20,
        xlRDIAll = 99
    } XlRemoveDocInfoType;

    typedef enum {
        rgbAliceBlue = 0x00fff8f0,
        rgbAntiqueWhite = 0x00d7ebfa,
        rgbAqua = 0x00ffff00,
        rgbAquamarine = 0x00d4ff7f,
        rgbAzure = 0x00fffff0,
        rgbBeige = 0x00dcf5f5,
        rgbBisque = 0x00c4e4ff,
        rgbBlack = 0,
        rgbBlanchedAlmond = 0x00cdebff,
        rgbBlue = 0x00ff0000,
        rgbBlueViolet = 0x00e22b8a,
        rgbBrown = 0x002a2aa5,
        rgbBurlyWood = 0x0087b8de,
        rgbCadetBlue = 0x00a09e5f,
        rgbChartreuse = 65407,
        rgbCoral = 0x00507fff,
        rgbCornflowerBlue = 0x00ed9564,
        rgbCornsilk = 0x00dcf8ff,
        rgbCrimson = 0x003c14dc,
        rgbDarkBlue = 0x008b0000,
        rgbDarkCyan = 0x008b8b00,
        rgbDarkGoldenrod = 0x000b86b8,
        rgbDarkGreen = 25600,
        rgbDarkGray = 0x00a9a9a9,
        rgbDarkGrey = 0x00a9a9a9,
        rgbDarkKhaki = 0x006bb7bd,
        rgbDarkMagenta = 0x008b008b,
        rgbDarkOliveGreen = 0x002f6b55,
        rgbDarkOrange = 36095,
        rgbDarkOrchid = 0x00cc3299,
        rgbDarkRed = 139,
        rgbDarkSalmon = 0x007a96e9,
        rgbDarkSeaGreen = 0x008fbc8f,
        rgbDarkSlateBlue = 0x008b3d48,
        rgbDarkSlateGray = 0x004f4f2f,
        rgbDarkSlateGrey = 0x004f4f2f,
        rgbDarkTurquoise = 0x00d1ce00,
        rgbDarkViolet = 0x00d30094,
        rgbDeepPink = 0x009314ff,
        rgbDeepSkyBlue = 0x00ffbf00,
        rgbDimGray = 0x00696969,
        rgbDimGrey = 0x00696969,
        rgbDodgerBlue = 0x00ff901e,
        rgbFireBrick = 0x002222b2,
        rgbFloralWhite = 0x00f0faff,
        rgbForestGreen = 0x00228b22,
        rgbFuchsia = 0x00ff00ff,
        rgbGainsboro = 0x00dcdcdc,
        rgbGhostWhite = 0x00fff8f8,
        rgbGold = 55295,
        rgbGoldenrod = 0x0020a5da,
        rgbGray = 0x00808080,
        rgbGreen = 32768,
        rgbGrey = 0x00808080,
        rgbGreenYellow = 0x002fffad,
        rgbHoneydew = 0x00f0fff0,
        rgbHotPink = 0x00b469ff,
        rgbIndianRed = 0x005c5ccd,
        rgbIndigo = 0x0082004b,
        rgbIvory = 0x00f0ffff,
        rgbKhaki = 0x008ce6f0,
        rgbLavender = 0x00fae6e6,
        rgbLavenderBlush = 0x00f5f0ff,
        rgbLawnGreen = 64636,
        rgbLemonChiffon = 0x00cdfaff,
        rgbLightBlue = 0x00e6d8ad,
        rgbLightCoral = 0x008080f0,
        rgbLightCyan = 0x008b8b00,
        rgbLightGoldenrodYellow = 0x00d2fafa,
        rgbLightGray = 0x00d3d3d3,
        rgbLightGreen = 0x0090ee90,
        rgbLightGrey = 0x00d3d3d3,
        rgbLightPink = 0x00c1b6ff,
        rgbLightSalmon = 0x007aa0ff,
        rgbLightSeaGreen = 0x00aab220,
        rgbLightSkyBlue = 0x00face87,
        rgbLightSlateGray = 0x00998877,
        rgbLightSlateGrey = 0x00998877,
        rgbLightSteelBlue = 0x00dec4b0,
        rgbLightYellow = 0x00e0ffff,
        rgbLime = 65280,
        rgbLimeGreen = 0x0032cd32,
        rgbLinen = 0x00e6f0fa,
        rgbMaroon = 128,
        rgbMediumAquamarine = 0x00aaff66,
        rgbMediumBlue = 0x00cd0000,
        rgbMediumOrchid = 0x00d355ba,
        rgbMediumPurple = 0x00db7093,
        rgbMediumSeaGreen = 0x0071b33c,
        rgbMediumSlateBlue = 0x00ee687b,
        rgbMediumSpringGreen = 0x009afa00,
        rgbMediumTurquoise = 0x00ccd148,
        rgbMediumVioletRed = 0x008515c7,
        rgbMidnightBlue = 0x00701919,
        rgbMintCream = 0x00fafff5,
        rgbMistyRose = 0x00e1e4ff,
        rgbMoccasin = 0x00b5e4ff,
        rgbNavajoWhite = 0x00addeff,
        rgbNavy = 0x00800000,
        rgbNavyBlue = 0x00800000,
        rgbOldLace = 0x00e6f5fd,
        rgbOlive = 32896,
        rgbOliveDrab = 0x00238e6b,
        rgbOrange = 42495,
        rgbOrangeRed = 17919,
        rgbOrchid = 0x00d670da,
        rgbPaleGoldenrod = 0x006be8ee,
        rgbPaleGreen = 0x0098fb98,
        rgbPaleTurquoise = 0x00eeeeaf,
        rgbPaleVioletRed = 0x009370db,
        rgbPapayaWhip = 0x00d5efff,
        rgbPeachPuff = 0x00b9daff,
        rgbPeru = 0x003f85cd,
        rgbPink = 0x00cbc0ff,
        rgbPlum = 0x00dda0dd,
        rgbPowderBlue = 0x00e6e0b0,
        rgbPurple = 0x00800080,
        rgbRed = 255,
        rgbRosyBrown = 0x008f8fbc,
        rgbRoyalBlue = 0x00e16941,
        rgbSalmon = 0x007280fa,
        rgbSandyBrown = 0x0060a4f4,
        rgbSeaGreen = 0x00578b2e,
        rgbSeashell = 0x00eef5ff,
        rgbSienna = 0x002d52a0,
        rgbSilver = 0x00c0c0c0,
        rgbSkyBlue = 0x00ebce87,
        rgbSlateBlue = 0x00cd5a6a,
        rgbSlateGray = 0x00908070,
        rgbSlateGrey = 0x00908070,
        rgbSnow = 0x00fafaff,
        rgbSpringGreen = 0x007fff00,
        rgbSteelBlue = 0x00b48246,
        rgbTan = 0x008cb4d2,
        rgbTeal = 0x00808000,
        rgbThistle = 0x00d8bfd8,
        rgbTomato = 0x004763ff,
        rgbTurquoise = 0x00d0e040,
        rgbYellow = 65535,
        rgbYellowGreen = 0x0032cd9a,
        rgbViolet = 0x00ee82ee,
        rgbWheat = 0x00b3def5,
        rgbWhite = 0x00ffffff,
        rgbWhiteSmoke = 0x00f5f5f5
    } XlRgbColor;

    typedef enum {
        xlColorScaleRYG = 1,
        xlColorScaleGYR = 2,
        xlColorScaleBlackWhite = 3,
        xlColorScaleWhiteBlack = 4
    } XlStdColorScale;

    typedef enum {
        xlConditionValueNone = 0xffffffff,
        xlConditionValueNumber = 0,
        xlConditionValueLowestValue = 1,
        xlConditionValueHighestValue = 2,
        xlConditionValuePercent = 3,
        xlConditionValueFormula = 4,
        xlConditionValuePercentile = 5
    } XlConditionValueTypes;

    typedef enum {
        xlFilterBottom = 0,
        xlFilterTop = 1,
        xlFilterBottomPercent = 2,
        xlFilterTopPercent = 3
    } XlFormatFilterTypes;

    typedef enum {
        xlContains = 0,
        xlDoesNotContain = 1,
        xlBeginsWith = 2,
        xlEndsWith = 3
    } XlContainsOperator;

    typedef enum {
        xlAboveAverage = 0,
        xlBelowAverage = 1,
        xlEqualAboveAverage = 2,
        xlEqualBelowAverage = 3,
        xlAboveStdDev = 4,
        xlBelowStdDev = 5
    } XlAboveBelow;

    typedef enum {
        xlLookForBlanks = 0,
        xlLookForErrors = 1,
        xlLookForFormulas = 2
    } XlLookFor;

    typedef enum {
        xlToday = 0,
        xlYesterday = 1,
        xlLast7Days = 2,
        xlThisWeek = 3,
        xlLastWeek = 4,
        xlLastMonth = 5,
        xlTomorrow = 6,
        xlNextWeek = 7,
        xlNextMonth = 8,
        xlThisMonth = 9
    } XlTimePeriods;

    typedef enum {
        xlUnique = 0,
        xlDuplicate = 1
    } XlDupeUnique;

    typedef enum {
        xlTop10Top = 1,
        xlTop10Bottom = 0
    } XlTopBottom;

    typedef enum {
        xl3Arrows = 1,
        xl3ArrowsGray = 2,
        xl3Flags = 3,
        xl3TrafficLights1 = 4,
        xl3TrafficLights2 = 5,
        xl3Signs = 6,
        xl3Symbols = 7,
        xl3Symbols2 = 8,
        xl4Arrows = 9,
        xl4ArrowsGray = 10,
        xl4RedToBlack = 11,
        xl4CRV = 12,
        xl4TrafficLights = 13,
        xl5Arrows = 14,
        xl5ArrowsGray = 15,
        xl5CRV = 16,
        xl5Quarters = 17
    } XlIconSet;

    typedef enum {
        xlThemeFontNone = 0,
        xlThemeFontMajor = 1,
        xlThemeFontMinor = 2
    } XlThemeFont;

    typedef enum {
        xlPivotLineRegular = 0,
        xlPivotLineSubtotal = 1,
        xlPivotLineGrandTotal = 2,
        xlPivotLineBlank = 3
    } XlPivotLineType;

    typedef enum {
        xlCheckInMinorVersion = 0,
        xlCheckInMajorVersion = 1,
        xlCheckInOverwriteVersion = 2
    } XlCheckInVersionType;

    typedef enum {
        xlDisplayPropertyInPivotTable = 1,
        xlDisplayPropertyInTooltip = 2,
        xlDisplayPropertyInPivotTableAndTooltip = 3
    } XlPropertyDisplayedIn;

    typedef enum {
        xlConnectionTypeOLEDB = 1,
        xlConnectionTypeODBC = 2,
        xlConnectionTypeXMLMAP = 3,
        xlConnectionTypeTEXT = 4,
        xlConnectionTypeWEB = 5
    } XlConnectionType;

    typedef enum {
        xlActionTypeUrl = 1,
        xlActionTypeRowset = 16,
        xlActionTypeReport = 128,
        xlActionTypeDrillthrough = 256
    } XlActionType;

    typedef enum {
        xlCompactRow = 0,
        xlTabularRow = 1,
        xlOutlineRow = 2
    } XlLayoutRowType;

    typedef enum {
        xlInches = 0,
        xlCentimeters = 1,
        xlMillimeters = 2
    } XlMeasurementUnits;

    typedef enum {
        xlTopCount = 1,
        xlBottomCount = 2,
        xlTopPercent = 3,
        xlBottomPercent = 4,
        xlTopSum = 5,
        xlBottomSum = 6,
        xlValueEquals = 7,
        xlValueDoesNotEqual = 8,
        xlValueIsGreaterThan = 9,
        xlValueIsGreaterThanOrEqualTo = 10,
        xlValueIsLessThan = 11,
        xlValueIsLessThanOrEqualTo = 12,
        xlValueIsBetween = 13,
        xlValueIsNotBetween = 14,
        xlCaptionEquals = 15,
        xlCaptionDoesNotEqual = 16,
        xlCaptionBeginsWith = 17,
        xlCaptionDoesNotBeginWith = 18,
        xlCaptionEndsWith = 19,
        xlCaptionDoesNotEndWith = 20,
        xlCaptionContains = 21,
        xlCaptionDoesNotContain = 22,
        xlCaptionIsGreaterThan = 23,
        xlCaptionIsGreaterThanOrEqualTo = 24,
        xlCaptionIsLessThan = 25,
        xlCaptionIsLessThanOrEqualTo = 26,
        xlCaptionIsBetween = 27,
        xlCaptionIsNotBetween = 28,
        xlSpecificDate = 29,
        xlNotSpecificDate = 30,
        xlBefore = 31,
        xlBeforeOrEqualTo = 32,
        xlAfter = 33,
        xlAfterOrEqualTo = 34,
        xlDateBetween = 35,
        xlDateNotBetween = 36,
        xlDateTomorrow = 37,
        xlDateToday = 38,
        xlDateYesterday = 39,
        xlDateNextWeek = 40,
        xlDateThisWeek = 41,
        xlDateLastWeek = 42,
        xlDateNextMonth = 43,
        xlDateThisMonth = 44,
        xlDateLastMonth = 45,
        xlDateNextQuarter = 46,
        xlDateThisQuarter = 47,
        xlDateLastQuarter = 48,
        xlDateNextYear = 49,
        xlDateThisYear = 50,
        xlDateLastYear = 51,
        xlYearToDate = 52,
        xlAllDatesInPeriodQuarter1 = 53,
        xlAllDatesInPeriodQuarter2 = 54,
        xlAllDatesInPeriodQuarter3 = 55,
        xlAllDatesInPeriodQuarter4 = 56,
        xlAllDatesInPeriodJanuary = 57,
        xlAllDatesInPeriodFebruary = 58,
        xlAllDatesInPeriodMarch = 59,
        xlAllDatesInPeriodApril = 60,
        xlAllDatesInPeriodMay = 61,
        xlAllDatesInPeriodJune = 62,
        xlAllDatesInPeriodJuly = 63,
        xlAllDatesInPeriodAugust = 64,
        xlAllDatesInPeriodSeptember = 65,
        xlAllDatesInPeriodOctober = 66,
        xlAllDatesInPeriodNovember = 67,
        xlAllDatesInPeriodDecember = 68
    } XlPivotFilterType;

    typedef enum {
        xlCredentialsMethodIntegrated = 0,
        xlCredentialsMethodNone = 1,
        xlCredentialsMethodStored = 2
    } XlCredentialsMethod;

    typedef enum {
        xlCubeHierarchy = 1,
        xlCubeMeasure = 2,
        xlCubeSet = 3,
        xlCubeAttribute = 4,
        xlCubeCalculatedMeasure = 5,
        xlCubeKPIValue = 6,
        xlCubeKPIGoal = 7,
        xlCubeKPIStatus = 8,
        xlCubeKPITrend = 9,
        xlCubeKPIWeight = 10
    } XlCubeFieldSubType;

    typedef enum {
        xlSortOnValues = 0,
        xlSortOnCellColor = 1,
        xlSortOnFontColor = 2,
        xlSortOnIcon = 3
    } XlSortOn;

    typedef enum {
        xlFilterToday = 1,
        xlFilterYesterday = 2,
        xlFilterTomorrow = 3,
        xlFilterThisWeek = 4,
        xlFilterLastWeek = 5,
        xlFilterNextWeek = 6,
        xlFilterThisMonth = 7,
        xlFilterLastMonth = 8,
        xlFilterNextMonth = 9,
        xlFilterThisQuarter = 10,
        xlFilterLastQuarter = 11,
        xlFilterNextQuarter = 12,
        xlFilterThisYear = 13,
        xlFilterLastYear = 14,
        xlFilterNextYear = 15,
        xlFilterYearToDate = 16,
        xlFilterAllDatesInPeriodQuarter1 = 17,
        xlFilterAllDatesInPeriodQuarter2 = 18,
        xlFilterAllDatesInPeriodQuarter3 = 19,
        xlFilterAllDatesInPeriodQuarter4 = 20,
        xlFilterAllDatesInPeriodJanuary = 21,
        xlFilterAllDatesInPeriodFebruray = 22,
        xlFilterAllDatesInPeriodMarch = 23,
        xlFilterAllDatesInPeriodApril = 24,
        xlFilterAllDatesInPeriodMay = 25,
        xlFilterAllDatesInPeriodJune = 26,
        xlFilterAllDatesInPeriodJuly = 27,
        xlFilterAllDatesInPeriodAugust = 28,
        xlFilterAllDatesInPeriodSeptember = 29,
        xlFilterAllDatesInPeriodOctober = 30,
        xlFilterAllDatesInPeriodNovember = 31,
        xlFilterAllDatesInPeriodDecember = 32,
        xlFilterAboveAverage = 33,
        xlFilterBelowAverage = 34
    } XlDynamicFilterCriteria;

    typedef enum {
        xlFilterAllDatesInPeriodYear = 0,
        xlFilterAllDatesInPeriodMonth = 1,
        xlFilterAllDatesInPeriodDay = 2,
        xlFilterAllDatesInPeriodHour = 3,
        xlFilterAllDatesInPeriodMinute = 4,
        xlFilterAllDatesInPeriodSecond = 5
    } XlFilterAllDatesInPeriod;

    typedef enum {
        xlWholeTable = 0,
        xlHeaderRow = 1,
        xlTotalRow = 2,
        xlGrandTotalRow = 2,
        xlFirstColumn = 3,
        xlLastColumn = 4,
        xlGrandTotalColumn = 4,
        xlRowStripe1 = 5,
        xlRowStripe2 = 6,
        xlColumnStripe1 = 7,
        xlColumnStripe2 = 8,
        xlFirstHeaderCell = 9,
        xlLastHeaderCell = 10,
        xlFirstTotalCell = 11,
        xlLastTotalCell = 12,
        xlSubtotalColumn1 = 13,
        xlSubtotalColumn2 = 14,
        xlSubtotalColumn3 = 15,
        xlSubtotalRow1 = 16,
        xlSubtotalRow2 = 17,
        xlSubtotalRow3 = 18,
        xlBlankRow = 19,
        xlColumnSubheading1 = 20,
        xlColumnSubheading2 = 21,
        xlColumnSubheading3 = 22,
        xlRowSubheading1 = 23,
        xlRowSubheading2 = 24,
        xlRowSubheading3 = 25,
        xlPageFieldLabels = 26,
        xlPageFieldValues = 27
    } XlTableStyleElementType;

    typedef enum {
        xlSelectionScope = 0,
        xlFieldsScope = 1,
        xlDataFieldScope = 2
    } XlPivotConditionScope;

    typedef enum {
        xlAllValues = 0,
        xlRowGroups = 1,
        xlColGroups = 2
    } XlCalcFor;

    typedef enum {
        xlThemeColorDark1 = 1,
        xlThemeColorLight1 = 2,
        xlThemeColorDark2 = 3,
        xlThemeColorLight2 = 4,
        xlThemeColorAccent1 = 5,
        xlThemeColorAccent2 = 6,
        xlThemeColorAccent3 = 7,
        xlThemeColorAccent4 = 8,
        xlThemeColorAccent5 = 9,
        xlThemeColorAccent6 = 10,
        xlThemeColorHyperlink = 11,
        xlThemeColorFollowedHyperlink = 12
    } XlThemeColor;

    typedef enum {
        xlTypePDF = 0,
        xlTypeXPS = 1
    } XlFixedFormatType;

    typedef enum {
        xlQualityStandard = 0,
        xlQualityMinimum = 1
    } XlFixedFormatQuality;

    typedef enum {
        xlChartElementPositionAutomatic = 0xffffeff7,
        xlChartElementPositionCustom = 0xffffefee
    } XlChartElementPosition;

    typedef enum {
        xlGenerateTableRefA1 = 0,
        xlGenerateTableRefStruct = 1
    } XlGenerateTableRefs;

    typedef enum {
        xlGradientFillLinear = 0,
        xlGradientFillPath = 1
    } XlGradientFillType;

    typedef enum {
        xlThreadModeAutomatic = 0,
        xlThreadModeManual = 1
    } XlThreadMode;

    [
      odl,
      uuid(0002084D-0001-0000-C000-000000000046),
      helpcontext(0x0002000d),
      hidden
    ]
    interface IFont : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000100b4)]
        HRESULT _stdcall Background([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100b4)]
        HRESULT _stdcall Background([in] VARIANT RHS);
        [propget, helpcontext(0x00010060)]
        HRESULT _stdcall Bold([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010060)]
        HRESULT _stdcall Bold([in] VARIANT RHS);
        [propget, helpcontext(0x00010063)]
        HRESULT _stdcall Color([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010063)]
        HRESULT _stdcall Color([in] VARIANT RHS);
        [propget, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([in] VARIANT RHS);
        [propget, helpcontext(0x000100b1)]
        HRESULT _stdcall FontStyle([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100b1)]
        HRESULT _stdcall FontStyle([in] VARIANT RHS);
        [propget, helpcontext(0x00010065)]
        HRESULT _stdcall Italic([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010065)]
        HRESULT _stdcall Italic([in] VARIANT RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] VARIANT RHS);
        [propget, hidden, helpcontext(0x000100dd)]
        HRESULT _stdcall OutlineFont([out, retval] VARIANT* RHS);
        [propput, hidden, helpcontext(0x000100dd)]
        HRESULT _stdcall OutlineFont([in] VARIANT RHS);
        [propget, hidden, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT* RHS);
        [propput, hidden, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT RHS);
        [propget, helpcontext(0x00010068)]
        HRESULT _stdcall Size([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010068)]
        HRESULT _stdcall Size([in] VARIANT RHS);
        [propget, helpcontext(0x00010069)]
        HRESULT _stdcall Strikethrough([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010069)]
        HRESULT _stdcall Strikethrough([in] VARIANT RHS);
        [propget, helpcontext(0x000100b3)]
        HRESULT _stdcall Subscript([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100b3)]
        HRESULT _stdcall Subscript([in] VARIANT RHS);
        [propget, helpcontext(0x000100b2)]
        HRESULT _stdcall Superscript([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100b2)]
        HRESULT _stdcall Superscript([in] VARIANT RHS);
        [propget, helpcontext(0x0001006a)]
        HRESULT _stdcall Underline([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001006a)]
        HRESULT _stdcall Underline([in] VARIANT RHS);
        [propget, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([in] VARIANT RHS);
        [propget, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([in] VARIANT RHS);
        [propget, helpcontext(0x0001093f)]
        HRESULT _stdcall ThemeFont([out, retval] XlThemeFont* RHS);
        [propput, helpcontext(0x0001093f)]
        HRESULT _stdcall ThemeFont([in] XlThemeFont RHS);
    };

    [
      odl,
      uuid(00020893-0001-0000-C000-000000000046),
      helpcontext(0x00020053),
      hidden
    ]
    interface IWindow : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010130)]
        HRESULT _stdcall Activate([out, retval] VARIANT* RHS);
        [helpcontext(0x0001045b)]
        HRESULT _stdcall ActivateNext([out, retval] VARIANT* RHS);
        [helpcontext(0x0001045c)]
        HRESULT _stdcall ActivatePrevious([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010131)]
        HRESULT _stdcall ActiveCell([out, retval] Range** RHS);
        [propget, helpcontext(0x000100b7)]
        HRESULT _stdcall ActiveChart([out, retval] Chart** RHS);
        [propget, helpcontext(0x00010282)]
        HRESULT _stdcall ActivePane([out, retval] Pane** RHS);
        [propget, helpcontext(0x00010133)]
        HRESULT _stdcall ActiveSheet([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] VARIANT RHS);
        [helpcontext(0x00010115)]
        HRESULT _stdcall Close(
                        [in, optional] VARIANT SaveChanges, 
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT RouteWorkbook, 
                        [out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010284)]
        HRESULT _stdcall DisplayFormulas([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010284)]
        HRESULT _stdcall DisplayFormulas([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010285)]
        HRESULT _stdcall DisplayGridlines([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010285)]
        HRESULT _stdcall DisplayGridlines([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010286)]
        HRESULT _stdcall DisplayHeadings([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010286)]
        HRESULT _stdcall DisplayHeadings([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010399)]
        HRESULT _stdcall DisplayHorizontalScrollBar([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010399)]
        HRESULT _stdcall DisplayHorizontalScrollBar([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010287)]
        HRESULT _stdcall DisplayOutline([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010287)]
        HRESULT _stdcall DisplayOutline([in] VARIANT_BOOL RHS);
        [propget, hidden, helpcontext(0x00010288)]
        HRESULT _stdcall _DisplayRightToLeft([out, retval] VARIANT_BOOL* RHS);
        [propput, hidden, helpcontext(0x00010288)]
        HRESULT _stdcall _DisplayRightToLeft([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001039a)]
        HRESULT _stdcall DisplayVerticalScrollBar([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001039a)]
        HRESULT _stdcall DisplayVerticalScrollBar([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001039b)]
        HRESULT _stdcall DisplayWorkbookTabs([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001039b)]
        HRESULT _stdcall DisplayWorkbookTabs([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010289)]
        HRESULT _stdcall DisplayZeros([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010289)]
        HRESULT _stdcall DisplayZeros([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000104a8)]
        HRESULT _stdcall EnableResize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000104a8)]
        HRESULT _stdcall EnableResize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001028a)]
        HRESULT _stdcall FreezePanes([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001028a)]
        HRESULT _stdcall FreezePanes([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001028b)]
        HRESULT _stdcall GridlineColor([out, retval] long* RHS);
        [propput, helpcontext(0x0001028b)]
        HRESULT _stdcall GridlineColor([in] long RHS);
        [propget, helpcontext(0x0001028c)]
        HRESULT _stdcall GridlineColorIndex([out, retval] XlColorIndex* RHS);
        [propput, helpcontext(0x0001028c)]
        HRESULT _stdcall GridlineColorIndex([in] XlColorIndex RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [helpcontext(0x00010223)]
        HRESULT _stdcall LargeScroll(
                        [in, optional] VARIANT Down, 
                        [in, optional] VARIANT Up, 
                        [in, optional] VARIANT ToRight, 
                        [in, optional] VARIANT ToLeft, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [helpcontext(0x00010118)]
        HRESULT _stdcall NewWindow([out, retval] Window** RHS);
        [propget, helpcontext(0x0001026f)]
        HRESULT _stdcall OnWindow([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001026f)]
        HRESULT _stdcall OnWindow([in] BSTR RHS);
        [propget, helpcontext(0x0001028d)]
        HRESULT _stdcall Panes([out, retval] Panes** RHS);
        [hidden, helpcontext(0x000106ec)]
        HRESULT _stdcall _PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010119)]
        HRESULT _stdcall PrintPreview(
                        [in, optional] VARIANT EnableChanges, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000104a5)]
        HRESULT _stdcall RangeSelection([out, retval] Range** RHS);
        [propget, helpcontext(0x0001028e)]
        HRESULT _stdcall ScrollColumn([out, retval] long* RHS);
        [propput, helpcontext(0x0001028e)]
        HRESULT _stdcall ScrollColumn([in] long RHS);
        [propget, helpcontext(0x0001028f)]
        HRESULT _stdcall ScrollRow([out, retval] long* RHS);
        [propput, helpcontext(0x0001028f)]
        HRESULT _stdcall ScrollRow([in] long RHS);
        [helpcontext(0x00010296)]
        HRESULT _stdcall ScrollWorkbookTabs(
                        [in, optional] VARIANT Sheets, 
                        [in, optional] VARIANT Position, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010290)]
        HRESULT _stdcall SelectedSheets([out, retval] Sheets** RHS);
        [propget, helpcontext(0x00010093)]
        HRESULT _stdcall Selection([out, retval] IDispatch** RHS);
        [helpcontext(0x00010224)]
        HRESULT _stdcall SmallScroll(
                        [in, optional] VARIANT Down, 
                        [in, optional] VARIANT Up, 
                        [in, optional] VARIANT ToRight, 
                        [in, optional] VARIANT ToLeft, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010291)]
        HRESULT _stdcall Split([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010291)]
        HRESULT _stdcall Split([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010292)]
        HRESULT _stdcall SplitColumn([out, retval] long* RHS);
        [propput, helpcontext(0x00010292)]
        HRESULT _stdcall SplitColumn([in] long RHS);
        [propget, helpcontext(0x00010293)]
        HRESULT _stdcall SplitHorizontal([out, retval] double* RHS);
        [propput, helpcontext(0x00010293)]
        HRESULT _stdcall SplitHorizontal([in] double RHS);
        [propget, helpcontext(0x00010294)]
        HRESULT _stdcall SplitRow([out, retval] long* RHS);
        [propput, helpcontext(0x00010294)]
        HRESULT _stdcall SplitRow([in] long RHS);
        [propget, helpcontext(0x00010295)]
        HRESULT _stdcall SplitVertical([out, retval] double* RHS);
        [propput, helpcontext(0x00010295)]
        HRESULT _stdcall SplitVertical([in] double RHS);
        [propget, helpcontext(0x000102a1)]
        HRESULT _stdcall TabRatio([out, retval] double* RHS);
        [propput, helpcontext(0x000102a1)]
        HRESULT _stdcall TabRatio([in] double RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] XlWindowType* RHS);
        [propget, helpcontext(0x00010185)]
        HRESULT _stdcall UsableHeight([out, retval] double* RHS);
        [propget, helpcontext(0x00010186)]
        HRESULT _stdcall UsableWidth([out, retval] double* RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001045e)]
        HRESULT _stdcall VisibleRange([out, retval] Range** RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001045f)]
        HRESULT _stdcall WindowNumber([out, retval] long* RHS);
        [propget, helpcontext(0x0001018c)]
        HRESULT _stdcall WindowState([out, retval] XlWindowState* RHS);
        [propput, helpcontext(0x0001018c)]
        HRESULT _stdcall WindowState([in] XlWindowState RHS);
        [propget, helpcontext(0x00010297)]
        HRESULT _stdcall Zoom([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010297)]
        HRESULT _stdcall Zoom([in] VARIANT RHS);
        [propget, helpcontext(0x000104aa)]
        HRESULT _stdcall View([out, retval] XlWindowView* RHS);
        [propput, helpcontext(0x000104aa)]
        HRESULT _stdcall View([in] XlWindowView RHS);
        [propget, helpcontext(0x000106ee)]
        HRESULT _stdcall DisplayRightToLeft([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000106ee)]
        HRESULT _stdcall DisplayRightToLeft([in] VARIANT_BOOL RHS);
        [helpcontext(0x000106f0)]
        HRESULT _stdcall PointsToScreenPixelsX(
                        [in] long Points, 
                        [out, retval] long* RHS);
        [helpcontext(0x000106f1)]
        HRESULT _stdcall PointsToScreenPixelsY(
                        [in] long Points, 
                        [out, retval] long* RHS);
        [helpcontext(0x000106f2)]
        HRESULT _stdcall RangeFromPoint(
                        [in] long x, 
                        [in] long y, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x000106f5)]
        HRESULT _stdcall ScrollIntoView(
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Width, 
                        [in] long Height, 
                        [in, optional] VARIANT Start);
        [propget, helpcontext(0x00010940)]
        HRESULT _stdcall SheetViews([out, retval] SheetViews** RHS);
        [propget, helpcontext(0x00010941)]
        HRESULT _stdcall ActiveSheetView([out, retval] IDispatch** RHS);
        [helpcontext(0x00010939)]
        HRESULT _stdcall PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010942)]
        HRESULT _stdcall DisplayRuler([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010942)]
        HRESULT _stdcall DisplayRuler([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010943)]
        HRESULT _stdcall AutoFilterDateGrouping([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010943)]
        HRESULT _stdcall AutoFilterDateGrouping([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010944)]
        HRESULT _stdcall DisplayWhitespace([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010944)]
        HRESULT _stdcall DisplayWhitespace([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(00020892-0001-0000-C000-000000000046),
      helpcontext(0x00020052),
      hidden
    ]
    interface IWindows : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x0001027e)]
        HRESULT _stdcall Arrange(
                        [in, optional, defaultvalue(1)] XlArrangeStyle ArrangeStyle, 
                        [in, optional] VARIANT ActiveWorkbook, 
                        [in, optional] VARIANT SyncHorizontal, 
                        [in, optional] VARIANT SyncVertical, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] Window** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] Window** RHS);
        [helpcontext(0x000108c6)]
        HRESULT _stdcall CompareSideBySideWith(
                        [in] VARIANT WindowName, 
                        [out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x000108c8)]
        HRESULT _stdcall BreakSideBySide([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000108c9)]
        HRESULT _stdcall SyncScrollingSideBySide([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108c9)]
        HRESULT _stdcall SyncScrollingSideBySide([in] VARIANT_BOOL RHS);
        [helpcontext(0x000108ca)]
        HRESULT _stdcall ResetPositionsSideBySide();
    };

    [
      odl,
      uuid(00024413-0001-0000-C000-000000000046),
      helpcontext(0x000200a9),
      hidden
    ]
    interface IAppEvents : IDispatch {
        [helpcontext(0x0001061d)]
        HRESULT _stdcall NewWorkbook([in] Workbook* Wb);
        [helpcontext(0x00010616)]
        HRESULT _stdcall SheetSelectionChange(
                        [in] IDispatch* Sh, 
                        [in] Range* Target);
        [helpcontext(0x00010617)]
        HRESULT _stdcall SheetBeforeDoubleClick(
                        [in] IDispatch* Sh, 
                        [in] Range* Target, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x00010618)]
        HRESULT _stdcall SheetBeforeRightClick(
                        [in] IDispatch* Sh, 
                        [in] Range* Target, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x00010619)]
        HRESULT _stdcall SheetActivate([in] IDispatch* Sh);
        [helpcontext(0x0001061a)]
        HRESULT _stdcall SheetDeactivate([in] IDispatch* Sh);
        [helpcontext(0x0001061b)]
        HRESULT _stdcall SheetCalculate([in] IDispatch* Sh);
        [helpcontext(0x0001061c)]
        HRESULT _stdcall SheetChange(
                        [in] IDispatch* Sh, 
                        [in] Range* Target);
        [helpcontext(0x0001061f)]
        HRESULT _stdcall WorkbookOpen([in] Workbook* Wb);
        [helpcontext(0x00010620)]
        HRESULT _stdcall WorkbookActivate([in] Workbook* Wb);
        [helpcontext(0x00010621)]
        HRESULT _stdcall WorkbookDeactivate([in] Workbook* Wb);
        [helpcontext(0x00010622)]
        HRESULT _stdcall WorkbookBeforeClose(
                        [in] Workbook* Wb, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x00010623)]
        HRESULT _stdcall WorkbookBeforeSave(
                        [in] Workbook* Wb, 
                        [in] VARIANT_BOOL SaveAsUI, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x00010624)]
        HRESULT _stdcall WorkbookBeforePrint(
                        [in] Workbook* Wb, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x00010625)]
        HRESULT _stdcall WorkbookNewSheet(
                        [in] Workbook* Wb, 
                        [in] IDispatch* Sh);
        [helpcontext(0x00010626)]
        HRESULT _stdcall WorkbookAddinInstall([in] Workbook* Wb);
        [helpcontext(0x00010627)]
        HRESULT _stdcall WorkbookAddinUninstall([in] Workbook* Wb);
        [helpcontext(0x00010612)]
        HRESULT _stdcall WindowResize(
                        [in] Workbook* Wb, 
                        [in] Window* Wn);
        [helpcontext(0x00010614)]
        HRESULT _stdcall WindowActivate(
                        [in] Workbook* Wb, 
                        [in] Window* Wn);
        [helpcontext(0x00010615)]
        HRESULT _stdcall WindowDeactivate(
                        [in] Workbook* Wb, 
                        [in] Window* Wn);
        [helpcontext(0x0001073e)]
        HRESULT _stdcall SheetFollowHyperlink(
                        [in] IDispatch* Sh, 
                        [in] Hyperlink* Target);
        [helpcontext(0x0001086d)]
        HRESULT _stdcall SheetPivotTableUpdate(
                        [in] IDispatch* Sh, 
                        [in] PivotTable* Target);
        [helpcontext(0x00010870)]
        HRESULT _stdcall WorkbookPivotTableCloseConnection(
                        [in] Workbook* Wb, 
                        [in] PivotTable* Target);
        [helpcontext(0x00010871)]
        HRESULT _stdcall WorkbookPivotTableOpenConnection(
                        [in] Workbook* Wb, 
                        [in] PivotTable* Target);
        [helpcontext(0x000108f1)]
        HRESULT _stdcall WorkbookSync(
                        [in] Workbook* Wb, 
                        [in] MsoSyncEventType SyncEventType);
        [helpcontext(0x000108f2)]
        HRESULT _stdcall WorkbookBeforeXmlImport(
                        [in] Workbook* Wb, 
                        [in] XmlMap* Map, 
                        [in] BSTR Url, 
                        [in] VARIANT_BOOL IsRefresh, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x000108f3)]
        HRESULT _stdcall WorkbookAfterXmlImport(
                        [in] Workbook* Wb, 
                        [in] XmlMap* Map, 
                        [in] VARIANT_BOOL IsRefresh, 
                        [in] XlXmlImportResult Result);
        [helpcontext(0x000108f4)]
        HRESULT _stdcall WorkbookBeforeXmlExport(
                        [in] Workbook* Wb, 
                        [in] XmlMap* Map, 
                        [in] BSTR Url, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x000108f5)]
        HRESULT _stdcall WorkbookAfterXmlExport(
                        [in] Workbook* Wb, 
                        [in] XmlMap* Map, 
                        [in] BSTR Url, 
                        [in] XlXmlExportResult Result);
        [helpcontext(0x00010a33)]
        HRESULT _stdcall WorkbookRowsetComplete(
                        [in] Workbook* Wb, 
                        [in] BSTR Description, 
                        [in] BSTR Sheet, 
                        [in] VARIANT_BOOL Success);
        [helpcontext(0x00010a34)]
        HRESULT _stdcall AfterCalculate();
    };

    [
      odl,
      uuid(000208D5-0000-0000-C000-000000000046),
      helpcontext(0x00020001),
      dual,
      oleautomation
    ]
    interface _Application : IDispatch {
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] Application** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] XlCreator* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] Application** RHS);
        [id(0x00000131), propget, helpcontext(0x00010131)]
        HRESULT ActiveCell([out, retval] Range** RHS);
        [id(0x000000b7), propget, helpcontext(0x000100b7)]
        HRESULT ActiveChart([out, retval] Chart** RHS);
        [id(0x0000032f), propget, hidden, helpcontext(0x0001032f)]
        HRESULT ActiveDialog([out, retval] DialogSheet** RHS);
        [id(0x000002f6), propget, hidden, helpcontext(0x000102f6)]
        HRESULT ActiveMenuBar([out, retval] MenuBar** RHS);
        [id(0x00000132), propget, helpcontext(0x00010132)]
        HRESULT ActivePrinter(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000132), propput, helpcontext(0x00010132)]
        HRESULT ActivePrinter(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000133), propget, helpcontext(0x00010133)]
        HRESULT ActiveSheet([out, retval] IDispatch** RHS);
        [id(0x000002f7), propget, helpcontext(0x000102f7)]
        HRESULT ActiveWindow([out, retval] Window** RHS);
        [id(0x00000134), propget, helpcontext(0x00010134)]
        HRESULT ActiveWorkbook([out, retval] Workbook** RHS);
        [id(0x00000225), propget, helpcontext(0x00010225)]
        HRESULT AddIns([out, retval] AddIns** RHS);
        [id(0x0000059e), propget, helpcontext(0x0001059e)]
        HRESULT Assistant([out, retval] Assistant** RHS);
        [id(0x00000117), helpcontext(0x00010117)]
        HRESULT Calculate([in, lcid] long lcid);
        [id(0x000000ee), propget, helpcontext(0x000100ee)]
        HRESULT Cells([out, retval] Range** RHS);
        [id(0x00000079), propget, helpcontext(0x00010079)]
        HRESULT Charts([out, retval] Sheets** RHS);
        [id(0x000000f1), propget, helpcontext(0x000100f1)]
        HRESULT Columns([out, retval] Range** RHS);
        [id(0x0000059f), propget, helpcontext(0x0001059f)]
        HRESULT CommandBars([out, retval] CommandBars** RHS);
        [id(0x0000014c), propget, helpcontext(0x0001014c)]
        HRESULT DDEAppReturnCode(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x0000014d), helpcontext(0x0001014d)]
        HRESULT DDEExecute(
                        [in] long Channel, 
                        [in] BSTR String, 
                        [in, lcid] long lcid);
        [id(0x0000014e), helpcontext(0x0001014e)]
        HRESULT DDEInitiate(
                        [in] BSTR App, 
                        [in] BSTR Topic, 
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x0000014f), helpcontext(0x0001014f)]
        HRESULT DDEPoke(
                        [in] long Channel, 
                        [in] VARIANT Item, 
                        [in] VARIANT Data, 
                        [in, lcid] long lcid);
        [id(0x00000150), helpcontext(0x00010150)]
        HRESULT DDERequest(
                        [in] long Channel, 
                        [in] BSTR Item, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000151), helpcontext(0x00010151)]
        HRESULT DDETerminate(
                        [in] long Channel, 
                        [in, lcid] long lcid);
        [id(0x000002fc), propget, hidden, helpcontext(0x000102fc)]
        HRESULT DialogSheets([out, retval] Sheets** RHS);
        [id(0x00000001), helpcontext(0x00010001)]
        HRESULT Evaluate(
                        [in] VARIANT Name, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0xfffffffb), helpcontext(0x0000fffb)]
        HRESULT _Evaluate(
                        [in] VARIANT Name, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x0000015e), helpcontext(0x0001015e)]
        HRESULT ExecuteExcel4Macro(
                        [in] BSTR String, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000002fe), helpcontext(0x000102fe)]
        HRESULT Intersect(
                        [in] Range* Arg1, 
                        [in] Range* Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [in, lcid] long lcid, 
                        [out, retval] Range** RHS);
        [id(0x0000024d), propget, hidden, helpcontext(0x0001024d)]
        HRESULT MenuBars([out, retval] MenuBars** RHS);
        [id(0x00000246), propget, hidden, helpcontext(0x00010246)]
        HRESULT Modules([out, retval] Modules** RHS);
        [id(0x000001ba), propget, helpcontext(0x000101ba)]
        HRESULT Names([out, retval] Names** RHS);
        [id(0x000000c5), propget, helpcontext(0x000100c5)]
        HRESULT Range(
                        [in] VARIANT Cell1, 
                        [in, optional] VARIANT Cell2, 
                        [out, retval] Range** RHS);
        [id(0x00000102), propget, helpcontext(0x00010102)]
        HRESULT Rows([out, retval] Range** RHS);
        [id(0x00000103), helpcontext(0x00010103)]
        HRESULT Run(
                        [in, optional] VARIANT Macro, 
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000326), helpcontext(0x00010326)]
        HRESULT _Run2(
                        [in, optional] VARIANT Macro, 
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000093), propget, helpcontext(0x00010093)]
        HRESULT Selection(
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x0000017f), helpcontext(0x0001017f)]
        HRESULT SendKeys(
                        [in] VARIANT Keys, 
                        [in, optional] VARIANT Wait, 
                        [in, lcid] long lcid);
        [id(0x000001e5), propget, helpcontext(0x000101e5)]
        HRESULT Sheets([out, retval] Sheets** RHS);
        [id(0x00000308), propget, hidden, helpcontext(0x00010308)]
        HRESULT ShortcutMenus(
                        [in] long Index, 
                        [out, retval] Menu** RHS);
        [id(0x0000030a), propget, helpcontext(0x0001030a)]
        HRESULT ThisWorkbook(
                        [in, lcid] long lcid, 
                        [out, retval] Workbook** RHS);
        [id(0x00000228), propget, hidden, helpcontext(0x00010228)]
        HRESULT Toolbars([out, retval] Toolbars** RHS);
        [id(0x0000030b), helpcontext(0x0001030b)]
        HRESULT Union(
                        [in] Range* Arg1, 
                        [in] Range* Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [in, lcid] long lcid, 
                        [out, retval] Range** RHS);
        [id(0x000001ae), propget, helpcontext(0x000101ae)]
        HRESULT Windows([out, retval] Windows** RHS);
        [id(0x0000023c), propget, helpcontext(0x0001023c)]
        HRESULT Workbooks([out, retval] Workbooks** RHS);
        [id(0x000005a0), propget, helpcontext(0x000105a0)]
        HRESULT WorksheetFunction([out, retval] WorksheetFunction** RHS);
        [id(0x000001ee), propget, helpcontext(0x000101ee)]
        HRESULT Worksheets([out, retval] Sheets** RHS);
        [id(0x00000245), propget, helpcontext(0x00010245)]
        HRESULT Excel4IntlMacroSheets([out, retval] Sheets** RHS);
        [id(0x00000243), propget, helpcontext(0x00010243)]
        HRESULT Excel4MacroSheets([out, retval] Sheets** RHS);
        [id(0x00000447), helpcontext(0x00010447)]
        HRESULT ActivateMicrosoftApp(
                        [in] XlMSApplication Index, 
                        [in, lcid] long lcid);
        [id(0x000000d8), hidden, helpcontext(0x000100d8)]
        HRESULT AddChartAutoFormat(
                        [in] VARIANT Chart, 
                        [in] BSTR Name, 
                        [in, optional] VARIANT Description, 
                        [in, lcid] long lcid);
        [id(0x0000030c), helpcontext(0x0001030c)]
        HRESULT AddCustomList(
                        [in] VARIANT ListArray, 
                        [in, optional] VARIANT ByRow, 
                        [in, lcid] long lcid);
        [id(0x000003a2), propget, helpcontext(0x000103a2)]
        HRESULT AlertBeforeOverwriting(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000003a2), propput, helpcontext(0x000103a2)]
        HRESULT AlertBeforeOverwriting(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000139), propget, helpcontext(0x00010139)]
        HRESULT AltStartupPath(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000139), propput, helpcontext(0x00010139)]
        HRESULT AltStartupPath(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x000003e0), propget, helpcontext(0x000103e0)]
        HRESULT AskToUpdateLinks(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000003e0), propput, helpcontext(0x000103e0)]
        HRESULT AskToUpdateLinks(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000049c), propget, helpcontext(0x0001049c)]
        HRESULT EnableAnimations(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000049c), propput, helpcontext(0x0001049c)]
        HRESULT EnableAnimations(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000479), propget, helpcontext(0x00010479)]
        HRESULT AutoCorrect([out, retval] AutoCorrect** RHS);
        [id(0x0000013a), propget, helpcontext(0x0001013a)]
        HRESULT Build(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x0000013b), propget, helpcontext(0x0001013b)]
        HRESULT CalculateBeforeSave(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000013b), propput, helpcontext(0x0001013b)]
        HRESULT CalculateBeforeSave(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000013c), propget, helpcontext(0x0001013c)]
        HRESULT Calculation(
                        [in, lcid] long lcid, 
                        [out, retval] XlCalculation* RHS);
        [id(0x0000013c), propput, helpcontext(0x0001013c)]
        HRESULT Calculation(
                        [in, lcid] long lcid, 
                        [in] XlCalculation RHS);
        [id(0x0000013d), propget, helpcontext(0x0001013d)]
        HRESULT Caller(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x0000013e), propget, helpcontext(0x0001013e)]
        HRESULT CanPlaySounds(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000013f), propget, helpcontext(0x0001013f)]
        HRESULT CanRecordSounds(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000008b), propget, helpcontext(0x0001008b)]
        HRESULT Caption([out, retval] BSTR* RHS);
        [id(0x0000008b), propput, helpcontext(0x0001008b)]
        HRESULT Caption([in] BSTR RHS);
        [id(0x00000140), propget, helpcontext(0x00010140)]
        HRESULT CellDragAndDrop(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000140), propput, helpcontext(0x00010140)]
        HRESULT CellDragAndDrop(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000043e), helpcontext(0x0001043e)]
        HRESULT CentimetersToPoints(
                        [in] double Centimeters, 
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x000001f9), helpcontext(0x000101f9)]
        HRESULT CheckSpelling(
                        [in] BSTR Word, 
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000141), propget, helpcontext(0x00010141)]
        HRESULT ClipboardFormats(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000142), propget, helpcontext(0x00010142)]
        HRESULT DisplayClipboardWindow(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000142), propput, helpcontext(0x00010142)]
        HRESULT DisplayClipboardWindow(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000016d), propget, hidden, helpcontext(0x0001016d)]
        HRESULT ColorButtons([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000016d), propput, hidden, helpcontext(0x0001016d)]
        HRESULT ColorButtons([in] VARIANT_BOOL RHS);
        [id(0x00000143), propget, helpcontext(0x00010143)]
        HRESULT CommandUnderlines(
                        [in, lcid] long lcid, 
                        [out, retval] XlCommandUnderlines* RHS);
        [id(0x00000143), propput, helpcontext(0x00010143)]
        HRESULT CommandUnderlines(
                        [in, lcid] long lcid, 
                        [in] XlCommandUnderlines RHS);
        [id(0x00000144), propget, helpcontext(0x00010144)]
        HRESULT ConstrainNumeric(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000144), propput, helpcontext(0x00010144)]
        HRESULT ConstrainNumeric(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000145), helpcontext(0x00010145)]
        HRESULT ConvertFormula(
                        [in] VARIANT Formula, 
                        [in] XlReferenceStyle FromReferenceStyle, 
                        [in, optional] VARIANT ToReferenceStyle, 
                        [in, optional] VARIANT ToAbsolute, 
                        [in, optional] VARIANT RelativeTo, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000003df), propget, helpcontext(0x000103df)]
        HRESULT CopyObjectsWithCells(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000003df), propput, helpcontext(0x000103df)]
        HRESULT CopyObjectsWithCells(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000489), propget, helpcontext(0x00010489)]
        HRESULT Cursor(
                        [in, lcid] long lcid, 
                        [out, retval] XlMousePointer* RHS);
        [id(0x00000489), propput, helpcontext(0x00010489)]
        HRESULT Cursor(
                        [in, lcid] long lcid, 
                        [in] XlMousePointer RHS);
        [id(0x00000313), propget, helpcontext(0x00010313)]
        HRESULT CustomListCount(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x0000014a), propget, helpcontext(0x0001014a)]
        HRESULT CutCopyMode(
                        [in, lcid] long lcid, 
                        [out, retval] XlCutCopyMode* RHS);
        [id(0x0000014a), propput, helpcontext(0x0001014a)]
        HRESULT CutCopyMode(
                        [in, lcid] long lcid, 
                        [in] XlCutCopyMode RHS);
        [id(0x0000014b), propget, helpcontext(0x0001014b)]
        HRESULT DataEntryMode(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x0000014b), propput, helpcontext(0x0001014b)]
        HRESULT DataEntryMode(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x000006f6), hidden, helpcontext(0x000106f6)]
        HRESULT Dummy1(
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [out, retval] VARIANT* RHS);
        [id(0x000006f7), hidden, helpcontext(0x000106f7)]
        HRESULT Dummy2(
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [out, retval] VARIANT* RHS);
        [id(0x000006f8), hidden, helpcontext(0x000106f8)]
        HRESULT Dummy3([out, retval] VARIANT* RHS);
        [id(0x000006f9), hidden, helpcontext(0x000106f9)]
        HRESULT Dummy4(
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [out, retval] VARIANT* RHS);
        [id(0x000006fa), hidden, helpcontext(0x000106fa)]
        HRESULT Dummy5(
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [out, retval] VARIANT* RHS);
        [id(0x000006fb), hidden, helpcontext(0x000106fb)]
        HRESULT Dummy6([out, retval] VARIANT* RHS);
        [id(0x000006fc), hidden, helpcontext(0x000106fc)]
        HRESULT Dummy7([out, retval] VARIANT* RHS);
        [id(0x000006fd), hidden, helpcontext(0x000106fd)]
        HRESULT Dummy8(
                        [in, optional] VARIANT Arg1, 
                        [out, retval] VARIANT* RHS);
        [id(0x000006fe), hidden, helpcontext(0x000106fe)]
        HRESULT Dummy9([out, retval] VARIANT* RHS);
        [id(0x000006ff), hidden, helpcontext(0x000106ff)]
        HRESULT Dummy10(
                        [in, optional] VARIANT arg, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000700), hidden, helpcontext(0x00010700)]
        HRESULT Dummy11();
        [id(00000000), propget, helpcontext(0x00010000)]
        HRESULT _Default([out, retval] BSTR* RHS);
        [id(0x0000040e), propget, helpcontext(0x0001040e)]
        HRESULT DefaultFilePath(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x0000040e), propput, helpcontext(0x0001040e)]
        HRESULT DefaultFilePath(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x000000d9), hidden, helpcontext(0x000100d9)]
        HRESULT DeleteChartAutoFormat(
                        [in] BSTR Name, 
                        [in, lcid] long lcid);
        [id(0x0000030f), helpcontext(0x0001030f)]
        HRESULT DeleteCustomList(
                        [in] long ListNum, 
                        [in, lcid] long lcid);
        [id(0x000002f9), propget, helpcontext(0x000102f9)]
        HRESULT Dialogs([out, retval] Dialogs** RHS);
        [id(0x00000157), propget, helpcontext(0x00010157)]
        HRESULT DisplayAlerts(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000157), propput, helpcontext(0x00010157)]
        HRESULT DisplayAlerts(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000158), propget, helpcontext(0x00010158)]
        HRESULT DisplayFormulaBar(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000158), propput, helpcontext(0x00010158)]
        HRESULT DisplayFormulaBar(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000425), propget, helpcontext(0x00010425)]
        HRESULT DisplayFullScreen(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000425), propput, helpcontext(0x00010425)]
        HRESULT DisplayFullScreen(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000159), propget, helpcontext(0x00010159)]
        HRESULT DisplayNoteIndicator([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000159), propput, helpcontext(0x00010159)]
        HRESULT DisplayNoteIndicator([in] VARIANT_BOOL RHS);
        [id(0x000004ac), propget, helpcontext(0x000104ac)]
        HRESULT DisplayCommentIndicator([out, retval] XlCommentDisplayMode* RHS);
        [id(0x000004ac), propput, helpcontext(0x000104ac)]
        HRESULT DisplayCommentIndicator([in] XlCommentDisplayMode RHS);
        [id(0x0000039f), propget, helpcontext(0x0001039f)]
        HRESULT DisplayExcel4Menus(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000039f), propput, helpcontext(0x0001039f)]
        HRESULT DisplayExcel4Menus(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000039e), propget, helpcontext(0x0001039e)]
        HRESULT DisplayRecentFiles([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000039e), propput, helpcontext(0x0001039e)]
        HRESULT DisplayRecentFiles([in] VARIANT_BOOL RHS);
        [id(0x0000015a), propget, helpcontext(0x0001015a)]
        HRESULT DisplayScrollBars(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000015a), propput, helpcontext(0x0001015a)]
        HRESULT DisplayScrollBars(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000015b), propget, helpcontext(0x0001015b)]
        HRESULT DisplayStatusBar(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000015b), propput, helpcontext(0x0001015b)]
        HRESULT DisplayStatusBar(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000015d), helpcontext(0x0001015d)]
        HRESULT DoubleClick([in, lcid] long lcid);
        [id(0x000003a1), propget, helpcontext(0x000103a1)]
        HRESULT EditDirectlyInCell(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000003a1), propput, helpcontext(0x000103a1)]
        HRESULT EditDirectlyInCell(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000049b), propget, helpcontext(0x0001049b)]
        HRESULT EnableAutoComplete([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000049b), propput, helpcontext(0x0001049b)]
        HRESULT EnableAutoComplete([in] VARIANT_BOOL RHS);
        [id(0x00000448), propget, helpcontext(0x00010448)]
        HRESULT EnableCancelKey(
                        [in, lcid] long lcid, 
                        [out, retval] XlEnableCancelKey* RHS);
        [id(0x00000448), propput, helpcontext(0x00010448)]
        HRESULT EnableCancelKey(
                        [in, lcid] long lcid, 
                        [in] XlEnableCancelKey RHS);
        [id(0x000004ad), propget, helpcontext(0x000104ad)]
        HRESULT EnableSound([out, retval] VARIANT_BOOL* RHS);
        [id(0x000004ad), propput, helpcontext(0x000104ad)]
        HRESULT EnableSound([in] VARIANT_BOOL RHS);
        [id(0x00000428), propget, hidden, helpcontext(0x00010428)]
        HRESULT EnableTipWizard(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000428), propput, hidden, helpcontext(0x00010428)]
        HRESULT EnableTipWizard(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x000003a3), propget, helpcontext(0x000103a3)]
        HRESULT FileConverters(
                        [in, optional] VARIANT Index1, 
                        [in, optional] VARIANT Index2, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000004b0), propget, hidden, helpcontext(0x000104b0)]
        HRESULT FileSearch([out, retval] FileSearch** RHS);
        [id(0x000004b1), propget, hidden, helpcontext(0x000104b1)]
        HRESULT FileFind([out, retval] IFind** RHS);
        [id(0x0000042c), hidden, helpcontext(0x0001042c)]
        HRESULT _FindFile([in, lcid] long lcid);
        [id(0x0000015f), propget, helpcontext(0x0001015f)]
        HRESULT FixedDecimal(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000015f), propput, helpcontext(0x0001015f)]
        HRESULT FixedDecimal(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000160), propget, helpcontext(0x00010160)]
        HRESULT FixedDecimalPlaces(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000160), propput, helpcontext(0x00010160)]
        HRESULT FixedDecimalPlaces(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x00000312), helpcontext(0x00010312)]
        HRESULT GetCustomListContents(
                        [in] long ListNum, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000311), helpcontext(0x00010311)]
        HRESULT GetCustomListNum(
                        [in] VARIANT ListArray, 
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000433), helpcontext(0x00010433)]
        HRESULT GetOpenFilename(
                        [in, optional] VARIANT FileFilter, 
                        [in, optional] VARIANT FilterIndex, 
                        [in, optional] VARIANT Title, 
                        [in, optional] VARIANT ButtonText, 
                        [in, optional] VARIANT MultiSelect, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000434), helpcontext(0x00010434)]
        HRESULT GetSaveAsFilename(
                        [in, optional] VARIANT InitialFilename, 
                        [in, optional] VARIANT FileFilter, 
                        [in, optional] VARIANT FilterIndex, 
                        [in, optional] VARIANT Title, 
                        [in, optional] VARIANT ButtonText, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000001db), helpcontext(0x000101db)]
        HRESULT Goto(
                        [in, optional] VARIANT Reference, 
                        [in, optional] VARIANT Scroll, 
                        [in, lcid] long lcid);
        [id(0x0000007b), propget, helpcontext(0x0001007b)]
        HRESULT Height(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x0000007b), propput, helpcontext(0x0001007b)]
        HRESULT Height(
                        [in, lcid] long lcid, 
                        [in] double RHS);
        [id(0x00000162), helpcontext(0x00010162)]
        HRESULT Help(
                        [in, optional] VARIANT HelpFile, 
                        [in, optional] VARIANT HelpContextID, 
                        [in, lcid] long lcid);
        [id(0x00000164), propget, helpcontext(0x00010164)]
        HRESULT IgnoreRemoteRequests(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000164), propput, helpcontext(0x00010164)]
        HRESULT IgnoreRemoteRequests(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000043f), helpcontext(0x0001043f)]
        HRESULT InchesToPoints(
                        [in] double Inches, 
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x00000165), helpcontext(0x00010165)]
        HRESULT InputBox(
                        [in] BSTR Prompt, 
                        [in, optional] VARIANT Title, 
                        [in, optional] VARIANT Default, 
                        [in, optional] VARIANT Left, 
                        [in, optional] VARIANT Top, 
                        [in, optional] VARIANT HelpFile, 
                        [in, optional] VARIANT HelpContextID, 
                        [in, optional] VARIANT Type, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000169), propget, helpcontext(0x00010169)]
        HRESULT Interactive(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000169), propput, helpcontext(0x00010169)]
        HRESULT Interactive(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000016a), propget, helpcontext(0x0001016a)]
        HRESULT International(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x0000016b), propget, helpcontext(0x0001016b)]
        HRESULT Iteration(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000016b), propput, helpcontext(0x0001016b)]
        HRESULT Iteration(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000016c), propget, hidden, helpcontext(0x0001016c)]
        HRESULT LargeButtons([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000016c), propput, hidden, helpcontext(0x0001016c)]
        HRESULT LargeButtons([in] VARIANT_BOOL RHS);
        [id(0x0000007f), propget, helpcontext(0x0001007f)]
        HRESULT Left(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x0000007f), propput, helpcontext(0x0001007f)]
        HRESULT Left(
                        [in, lcid] long lcid, 
                        [in] double RHS);
        [id(0x0000016e), propget, helpcontext(0x0001016e)]
        HRESULT LibraryPath(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x0000046f), helpcontext(0x0001046f)]
        HRESULT MacroOptions(
                        [in, optional] VARIANT Macro, 
                        [in, optional] VARIANT Description, 
                        [in, optional] VARIANT HasMenu, 
                        [in, optional] VARIANT MenuText, 
                        [in, optional] VARIANT HasShortcutKey, 
                        [in, optional] VARIANT ShortcutKey, 
                        [in, optional] VARIANT Category, 
                        [in, optional] VARIANT StatusBar, 
                        [in, optional] VARIANT HelpContextID, 
                        [in, optional] VARIANT HelpFile, 
                        [in, lcid] long lcid);
        [id(0x000003b1), helpcontext(0x000103b1)]
        HRESULT MailLogoff([in, lcid] long lcid);
        [id(0x000003af), helpcontext(0x000103af)]
        HRESULT MailLogon(
                        [in, optional] VARIANT Name, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT DownloadNewMail, 
                        [in, lcid] long lcid);
        [id(0x000003ae), propget, helpcontext(0x000103ae)]
        HRESULT MailSession(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000003cb), propget, helpcontext(0x000103cb)]
        HRESULT MailSystem(
                        [in, lcid] long lcid, 
                        [out, retval] XlMailSystem* RHS);
        [id(0x0000016f), propget, helpcontext(0x0001016f)]
        HRESULT MathCoprocessorAvailable(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000170), propget, helpcontext(0x00010170)]
        HRESULT MaxChange(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x00000170), propput, helpcontext(0x00010170)]
        HRESULT MaxChange(
                        [in, lcid] long lcid, 
                        [in] double RHS);
        [id(0x00000171), propget, helpcontext(0x00010171)]
        HRESULT MaxIterations(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000171), propput, helpcontext(0x00010171)]
        HRESULT MaxIterations(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x00000172), propget, hidden, helpcontext(0x00010172)]
        HRESULT MemoryFree(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000173), propget, hidden, helpcontext(0x00010173)]
        HRESULT MemoryTotal(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000174), propget, hidden, helpcontext(0x00010174)]
        HRESULT MemoryUsed(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000175), propget, helpcontext(0x00010175)]
        HRESULT MouseAvailable(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000176), propget, helpcontext(0x00010176)]
        HRESULT MoveAfterReturn(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000176), propput, helpcontext(0x00010176)]
        HRESULT MoveAfterReturn(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000478), propget, helpcontext(0x00010478)]
        HRESULT MoveAfterReturnDirection(
                        [in, lcid] long lcid, 
                        [out, retval] XlDirection* RHS);
        [id(0x00000478), propput, helpcontext(0x00010478)]
        HRESULT MoveAfterReturnDirection(
                        [in, lcid] long lcid, 
                        [in] XlDirection RHS);
        [id(0x000004b2), propget, helpcontext(0x000104b2)]
        HRESULT RecentFiles([out, retval] RecentFiles** RHS);
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000003cc), helpcontext(0x000103cc)]
        HRESULT NextLetter(
                        [in, lcid] long lcid, 
                        [out, retval] Workbook** RHS);
        [id(0x00000184), propget, helpcontext(0x00010184)]
        HRESULT NetworkTemplatesPath(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x000004b3), propget, helpcontext(0x000104b3)]
        HRESULT ODBCErrors([out, retval] ODBCErrors** RHS);
        [id(0x000004b4), propget, helpcontext(0x000104b4)]
        HRESULT ODBCTimeout([out, retval] long* RHS);
        [id(0x000004b4), propput, helpcontext(0x000104b4)]
        HRESULT ODBCTimeout([in] long RHS);
        [id(0x00000271), propget, hidden, helpcontext(0x00010271)]
        HRESULT OnCalculate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000271), propput, hidden, helpcontext(0x00010271)]
        HRESULT OnCalculate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000275), propget, hidden, helpcontext(0x00010275)]
        HRESULT OnData(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000275), propput, hidden, helpcontext(0x00010275)]
        HRESULT OnData(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000274), propget, hidden, helpcontext(0x00010274)]
        HRESULT OnDoubleClick(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000274), propput, hidden, helpcontext(0x00010274)]
        HRESULT OnDoubleClick(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000273), propget, hidden, helpcontext(0x00010273)]
        HRESULT OnEntry(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000273), propput, hidden, helpcontext(0x00010273)]
        HRESULT OnEntry(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000272), helpcontext(0x00010272)]
        HRESULT OnKey(
                        [in] BSTR Key, 
                        [in, optional] VARIANT Procedure, 
                        [in, lcid] long lcid);
        [id(0x00000301), helpcontext(0x00010301)]
        HRESULT OnRepeat(
                        [in] BSTR Text, 
                        [in] BSTR Procedure, 
                        [in, lcid] long lcid);
        [id(0x00000407), propget, hidden, helpcontext(0x00010407)]
        HRESULT OnSheetActivate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000407), propput, hidden, helpcontext(0x00010407)]
        HRESULT OnSheetActivate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000439), propget, hidden, helpcontext(0x00010439)]
        HRESULT OnSheetDeactivate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000439), propput, hidden, helpcontext(0x00010439)]
        HRESULT OnSheetDeactivate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000270), helpcontext(0x00010270)]
        HRESULT OnTime(
                        [in] VARIANT EarliestTime, 
                        [in] BSTR Procedure, 
                        [in, optional] VARIANT LatestTime, 
                        [in, optional] VARIANT Schedule, 
                        [in, lcid] long lcid);
        [id(0x00000302), helpcontext(0x00010302)]
        HRESULT OnUndo(
                        [in] BSTR Text, 
                        [in] BSTR Procedure, 
                        [in, lcid] long lcid);
        [id(0x0000026f), propget, helpcontext(0x0001026f)]
        HRESULT OnWindow(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x0000026f), propput, helpcontext(0x0001026f)]
        HRESULT OnWindow(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000177), propget, helpcontext(0x00010177)]
        HRESULT OperatingSystem(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000178), propget, helpcontext(0x00010178)]
        HRESULT OrganizationName(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000123), propget, helpcontext(0x00010123)]
        HRESULT Path(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000179), propget, helpcontext(0x00010179)]
        HRESULT PathSeparator(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x0000017a), propget, helpcontext(0x0001017a)]
        HRESULT PreviousSelections(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000004b5), propget, helpcontext(0x000104b5)]
        HRESULT PivotTableSelection([out, retval] VARIANT_BOOL* RHS);
        [id(0x000004b5), propput, helpcontext(0x000104b5)]
        HRESULT PivotTableSelection([in] VARIANT_BOOL RHS);
        [id(0x00000426), propget, helpcontext(0x00010426)]
        HRESULT PromptForSummaryInfo(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000426), propput, helpcontext(0x00010426)]
        HRESULT PromptForSummaryInfo(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000012e), helpcontext(0x0001012e)]
        HRESULT Quit();
        [id(0x00000305), helpcontext(0x00010305)]
        HRESULT RecordMacro(
                        [in, optional] VARIANT BasicCode, 
                        [in, optional] VARIANT XlmCode, 
                        [in, lcid] long lcid);
        [id(0x0000017b), propget, helpcontext(0x0001017b)]
        HRESULT RecordRelative(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000017c), propget, helpcontext(0x0001017c)]
        HRESULT ReferenceStyle(
                        [in, lcid] long lcid, 
                        [out, retval] XlReferenceStyle* RHS);
        [id(0x0000017c), propput, helpcontext(0x0001017c)]
        HRESULT ReferenceStyle(
                        [in, lcid] long lcid, 
                        [in] XlReferenceStyle RHS);
        [id(0x00000307), propget, helpcontext(0x00010307)]
        HRESULT RegisteredFunctions(
                        [in, optional] VARIANT Index1, 
                        [in, optional] VARIANT Index2, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x0000001e), helpcontext(0x0001001e)]
        HRESULT RegisterXLL(
                        [in] BSTR Filename, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000012d), helpcontext(0x0001012d)]
        HRESULT Repeat([in, lcid] long lcid);
        [id(0x000003a0), hidden, helpcontext(0x000103a0)]
        HRESULT ResetTipWizard([in, lcid] long lcid);
        [id(0x000004b6), propget, helpcontext(0x000104b6)]
        HRESULT RollZoom([out, retval] VARIANT_BOOL* RHS);
        [id(0x000004b6), propput, helpcontext(0x000104b6)]
        HRESULT RollZoom([in] VARIANT_BOOL RHS);
        [id(0x0000011b), hidden, helpcontext(0x0001011b)]
        HRESULT Save(
                        [in, optional] VARIANT Filename, 
                        [in, lcid] long lcid);
        [id(0x000000d4), helpcontext(0x000100d4)]
        HRESULT SaveWorkspace(
                        [in, optional] VARIANT Filename, 
                        [in, lcid] long lcid);
        [id(0x0000017e), propget, helpcontext(0x0001017e)]
        HRESULT ScreenUpdating(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000017e), propput, helpcontext(0x0001017e)]
        HRESULT ScreenUpdating(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x000000db), hidden, helpcontext(0x000100db)]
        HRESULT SetDefaultChart(
                        [in, optional] VARIANT FormatName, 
                        [in, optional] VARIANT Gallery);
        [id(0x000003e1), propget, helpcontext(0x000103e1)]
        HRESULT SheetsInNewWorkbook(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x000003e1), propput, helpcontext(0x000103e1)]
        HRESULT SheetsInNewWorkbook(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x000004b7), propget, helpcontext(0x000104b7)]
        HRESULT ShowChartTipNames([out, retval] VARIANT_BOOL* RHS);
        [id(0x000004b7), propput, helpcontext(0x000104b7)]
        HRESULT ShowChartTipNames([in] VARIANT_BOOL RHS);
        [id(0x000004b8), propget, helpcontext(0x000104b8)]
        HRESULT ShowChartTipValues([out, retval] VARIANT_BOOL* RHS);
        [id(0x000004b8), propput, helpcontext(0x000104b8)]
        HRESULT ShowChartTipValues([in] VARIANT_BOOL RHS);
        [id(0x0000039c), propget, helpcontext(0x0001039c)]
        HRESULT StandardFont(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x0000039c), propput, helpcontext(0x0001039c)]
        HRESULT StandardFont(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x0000039d), propget, helpcontext(0x0001039d)]
        HRESULT StandardFontSize(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x0000039d), propput, helpcontext(0x0001039d)]
        HRESULT StandardFontSize(
                        [in, lcid] long lcid, 
                        [in] double RHS);
        [id(0x00000181), propget, helpcontext(0x00010181)]
        HRESULT StartupPath(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000182), propget, helpcontext(0x00010182)]
        HRESULT StatusBar(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000182), propput, helpcontext(0x00010182)]
        HRESULT StatusBar(
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [id(0x0000017d), propget, helpcontext(0x0001017d)]
        HRESULT TemplatesPath(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000183), propget, helpcontext(0x00010183)]
        HRESULT ShowToolTips([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000183), propput, helpcontext(0x00010183)]
        HRESULT ShowToolTips([in] VARIANT_BOOL RHS);
        [id(0x0000007e), propget, helpcontext(0x0001007e)]
        HRESULT Top(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x0000007e), propput, helpcontext(0x0001007e)]
        HRESULT Top(
                        [in, lcid] long lcid, 
                        [in] double RHS);
        [id(0x000004b9), propget, helpcontext(0x000104b9)]
        HRESULT DefaultSaveFormat([out, retval] XlFileFormat* RHS);
        [id(0x000004b9), propput, helpcontext(0x000104b9)]
        HRESULT DefaultSaveFormat([in] XlFileFormat RHS);
        [id(0x00000136), propget, helpcontext(0x00010136)]
        HRESULT TransitionMenuKey(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000136), propput, helpcontext(0x00010136)]
        HRESULT TransitionMenuKey(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000137), propget, helpcontext(0x00010137)]
        HRESULT TransitionMenuKeyAction(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000137), propput, helpcontext(0x00010137)]
        HRESULT TransitionMenuKeyAction(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x00000138), propget, helpcontext(0x00010138)]
        HRESULT TransitionNavigKeys(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000138), propput, helpcontext(0x00010138)]
        HRESULT TransitionNavigKeys(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000012f), helpcontext(0x0001012f)]
        HRESULT Undo([in, lcid] long lcid);
        [id(0x00000185), propget, helpcontext(0x00010185)]
        HRESULT UsableHeight(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x00000186), propget, helpcontext(0x00010186)]
        HRESULT UsableWidth(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x000004ba), propget, helpcontext(0x000104ba)]
        HRESULT UserControl([out, retval] VARIANT_BOOL* RHS);
        [id(0x000004ba), propput, helpcontext(0x000104ba)]
        HRESULT UserControl([in] VARIANT_BOOL RHS);
        [id(0x00000187), propget, helpcontext(0x00010187)]
        HRESULT UserName(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000187), propput, helpcontext(0x00010187)]
        HRESULT UserName(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000006), propget, helpcontext(0x00010006)]
        HRESULT Value([out, retval] BSTR* RHS);
        [id(0x000004bb), propget, helpcontext(0x000104bb)]
        HRESULT VBE([out, retval] VBE** RHS);
        [id(0x00000188), propget, helpcontext(0x00010188)]
        HRESULT Version(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x0000022e), propget, helpcontext(0x0001022e)]
        HRESULT Visible(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000022e), propput, helpcontext(0x0001022e)]
        HRESULT Visible(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000314), helpcontext(0x00010314)]
        HRESULT Volatile(
                        [in, optional] VARIANT Volatile, 
                        [in, lcid] long lcid);
        [id(0x00000189), hidden, helpcontext(0x00010189)]
        HRESULT _Wait(
                        [in] VARIANT Time, 
                        [in, lcid] long lcid);
        [id(0x0000007a), propget, helpcontext(0x0001007a)]
        HRESULT Width(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x0000007a), propput, helpcontext(0x0001007a)]
        HRESULT Width(
                        [in, lcid] long lcid, 
                        [in] double RHS);
        [id(0x0000018b), propget, helpcontext(0x0001018b)]
        HRESULT WindowsForPens(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000018c), propget, helpcontext(0x0001018c)]
        HRESULT WindowState(
                        [in, lcid] long lcid, 
                        [out, retval] XlWindowState* RHS);
        [id(0x0000018c), propput, helpcontext(0x0001018c)]
        HRESULT WindowState(
                        [in, lcid] long lcid, 
                        [in] XlWindowState RHS);
        [id(0x00000002), propget, hidden, helpcontext(0x00010002)]
        HRESULT UILanguage(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000002), propput, hidden, helpcontext(0x00010002)]
        HRESULT UILanguage(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x000000e5), propget, helpcontext(0x000100e5)]
        HRESULT DefaultSheetDirection(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x000000e5), propput, helpcontext(0x000100e5)]
        HRESULT DefaultSheetDirection(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x000000e8), propget, helpcontext(0x000100e8)]
        HRESULT CursorMovement(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x000000e8), propput, helpcontext(0x000100e8)]
        HRESULT CursorMovement(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x000000e9), propget, helpcontext(0x000100e9)]
        HRESULT ControlCharacters(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000000e9), propput, helpcontext(0x000100e9)]
        HRESULT ControlCharacters(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x000000a9), hidden, helpcontext(0x000100a9)]
        HRESULT _WSFunction(
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000004bc), propget, helpcontext(0x000104bc)]
        HRESULT EnableEvents([out, retval] VARIANT_BOOL* RHS);
        [id(0x000004bc), propput, helpcontext(0x000104bc)]
        HRESULT EnableEvents([in] VARIANT_BOOL RHS);
        [id(0x000004bd), propget, hidden, helpcontext(0x000104bd)]
        HRESULT DisplayInfoWindow([out, retval] VARIANT_BOOL* RHS);
        [id(0x000004bd), propput, hidden, helpcontext(0x000104bd)]
        HRESULT DisplayInfoWindow([in] VARIANT_BOOL RHS);
        [id(0x000006ea), helpcontext(0x000106ea)]
        HRESULT Wait(
                        [in] VARIANT Time, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000701), propget, helpcontext(0x00010701)]
        HRESULT ExtendList([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000701), propput, helpcontext(0x00010701)]
        HRESULT ExtendList([in] VARIANT_BOOL RHS);
        [id(0x00000702), propget, helpcontext(0x00010702)]
        HRESULT OLEDBErrors([out, retval] OLEDBErrors** RHS);
        [id(0x00000703), helpcontext(0x00010703)]
        HRESULT GetPhonetic(
                        [in, optional] VARIANT Text, 
                        [out, retval] BSTR* RHS);
        [id(0x00000704), propget, helpcontext(0x00010704)]
        HRESULT COMAddIns([out, retval] COMAddIns** RHS);
        [id(0x00000705), propget, helpcontext(0x00010705)]
        HRESULT DefaultWebOptions([out, retval] DefaultWebOptions** RHS);
        [id(0x00000706), propget, helpcontext(0x00010706)]
        HRESULT ProductCode([out, retval] BSTR* RHS);
        [id(0x00000707), propget, helpcontext(0x00010707)]
        HRESULT UserLibraryPath([out, retval] BSTR* RHS);
        [id(0x00000708), propget, helpcontext(0x00010708)]
        HRESULT AutoPercentEntry([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000708), propput, helpcontext(0x00010708)]
        HRESULT AutoPercentEntry([in] VARIANT_BOOL RHS);
        [id(0x00000709), propget, helpcontext(0x00010709)]
        HRESULT LanguageSettings([out, retval] LanguageSettings** RHS);
        [id(0x0000070a), propget, hidden, helpcontext(0x0001070a)]
        HRESULT Dummy101([out, retval] IDispatch** RHS);
        [id(0x0000070b), hidden, helpcontext(0x0001070b)]
        HRESULT Dummy12(
                        [in] PivotTable* p1, 
                        [in] PivotTable* p2);
        [id(0x0000070c), propget, helpcontext(0x0001070c)]
        HRESULT AnswerWizard([out, retval] AnswerWizard** RHS);
        [id(0x0000070d), helpcontext(0x0001070d)]
        HRESULT CalculateFull();
        [id(0x000006eb), helpcontext(0x000106eb)]
        HRESULT FindFile(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000070e), propget, helpcontext(0x0001070e)]
        HRESULT CalculationVersion([out, retval] long* RHS);
        [id(0x0000070f), propget, helpcontext(0x0001070f)]
        HRESULT ShowWindowsInTaskbar([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000070f), propput, helpcontext(0x0001070f)]
        HRESULT ShowWindowsInTaskbar([in] VARIANT_BOOL RHS);
        [id(0x00000710), propget, helpcontext(0x00010710)]
        HRESULT FeatureInstall([out, retval] MsoFeatureInstall* RHS);
        [id(0x00000710), propput, helpcontext(0x00010710)]
        HRESULT FeatureInstall([in] MsoFeatureInstall RHS);
        [id(0x0000078c), propget, helpcontext(0x0001078c)]
        HRESULT Ready([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000078d), hidden, helpcontext(0x0001078d)]
        HRESULT Dummy13(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] VARIANT* RHS);
        [id(0x0000078e), propget, helpcontext(0x0001078e)]
        HRESULT FindFormat([out, retval] CellFormat** RHS);
        [id(0x0000078e), propputref, helpcontext(0x0001078e)]
        HRESULT FindFormat([in] CellFormat* RHS);
        [id(0x0000078f), propget, helpcontext(0x0001078f)]
        HRESULT ReplaceFormat([out, retval] CellFormat** RHS);
        [id(0x0000078f), propputref, helpcontext(0x0001078f)]
        HRESULT ReplaceFormat([in] CellFormat* RHS);
        [id(0x00000790), propget, helpcontext(0x00010790)]
        HRESULT UsedObjects([out, retval] UsedObjects** RHS);
        [id(0x00000791), propget, helpcontext(0x00010791)]
        HRESULT CalculationState([out, retval] XlCalculationState* RHS);
        [id(0x00000792), propget, helpcontext(0x00010792)]
        HRESULT CalculationInterruptKey([out, retval] XlCalculationInterruptKey* RHS);
        [id(0x00000792), propput, helpcontext(0x00010792)]
        HRESULT CalculationInterruptKey([in] XlCalculationInterruptKey RHS);
        [id(0x00000793), propget, helpcontext(0x00010793)]
        HRESULT Watches([out, retval] Watches** RHS);
        [id(0x00000794), propget, helpcontext(0x00010794)]
        HRESULT DisplayFunctionToolTips([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000794), propput, helpcontext(0x00010794)]
        HRESULT DisplayFunctionToolTips([in] VARIANT_BOOL RHS);
        [id(0x00000795), propget, helpcontext(0x00010795)]
        HRESULT AutomationSecurity([out, retval] MsoAutomationSecurity* RHS);
        [id(0x00000795), propput, helpcontext(0x00010795)]
        HRESULT AutomationSecurity([in] MsoAutomationSecurity RHS);
        [id(0x00000796), propget, helpcontext(0x00010796)]
        HRESULT FileDialog(
                        [in] MsoFileDialogType fileDialogType, 
                        [out, retval] FileDialog** RHS);
        [id(0x00000798), hidden, helpcontext(0x00010798)]
        HRESULT Dummy14();
        [id(0x00000799), helpcontext(0x00010799)]
        HRESULT CalculateFullRebuild();
        [id(0x0000079a), propget, helpcontext(0x0001079a)]
        HRESULT DisplayPasteOptions([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000079a), propput, helpcontext(0x0001079a)]
        HRESULT DisplayPasteOptions([in] VARIANT_BOOL RHS);
        [id(0x0000079b), propget, helpcontext(0x0001079b)]
        HRESULT DisplayInsertOptions([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000079b), propput, helpcontext(0x0001079b)]
        HRESULT DisplayInsertOptions([in] VARIANT_BOOL RHS);
        [id(0x0000079c), propget, helpcontext(0x0001079c)]
        HRESULT GenerateGetPivotData([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000079c), propput, helpcontext(0x0001079c)]
        HRESULT GenerateGetPivotData([in] VARIANT_BOOL RHS);
        [id(0x0000079d), propget, helpcontext(0x0001079d)]
        HRESULT AutoRecover([out, retval] AutoRecover** RHS);
        [id(0x0000079e), propget, helpcontext(0x0001079e)]
        HRESULT Hwnd([out, retval] long* RHS);
        [id(0x0000079f), propget, helpcontext(0x0001079f)]
        HRESULT Hinstance([out, retval] long* RHS);
        [id(0x000007a0), helpcontext(0x000107a0)]
        HRESULT CheckAbort([in, optional] VARIANT KeepAbort);
        [id(0x000007a2), propget, helpcontext(0x000107a2)]
        HRESULT ErrorCheckingOptions([out, retval] ErrorCheckingOptions** RHS);
        [id(0x000007a3), propget, helpcontext(0x000107a3)]
        HRESULT AutoFormatAsYouTypeReplaceHyperlinks([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007a3), propput, helpcontext(0x000107a3)]
        HRESULT AutoFormatAsYouTypeReplaceHyperlinks([in] VARIANT_BOOL RHS);
        [id(0x000007a4), propget, helpcontext(0x000107a4)]
        HRESULT SmartTagRecognizers([out, retval] SmartTagRecognizers** RHS);
        [id(0x0000061d), propget, helpcontext(0x0001061d)]
        HRESULT NewWorkbook([out, retval] NewFile** RHS);
        [id(0x000007a5), propget, helpcontext(0x000107a5)]
        HRESULT SpellingOptions([out, retval] SpellingOptions** RHS);
        [id(0x000007a6), propget, helpcontext(0x000107a6)]
        HRESULT Speech([out, retval] Speech** RHS);
        [id(0x000007a7), propget, helpcontext(0x000107a7)]
        HRESULT MapPaperSize([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007a7), propput, helpcontext(0x000107a7)]
        HRESULT MapPaperSize([in] VARIANT_BOOL RHS);
        [id(0x000007a8), propget, helpcontext(0x000107a8)]
        HRESULT ShowStartupDialog([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007a8), propput, helpcontext(0x000107a8)]
        HRESULT ShowStartupDialog([in] VARIANT_BOOL RHS);
        [id(0x00000711), propget, helpcontext(0x00010711)]
        HRESULT DecimalSeparator([out, retval] BSTR* RHS);
        [id(0x00000711), propput, helpcontext(0x00010711)]
        HRESULT DecimalSeparator([in] BSTR RHS);
        [id(0x00000712), propget, helpcontext(0x00010712)]
        HRESULT ThousandsSeparator([out, retval] BSTR* RHS);
        [id(0x00000712), propput, helpcontext(0x00010712)]
        HRESULT ThousandsSeparator([in] BSTR RHS);
        [id(0x000007a9), propget, helpcontext(0x000107a9)]
        HRESULT UseSystemSeparators([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007a9), propput, helpcontext(0x000107a9)]
        HRESULT UseSystemSeparators([in] VARIANT_BOOL RHS);
        [id(0x000007aa), propget, helpcontext(0x000107aa)]
        HRESULT ThisCell([out, retval] Range** RHS);
        [id(0x000007ab), propget, helpcontext(0x000107ab)]
        HRESULT RTD([out, retval] RTD** RHS);
        [id(0x000008cb), propget, helpcontext(0x000108cb)]
        HRESULT DisplayDocumentActionTaskPane([out, retval] VARIANT_BOOL* RHS);
        [id(0x000008cb), propput, helpcontext(0x000108cb)]
        HRESULT DisplayDocumentActionTaskPane([in] VARIANT_BOOL RHS);
        [id(0x000008cc), helpcontext(0x000108cc)]
        HRESULT DisplayXMLSourcePane([in, optional] VARIANT XmlMap);
        [id(0x000008ce), propget, helpcontext(0x000108ce)]
        HRESULT ArbitraryXMLSupportAvailable([out, retval] VARIANT_BOOL* RHS);
        [id(0x000008cf), hidden, helpcontext(0x000108cf)]
        HRESULT Support(
                        [in] IDispatch* Object, 
                        [in] long ID, 
                        [in, optional] VARIANT arg, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000945), hidden, helpcontext(0x00010945)]
        HRESULT Dummy20(
                        [in] long grfCompareFunctions, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000947), propget, helpcontext(0x00010947)]
        HRESULT MeasurementUnit([out, retval] long* RHS);
        [id(0x00000947), propput, helpcontext(0x00010947)]
        HRESULT MeasurementUnit([in] long RHS);
        [id(0x00000948), propget, helpcontext(0x00010948)]
        HRESULT ShowSelectionFloaties([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000948), propput, helpcontext(0x00010948)]
        HRESULT ShowSelectionFloaties([in] VARIANT_BOOL RHS);
        [id(0x00000949), propget, helpcontext(0x00010949)]
        HRESULT ShowMenuFloaties([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000949), propput, helpcontext(0x00010949)]
        HRESULT ShowMenuFloaties([in] VARIANT_BOOL RHS);
        [id(0x0000094a), propget, helpcontext(0x0001094a)]
        HRESULT ShowDevTools([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000094a), propput, helpcontext(0x0001094a)]
        HRESULT ShowDevTools([in] VARIANT_BOOL RHS);
        [id(0x0000094b), propget, helpcontext(0x0001094b)]
        HRESULT EnableLivePreview([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000094b), propput, helpcontext(0x0001094b)]
        HRESULT EnableLivePreview([in] VARIANT_BOOL RHS);
        [id(0x0000094c), propget, helpcontext(0x0001094c)]
        HRESULT DisplayDocumentInformationPanel([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000094c), propput, helpcontext(0x0001094c)]
        HRESULT DisplayDocumentInformationPanel([in] VARIANT_BOOL RHS);
        [id(0x0000094d), propget, helpcontext(0x0001094d)]
        HRESULT AlwaysUseClearType([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000094d), propput, helpcontext(0x0001094d)]
        HRESULT AlwaysUseClearType([in] VARIANT_BOOL RHS);
        [id(0x0000094e), propget, helpcontext(0x0001094e)]
        HRESULT WarnOnFunctionNameConflict([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000094e), propput, helpcontext(0x0001094e)]
        HRESULT WarnOnFunctionNameConflict([in] VARIANT_BOOL RHS);
        [id(0x0000094f), propget, helpcontext(0x0001094f)]
        HRESULT FormulaBarHeight([out, retval] long* RHS);
        [id(0x0000094f), propput, helpcontext(0x0001094f)]
        HRESULT FormulaBarHeight([in] long RHS);
        [id(0x00000950), propget, helpcontext(0x00010950)]
        HRESULT DisplayFormulaAutoComplete([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000950), propput, helpcontext(0x00010950)]
        HRESULT DisplayFormulaAutoComplete([in] VARIANT_BOOL RHS);
        [id(0x00000951), propget, helpcontext(0x00010951)]
        HRESULT GenerateTableRefs(
                        [in, lcid] long lcid, 
                        [out, retval] XlGenerateTableRefs* RHS);
        [id(0x00000951), propput, helpcontext(0x00010951)]
        HRESULT GenerateTableRefs(
                        [in, lcid] long lcid, 
                        [in] XlGenerateTableRefs RHS);
        [id(0x00000952), propget, helpcontext(0x00010952)]
        HRESULT Assistance([out, retval] IAssistance** RHS);
        [id(0x00000953), helpcontext(0x00010953)]
        HRESULT CalculateUntilAsyncQueriesDone();
        [id(0x00000954), propget, helpcontext(0x00010954)]
        HRESULT EnableLargeOperationAlert([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000954), propput, helpcontext(0x00010954)]
        HRESULT EnableLargeOperationAlert([in] VARIANT_BOOL RHS);
        [id(0x00000955), propget, helpcontext(0x00010955)]
        HRESULT LargeOperationCellThousandCount([out, retval] long* RHS);
        [id(0x00000955), propput, helpcontext(0x00010955)]
        HRESULT LargeOperationCellThousandCount([in] long RHS);
        [id(0x00000956), propget, helpcontext(0x00010956)]
        HRESULT DeferAsyncQueries([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000956), propput, helpcontext(0x00010956)]
        HRESULT DeferAsyncQueries([in] VARIANT_BOOL RHS);
        [id(0x00000957), propget, helpcontext(0x00010957)]
        HRESULT MultiThreadedCalculation([out, retval] MultiThreadedCalculation** RHS);
        [id(0x00000958), helpcontext(0x00010958)]
        HRESULT SharePointVersion(
                        [in] BSTR bstrUrl, 
                        [out, retval] long* RHS);
        [id(0x0000095a), propget, helpcontext(0x0001095a)]
        HRESULT ActiveEncryptionSession([out, retval] long* RHS);
        [id(0x0000095b), propget, helpcontext(0x0001095b)]
        HRESULT HighQualityModeForGraphics([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000095b), propput, helpcontext(0x0001095b)]
        HRESULT HighQualityModeForGraphics([in] VARIANT_BOOL RHS);
        [id(0x00000ad0), propget, helpcontext(0x00010ad0)]
        HRESULT FileExportConverters([out, retval] FileExportConverters** RHS);
    };

    [
      odl,
      uuid(00020845-0001-0000-C000-000000000046),
      helpcontext(0x00020005),
      hidden
    ]
    interface IWorksheetFunction : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x000100a9)]
        HRESULT _stdcall _WSFunction(
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00014000)]
        HRESULT _stdcall Count(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014002)]
        HRESULT _stdcall IsNA(
                        [in] VARIANT Arg1, 
                        [out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x00014003)]
        HRESULT _stdcall IsError(
                        [in] VARIANT Arg1, 
                        [out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x00014004)]
        HRESULT _stdcall Sum(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014005)]
        HRESULT _stdcall Average(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014006)]
        HRESULT _stdcall Min(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014007)]
        HRESULT _stdcall Max(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001400b)]
        HRESULT _stdcall Npv(
                        [in] double Arg1, 
                        [in] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001400c)]
        HRESULT _stdcall StDev(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001400d)]
        HRESULT _stdcall Dollar(
                        [in] double Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x0001400e)]
        HRESULT _stdcall Fixed(
                        [in] double Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014013)]
        HRESULT _stdcall Pi([out, retval] double* RHS);
        [helpcontext(0x00014016)]
        HRESULT _stdcall Ln(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014017)]
        HRESULT _stdcall Log10(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001401b)]
        HRESULT _stdcall Round(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001401c)]
        HRESULT _stdcall Lookup(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001401d)]
        HRESULT _stdcall Index(
                        [in] VARIANT Arg1, 
                        [in] double Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001401e)]
        HRESULT _stdcall Rept(
                        [in] BSTR Arg1, 
                        [in] double Arg2, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014024)]
        HRESULT _stdcall And(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x00014025)]
        HRESULT _stdcall Or(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x00014028)]
        HRESULT _stdcall DCount(
                        [in] Range* Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014029)]
        HRESULT _stdcall DSum(
                        [in] Range* Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001402a)]
        HRESULT _stdcall DAverage(
                        [in] Range* Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001402b)]
        HRESULT _stdcall DMin(
                        [in] Range* Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001402c)]
        HRESULT _stdcall DMax(
                        [in] Range* Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001402d)]
        HRESULT _stdcall DStDev(
                        [in] Range* Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001402e)]
        HRESULT _stdcall Var(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001402f)]
        HRESULT _stdcall DVar(
                        [in] Range* Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014030)]
        HRESULT _stdcall Text(
                        [in] VARIANT Arg1, 
                        [in] BSTR Arg2, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014031)]
        HRESULT _stdcall LinEst(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00014032)]
        HRESULT _stdcall Trend(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00014033)]
        HRESULT _stdcall LogEst(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00014034)]
        HRESULT _stdcall Growth(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00014038)]
        HRESULT _stdcall Pv(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014039)]
        HRESULT _stdcall Fv(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001403a)]
        HRESULT _stdcall NPer(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001403b)]
        HRESULT _stdcall Pmt(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001403c)]
        HRESULT _stdcall Rate(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001403d)]
        HRESULT _stdcall MIrr(
                        [in] VARIANT Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001403e)]
        HRESULT _stdcall Irr(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014040)]
        HRESULT _stdcall Match(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014046)]
        HRESULT _stdcall Weekday(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014052)]
        HRESULT _stdcall Search(
                        [in] BSTR Arg1, 
                        [in] BSTR Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014053)]
        HRESULT _stdcall Transpose(
                        [in] VARIANT Arg1, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00014061)]
        HRESULT _stdcall Atan2(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014062)]
        HRESULT _stdcall Asin(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014063)]
        HRESULT _stdcall Acos(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014064)]
        HRESULT _stdcall Choose(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00014065)]
        HRESULT _stdcall HLookup(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00014066)]
        HRESULT _stdcall VLookup(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001406d)]
        HRESULT _stdcall Log(
                        [in] double Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014072)]
        HRESULT _stdcall Proper(
                        [in] BSTR Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014076)]
        HRESULT _stdcall Trim(
                        [in] BSTR Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014077)]
        HRESULT _stdcall Replace(
                        [in] BSTR Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in] BSTR Arg4, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014078)]
        HRESULT _stdcall Substitute(
                        [in] BSTR Arg1, 
                        [in] BSTR Arg2, 
                        [in] BSTR Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x0001407c)]
        HRESULT _stdcall Find(
                        [in] BSTR Arg1, 
                        [in] BSTR Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001407e)]
        HRESULT _stdcall IsErr(
                        [in] VARIANT Arg1, 
                        [out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x0001407f)]
        HRESULT _stdcall IsText(
                        [in] VARIANT Arg1, 
                        [out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x00014080)]
        HRESULT _stdcall IsNumber(
                        [in] VARIANT Arg1, 
                        [out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x0001408e)]
        HRESULT _stdcall Sln(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001408f)]
        HRESULT _stdcall Syd(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in] double Arg4, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014090)]
        HRESULT _stdcall Ddb(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in] double Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140a2)]
        HRESULT _stdcall Clean(
                        [in] BSTR Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x000140a3)]
        HRESULT _stdcall MDeterm(
                        [in] VARIANT Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140a4)]
        HRESULT _stdcall MInverse(
                        [in] VARIANT Arg1, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x000140a5)]
        HRESULT _stdcall MMult(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x000140a7)]
        HRESULT _stdcall Ipmt(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in] double Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140a8)]
        HRESULT _stdcall Ppmt(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in] double Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140a9)]
        HRESULT _stdcall CountA(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140b7)]
        HRESULT _stdcall Product(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140b8)]
        HRESULT _stdcall Fact(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140bd)]
        HRESULT _stdcall DProduct(
                        [in] Range* Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140be)]
        HRESULT _stdcall IsNonText(
                        [in] VARIANT Arg1, 
                        [out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x000140c1)]
        HRESULT _stdcall StDevP(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140c2)]
        HRESULT _stdcall VarP(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140c3)]
        HRESULT _stdcall DStDevP(
                        [in] Range* Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140c4)]
        HRESULT _stdcall DVarP(
                        [in] Range* Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140c6)]
        HRESULT _stdcall IsLogical(
                        [in] VARIANT Arg1, 
                        [out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x000140c7)]
        HRESULT _stdcall DCountA(
                        [in] Range* Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140cc)]
        HRESULT _stdcall USDollar(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x000140cd)]
        HRESULT _stdcall FindB(
                        [in] BSTR Arg1, 
                        [in] BSTR Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140ce)]
        HRESULT _stdcall SearchB(
                        [in] BSTR Arg1, 
                        [in] BSTR Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140cf)]
        HRESULT _stdcall ReplaceB(
                        [in] BSTR Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in] BSTR Arg4, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x000140d4)]
        HRESULT _stdcall RoundUp(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140d5)]
        HRESULT _stdcall RoundDown(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140d8)]
        HRESULT _stdcall Rank(
                        [in] double Arg1, 
                        [in] Range* Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140dc)]
        HRESULT _stdcall Days360(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140de)]
        HRESULT _stdcall Vdb(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in] double Arg4, 
                        [in] double Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140e3)]
        HRESULT _stdcall Median(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140e4)]
        HRESULT _stdcall SumProduct(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140e5)]
        HRESULT _stdcall Sinh(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140e6)]
        HRESULT _stdcall Cosh(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140e7)]
        HRESULT _stdcall Tanh(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140e8)]
        HRESULT _stdcall Asinh(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140e9)]
        HRESULT _stdcall Acosh(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140ea)]
        HRESULT _stdcall Atanh(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140eb)]
        HRESULT _stdcall DGet(
                        [in] Range* Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x000140f7)]
        HRESULT _stdcall Db(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in] double Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [out, retval] double* RHS);
        [helpcontext(0x000140fc)]
        HRESULT _stdcall Frequency(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001410d)]
        HRESULT _stdcall AveDev(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001410e)]
        HRESULT _stdcall BetaDist(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001410f)]
        HRESULT _stdcall GammaLn(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014110)]
        HRESULT _stdcall BetaInv(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014111)]
        HRESULT _stdcall BinomDist(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in] VARIANT_BOOL Arg4, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014112)]
        HRESULT _stdcall ChiDist(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014113)]
        HRESULT _stdcall ChiInv(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014114)]
        HRESULT _stdcall Combin(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014115)]
        HRESULT _stdcall Confidence(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014116)]
        HRESULT _stdcall CritBinom(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014117)]
        HRESULT _stdcall Even(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014118)]
        HRESULT _stdcall ExponDist(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] VARIANT_BOOL Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014119)]
        HRESULT _stdcall FDist(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001411a)]
        HRESULT _stdcall FInv(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001411b)]
        HRESULT _stdcall Fisher(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001411c)]
        HRESULT _stdcall FisherInv(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001411d)]
        HRESULT _stdcall Floor(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001411e)]
        HRESULT _stdcall GammaDist(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in] VARIANT_BOOL Arg4, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001411f)]
        HRESULT _stdcall GammaInv(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014120)]
        HRESULT _stdcall Ceiling(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014121)]
        HRESULT _stdcall HypGeomDist(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in] double Arg4, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014122)]
        HRESULT _stdcall LogNormDist(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014123)]
        HRESULT _stdcall LogInv(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014124)]
        HRESULT _stdcall NegBinomDist(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014125)]
        HRESULT _stdcall NormDist(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in] VARIANT_BOOL Arg4, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014126)]
        HRESULT _stdcall NormSDist(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014127)]
        HRESULT _stdcall NormInv(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014128)]
        HRESULT _stdcall NormSInv(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014129)]
        HRESULT _stdcall Standardize(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001412a)]
        HRESULT _stdcall Odd(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001412b)]
        HRESULT _stdcall Permut(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001412c)]
        HRESULT _stdcall Poisson(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] VARIANT_BOOL Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001412d)]
        HRESULT _stdcall TDist(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001412e)]
        HRESULT _stdcall Weibull(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in] VARIANT_BOOL Arg4, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001412f)]
        HRESULT _stdcall SumXMY2(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014130)]
        HRESULT _stdcall SumX2MY2(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014131)]
        HRESULT _stdcall SumX2PY2(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014132)]
        HRESULT _stdcall ChiTest(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014133)]
        HRESULT _stdcall Correl(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014134)]
        HRESULT _stdcall Covar(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014135)]
        HRESULT _stdcall Forecast(
                        [in] double Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014136)]
        HRESULT _stdcall FTest(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014137)]
        HRESULT _stdcall Intercept(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014138)]
        HRESULT _stdcall Pearson(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014139)]
        HRESULT _stdcall RSq(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001413a)]
        HRESULT _stdcall StEyx(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001413b)]
        HRESULT _stdcall Slope(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001413c)]
        HRESULT _stdcall TTest(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] double Arg3, 
                        [in] double Arg4, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001413d)]
        HRESULT _stdcall Prob(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] double Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001413e)]
        HRESULT _stdcall DevSq(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001413f)]
        HRESULT _stdcall GeoMean(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014140)]
        HRESULT _stdcall HarMean(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014141)]
        HRESULT _stdcall SumSq(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014142)]
        HRESULT _stdcall Kurt(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014143)]
        HRESULT _stdcall Skew(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014144)]
        HRESULT _stdcall ZTest(
                        [in] VARIANT Arg1, 
                        [in] double Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014145)]
        HRESULT _stdcall Large(
                        [in] VARIANT Arg1, 
                        [in] double Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014146)]
        HRESULT _stdcall Small(
                        [in] VARIANT Arg1, 
                        [in] double Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014147)]
        HRESULT _stdcall Quartile(
                        [in] VARIANT Arg1, 
                        [in] double Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014148)]
        HRESULT _stdcall Percentile(
                        [in] VARIANT Arg1, 
                        [in] double Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014149)]
        HRESULT _stdcall PercentRank(
                        [in] VARIANT Arg1, 
                        [in] double Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001414a)]
        HRESULT _stdcall Mode(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001414b)]
        HRESULT _stdcall TrimMean(
                        [in] VARIANT Arg1, 
                        [in] double Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001414c)]
        HRESULT _stdcall TInv(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014151)]
        HRESULT _stdcall Power(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014156)]
        HRESULT _stdcall Radians(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014157)]
        HRESULT _stdcall Degrees(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014158)]
        HRESULT _stdcall Subtotal(
                        [in] double Arg1, 
                        [in] Range* Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014159)]
        HRESULT _stdcall SumIf(
                        [in] Range* Arg1, 
                        [in] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001415a)]
        HRESULT _stdcall CountIf(
                        [in] Range* Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001415b)]
        HRESULT _stdcall CountBlank(
                        [in] Range* Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001415e)]
        HRESULT _stdcall Ispmt(
                        [in] double Arg1, 
                        [in] double Arg2, 
                        [in] double Arg3, 
                        [in] double Arg4, 
                        [out, retval] double* RHS);
        [helpcontext(0x00014162)]
        HRESULT _stdcall Roman(
                        [in] double Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x000140d6)]
        HRESULT _stdcall Asc(
                        [in] BSTR Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x000140d7)]
        HRESULT _stdcall Dbcs(
                        [in] BSTR Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014168)]
        HRESULT _stdcall Phonetic(
                        [in] Range* Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014170)]
        HRESULT _stdcall BahtText(
                        [in] double Arg1, 
                        [out, retval] BSTR* RHS);
        [hidden, helpcontext(0x00014171)]
        HRESULT _stdcall ThaiDayOfWeek(
                        [in] double Arg1, 
                        [out, retval] BSTR* RHS);
        [hidden, helpcontext(0x00014172)]
        HRESULT _stdcall ThaiDigit(
                        [in] BSTR Arg1, 
                        [out, retval] BSTR* RHS);
        [hidden, helpcontext(0x00014173)]
        HRESULT _stdcall ThaiMonthOfYear(
                        [in] double Arg1, 
                        [out, retval] BSTR* RHS);
        [hidden, helpcontext(0x00014174)]
        HRESULT _stdcall ThaiNumSound(
                        [in] double Arg1, 
                        [out, retval] BSTR* RHS);
        [hidden, helpcontext(0x00014175)]
        HRESULT _stdcall ThaiNumString(
                        [in] double Arg1, 
                        [out, retval] BSTR* RHS);
        [hidden, helpcontext(0x00014176)]
        HRESULT _stdcall ThaiStringLength(
                        [in] BSTR Arg1, 
                        [out, retval] double* RHS);
        [hidden, helpcontext(0x00014177)]
        HRESULT _stdcall IsThaiDigit(
                        [in] BSTR Arg1, 
                        [out, retval] VARIANT_BOOL* RHS);
        [hidden, helpcontext(0x00014178)]
        HRESULT _stdcall RoundBahtDown(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [hidden, helpcontext(0x00014179)]
        HRESULT _stdcall RoundBahtUp(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [hidden, helpcontext(0x0001417a)]
        HRESULT _stdcall ThaiYear(
                        [in] double Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001417b)]
        HRESULT _stdcall RTD(
                        [in] VARIANT progID, 
                        [in] VARIANT server, 
                        [in] VARIANT topic1, 
                        [in, optional] VARIANT topic2, 
                        [in, optional] VARIANT topic3, 
                        [in, optional] VARIANT topic4, 
                        [in, optional] VARIANT topic5, 
                        [in, optional] VARIANT topic6, 
                        [in, optional] VARIANT topic7, 
                        [in, optional] VARIANT topic8, 
                        [in, optional] VARIANT topic9, 
                        [in, optional] VARIANT topic10, 
                        [in, optional] VARIANT topic11, 
                        [in, optional] VARIANT topic12, 
                        [in, optional] VARIANT topic13, 
                        [in, optional] VARIANT topic14, 
                        [in, optional] VARIANT topic15, 
                        [in, optional] VARIANT topic16, 
                        [in, optional] VARIANT topic17, 
                        [in, optional] VARIANT topic18, 
                        [in, optional] VARIANT topic19, 
                        [in, optional] VARIANT topic20, 
                        [in, optional] VARIANT topic21, 
                        [in, optional] VARIANT topic22, 
                        [in, optional] VARIANT topic23, 
                        [in, optional] VARIANT topic24, 
                        [in, optional] VARIANT topic25, 
                        [in, optional] VARIANT topic26, 
                        [in, optional] VARIANT topic27, 
                        [in, optional] VARIANT topic28, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00014180)]
        HRESULT _stdcall Hex2Bin(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014181)]
        HRESULT _stdcall Hex2Dec(
                        [in] VARIANT Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014182)]
        HRESULT _stdcall Hex2Oct(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014183)]
        HRESULT _stdcall Dec2Bin(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014184)]
        HRESULT _stdcall Dec2Hex(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014185)]
        HRESULT _stdcall Dec2Oct(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014186)]
        HRESULT _stdcall Oct2Bin(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014187)]
        HRESULT _stdcall Oct2Hex(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014188)]
        HRESULT _stdcall Oct2Dec(
                        [in] VARIANT Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014189)]
        HRESULT _stdcall Bin2Dec(
                        [in] VARIANT Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x0001418a)]
        HRESULT _stdcall Bin2Oct(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x0001418b)]
        HRESULT _stdcall Bin2Hex(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x0001418c)]
        HRESULT _stdcall ImSub(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x0001418d)]
        HRESULT _stdcall ImDiv(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x0001418e)]
        HRESULT _stdcall ImPower(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x0001418f)]
        HRESULT _stdcall ImAbs(
                        [in] VARIANT Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014190)]
        HRESULT _stdcall ImSqrt(
                        [in] VARIANT Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014191)]
        HRESULT _stdcall ImLn(
                        [in] VARIANT Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014192)]
        HRESULT _stdcall ImLog2(
                        [in] VARIANT Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014193)]
        HRESULT _stdcall ImLog10(
                        [in] VARIANT Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014194)]
        HRESULT _stdcall ImSin(
                        [in] VARIANT Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014195)]
        HRESULT _stdcall ImCos(
                        [in] VARIANT Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014196)]
        HRESULT _stdcall ImExp(
                        [in] VARIANT Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014197)]
        HRESULT _stdcall ImArgument(
                        [in] VARIANT Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014198)]
        HRESULT _stdcall ImConjugate(
                        [in] VARIANT Arg1, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00014199)]
        HRESULT _stdcall Imaginary(
                        [in] VARIANT Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001419a)]
        HRESULT _stdcall ImReal(
                        [in] VARIANT Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001419b)]
        HRESULT _stdcall Complex(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x0001419c)]
        HRESULT _stdcall ImSum(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x0001419d)]
        HRESULT _stdcall ImProduct(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x0001419e)]
        HRESULT _stdcall SeriesSum(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [out, retval] double* RHS);
        [helpcontext(0x0001419f)]
        HRESULT _stdcall FactDouble(
                        [in] VARIANT Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141a0)]
        HRESULT _stdcall SqrtPi(
                        [in] VARIANT Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141a1)]
        HRESULT _stdcall Quotient(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141a2)]
        HRESULT _stdcall Delta(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141a3)]
        HRESULT _stdcall GeStep(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141a4)]
        HRESULT _stdcall IsEven(
                        [in] VARIANT Arg1, 
                        [out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x000141a5)]
        HRESULT _stdcall IsOdd(
                        [in] VARIANT Arg1, 
                        [out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x000141a6)]
        HRESULT _stdcall MRound(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141a7)]
        HRESULT _stdcall Erf(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141a8)]
        HRESULT _stdcall ErfC(
                        [in] VARIANT Arg1, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141a9)]
        HRESULT _stdcall BesselJ(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141aa)]
        HRESULT _stdcall BesselK(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141ab)]
        HRESULT _stdcall BesselY(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141ac)]
        HRESULT _stdcall BesselI(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141ad)]
        HRESULT _stdcall Xirr(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141ae)]
        HRESULT _stdcall Xnpv(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141af)]
        HRESULT _stdcall PriceMat(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141b0)]
        HRESULT _stdcall YieldMat(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141b1)]
        HRESULT _stdcall IntRate(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141b2)]
        HRESULT _stdcall Received(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141b3)]
        HRESULT _stdcall Disc(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141b4)]
        HRESULT _stdcall PriceDisc(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141b5)]
        HRESULT _stdcall YieldDisc(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141b6)]
        HRESULT _stdcall TBillEq(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141b7)]
        HRESULT _stdcall TBillPrice(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141b8)]
        HRESULT _stdcall TBillYield(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141b9)]
        HRESULT _stdcall Price(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in] VARIANT Arg5, 
                        [in] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141bb)]
        HRESULT _stdcall DollarDe(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141bc)]
        HRESULT _stdcall DollarFr(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141bd)]
        HRESULT _stdcall Nominal(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141be)]
        HRESULT _stdcall Effect(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141bf)]
        HRESULT _stdcall CumPrinc(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in] VARIANT Arg5, 
                        [in] VARIANT Arg6, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141c0)]
        HRESULT _stdcall CumIPmt(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in] VARIANT Arg5, 
                        [in] VARIANT Arg6, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141c1)]
        HRESULT _stdcall EDate(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141c2)]
        HRESULT _stdcall EoMonth(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141c3)]
        HRESULT _stdcall YearFrac(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141c4)]
        HRESULT _stdcall CoupDayBs(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141c5)]
        HRESULT _stdcall CoupDays(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141c6)]
        HRESULT _stdcall CoupDaysNc(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141c7)]
        HRESULT _stdcall CoupNcd(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141c8)]
        HRESULT _stdcall CoupNum(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141c9)]
        HRESULT _stdcall CoupPcd(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141ca)]
        HRESULT _stdcall Duration(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141cb)]
        HRESULT _stdcall MDuration(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141cc)]
        HRESULT _stdcall OddLPrice(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in] VARIANT Arg5, 
                        [in] VARIANT Arg6, 
                        [in] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141cd)]
        HRESULT _stdcall OddLYield(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in] VARIANT Arg5, 
                        [in] VARIANT Arg6, 
                        [in] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141ce)]
        HRESULT _stdcall OddFPrice(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in] VARIANT Arg5, 
                        [in] VARIANT Arg6, 
                        [in] VARIANT Arg7, 
                        [in] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141cf)]
        HRESULT _stdcall OddFYield(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in] VARIANT Arg5, 
                        [in] VARIANT Arg6, 
                        [in] VARIANT Arg7, 
                        [in] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141d0)]
        HRESULT _stdcall RandBetween(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141d1)]
        HRESULT _stdcall WeekNum(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141d2)]
        HRESULT _stdcall AmorDegrc(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in] VARIANT Arg5, 
                        [in] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141d3)]
        HRESULT _stdcall AmorLinc(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in] VARIANT Arg5, 
                        [in] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141d4)]
        HRESULT _stdcall Convert(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141d5)]
        HRESULT _stdcall AccrInt(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in] VARIANT Arg5, 
                        [in] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141d6)]
        HRESULT _stdcall AccrIntM(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in] VARIANT Arg3, 
                        [in] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141d7)]
        HRESULT _stdcall WorkDay(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141d8)]
        HRESULT _stdcall NetworkDays(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141d9)]
        HRESULT _stdcall Gcd(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141da)]
        HRESULT _stdcall MultiNomial(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141db)]
        HRESULT _stdcall Lcm(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141dc)]
        HRESULT _stdcall FVSchedule(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141e2)]
        HRESULT _stdcall SumIfs(
                        [in] Range* Arg1, 
                        [in] Range* Arg2, 
                        [in] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141e1)]
        HRESULT _stdcall CountIfs(
                        [in] Range* Arg1, 
                        [in] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141e3)]
        HRESULT _stdcall AverageIf(
                        [in] Range* Arg1, 
                        [in] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141e4)]
        HRESULT _stdcall AverageIfs(
                        [in] Range* Arg1, 
                        [in] Range* Arg2, 
                        [in] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [out, retval] double* RHS);
        [helpcontext(0x000141e0)]
        HRESULT _stdcall IfError(
                        [in] VARIANT Arg1, 
                        [in] VARIANT Arg2, 
                        [out, retval] VARIANT* RHS);
    };

    [
      odl,
      uuid(00020846-0001-0000-C000-000000000046),
      helpcontext(0x00020006),
      hidden
    ]
    interface IRange : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010130)]
        HRESULT _stdcall Activate([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT RHS);
        [propget, helpcontext(0x000100ec)]
        HRESULT _stdcall Address(
                        [in, optional] VARIANT RowAbsolute, 
                        [in, optional] VARIANT ColumnAbsolute, 
                        [in, optional, defaultvalue(1)] XlReferenceStyle ReferenceStyle, 
                        [in, optional] VARIANT External, 
                        [in, optional] VARIANT RelativeTo, 
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [propget, helpcontext(0x000101b5)]
        HRESULT _stdcall AddressLocal(
                        [in, optional] VARIANT RowAbsolute, 
                        [in, optional] VARIANT ColumnAbsolute, 
                        [in, optional, defaultvalue(1)] XlReferenceStyle ReferenceStyle, 
                        [in, optional] VARIANT External, 
                        [in, optional] VARIANT RelativeTo, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x0001036c)]
        HRESULT _stdcall AdvancedFilter(
                        [in] XlFilterAction Action, 
                        [in, optional] VARIANT CriteriaRange, 
                        [in, optional] VARIANT CopyToRange, 
                        [in, optional] VARIANT Unique, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x000101b9)]
        HRESULT _stdcall ApplyNames(
                        [in, optional] VARIANT Names, 
                        [in, optional] VARIANT IgnoreRelativeAbsolute, 
                        [in, optional] VARIANT UseRowColumnNames, 
                        [in, optional] VARIANT OmitColumn, 
                        [in, optional] VARIANT OmitRow, 
                        [in, optional, defaultvalue(1)] XlApplyNamesOrder Order, 
                        [in, optional] VARIANT AppendLast, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x000101c0)]
        HRESULT _stdcall ApplyOutlineStyles([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010238)]
        HRESULT _stdcall Areas([out, retval] Areas** RHS);
        [helpcontext(0x000104a1)]
        HRESULT _stdcall AutoComplete(
                        [in] BSTR String, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x000101c1)]
        HRESULT _stdcall AutoFill(
                        [in] Range* Destination, 
                        [in, optional, defaultvalue(0)] XlAutoFillType Type, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010319)]
        HRESULT _stdcall AutoFilter(
                        [in, optional] VARIANT Field, 
                        [in, optional] VARIANT Criteria1, 
                        [in, optional, defaultvalue(1)] XlAutoFilterOperator Operator, 
                        [in, optional] VARIANT Criteria2, 
                        [in, optional] VARIANT VisibleDropDown, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x000100ed)]
        HRESULT _stdcall AutoFit([out, retval] VARIANT* RHS);
        [hidden, helpcontext(0x00010072)]
        HRESULT _stdcall AutoFormat(
                        [in, optional, defaultvalue(1)] XlRangeAutoFormat Format, 
                        [in, optional] VARIANT Number, 
                        [in, optional] VARIANT Font, 
                        [in, optional] VARIANT Alignment, 
                        [in, optional] VARIANT Border, 
                        [in, optional] VARIANT Pattern, 
                        [in, optional] VARIANT Width, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001040c)]
        HRESULT _stdcall AutoOutline([out, retval] VARIANT* RHS);
        [helpcontext(0x0001042b)]
        HRESULT _stdcall BorderAround(
                        [in, optional] VARIANT LineStyle, 
                        [in, optional, defaultvalue(2)] XlBorderWeight Weight, 
                        [in, optional, defaultvalue(-4105)] XlColorIndex ColorIndex, 
                        [in, optional] VARIANT Color, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000101b3)]
        HRESULT _stdcall Borders([out, retval] Borders** RHS);
        [helpcontext(0x00010117)]
        HRESULT _stdcall Calculate([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100ee)]
        HRESULT _stdcall Cells([out, retval] Range** RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001006f)]
        HRESULT _stdcall Clear([out, retval] VARIANT* RHS);
        [helpcontext(0x00010071)]
        HRESULT _stdcall ClearContents([out, retval] VARIANT* RHS);
        [helpcontext(0x00010070)]
        HRESULT _stdcall ClearFormats([out, retval] VARIANT* RHS);
        [helpcontext(0x000100ef)]
        HRESULT _stdcall ClearNotes([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040d)]
        HRESULT _stdcall ClearOutline([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100f0)]
        HRESULT _stdcall Column([out, retval] long* RHS);
        [helpcontext(0x000101fe)]
        HRESULT _stdcall ColumnDifferences(
                        [in] VARIANT Comparison, 
                        [out, retval] Range** RHS);
        [propget, helpcontext(0x000100f1)]
        HRESULT _stdcall Columns([out, retval] Range** RHS);
        [propget, helpcontext(0x000100f2)]
        HRESULT _stdcall ColumnWidth([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100f2)]
        HRESULT _stdcall ColumnWidth([in] VARIANT RHS);
        [helpcontext(0x000101e2)]
        HRESULT _stdcall Consolidate(
                        [in, optional] VARIANT Sources, 
                        [in, optional] VARIANT Function, 
                        [in, optional] VARIANT TopRow, 
                        [in, optional] VARIANT LeftColumn, 
                        [in, optional] VARIANT CreateLinks, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy(
                        [in, optional] VARIANT Destination, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010480)]
        HRESULT _stdcall CopyFromRecordset(
                        [in] IUnknown* Data, 
                        [in, optional] VARIANT MaxRows, 
                        [in, optional] VARIANT MaxColumns, 
                        [out, retval] long* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(1)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000101c9)]
        HRESULT _stdcall CreateNames(
                        [in, optional] VARIANT Top, 
                        [in, optional] VARIANT Left, 
                        [in, optional] VARIANT Bottom, 
                        [in, optional] VARIANT Right, 
                        [out, retval] VARIANT* RHS);
        [hidden, helpcontext(0x000101ca)]
        HRESULT _stdcall CreatePublisher(
                        [in, optional] VARIANT Edition, 
                        [in, optional, defaultvalue(1)] XlPictureAppearance Appearance, 
                        [in, optional] VARIANT ContainsPICT, 
                        [in, optional] VARIANT ContainsBIFF, 
                        [in, optional] VARIANT ContainsRTF, 
                        [in, optional] VARIANT ContainsVALU, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000101f5)]
        HRESULT _stdcall CurrentArray([out, retval] Range** RHS);
        [propget, helpcontext(0x000100f3)]
        HRESULT _stdcall CurrentRegion([out, retval] Range** RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut(
                        [in, optional] VARIANT Destination, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x000101d0)]
        HRESULT _stdcall DataSeries(
                        [in, optional] VARIANT Rowcol, 
                        [in, optional, defaultvalue(-4132)] XlDataSeriesType Type, 
                        [in, optional, defaultvalue(1)] XlDataSeriesDate Date, 
                        [in, optional] VARIANT Step, 
                        [in, optional] VARIANT Stop, 
                        [in, optional] VARIANT Trend, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in, optional] VARIANT RowIndex, 
                        [in, optional] VARIANT ColumnIndex, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in, optional] VARIANT RowIndex, 
                        [in, optional] VARIANT ColumnIndex, 
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete(
                        [in, optional] VARIANT Shift, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001021f)]
        HRESULT _stdcall Dependents([out, retval] Range** RHS);
        [helpcontext(0x000100f5)]
        HRESULT _stdcall DialogBox([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010221)]
        HRESULT _stdcall DirectDependents([out, retval] Range** RHS);
        [propget, helpcontext(0x00010222)]
        HRESULT _stdcall DirectPrecedents([out, retval] Range** RHS);
        [helpcontext(0x0001046b)]
        HRESULT _stdcall EditionOptions(
                        [in] XlEditionType Type, 
                        [in] XlEditionOptionsOption Option, 
                        [in, optional] VARIANT Name, 
                        [in, optional] VARIANT Reference, 
                        [in, optional, defaultvalue(1)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(1)] XlPictureAppearance ChartSize, 
                        [in, optional] VARIANT Format, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000101f4)]
        HRESULT _stdcall End(
                        [in] XlDirection Direction, 
                        [out, retval] Range** RHS);
        [propget, helpcontext(0x000100f6)]
        HRESULT _stdcall EntireColumn([out, retval] Range** RHS);
        [propget, helpcontext(0x000100f7)]
        HRESULT _stdcall EntireRow([out, retval] Range** RHS);
        [helpcontext(0x000100f8)]
        HRESULT _stdcall FillDown([out, retval] VARIANT* RHS);
        [helpcontext(0x000100f9)]
        HRESULT _stdcall FillLeft([out, retval] VARIANT* RHS);
        [helpcontext(0x000100fa)]
        HRESULT _stdcall FillRight([out, retval] VARIANT* RHS);
        [helpcontext(0x000100fb)]
        HRESULT _stdcall FillUp([out, retval] VARIANT* RHS);
        [helpcontext(0x0001018e)]
        HRESULT _stdcall Find(
                        [in] VARIANT What, 
                        [in, optional] VARIANT After, 
                        [in, optional] VARIANT LookIn, 
                        [in, optional] VARIANT LookAt, 
                        [in, optional] VARIANT SearchOrder, 
                        [in, optional, defaultvalue(1)] XlSearchDirection SearchDirection, 
                        [in, optional] VARIANT MatchCase, 
                        [in, optional] VARIANT MatchByte, 
                        [in, optional] VARIANT SearchFormat, 
                        [out, retval] Range** RHS);
        [helpcontext(0x0001018f)]
        HRESULT _stdcall FindNext(
                        [in, optional] VARIANT After, 
                        [out, retval] Range** RHS);
        [helpcontext(0x00010190)]
        HRESULT _stdcall FindPrevious(
                        [in, optional] VARIANT After, 
                        [out, retval] Range** RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula(
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x0001024a)]
        HRESULT _stdcall FormulaArray([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001024a)]
        HRESULT _stdcall FormulaArray([in] VARIANT RHS);
        [propget, hidden, helpcontext(0x00010564)]
        HRESULT _stdcall FormulaLabel([out, retval] XlFormulaLabel* RHS);
        [propput, hidden, helpcontext(0x00010564)]
        HRESULT _stdcall FormulaLabel([in] XlFormulaLabel RHS);
        [propget, helpcontext(0x00010106)]
        HRESULT _stdcall FormulaHidden([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010106)]
        HRESULT _stdcall FormulaHidden([in] VARIANT RHS);
        [propget, helpcontext(0x00010107)]
        HRESULT _stdcall FormulaLocal([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010107)]
        HRESULT _stdcall FormulaLocal([in] VARIANT RHS);
        [propget, helpcontext(0x00010108)]
        HRESULT _stdcall FormulaR1C1(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010108)]
        HRESULT _stdcall FormulaR1C1(
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x00010109)]
        HRESULT _stdcall FormulaR1C1Local([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010109)]
        HRESULT _stdcall FormulaR1C1Local([in] VARIANT RHS);
        [helpcontext(0x0001023b)]
        HRESULT _stdcall FunctionWizard([out, retval] VARIANT* RHS);
        [hidden, helpcontext(0x000101d8)]
        HRESULT _stdcall GoalSeek(
                        [in] VARIANT Goal, 
                        [in] Range* ChangingCell, 
                        [out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT End, 
                        [in, optional] VARIANT By, 
                        [in, optional] VARIANT Periods, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001010a)]
        HRESULT _stdcall HasArray([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001010b)]
        HRESULT _stdcall HasFormula([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001010c)]
        HRESULT _stdcall Hidden([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001010c)]
        HRESULT _stdcall Hidden([in] VARIANT RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000100c9)]
        HRESULT _stdcall IndentLevel([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100c9)]
        HRESULT _stdcall IndentLevel([in] VARIANT RHS);
        [helpcontext(0x00010565)]
        HRESULT _stdcall InsertIndent([in] long InsertAmount);
        [helpcontext(0x000100fc)]
        HRESULT _stdcall Insert(
                        [in, optional] VARIANT Shift, 
                        [in, optional] VARIANT CopyOrigin, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT RowIndex, 
                        [in, optional] VARIANT ColumnIndex, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT RowIndex, 
                        [in, optional] VARIANT ColumnIndex, 
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [helpcontext(0x000101ef)]
        HRESULT _stdcall Justify([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000104a3)]
        HRESULT _stdcall ListHeaderRows([out, retval] long* RHS);
        [helpcontext(0x000100fd)]
        HRESULT _stdcall ListNames([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000102b3)]
        HRESULT _stdcall LocationInTable([out, retval] XlLocationInTable* RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT RHS);
        [helpcontext(0x00010234)]
        HRESULT _stdcall Merge([in, optional] VARIANT Across);
        [helpcontext(0x00010568)]
        HRESULT _stdcall UnMerge();
        [propget, helpcontext(0x00010569)]
        HRESULT _stdcall MergeArea([out, retval] Range** RHS);
        [propget, helpcontext(0x000100d0)]
        HRESULT _stdcall MergeCells([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100d0)]
        HRESULT _stdcall MergeCells([in] VARIANT RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] VARIANT RHS);
        [helpcontext(0x00010408)]
        HRESULT _stdcall NavigateArrow(
                        [in, optional] VARIANT TowardPrecedent, 
                        [in, optional] VARIANT ArrowNumber, 
                        [in, optional] VARIANT LinkNumber, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x000101f6)]
        HRESULT _stdcall Next([out, retval] Range** RHS);
        [helpcontext(0x00010467)]
        HRESULT _stdcall NoteText(
                        [in, optional] VARIANT Text, 
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] BSTR* RHS);
        [propget, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([in] VARIANT RHS);
        [propget, helpcontext(0x00010449)]
        HRESULT _stdcall NumberFormatLocal([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010449)]
        HRESULT _stdcall NumberFormatLocal([in] VARIANT RHS);
        [propget, helpcontext(0x000100fe)]
        HRESULT _stdcall Offset(
                        [in, optional] VARIANT RowOffset, 
                        [in, optional] VARIANT ColumnOffset, 
                        [out, retval] Range** RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x0001010f)]
        HRESULT _stdcall OutlineLevel([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001010f)]
        HRESULT _stdcall OutlineLevel([in] VARIANT RHS);
        [propget, helpcontext(0x000100ff)]
        HRESULT _stdcall PageBreak([out, retval] long* RHS);
        [propput, helpcontext(0x000100ff)]
        HRESULT _stdcall PageBreak([in] long RHS);
        [helpcontext(0x000101dd)]
        HRESULT _stdcall Parse(
                        [in, optional] VARIANT ParseLine, 
                        [in, optional] VARIANT Destination, 
                        [out, retval] VARIANT* RHS);
        [hidden, helpcontext(0x00010403)]
        HRESULT _stdcall _PasteSpecial(
                        [in, optional, defaultvalue(-4104)] XlPasteType Paste, 
                        [in, optional, defaultvalue(-4142)] XlPasteSpecialOperation Operation, 
                        [in, optional] VARIANT SkipBlanks, 
                        [in, optional] VARIANT Transpose, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000102db)]
        HRESULT _stdcall PivotField([out, retval] PivotField** RHS);
        [propget, helpcontext(0x000102e4)]
        HRESULT _stdcall PivotItem([out, retval] PivotItem** RHS);
        [propget, helpcontext(0x000102cc)]
        HRESULT _stdcall PivotTable([out, retval] PivotTable** RHS);
        [propget, helpcontext(0x00010220)]
        HRESULT _stdcall Precedents([out, retval] Range** RHS);
        [propget, helpcontext(0x000101f8)]
        HRESULT _stdcall PrefixCharacter([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000101f7)]
        HRESULT _stdcall Previous([out, retval] Range** RHS);
        [hidden, helpcontext(0x00010389),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, _PrintOut)]
        HRESULT _stdcall __PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010119)]
        HRESULT _stdcall PrintPreview(
                        [in, optional] VARIANT EnableChanges, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001056a)]
        HRESULT _stdcall QueryTable([out, retval] QueryTable** RHS);
        [propget, helpcontext(0x000100c5)]
        HRESULT _stdcall Range(
                        [in] VARIANT Cell1, 
                        [in, optional] VARIANT Cell2, 
                        [out, retval] Range** RHS);
        [helpcontext(0x00010373)]
        HRESULT _stdcall RemoveSubtotal([out, retval] VARIANT* RHS);
        [helpcontext(0x000100e2)]
        HRESULT _stdcall Replace(
                        [in] VARIANT What, 
                        [in] VARIANT Replacement, 
                        [in, optional] VARIANT LookAt, 
                        [in, optional] VARIANT SearchOrder, 
                        [in, optional] VARIANT MatchCase, 
                        [in, optional] VARIANT MatchByte, 
                        [in, optional] VARIANT SearchFormat, 
                        [in, optional] VARIANT ReplaceFormat, 
                        [out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010100)]
        HRESULT _stdcall Resize(
                        [in, optional] VARIANT RowSize, 
                        [in, optional] VARIANT ColumnSize, 
                        [out, retval] Range** RHS);
        [propget, helpcontext(0x00010101)]
        HRESULT _stdcall Row([out, retval] long* RHS);
        [helpcontext(0x000101ff)]
        HRESULT _stdcall RowDifferences(
                        [in] VARIANT Comparison, 
                        [out, retval] Range** RHS);
        [propget, helpcontext(0x00010110)]
        HRESULT _stdcall RowHeight([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010110)]
        HRESULT _stdcall RowHeight([in] VARIANT RHS);
        [propget, helpcontext(0x00010102)]
        HRESULT _stdcall Rows([out, retval] Range** RHS);
        [helpcontext(0x00010103)]
        HRESULT _stdcall Run(
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [helpcontext(0x000101f0)]
        HRESULT _stdcall Show([out, retval] VARIANT* RHS);
        [helpcontext(0x0001036d)]
        HRESULT _stdcall ShowDependents(
                        [in, optional] VARIANT Remove, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010249)]
        HRESULT _stdcall ShowDetail([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010249)]
        HRESULT _stdcall ShowDetail([in] VARIANT RHS);
        [helpcontext(0x0001036e)]
        HRESULT _stdcall ShowErrors([out, retval] VARIANT* RHS);
        [helpcontext(0x0001036f)]
        HRESULT _stdcall ShowPrecedents(
                        [in, optional] VARIANT Remove, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100d1)]
        HRESULT _stdcall ShrinkToFit([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100d1)]
        HRESULT _stdcall ShrinkToFit([in] VARIANT RHS);
        [helpcontext(0x00010370)]
        HRESULT _stdcall Sort(
                        [in, optional] VARIANT Key1, 
                        [in, optional, defaultvalue(1)] XlSortOrder Order1, 
                        [in, optional] VARIANT Key2, 
                        [in, optional] VARIANT Type, 
                        [in, optional, defaultvalue(1)] XlSortOrder Order2, 
                        [in, optional] VARIANT Key3, 
                        [in, optional, defaultvalue(1)] XlSortOrder Order3, 
                        [in, optional, defaultvalue(2)] XlYesNoGuess Header, 
                        [in, optional] VARIANT OrderCustom, 
                        [in, optional] VARIANT MatchCase, 
                        [in, optional, defaultvalue(2)] XlSortOrientation Orientation, 
                        [in, optional, defaultvalue(1)] XlSortMethod SortMethod, 
                        [in, optional, defaultvalue(0)] XlSortDataOption DataOption1, 
                        [in, optional, defaultvalue(0)] XlSortDataOption DataOption2, 
                        [in, optional, defaultvalue(0)] XlSortDataOption DataOption3, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010371)]
        HRESULT _stdcall SortSpecial(
                        [in, optional, defaultvalue(1)] XlSortMethod SortMethod, 
                        [in, optional] VARIANT Key1, 
                        [in, optional, defaultvalue(1)] XlSortOrder Order1, 
                        [in, optional] VARIANT Type, 
                        [in, optional] VARIANT Key2, 
                        [in, optional, defaultvalue(1)] XlSortOrder Order2, 
                        [in, optional] VARIANT Key3, 
                        [in, optional, defaultvalue(1)] XlSortOrder Order3, 
                        [in, optional, defaultvalue(2)] XlYesNoGuess Header, 
                        [in, optional] VARIANT OrderCustom, 
                        [in, optional] VARIANT MatchCase, 
                        [in, optional, defaultvalue(2)] XlSortOrientation Orientation, 
                        [in, optional, defaultvalue(0)] XlSortDataOption DataOption1, 
                        [in, optional, defaultvalue(0)] XlSortDataOption DataOption2, 
                        [in, optional, defaultvalue(0)] XlSortDataOption DataOption3, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010394)]
        HRESULT _stdcall SoundNote([out, retval] SoundNote** RHS);
        [helpcontext(0x0001019a)]
        HRESULT _stdcall SpecialCells(
                        [in] XlCellType Type, 
                        [in, optional] VARIANT Value, 
                        [out, retval] Range** RHS);
        [propget, helpcontext(0x00010104)]
        HRESULT _stdcall Style([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010104)]
        HRESULT _stdcall Style([in] VARIANT RHS);
        [helpcontext(0x000101e1)]
        HRESULT _stdcall SubscribeTo(
                        [in] BSTR Edition, 
                        [in, optional, defaultvalue(-4158)] XlSubscribeToFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010372)]
        HRESULT _stdcall Subtotal(
                        [in] long GroupBy, 
                        [in] XlConsolidationFunction Function, 
                        [in] VARIANT TotalList, 
                        [in, optional] VARIANT Replace, 
                        [in, optional] VARIANT PageBreaks, 
                        [in, optional, defaultvalue(1)] XlSummaryRow SummaryBelowData, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010111)]
        HRESULT _stdcall Summary([out, retval] VARIANT* RHS);
        [helpcontext(0x000101f1)]
        HRESULT _stdcall Table(
                        [in, optional] VARIANT RowInput, 
                        [in, optional] VARIANT ColumnInput, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] VARIANT* RHS);
        [helpcontext(0x00010410)]
        HRESULT _stdcall TextToColumns(
                        [in, optional] VARIANT Destination, 
                        [in, optional, defaultvalue(1)] XlTextParsingType DataType, 
                        [in, optional, defaultvalue(1)] XlTextQualifier TextQualifier, 
                        [in, optional] VARIANT ConsecutiveDelimiter, 
                        [in, optional] VARIANT Tab, 
                        [in, optional] VARIANT Semicolon, 
                        [in, optional] VARIANT Comma, 
                        [in, optional] VARIANT Space, 
                        [in, optional] VARIANT Other, 
                        [in, optional] VARIANT OtherChar, 
                        [in, optional] VARIANT FieldInfo, 
                        [in, optional] VARIANT DecimalSeparator, 
                        [in, optional] VARIANT ThousandsSeparator, 
                        [in, optional] VARIANT TrailingMinusNumbers, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] VARIANT* RHS);
        [helpcontext(0x000100f4)]
        HRESULT _stdcall Ungroup([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010112)]
        HRESULT _stdcall UseStandardHeight([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010112)]
        HRESULT _stdcall UseStandardHeight([in] VARIANT RHS);
        [propget, helpcontext(0x00010113)]
        HRESULT _stdcall UseStandardWidth([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010113)]
        HRESULT _stdcall UseStandardWidth([in] VARIANT RHS);
        [propget, helpcontext(0x0001056b)]
        HRESULT _stdcall Validation([out, retval] Validation** RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value(
                        [in, optional] VARIANT RangeValueDataType, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value(
                        [in, optional] VARIANT RangeValueDataType, 
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x0001056c)]
        HRESULT _stdcall Value2(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001056c)]
        HRESULT _stdcall Value2(
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001015c)]
        HRESULT _stdcall Worksheet([out, retval] Worksheet** RHS);
        [propget, helpcontext(0x00010114)]
        HRESULT _stdcall WrapText([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010114)]
        HRESULT _stdcall WrapText([in] VARIANT RHS);
        [helpcontext(0x0001056d)]
        HRESULT _stdcall AddComment(
                        [in, optional] VARIANT Text, 
                        [out, retval] Comment** RHS);
        [propget, helpcontext(0x0001038e)]
        HRESULT _stdcall Comment([out, retval] Comment** RHS);
        [helpcontext(0x0001056e)]
        HRESULT _stdcall ClearComments();
        [propget, helpcontext(0x0001056f)]
        HRESULT _stdcall Phonetic([out, retval] Phonetic** RHS);
        [propget, helpcontext(0x00010570)]
        HRESULT _stdcall FormatConditions([out, retval] FormatConditions** RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x00010571)]
        HRESULT _stdcall Hyperlinks([out, retval] Hyperlinks** RHS);
        [propget, helpcontext(0x00010713)]
        HRESULT _stdcall Phonetics([out, retval] Phonetics** RHS);
        [helpcontext(0x00010714)]
        HRESULT _stdcall SetPhonetic();
        [propget, helpcontext(0x00010715)]
        HRESULT _stdcall ID([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010715)]
        HRESULT _stdcall ID([in] BSTR RHS);
        [hidden, helpcontext(0x000106ec),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOut)]
        HRESULT _stdcall _PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000107dd)]
        HRESULT _stdcall PivotCell([out, retval] PivotCell** RHS);
        [helpcontext(0x000107de)]
        HRESULT _stdcall Dirty();
        [propget, helpcontext(0x000107df)]
        HRESULT _stdcall Errors([out, retval] Errors** RHS);
        [propget, helpcontext(0x000107e0)]
        HRESULT _stdcall SmartTags([out, retval] SmartTags** RHS);
        [helpcontext(0x000107e1)]
        HRESULT _stdcall Speak(
                        [in, optional] VARIANT SpeakDirection, 
                        [in, optional] VARIANT SpeakFormulas);
        [helpcontext(0x00010788)]
        HRESULT _stdcall PasteSpecial(
                        [in, optional, defaultvalue(-4104)] XlPasteType Paste, 
                        [in, optional, defaultvalue(-4142)] XlPasteSpecialOperation Operation, 
                        [in, optional] VARIANT SkipBlanks, 
                        [in, optional] VARIANT Transpose, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000107e4)]
        HRESULT _stdcall AllowEdit([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000108d1)]
        HRESULT _stdcall ListObject([out, retval] ListObject** RHS);
        [propget, helpcontext(0x000108d2)]
        HRESULT _stdcall XPath([out, retval] XPath** RHS);
        [propget, helpcontext(0x000109bb)]
        HRESULT _stdcall ServerActions([out, retval] Actions** RHS);
        [helpcontext(0x000109bc)]
        HRESULT _stdcall RemoveDuplicates(
                        [in, optional] VARIANT Columns, 
                        [in, optional, defaultvalue(2)] XlYesNoGuess Header);
        [helpcontext(0x00010939)          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOutEx)]
        HRESULT _stdcall PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001084b)]
        HRESULT _stdcall MDX([out, retval] BSTR* RHS);
        [helpcontext(0x000109bd)]
        HRESULT _stdcall ExportAsFixedFormat(
                        [in] XlFixedFormatType Type, 
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT Quality, 
                        [in, optional] VARIANT IncludeDocProperties, 
                        [in, optional] VARIANT IgnorePrintAreas, 
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT OpenAfterPublish, 
                        [in, optional] VARIANT FixedFormatExtClassPtr);
        [propget, helpcontext(0x000109c3)]
        HRESULT _stdcall CountLarge([out, retval] VARIANT* RHS);
        [helpcontext(0x0001093c)]
        HRESULT _stdcall CalculateRowMajorOrder([out, retval] VARIANT* RHS);
    };

    [
      odl,
      uuid(0002440F-0001-0000-C000-000000000046),
      helpcontext(0x000200a5),
      hidden
    ]
    interface IChartEvents : IDispatch {
        [helpcontext(0x00010130)]
        HRESULT _stdcall Activate();
        [helpcontext(0x000105fa)]
        HRESULT _stdcall Deactivate();
        [helpcontext(0x00010100)]
        HRESULT _stdcall Resize();
        [helpcontext(0x000105fb)]
        HRESULT _stdcall MouseDown(
                        [in] long Button, 
                        [in] long Shift, 
                        [in] long x, 
                        [in] long y);
        [helpcontext(0x000105fc)]
        HRESULT _stdcall MouseUp(
                        [in] long Button, 
                        [in] long Shift, 
                        [in] long x, 
                        [in] long y);
        [helpcontext(0x000105fd)]
        HRESULT _stdcall MouseMove(
                        [in] long Button, 
                        [in] long Shift, 
                        [in] long x, 
                        [in] long y);
        [helpcontext(0x000105fe)]
        HRESULT _stdcall BeforeRightClick([in, out] VARIANT_BOOL* Cancel);
        [hidden, helpcontext(0x000105ff)]
        HRESULT _stdcall DragPlot();
        [hidden, helpcontext(0x00010600)]
        HRESULT _stdcall DragOver();
        [helpcontext(0x00010601)]
        HRESULT _stdcall BeforeDoubleClick(
                        [in] long ElementID, 
                        [in] long Arg1, 
                        [in] long Arg2, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in] long ElementID, 
                        [in] long Arg1, 
                        [in] long Arg2);
        [helpcontext(0x00010602)]
        HRESULT _stdcall SeriesChange(
                        [in] long SeriesIndex, 
                        [in] long PointIndex);
        [helpcontext(0x00010117)]
        HRESULT _stdcall Calculate();
    };

    [
      odl,
      uuid(000208D6-0000-0000-C000-000000000046),
      helpcontext(0x00020007),
      dual,
      nonextensible,
      oleautomation
    ]
    interface _Chart : IDispatch {
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] Application** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] XlCreator* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x00000130), helpcontext(0x00010130)]
        HRESULT Activate([in, lcid] long lcid);
        [id(0x00000227), helpcontext(0x00010227)]
        HRESULT Copy(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([in, lcid] long lcid);
        [id(0x0000055d), propget, helpcontext(0x0001055d)]
        HRESULT CodeName([out, retval] BSTR* RHS);
        [id(0x80010000), propget, helpcontext(0x80020000)]
        HRESULT _CodeName([out, retval] BSTR* RHS);
        [id(0x80010000), propput, helpcontext(0x80020000)]
        HRESULT _CodeName([in] BSTR RHS);
        [id(0x000001e6), propget, helpcontext(0x000101e6)]
        HRESULT Index(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x0000027d), helpcontext(0x0001027d)]
        HRESULT Move(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x0000006e), propput, helpcontext(0x0001006e)]
        HRESULT Name([in] BSTR RHS);
        [id(0x000001f6), propget, helpcontext(0x000101f6)]
        HRESULT Next([out, retval] IDispatch** RHS);
        [id(0x00000274), propget, hidden, helpcontext(0x00010274)]
        HRESULT OnDoubleClick(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000274), propput, hidden, helpcontext(0x00010274)]
        HRESULT OnDoubleClick(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000407), propget, hidden, helpcontext(0x00010407)]
        HRESULT OnSheetActivate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000407), propput, hidden, helpcontext(0x00010407)]
        HRESULT OnSheetActivate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000439), propget, hidden, helpcontext(0x00010439)]
        HRESULT OnSheetDeactivate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000439), propput, hidden, helpcontext(0x00010439)]
        HRESULT OnSheetDeactivate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x000003e6), propget, helpcontext(0x000103e6)]
        HRESULT PageSetup([out, retval] PageSetup** RHS);
        [id(0x000001f7), propget, helpcontext(0x000101f7)]
        HRESULT Previous([out, retval] IDispatch** RHS);
        [id(0x00000389), hidden, helpcontext(0x00010389),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, _PrintOut)]
        HRESULT __PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, lcid] long lcid);
        [id(0x00000119), helpcontext(0x00010119)]
        HRESULT PrintPreview(
                        [in, optional] VARIANT EnableChanges, 
                        [in, lcid] long lcid);
        [id(0x0000011a), hidden, helpcontext(0x0001011a)]
        HRESULT _Protect(
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT DrawingObjects, 
                        [in, optional] VARIANT Contents, 
                        [in, optional] VARIANT Scenarios, 
                        [in, optional] VARIANT UserInterfaceOnly, 
                        [in, lcid] long lcid);
        [id(0x00000124), propget, helpcontext(0x00010124)]
        HRESULT ProtectContents(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000125), propget, helpcontext(0x00010125)]
        HRESULT ProtectDrawingObjects(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000487), propget, helpcontext(0x00010487)]
        HRESULT ProtectionMode(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00010017), restricted, hidden]
        void _Dummy23();
        [id(0x0000011c), hidden, helpcontext(0x0001011c)]
        HRESULT _SaveAs(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT FileFormat, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT ReadOnlyRecommended, 
                        [in, optional] VARIANT CreateBackup, 
                        [in, optional] VARIANT AddToMru, 
                        [in, optional] VARIANT TextCodepage, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, lcid] long lcid);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select(
                        [in, optional] VARIANT Replace, 
                        [in, lcid] long lcid);
        [id(0x0000011d), helpcontext(0x0001011d)]
        HRESULT Unprotect(
                        [in, optional] VARIANT Password, 
                        [in, lcid] long lcid);
        [id(0x0000022e), propget, helpcontext(0x0001022e)]
        HRESULT Visible(
                        [in, lcid] long lcid, 
                        [out, retval] XlSheetVisibility* RHS);
        [id(0x0000022e), propput, helpcontext(0x0001022e)]
        HRESULT Visible(
                        [in, lcid] long lcid, 
                        [in] XlSheetVisibility RHS);
        [id(0x00000561), propget, helpcontext(0x00010561)]
        HRESULT Shapes([out, retval] Shapes** RHS);
        [id(0x00000097), hidden, helpcontext(0x00010097)]
        HRESULT _ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                        [in, optional] VARIANT LegendKey, 
                        [in, optional] VARIANT AutoText, 
                        [in, optional] VARIANT HasLeaderLines, 
                        [in, lcid] long lcid);
        [id(0x000002f8), hidden, helpcontext(0x000102f8)]
        HRESULT Arcs(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000011), propget, hidden, helpcontext(0x00010011)]
        HRESULT Area3DGroup(
                        [in, lcid] long lcid, 
                        [out, retval] ChartGroup** RHS);
        [id(0x00000009), hidden, helpcontext(0x00010009)]
        HRESULT AreaGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000072), hidden, helpcontext(0x00010072)]
        HRESULT AutoFormat(
                        [in] long Gallery, 
                        [in, optional] VARIANT Format);
        [id(0x0000006b), propget, helpcontext(0x0001006b)]
        HRESULT AutoScaling(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000006b), propput, helpcontext(0x0001006b)]
        HRESULT AutoScaling(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000017), helpcontext(0x00010017)]
        HRESULT Axes(
                        [in, optional] VARIANT Type, 
                        [in, optional, defaultvalue(1)] XlAxisGroup AxisGroup, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x000004a4), helpcontext(0x000104a4)]
        HRESULT SetBackgroundPicture([in] BSTR Filename);
        [id(0x00000012), propget, hidden, helpcontext(0x00010012)]
        HRESULT Bar3DGroup(
                        [in, lcid] long lcid, 
                        [out, retval] ChartGroup** RHS);
        [id(0x0000000a), hidden, helpcontext(0x0001000a)]
        HRESULT BarGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x0000022d), hidden, helpcontext(0x0001022d)]
        HRESULT Buttons(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000050), propget, helpcontext(0x00010050)]
        HRESULT ChartArea(
                        [in, lcid] long lcid, 
                        [out, retval] ChartArea** RHS);
        [id(0x00000008), helpcontext(0x00010008)]
        HRESULT ChartGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000424), helpcontext(0x00010424)]
        HRESULT ChartObjects(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000051), propget, helpcontext(0x00010051)]
        HRESULT ChartTitle(
                        [in, lcid] long lcid, 
                        [out, retval] ChartTitle** RHS);
        [id(0x000000c4), helpcontext(0x000100c4)]
        HRESULT ChartWizard(
                        [in, optional] VARIANT Source, 
                        [in, optional] VARIANT Gallery, 
                        [in, optional] VARIANT Format, 
                        [in, optional] VARIANT PlotBy, 
                        [in, optional] VARIANT CategoryLabels, 
                        [in, optional] VARIANT SeriesLabels, 
                        [in, optional] VARIANT HasLegend, 
                        [in, optional] VARIANT Title, 
                        [in, optional] VARIANT CategoryTitle, 
                        [in, optional] VARIANT ValueTitle, 
                        [in, optional] VARIANT ExtraTitle, 
                        [in, lcid] long lcid);
        [id(0x00000338), hidden, helpcontext(0x00010338)]
        HRESULT CheckBoxes(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x000001f9), helpcontext(0x000101f9)]
        HRESULT CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [in, lcid] long lcid);
        [id(0x00000013), propget, hidden, helpcontext(0x00010013)]
        HRESULT Column3DGroup(
                        [in, lcid] long lcid, 
                        [out, retval] ChartGroup** RHS);
        [id(0x0000000b), hidden, helpcontext(0x0001000b)]
        HRESULT ColumnGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x000000d5), helpcontext(0x000100d5)]
        HRESULT CopyPicture(
                        [in, optional, defaultvalue(1)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [in, optional, defaultvalue(2)] XlPictureAppearance Size, 
                        [in, lcid] long lcid);
        [id(0x0000004f), propget, hidden, helpcontext(0x0001004f)]
        HRESULT Corners(
                        [in, lcid] long lcid, 
                        [out, retval] Corners** RHS);
        [id(0x000001ca), hidden, helpcontext(0x000101ca)]
        HRESULT CreatePublisher(
                        [in, optional] VARIANT Edition, 
                        [in, optional, defaultvalue(1)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(1)] XlPictureAppearance Size, 
                        [in, optional] VARIANT ContainsPICT, 
                        [in, optional] VARIANT ContainsBIFF, 
                        [in, optional] VARIANT ContainsRTF, 
                        [in, optional] VARIANT ContainsVALU, 
                        [in, lcid] long lcid);
        [id(0x00000573), propget, helpcontext(0x00010573)]
        HRESULT DataTable([out, retval] DataTable** RHS);
        [id(0x00000030), propget, helpcontext(0x00010030)]
        HRESULT DepthPercent(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000030), propput, helpcontext(0x00010030)]
        HRESULT DepthPercent(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x00000460), hidden, helpcontext(0x00010460)]
        HRESULT Deselect([in, lcid] long lcid);
        [id(0x0000005d), propget, helpcontext(0x0001005d)]
        HRESULT DisplayBlanksAs(
                        [in, lcid] long lcid, 
                        [out, retval] XlDisplayBlanksAs* RHS);
        [id(0x0000005d), propput, helpcontext(0x0001005d)]
        HRESULT DisplayBlanksAs(
                        [in, lcid] long lcid, 
                        [in] XlDisplayBlanksAs RHS);
        [id(0x0000000e), hidden, helpcontext(0x0001000e)]
        HRESULT DoughnutGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000304), hidden, helpcontext(0x00010304)]
        HRESULT Drawings(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000058), hidden, helpcontext(0x00010058)]
        HRESULT DrawingObjects(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000344), hidden, helpcontext(0x00010344)]
        HRESULT DropDowns(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000031), propget, helpcontext(0x00010031)]
        HRESULT Elevation(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000031), propput, helpcontext(0x00010031)]
        HRESULT Elevation(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x00000001), helpcontext(0x00010001)]
        HRESULT Evaluate(
                        [in] VARIANT Name, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0xfffffffb), helpcontext(0x0000fffb)]
        HRESULT _Evaluate(
                        [in] VARIANT Name, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000053), propget, helpcontext(0x00010053)]
        HRESULT Floor(
                        [in, lcid] long lcid, 
                        [out, retval] Floor** RHS);
        [id(0x00000032), propget, helpcontext(0x00010032)]
        HRESULT GapDepth(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000032), propput, helpcontext(0x00010032)]
        HRESULT GapDepth(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x00000342), hidden, helpcontext(0x00010342)]
        HRESULT GroupBoxes(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000459), hidden, helpcontext(0x00010459)]
        HRESULT GroupObjects(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000034), propget, helpcontext(0x00010034)]
        HRESULT HasAxis(
                        [in, optional] VARIANT Index1, 
                        [in, optional] VARIANT Index2, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000034), propput, helpcontext(0x00010034)]
        HRESULT HasAxis(
                        [in, optional] VARIANT Index1, 
                        [in, optional] VARIANT Index2, 
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [id(0x00000574), propget, helpcontext(0x00010574)]
        HRESULT HasDataTable([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000574), propput, helpcontext(0x00010574)]
        HRESULT HasDataTable([in] VARIANT_BOOL RHS);
        [id(0x00000035), propget, helpcontext(0x00010035)]
        HRESULT HasLegend(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000035), propput, helpcontext(0x00010035)]
        HRESULT HasLegend(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000036), propget, helpcontext(0x00010036)]
        HRESULT HasTitle(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000036), propput, helpcontext(0x00010036)]
        HRESULT HasTitle(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000037), propget, helpcontext(0x00010037)]
        HRESULT HeightPercent(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000037), propput, helpcontext(0x00010037)]
        HRESULT HeightPercent(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x00000571), propget, helpcontext(0x00010571)]
        HRESULT Hyperlinks([out, retval] Hyperlinks** RHS);
        [id(0x00000349), hidden, helpcontext(0x00010349)]
        HRESULT Labels(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000054), propget, helpcontext(0x00010054)]
        HRESULT Legend(
                        [in, lcid] long lcid, 
                        [out, retval] Legend** RHS);
        [id(0x00000014), propget, hidden, helpcontext(0x00010014)]
        HRESULT Line3DGroup(
                        [in, lcid] long lcid, 
                        [out, retval] ChartGroup** RHS);
        [id(0x0000000c), hidden, helpcontext(0x0001000c)]
        HRESULT LineGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x000002ff), hidden, helpcontext(0x000102ff)]
        HRESULT Lines(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000340), hidden, helpcontext(0x00010340)]
        HRESULT ListBoxes(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000575), helpcontext(0x00010575)]
        HRESULT Location(
                        [in] XlChartLocation Where, 
                        [in, optional] VARIANT Name, 
                        [out, retval] Chart** RHS);
        [id(0x0000031f), helpcontext(0x0001031f)]
        HRESULT OLEObjects(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x0000033a), hidden, helpcontext(0x0001033a)]
        HRESULT OptionButtons(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000321), hidden, helpcontext(0x00010321)]
        HRESULT Ovals(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x000000d3), helpcontext(0x000100d3)]
        HRESULT Paste(
                        [in, optional] VARIANT Type, 
                        [in, lcid] long lcid);
        [id(0x00000039), propget, helpcontext(0x00010039)]
        HRESULT Perspective(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000039), propput, helpcontext(0x00010039)]
        HRESULT Perspective(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x00000303), hidden, helpcontext(0x00010303)]
        HRESULT Pictures(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000015), propget, hidden, helpcontext(0x00010015)]
        HRESULT Pie3DGroup(
                        [in, lcid] long lcid, 
                        [out, retval] ChartGroup** RHS);
        [id(0x0000000d), hidden, helpcontext(0x0001000d)]
        HRESULT PieGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000055), propget, helpcontext(0x00010055)]
        HRESULT PlotArea(
                        [in, lcid] long lcid, 
                        [out, retval] PlotArea** RHS);
        [id(0x0000005c), propget, helpcontext(0x0001005c)]
        HRESULT PlotVisibleOnly(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000005c), propput, helpcontext(0x0001005c)]
        HRESULT PlotVisibleOnly(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000000f), hidden, helpcontext(0x0001000f)]
        HRESULT RadarGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000306), hidden, helpcontext(0x00010306)]
        HRESULT Rectangles(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x0000003a), propget, helpcontext(0x0001003a)]
        HRESULT RightAngleAxes(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x0000003a), propput, helpcontext(0x0001003a)]
        HRESULT RightAngleAxes(
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [id(0x0000003b), propget, helpcontext(0x0001003b)]
        HRESULT Rotation(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x0000003b), propput, helpcontext(0x0001003b)]
        HRESULT Rotation(
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [id(0x0000033e), hidden, helpcontext(0x0001033e)]
        HRESULT ScrollBars(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000044), helpcontext(0x00010044)]
        HRESULT SeriesCollection(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x0000005e), propget, hidden, helpcontext(0x0001005e)]
        HRESULT SizeWithWindow(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000005e), propput, hidden, helpcontext(0x0001005e)]
        HRESULT SizeWithWindow(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000577), propget, hidden, helpcontext(0x00010577)]
        HRESULT ShowWindow([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000577), propput, hidden, helpcontext(0x00010577)]
        HRESULT ShowWindow([in] VARIANT_BOOL RHS);
        [id(0x00000346), hidden, helpcontext(0x00010346)]
        HRESULT Spinners(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x0000006d), propget, hidden, helpcontext(0x0001006d)]
        HRESULT SubType(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x0000006d), propput, hidden, helpcontext(0x0001006d)]
        HRESULT SubType(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x00000016), propget, hidden, helpcontext(0x00010016)]
        HRESULT SurfaceGroup(
                        [in, lcid] long lcid, 
                        [out, retval] ChartGroup** RHS);
        [id(0x00000309), hidden, helpcontext(0x00010309)]
        HRESULT TextBoxes(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x0000006c), propget, hidden, helpcontext(0x0001006c)]
        HRESULT Type(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x0000006c), propput, hidden, helpcontext(0x0001006c)]
        HRESULT Type(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x00000578), propget, helpcontext(0x00010578)]
        HRESULT ChartType([out, retval] XlChartType* RHS);
        [id(0x00000578), propput, helpcontext(0x00010578)]
        HRESULT ChartType([in] XlChartType RHS);
        [id(0x00000579), hidden, helpcontext(0x00010579)]
        HRESULT ApplyCustomType(
                        [in] XlChartType ChartType, 
                        [in, optional] VARIANT TypeName);
        [id(0x00000056), propget, helpcontext(0x00010056)]
        HRESULT Walls(
                        [in, lcid] long lcid, 
                        [out, retval] Walls** RHS);
        [id(0x000000d2), propget, hidden, helpcontext(0x000100d2)]
        HRESULT WallsAndGridlines2D(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000000d2), propput, hidden, helpcontext(0x000100d2)]
        HRESULT WallsAndGridlines2D(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000010), hidden, helpcontext(0x00010010)]
        HRESULT XYGroups(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x0000057b), propget, helpcontext(0x0001057b)]
        HRESULT BarShape([out, retval] XlBarShape* RHS);
        [id(0x0000057b), propput, helpcontext(0x0001057b)]
        HRESULT BarShape([in] XlBarShape RHS);
        [id(0x000000ca), propget, helpcontext(0x000100ca)]
        HRESULT PlotBy([out, retval] XlRowCol* RHS);
        [id(0x000000ca), propput, helpcontext(0x000100ca)]
        HRESULT PlotBy([in] XlRowCol RHS);
        [id(0x0000057c), hidden, helpcontext(0x0001057c)]
        HRESULT CopyChartBuild();
        [id(0x0000057d), propget, helpcontext(0x0001057d)]
        HRESULT ProtectFormatting([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000057d), propput, helpcontext(0x0001057d)]
        HRESULT ProtectFormatting([in] VARIANT_BOOL RHS);
        [id(0x0000057e), propget, helpcontext(0x0001057e)]
        HRESULT ProtectData([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000057e), propput, helpcontext(0x0001057e)]
        HRESULT ProtectData([in] VARIANT_BOOL RHS);
        [id(0x0000057f), propget, hidden, helpcontext(0x0001057f)]
        HRESULT ProtectGoalSeek([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000057f), propput, hidden, helpcontext(0x0001057f)]
        HRESULT ProtectGoalSeek([in] VARIANT_BOOL RHS);
        [id(0x00000580), propget, helpcontext(0x00010580)]
        HRESULT ProtectSelection([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000580), propput, helpcontext(0x00010580)]
        HRESULT ProtectSelection([in] VARIANT_BOOL RHS);
        [id(0x00000581), helpcontext(0x00010581)]
        HRESULT GetChartElement(
                        [in] long x, 
                        [in] long y, 
                        [in] long* ElementID, 
                        [in] long* Arg1, 
                        [in] long* Arg2);
        [id(0x00000585), helpcontext(0x00010585)]
        HRESULT SetSourceData(
                        [in] Range* Source, 
                        [in, optional] VARIANT PlotBy);
        [id(0x00000586), helpcontext(0x00010586)]
        HRESULT Export(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT FilterName, 
                        [in, optional] VARIANT Interactive, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000589), helpcontext(0x00010589)]
        HRESULT Refresh();
        [id(0x00000716), propget, helpcontext(0x00010716)]
        HRESULT PivotLayout([out, retval] PivotLayout** RHS);
        [id(0x00000717), propget, hidden, helpcontext(0x00010717)]
        HRESULT HasPivotFields([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000717), propput, hidden, helpcontext(0x00010717)]
        HRESULT HasPivotFields([in] VARIANT_BOOL RHS);
        [id(0x00000718), propget, hidden, helpcontext(0x00010718)]
        HRESULT Scripts([out, retval] Scripts** RHS);
        [id(0x000006ec), hidden, helpcontext(0x000106ec),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOut)]
        HRESULT _PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, lcid] long lcid);
        [id(0x00000411), propget, helpcontext(0x00010411)]
        HRESULT Tab([out, retval] Tab** RHS);
        [id(0x000007e5), propget, helpcontext(0x000107e5)]
        HRESULT MailEnvelope([out, retval] MsoEnvelope** RHS);
        [id(0x00000782), helpcontext(0x00010782)]
        HRESULT ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                        [in, optional] VARIANT LegendKey, 
                        [in, optional] VARIANT AutoText, 
                        [in, optional] VARIANT HasLeaderLines, 
                        [in, optional] VARIANT ShowSeriesName, 
                        [in, optional] VARIANT ShowCategoryName, 
                        [in, optional] VARIANT ShowValue, 
                        [in, optional] VARIANT ShowPercentage, 
                        [in, optional] VARIANT ShowBubbleSize, 
                        [in, optional] VARIANT Separator, 
                        [in, lcid] long lcid);
        [id(0x00000785), helpcontext(0x00010785)]
        HRESULT SaveAs(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT FileFormat, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT ReadOnlyRecommended, 
                        [in, optional] VARIANT CreateBackup, 
                        [in, optional] VARIANT AddToMru, 
                        [in, optional] VARIANT TextCodepage, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, optional] VARIANT Local);
        [id(0x000007ed), helpcontext(0x000107ed)]
        HRESULT Protect(
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT DrawingObjects, 
                        [in, optional] VARIANT Contents, 
                        [in, optional] VARIANT Scenarios, 
                        [in, optional] VARIANT UserInterfaceOnly);
        [id(0x000009c4), helpcontext(0x000109c4)]
        HRESULT ApplyLayout(
                        [in] long Layout, 
                        [in, optional] VARIANT ChartType);
        [id(0x000009c6), helpcontext(0x000109c6)]
        HRESULT SetElement([in] MsoChartElementType Element);
        [id(0x000009c8), propget, helpcontext(0x000109c8)]
        HRESULT ShowDataLabelsOverMaximum([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009c8), propput, helpcontext(0x000109c8)]
        HRESULT ShowDataLabelsOverMaximum([in] VARIANT_BOOL RHS);
        [id(0x000009c9), propget, helpcontext(0x000109c9)]
        HRESULT SideWall([out, retval] Walls** RHS);
        [id(0x000009ca), propget, helpcontext(0x000109ca)]
        HRESULT BackWall([out, retval] Walls** RHS);
        [id(0x00000939), helpcontext(0x00010939),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOutEx)]
        HRESULT PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, lcid] long lcid);
        [id(0x000009cb), helpcontext(0x000109cb)]
        HRESULT ApplyChartTemplate([in] BSTR Filename);
        [id(0x000009cc), helpcontext(0x000109cc)]
        HRESULT SaveChartTemplate([in] BSTR Filename);
        [id(0x000000db), helpcontext(0x000100db)]
        HRESULT SetDefaultChart([in] VARIANT Name);
        [id(0x000009bd), helpcontext(0x000109bd)]
        HRESULT ExportAsFixedFormat(
                        [in] XlFixedFormatType Type, 
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT Quality, 
                        [in, optional] VARIANT IncludeDocProperties, 
                        [in, optional] VARIANT IgnorePrintAreas, 
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT OpenAfterPublish, 
                        [in, optional] VARIANT FixedFormatExtClassPtr);
        [id(0x000009cd), propget, helpcontext(0x000109cd)]
        HRESULT ChartStyle([out, retval] VARIANT* RHS);
        [id(0x000009cd), propput, helpcontext(0x000109cd)]
        HRESULT ChartStyle([in] VARIANT RHS);
        [id(0x000009ce), helpcontext(0x000109ce)]
        HRESULT ClearToMatchStyle();
    };

    [
      odl,
      uuid(000208D7-0000-0000-C000-000000000046),
      helpcontext(0x0002000c),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Sheets : IDispatch {
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] Application** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] XlCreator* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000000b5), helpcontext(0x000100b5)]
        HRESULT Add(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, optional] VARIANT Count, 
                        [in, optional] VARIANT Type, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000227), helpcontext(0x00010227)]
        HRESULT Copy(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [id(0x00000076), propget, helpcontext(0x00010076)]
        HRESULT Count([out, retval] long* RHS);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([in, lcid] long lcid);
        [id(0x000001d5), helpcontext(0x000101d5)]
        HRESULT FillAcrossSheets(
                        [in] Range* Range, 
                        [in, optional, defaultvalue(-4104)] XlFillWith Type, 
                        [in, lcid] long lcid);
        [id(0x000000aa), propget, helpcontext(0x000100aa)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [id(0x0000027d), helpcontext(0x0001027d)]
        HRESULT Move(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** RHS);
        [id(0x00000389), hidden, helpcontext(0x00010389),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, _PrintOut)]
        HRESULT __PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, lcid] long lcid);
        [id(0x00000119), helpcontext(0x00010119)]
        HRESULT PrintPreview(
                        [in, optional] VARIANT EnableChanges, 
                        [in, lcid] long lcid);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select(
                        [in, optional] VARIANT Replace, 
                        [in, lcid] long lcid);
        [id(0x0000058a), propget, helpcontext(0x0001058a)]
        HRESULT HPageBreaks([out, retval] HPageBreaks** RHS);
        [id(0x0000058b), propget, helpcontext(0x0001058b)]
        HRESULT VPageBreaks([out, retval] VPageBreaks** RHS);
        [id(0x0000022e), propget, helpcontext(0x0001022e)]
        HRESULT Visible(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x0000022e), propput, helpcontext(0x0001022e)]
        HRESULT Visible(
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [id(00000000), propget, helpcontext(0x00010000)]
        HRESULT _Default(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [id(0x000006ec), hidden, helpcontext(0x000106ec),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOut)]
        HRESULT _PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, lcid] long lcid);
        [id(0x00000939), helpcontext(0x00010939),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOutEx)]
        HRESULT PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, optional] VARIANT IgnorePrintAreas, 
                        [in, lcid] long lcid);
    };

    [
      odl,
      uuid(00024402-0001-0000-C000-000000000046),
      helpcontext(0x00020098),
      hidden
    ]
    interface IVPageBreak : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] Worksheet** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x0001058c)]
        HRESULT _stdcall DragOff(
                        [in] XlDirection Direction, 
                        [in] long RegionIndex);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] XlPageBreak* RHS);
        [propput, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([in] XlPageBreak RHS);
        [propget, helpcontext(0x0001058e)]
        HRESULT _stdcall Extent([out, retval] XlPageBreakExtent* RHS);
        [propget, helpcontext(0x00010575)]
        HRESULT _stdcall Location([out, retval] Range** RHS);
        [propputref, helpcontext(0x00010575)]
        HRESULT _stdcall Location([in] Range* RHS);
    };

    [
      odl,
      uuid(00024401-0001-0000-C000-000000000046),
      helpcontext(0x00020097),
      hidden
    ]
    interface IHPageBreak : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] Worksheet** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x0001058c)]
        HRESULT _stdcall DragOff(
                        [in] XlDirection Direction, 
                        [in] long RegionIndex);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] XlPageBreak* RHS);
        [propput, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([in] XlPageBreak RHS);
        [propget, helpcontext(0x0001058e)]
        HRESULT _stdcall Extent([out, retval] XlPageBreakExtent* RHS);
        [propget, helpcontext(0x00010575)]
        HRESULT _stdcall Location([out, retval] Range** RHS);
        [propputref, helpcontext(0x00010575)]
        HRESULT _stdcall Location([in] Range* RHS);
    };

    [
      odl,
      uuid(00024404-0001-0000-C000-000000000046),
      helpcontext(0x0002009a),
      hidden
    ]
    interface IHPageBreaks : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] long Index, 
                        [out, retval] HPageBreak** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] long Index, 
                        [out, retval] HPageBreak** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] IDispatch* Before, 
                        [out, retval] HPageBreak** RHS);
    };

    [
      odl,
      uuid(00024405-0001-0000-C000-000000000046),
      helpcontext(0x0002009b),
      hidden
    ]
    interface IVPageBreaks : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] long Index, 
                        [out, retval] VPageBreak** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] long Index, 
                        [out, retval] VPageBreak** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] IDispatch* Before, 
                        [out, retval] VPageBreak** RHS);
    };

    [
      odl,
      uuid(00024407-0001-0000-C000-000000000046),
      helpcontext(0x0002009d),
      hidden
    ]
    interface IRecentFile : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010123)]
        HRESULT _stdcall Path([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [helpcontext(0x00010783)]
        HRESULT _stdcall Open([out, retval] Workbook** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
    };

    [
      odl,
      uuid(00024406-0001-0000-C000-000000000046),
      helpcontext(0x0002009c),
      hidden
    ]
    interface IRecentFiles : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001058f)]
        HRESULT _stdcall Maximum([out, retval] long* RHS);
        [propput, helpcontext(0x0001058f)]
        HRESULT _stdcall Maximum([in] long RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] long Index, 
                        [out, retval] RecentFile** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] long Index, 
                        [out, retval] RecentFile** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR Name, 
                        [out, retval] RecentFile** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00024411-0001-0000-C000-000000000046),
      helpcontext(0x000200a7),
      hidden
    ]
    interface IDocEvents : IDispatch {
        [helpcontext(0x00010607)]
        HRESULT _stdcall SelectionChange([in] Range* Target);
        [helpcontext(0x00010601)]
        HRESULT _stdcall BeforeDoubleClick(
                        [in] Range* Target, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x000105fe)]
        HRESULT _stdcall BeforeRightClick(
                        [in] Range* Target, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x00010130)]
        HRESULT _stdcall Activate();
        [helpcontext(0x000105fa)]
        HRESULT _stdcall Deactivate();
        [helpcontext(0x00010117)]
        HRESULT _stdcall Calculate();
        [helpcontext(0x00010609)]
        HRESULT _stdcall Change([in] Range* Target);
        [helpcontext(0x000105be)]
        HRESULT _stdcall FollowHyperlink([in] Hyperlink* Target);
        [helpcontext(0x0001086c)]
        HRESULT _stdcall PivotTableUpdate([in] PivotTable* Target);
    };

    [
      odl,
      uuid(000208D8-0000-0000-C000-000000000046),
      helpcontext(0x00020010),
      dual,
      nonextensible,
      oleautomation
    ]
    interface _Worksheet : IDispatch {
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] Application** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] XlCreator* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x00000130), helpcontext(0x00010130)]
        HRESULT Activate([in, lcid] long lcid);
        [id(0x00000227), helpcontext(0x00010227)]
        HRESULT Copy(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete([in, lcid] long lcid);
        [id(0x0000055d), propget, helpcontext(0x0001055d)]
        HRESULT CodeName([out, retval] BSTR* RHS);
        [id(0x80010000), propget, helpcontext(0x80020000)]
        HRESULT _CodeName([out, retval] BSTR* RHS);
        [id(0x80010000), propput, helpcontext(0x80020000)]
        HRESULT _CodeName([in] BSTR RHS);
        [id(0x000001e6), propget, helpcontext(0x000101e6)]
        HRESULT Index(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x0000027d), helpcontext(0x0001027d)]
        HRESULT Move(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x0000006e), propput, helpcontext(0x0001006e)]
        HRESULT Name([in] BSTR RHS);
        [id(0x000001f6), propget, helpcontext(0x000101f6)]
        HRESULT Next([out, retval] IDispatch** RHS);
        [id(0x00000274), propget, hidden, helpcontext(0x00010274)]
        HRESULT OnDoubleClick(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000274), propput, hidden, helpcontext(0x00010274)]
        HRESULT OnDoubleClick(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000407), propget, hidden, helpcontext(0x00010407)]
        HRESULT OnSheetActivate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000407), propput, hidden, helpcontext(0x00010407)]
        HRESULT OnSheetActivate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000439), propget, hidden, helpcontext(0x00010439)]
        HRESULT OnSheetDeactivate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000439), propput, hidden, helpcontext(0x00010439)]
        HRESULT OnSheetDeactivate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x000003e6), propget, helpcontext(0x000103e6)]
        HRESULT PageSetup([out, retval] PageSetup** RHS);
        [id(0x000001f7), propget, helpcontext(0x000101f7)]
        HRESULT Previous([out, retval] IDispatch** RHS);
        [id(0x00000389), hidden, helpcontext(0x00010389),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, _PrintOut)]
        HRESULT __PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, lcid] long lcid);
        [id(0x00000119), helpcontext(0x00010119)]
        HRESULT PrintPreview(
                        [in, optional] VARIANT EnableChanges, 
                        [in, lcid] long lcid);
        [id(0x0000011a), hidden, helpcontext(0x0001011a)]
        HRESULT _Protect(
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT DrawingObjects, 
                        [in, optional] VARIANT Contents, 
                        [in, optional] VARIANT Scenarios, 
                        [in, optional] VARIANT UserInterfaceOnly, 
                        [in, lcid] long lcid);
        [id(0x00000124), propget, helpcontext(0x00010124)]
        HRESULT ProtectContents(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000125), propget, helpcontext(0x00010125)]
        HRESULT ProtectDrawingObjects(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000487), propget, helpcontext(0x00010487)]
        HRESULT ProtectionMode(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000126), propget, helpcontext(0x00010126)]
        HRESULT ProtectScenarios(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000011c), hidden, helpcontext(0x0001011c)]
        HRESULT _SaveAs(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT FileFormat, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT ReadOnlyRecommended, 
                        [in, optional] VARIANT CreateBackup, 
                        [in, optional] VARIANT AddToMru, 
                        [in, optional] VARIANT TextCodepage, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, lcid] long lcid);
        [id(0x000000eb), helpcontext(0x000100eb)]
        HRESULT Select(
                        [in, optional] VARIANT Replace, 
                        [in, lcid] long lcid);
        [id(0x0000011d), helpcontext(0x0001011d)]
        HRESULT Unprotect(
                        [in, optional] VARIANT Password, 
                        [in, lcid] long lcid);
        [id(0x0000022e), propget, helpcontext(0x0001022e)]
        HRESULT Visible(
                        [in, lcid] long lcid, 
                        [out, retval] XlSheetVisibility* RHS);
        [id(0x0000022e), propput, helpcontext(0x0001022e)]
        HRESULT Visible(
                        [in, lcid] long lcid, 
                        [in] XlSheetVisibility RHS);
        [id(0x00000561), propget, helpcontext(0x00010561)]
        HRESULT Shapes([out, retval] Shapes** RHS);
        [id(0x00000191), propget, helpcontext(0x00010191)]
        HRESULT TransitionExpEval(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000191), propput, helpcontext(0x00010191)]
        HRESULT TransitionExpEval(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x000002f8), hidden, helpcontext(0x000102f8)]
        HRESULT Arcs(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000318), propget, helpcontext(0x00010318)]
        HRESULT AutoFilterMode(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000318), propput, helpcontext(0x00010318)]
        HRESULT AutoFilterMode(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x000004a4), helpcontext(0x000104a4)]
        HRESULT SetBackgroundPicture([in] BSTR Filename);
        [id(0x0000022d), hidden, helpcontext(0x0001022d)]
        HRESULT Buttons(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000117), helpcontext(0x00010117)]
        HRESULT Calculate([in, lcid] long lcid);
        [id(0x00000590), propget, helpcontext(0x00010590)]
        HRESULT EnableCalculation([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000590), propput, helpcontext(0x00010590)]
        HRESULT EnableCalculation([in] VARIANT_BOOL RHS);
        [id(0x000000ee), propget, helpcontext(0x000100ee)]
        HRESULT Cells([out, retval] Range** RHS);
        [id(0x00000424), helpcontext(0x00010424)]
        HRESULT ChartObjects(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000338), hidden, helpcontext(0x00010338)]
        HRESULT CheckBoxes(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x000001f9), helpcontext(0x000101f9)]
        HRESULT CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [in, lcid] long lcid);
        [id(0x0000042d), propget, helpcontext(0x0001042d)]
        HRESULT CircularReference(
                        [in, lcid] long lcid, 
                        [out, retval] Range** RHS);
        [id(0x000003ca), helpcontext(0x000103ca)]
        HRESULT ClearArrows([in, lcid] long lcid);
        [id(0x000000f1), propget, helpcontext(0x000100f1)]
        HRESULT Columns([out, retval] Range** RHS);
        [id(0x00000315), propget, helpcontext(0x00010315)]
        HRESULT ConsolidationFunction(
                        [in, lcid] long lcid, 
                        [out, retval] XlConsolidationFunction* RHS);
        [id(0x00000316), propget, helpcontext(0x00010316)]
        HRESULT ConsolidationOptions(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000317), propget, helpcontext(0x00010317)]
        HRESULT ConsolidationSources(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000283), propget, hidden, helpcontext(0x00010283)]
        HRESULT DisplayAutomaticPageBreaks(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000283), propput, hidden, helpcontext(0x00010283)]
        HRESULT DisplayAutomaticPageBreaks(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000304), hidden, helpcontext(0x00010304)]
        HRESULT Drawings(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000058), hidden, helpcontext(0x00010058)]
        HRESULT DrawingObjects(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000344), hidden, helpcontext(0x00010344)]
        HRESULT DropDowns(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000484), propget, helpcontext(0x00010484)]
        HRESULT EnableAutoFilter(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000484), propput, helpcontext(0x00010484)]
        HRESULT EnableAutoFilter(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000591), propget, helpcontext(0x00010591)]
        HRESULT EnableSelection([out, retval] XlEnableSelection* RHS);
        [id(0x00000591), propput, helpcontext(0x00010591)]
        HRESULT EnableSelection([in] XlEnableSelection RHS);
        [id(0x00000485), propget, helpcontext(0x00010485)]
        HRESULT EnableOutlining(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000485), propput, helpcontext(0x00010485)]
        HRESULT EnableOutlining(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000486), propget, helpcontext(0x00010486)]
        HRESULT EnablePivotTable(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000486), propput, helpcontext(0x00010486)]
        HRESULT EnablePivotTable(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000001), helpcontext(0x00010001)]
        HRESULT Evaluate(
                        [in] VARIANT Name, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0xfffffffb), helpcontext(0x0000fffb)]
        HRESULT _Evaluate(
                        [in] VARIANT Name, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000320), propget, helpcontext(0x00010320)]
        HRESULT FilterMode(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000592), helpcontext(0x00010592)]
        HRESULT ResetAllPageBreaks();
        [id(0x00000342), hidden, helpcontext(0x00010342)]
        HRESULT GroupBoxes(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000459), hidden, helpcontext(0x00010459)]
        HRESULT GroupObjects(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000349), hidden, helpcontext(0x00010349)]
        HRESULT Labels(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x000002ff), hidden, helpcontext(0x000102ff)]
        HRESULT Lines(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000340), hidden, helpcontext(0x00010340)]
        HRESULT ListBoxes(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x000001ba), propget, helpcontext(0x000101ba)]
        HRESULT Names([out, retval] Names** RHS);
        [id(0x0000031f), helpcontext(0x0001031f)]
        HRESULT OLEObjects(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000271), propget, hidden, helpcontext(0x00010271)]
        HRESULT OnCalculate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000271), propput, hidden, helpcontext(0x00010271)]
        HRESULT OnCalculate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000275), propget, hidden, helpcontext(0x00010275)]
        HRESULT OnData(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000275), propput, hidden, helpcontext(0x00010275)]
        HRESULT OnData(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000273), propget, hidden, helpcontext(0x00010273)]
        HRESULT OnEntry(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000273), propput, hidden, helpcontext(0x00010273)]
        HRESULT OnEntry(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x0000033a), hidden, helpcontext(0x0001033a)]
        HRESULT OptionButtons(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000066), propget, helpcontext(0x00010066)]
        HRESULT Outline([out, retval] Outline** RHS);
        [id(0x00000321), hidden, helpcontext(0x00010321)]
        HRESULT Ovals(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x000000d3), helpcontext(0x000100d3)]
        HRESULT Paste(
                        [in, optional] VARIANT Destination, 
                        [in, optional] VARIANT Link, 
                        [in, lcid] long lcid);
        [id(0x00000403), hidden, helpcontext(0x00010403)]
        HRESULT _PasteSpecial(
                        [in, optional] VARIANT Format, 
                        [in, optional] VARIANT Link, 
                        [in, optional] VARIANT DisplayAsIcon, 
                        [in, optional] VARIANT IconFileName, 
                        [in, optional] VARIANT IconIndex, 
                        [in, optional] VARIANT IconLabel, 
                        [in, lcid] long lcid);
        [id(0x00000303), hidden, helpcontext(0x00010303)]
        HRESULT Pictures(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x000002b2), helpcontext(0x000102b2)]
        HRESULT PivotTables(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x000002ac), helpcontext(0x000102ac)]
        HRESULT PivotTableWizard(
                        [in, optional] VARIANT SourceType, 
                        [in, optional] VARIANT SourceData, 
                        [in, optional] VARIANT TableDestination, 
                        [in, optional] VARIANT TableName, 
                        [in, optional] VARIANT RowGrand, 
                        [in, optional] VARIANT ColumnGrand, 
                        [in, optional] VARIANT SaveData, 
                        [in, optional] VARIANT HasAutoFormat, 
                        [in, optional] VARIANT AutoPage, 
                        [in, optional] VARIANT Reserved, 
                        [in, optional] VARIANT BackgroundQuery, 
                        [in, optional] VARIANT OptimizeCache, 
                        [in, optional] VARIANT PageFieldOrder, 
                        [in, optional] VARIANT PageFieldWrapCount, 
                        [in, optional] VARIANT ReadData, 
                        [in, optional] VARIANT Connection, 
                        [in, lcid] long lcid, 
                        [out, retval] PivotTable** RHS);
        [id(0x000000c5), propget, helpcontext(0x000100c5)]
        HRESULT Range(
                        [in] VARIANT Cell1, 
                        [in, optional] VARIANT Cell2, 
                        [out, retval] Range** RHS);
        [id(0x00000306), hidden, helpcontext(0x00010306)]
        HRESULT Rectangles(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000102), propget, helpcontext(0x00010102)]
        HRESULT Rows([out, retval] Range** RHS);
        [id(0x0000038c), helpcontext(0x0001038c)]
        HRESULT Scenarios(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000599), propget, helpcontext(0x00010599)]
        HRESULT ScrollArea([out, retval] BSTR* RHS);
        [id(0x00000599), propput, helpcontext(0x00010599)]
        HRESULT ScrollArea([in] BSTR RHS);
        [id(0x0000033e), hidden, helpcontext(0x0001033e)]
        HRESULT ScrollBars(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x0000031a), helpcontext(0x0001031a)]
        HRESULT ShowAllData([in, lcid] long lcid);
        [id(0x00000199), helpcontext(0x00010199)]
        HRESULT ShowDataForm([in, lcid] long lcid);
        [id(0x00000346), hidden, helpcontext(0x00010346)]
        HRESULT Spinners(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000197), propget, helpcontext(0x00010197)]
        HRESULT StandardHeight(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x00000198), propget, helpcontext(0x00010198)]
        HRESULT StandardWidth(
                        [in, lcid] long lcid, 
                        [out, retval] double* RHS);
        [id(0x00000198), propput, helpcontext(0x00010198)]
        HRESULT StandardWidth(
                        [in, lcid] long lcid, 
                        [in] double RHS);
        [id(0x00000309), hidden, helpcontext(0x00010309)]
        HRESULT TextBoxes(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x00000192), propget, helpcontext(0x00010192)]
        HRESULT TransitionFormEntry(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000192), propput, helpcontext(0x00010192)]
        HRESULT TransitionFormEntry(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000006c), propget, helpcontext(0x0001006c)]
        HRESULT Type(
                        [in, lcid] long lcid, 
                        [out, retval] XlSheetType* RHS);
        [id(0x0000019c), propget, helpcontext(0x0001019c)]
        HRESULT UsedRange(
                        [in, lcid] long lcid, 
                        [out, retval] Range** RHS);
        [id(0x0000058a), propget, helpcontext(0x0001058a)]
        HRESULT HPageBreaks([out, retval] HPageBreaks** RHS);
        [id(0x0000058b), propget, helpcontext(0x0001058b)]
        HRESULT VPageBreaks([out, retval] VPageBreaks** RHS);
        [id(0x0000059a), propget, helpcontext(0x0001059a)]
        HRESULT QueryTables([out, retval] QueryTables** RHS);
        [id(0x0000059b), propget, helpcontext(0x0001059b)]
        HRESULT DisplayPageBreaks([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000059b), propput, helpcontext(0x0001059b)]
        HRESULT DisplayPageBreaks([in] VARIANT_BOOL RHS);
        [id(0x0000023f), propget, helpcontext(0x0001023f)]
        HRESULT Comments([out, retval] Comments** RHS);
        [id(0x00000571), propget, helpcontext(0x00010571)]
        HRESULT Hyperlinks([out, retval] Hyperlinks** RHS);
        [id(0x0000059c), helpcontext(0x0001059c)]
        HRESULT ClearCircles();
        [id(0x0000059d), helpcontext(0x0001059d)]
        HRESULT CircleInvalid();
        [id(0x00000288), propget, hidden, helpcontext(0x00010288)]
        HRESULT _DisplayRightToLeft(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x00000288), propput, hidden, helpcontext(0x00010288)]
        HRESULT _DisplayRightToLeft(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [id(0x00000319), propget, helpcontext(0x00010319)]
        HRESULT AutoFilter([out, retval] AutoFilter** RHS);
        [id(0x000006ee), propget, helpcontext(0x000106ee)]
        HRESULT DisplayRightToLeft(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000006ee), propput, helpcontext(0x000106ee)]
        HRESULT DisplayRightToLeft(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000718), propget, hidden, helpcontext(0x00010718)]
        HRESULT Scripts([out, retval] Scripts** RHS);
        [id(0x000006ec), hidden, helpcontext(0x000106ec),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOut)]
        HRESULT _PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, lcid] long lcid);
        [id(0x00000719), hidden, helpcontext(0x00010719)]
        HRESULT _CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [in, optional] VARIANT IgnoreFinalYaa, 
                        [in, optional] VARIANT SpellScript, 
                        [in, lcid] long lcid);
        [id(0x00000411), propget, helpcontext(0x00010411)]
        HRESULT Tab([out, retval] Tab** RHS);
        [id(0x000007e5), propget, helpcontext(0x000107e5)]
        HRESULT MailEnvelope([out, retval] MsoEnvelope** RHS);
        [id(0x00000785), helpcontext(0x00010785)]
        HRESULT SaveAs(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT FileFormat, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT ReadOnlyRecommended, 
                        [in, optional] VARIANT CreateBackup, 
                        [in, optional] VARIANT AddToMru, 
                        [in, optional] VARIANT TextCodepage, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, optional] VARIANT Local);
        [id(0x000007ee), propget, helpcontext(0x000107ee)]
        HRESULT CustomProperties([out, retval] CustomProperties** RHS);
        [id(0x000007e0), propget, helpcontext(0x000107e0)]
        HRESULT SmartTags([out, retval] SmartTags** RHS);
        [id(0x000000b0), propget, helpcontext(0x000100b0)]
        HRESULT Protection([out, retval] Protection** RHS);
        [id(0x00000788), helpcontext(0x00010788)]
        HRESULT PasteSpecial(
                        [in, optional] VARIANT Format, 
                        [in, optional] VARIANT Link, 
                        [in, optional] VARIANT DisplayAsIcon, 
                        [in, optional] VARIANT IconFileName, 
                        [in, optional] VARIANT IconIndex, 
                        [in, optional] VARIANT IconLabel, 
                        [in, optional] VARIANT NoHTMLFormatting, 
                        [in, lcid] long lcid);
        [id(0x000007ed), helpcontext(0x000107ed)]
        HRESULT Protect(
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT DrawingObjects, 
                        [in, optional] VARIANT Contents, 
                        [in, optional] VARIANT Scenarios, 
                        [in, optional] VARIANT UserInterfaceOnly, 
                        [in, optional] VARIANT AllowFormattingCells, 
                        [in, optional] VARIANT AllowFormattingColumns, 
                        [in, optional] VARIANT AllowFormattingRows, 
                        [in, optional] VARIANT AllowInsertingColumns, 
                        [in, optional] VARIANT AllowInsertingRows, 
                        [in, optional] VARIANT AllowInsertingHyperlinks, 
                        [in, optional] VARIANT AllowDeletingColumns, 
                        [in, optional] VARIANT AllowDeletingRows, 
                        [in, optional] VARIANT AllowSorting, 
                        [in, optional] VARIANT AllowFiltering, 
                        [in, optional] VARIANT AllowUsingPivotTables);
        [id(0x000008d3), propget, helpcontext(0x000108d3)]
        HRESULT ListObjects([out, retval] ListObjects** RHS);
        [id(0x000008d4), helpcontext(0x000108d4)]
        HRESULT XmlDataQuery(
                        [in] BSTR XPath, 
                        [in, optional] VARIANT SelectionNamespaces, 
                        [in, optional] VARIANT Map, 
                        [out, retval] Range** RHS);
        [id(0x000008d7), helpcontext(0x000108d7)]
        HRESULT XmlMapQuery(
                        [in] BSTR XPath, 
                        [in, optional] VARIANT SelectionNamespaces, 
                        [in, optional] VARIANT Map, 
                        [out, retval] Range** RHS);
        [id(0x00000939), helpcontext(0x00010939),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOutEx)]
        HRESULT PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, optional] VARIANT IgnorePrintAreas, 
                        [in, lcid] long lcid);
        [id(0x000009cf), propget, helpcontext(0x000109cf)]
        HRESULT EnableFormatConditionsCalculation([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009cf), propput, helpcontext(0x000109cf)]
        HRESULT EnableFormatConditionsCalculation([in] VARIANT_BOOL RHS);
        [id(0x00000370), propget, helpcontext(0x00010370)]
        HRESULT Sort([out, retval] Sort** RHS);
        [id(0x000009bd), helpcontext(0x000109bd)]
        HRESULT ExportAsFixedFormat(
                        [in] XlFixedFormatType Type, 
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT Quality, 
                        [in, optional] VARIANT IncludeDocProperties, 
                        [in, optional] VARIANT IgnorePrintAreas, 
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT OpenAfterPublish, 
                        [in, optional] VARIANT FixedFormatExtClassPtr);
    };

    [
      odl,
      uuid(00020852-0001-0000-C000-000000000046),
      helpcontext(0x00020012),
      hidden
    ]
    interface IStyle : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010229)]
        HRESULT _stdcall BuiltIn([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000101b3)]
        HRESULT _stdcall Borders([out, retval] Borders** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010106)]
        HRESULT _stdcall FormulaHidden([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010106)]
        HRESULT _stdcall FormulaHidden([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] XlHAlign* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] XlHAlign RHS);
        [propget, helpcontext(0x0001019d)]
        HRESULT _stdcall IncludeAlignment([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001019d)]
        HRESULT _stdcall IncludeAlignment([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001019e)]
        HRESULT _stdcall IncludeBorder([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001019e)]
        HRESULT _stdcall IncludeBorder([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001019f)]
        HRESULT _stdcall IncludeFont([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001019f)]
        HRESULT _stdcall IncludeFont([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000101a0)]
        HRESULT _stdcall IncludeNumber([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000101a0)]
        HRESULT _stdcall IncludeNumber([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000101a1)]
        HRESULT _stdcall IncludePatterns([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000101a1)]
        HRESULT _stdcall IncludePatterns([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000101a2)]
        HRESULT _stdcall IncludeProtection([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000101a2)]
        HRESULT _stdcall IncludeProtection([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000100c9)]
        HRESULT _stdcall IndentLevel([out, retval] long* RHS);
        [propput, helpcontext(0x000100c9)]
        HRESULT _stdcall IndentLevel([in] long RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000100d0)]
        HRESULT _stdcall MergeCells([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100d0)]
        HRESULT _stdcall MergeCells([in] VARIANT RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [propget, helpcontext(0x000103a9)]
        HRESULT _stdcall NameLocal([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([in] BSTR RHS);
        [propget, helpcontext(0x00010449)]
        HRESULT _stdcall NumberFormatLocal([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010449)]
        HRESULT _stdcall NumberFormatLocal([in] BSTR RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] XlOrientation* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] XlOrientation RHS);
        [propget, helpcontext(0x000100d1)]
        HRESULT _stdcall ShrinkToFit([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100d1)]
        HRESULT _stdcall ShrinkToFit([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] XlVAlign* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] XlVAlign RHS);
        [propget, helpcontext(0x00010114)]
        HRESULT _stdcall WrapText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010114)]
        HRESULT _stdcall WrapText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
    };

    [
      odl,
      uuid(00020853-0001-0000-C000-000000000046),
      helpcontext(0x00020013),
      hidden
    ]
    interface IStyles : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR Name, 
                        [in, optional] VARIANT BasedOn, 
                        [out, retval] Style** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] Style** RHS);
        [helpcontext(0x00010234)]
        HRESULT _stdcall Merge(
                        [in] VARIANT Workbook, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] Style** RHS);
    };

    [
      odl,
      uuid(00020855-0001-0000-C000-000000000046),
      helpcontext(0x00020015),
      hidden
    ]
    interface IBorders : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010063)]
        HRESULT _stdcall Color([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010063)]
        HRESULT _stdcall Color([in] VARIANT RHS);
        [propget, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([in] VARIANT RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] XlBordersIndex Index, 
                        [out, retval] Border** RHS);
        [propget, helpcontext(0x00010077)]
        HRESULT _stdcall LineStyle([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010077)]
        HRESULT _stdcall LineStyle([in] VARIANT RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] VARIANT RHS);
        [propget, helpcontext(0x00010078)]
        HRESULT _stdcall Weight([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010078)]
        HRESULT _stdcall Weight([in] VARIANT RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] XlBordersIndex Index, 
                        [out, retval] Border** RHS);
        [propget, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([in] VARIANT RHS);
        [propget, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([in] VARIANT RHS);
    };

    [
      odl,
      uuid(000208D9-0000-0000-C000-000000000046),
      helpcontext(0x00020016),
      hidden,
      dual,
      nonextensible,
      oleautomation
    ]
    interface _Global : IDispatch {
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] Application** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] XlCreator* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] Application** RHS);
        [id(0x00000131), propget, helpcontext(0x00010131)]
        HRESULT ActiveCell([out, retval] Range** RHS);
        [id(0x000000b7), propget, helpcontext(0x000100b7)]
        HRESULT ActiveChart([out, retval] Chart** RHS);
        [id(0x0000032f), propget, hidden, helpcontext(0x0001032f)]
        HRESULT ActiveDialog([out, retval] DialogSheet** RHS);
        [id(0x000002f6), propget, hidden, helpcontext(0x000102f6)]
        HRESULT ActiveMenuBar([out, retval] MenuBar** RHS);
        [id(0x00000132), propget, helpcontext(0x00010132)]
        HRESULT ActivePrinter(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000132), propput, helpcontext(0x00010132)]
        HRESULT ActivePrinter(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000133), propget, helpcontext(0x00010133)]
        HRESULT ActiveSheet([out, retval] IDispatch** RHS);
        [id(0x000002f7), propget, helpcontext(0x000102f7)]
        HRESULT ActiveWindow([out, retval] Window** RHS);
        [id(0x00000134), propget, helpcontext(0x00010134)]
        HRESULT ActiveWorkbook([out, retval] Workbook** RHS);
        [id(0x00000225), propget, helpcontext(0x00010225)]
        HRESULT AddIns([out, retval] AddIns** RHS);
        [id(0x0000059e), propget, helpcontext(0x0001059e)]
        HRESULT Assistant([out, retval] Assistant** RHS);
        [id(0x00000117), helpcontext(0x00010117)]
        HRESULT Calculate([in, lcid] long lcid);
        [id(0x000000ee), propget, helpcontext(0x000100ee)]
        HRESULT Cells([out, retval] Range** RHS);
        [id(0x00000079), propget, helpcontext(0x00010079)]
        HRESULT Charts([out, retval] Sheets** RHS);
        [id(0x000000f1), propget, helpcontext(0x000100f1)]
        HRESULT Columns([out, retval] Range** RHS);
        [id(0x0000059f), propget, helpcontext(0x0001059f)]
        HRESULT CommandBars([out, retval] CommandBars** RHS);
        [id(0x0000014c), propget, helpcontext(0x0001014c)]
        HRESULT DDEAppReturnCode(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x0000014d), helpcontext(0x0001014d)]
        HRESULT DDEExecute(
                        [in] long Channel, 
                        [in] BSTR String, 
                        [in, lcid] long lcid);
        [id(0x0000014e), helpcontext(0x0001014e)]
        HRESULT DDEInitiate(
                        [in] BSTR App, 
                        [in] BSTR Topic, 
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x0000014f), helpcontext(0x0001014f)]
        HRESULT DDEPoke(
                        [in] long Channel, 
                        [in] VARIANT Item, 
                        [in] VARIANT Data, 
                        [in, lcid] long lcid);
        [id(0x00000150), helpcontext(0x00010150)]
        HRESULT DDERequest(
                        [in] long Channel, 
                        [in] BSTR Item, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000151), helpcontext(0x00010151)]
        HRESULT DDETerminate(
                        [in] long Channel, 
                        [in, lcid] long lcid);
        [id(0x000002fc), propget, hidden, helpcontext(0x000102fc)]
        HRESULT DialogSheets([out, retval] Sheets** RHS);
        [id(0x00000001), helpcontext(0x00010001)]
        HRESULT Evaluate(
                        [in] VARIANT Name, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0xfffffffb), helpcontext(0x0000fffb)]
        HRESULT _Evaluate(
                        [in] VARIANT Name, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x0000015e), helpcontext(0x0001015e)]
        HRESULT ExecuteExcel4Macro(
                        [in] BSTR String, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000002fe), helpcontext(0x000102fe)]
        HRESULT Intersect(
                        [in] Range* Arg1, 
                        [in] Range* Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [in, lcid] long lcid, 
                        [out, retval] Range** RHS);
        [id(0x0000024d), propget, hidden, helpcontext(0x0001024d)]
        HRESULT MenuBars([out, retval] MenuBars** RHS);
        [id(0x00000246), propget, hidden, helpcontext(0x00010246)]
        HRESULT Modules([out, retval] Modules** RHS);
        [id(0x000001ba), propget, helpcontext(0x000101ba)]
        HRESULT Names([out, retval] Names** RHS);
        [id(0x000000c5), propget, helpcontext(0x000100c5)]
        HRESULT Range(
                        [in] VARIANT Cell1, 
                        [in, optional] VARIANT Cell2, 
                        [out, retval] Range** RHS);
        [id(0x00000102), propget, helpcontext(0x00010102)]
        HRESULT Rows([out, retval] Range** RHS);
        [id(0x00000103), helpcontext(0x00010103)]
        HRESULT Run(
                        [in, optional] VARIANT Macro, 
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000326), helpcontext(0x00010326)]
        HRESULT _Run2(
                        [in, optional] VARIANT Macro, 
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000093), propget, helpcontext(0x00010093)]
        HRESULT Selection(
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [id(0x0000017f), helpcontext(0x0001017f)]
        HRESULT SendKeys(
                        [in] VARIANT Keys, 
                        [in, optional] VARIANT Wait, 
                        [in, lcid] long lcid);
        [id(0x000001e5), propget, helpcontext(0x000101e5)]
        HRESULT Sheets([out, retval] Sheets** RHS);
        [id(0x00000308), propget, hidden, helpcontext(0x00010308)]
        HRESULT ShortcutMenus(
                        [in] long Index, 
                        [out, retval] Menu** RHS);
        [id(0x0000030a), propget, helpcontext(0x0001030a)]
        HRESULT ThisWorkbook(
                        [in, lcid] long lcid, 
                        [out, retval] Workbook** RHS);
        [id(0x00000228), propget, hidden, helpcontext(0x00010228)]
        HRESULT Toolbars([out, retval] Toolbars** RHS);
        [id(0x0000030b), helpcontext(0x0001030b)]
        HRESULT Union(
                        [in] Range* Arg1, 
                        [in] Range* Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [in, lcid] long lcid, 
                        [out, retval] Range** RHS);
        [id(0x000001ae), propget, helpcontext(0x000101ae)]
        HRESULT Windows([out, retval] Windows** RHS);
        [id(0x0000023c), propget, helpcontext(0x0001023c)]
        HRESULT Workbooks([out, retval] Workbooks** RHS);
        [id(0x000005a0), propget, helpcontext(0x000105a0)]
        HRESULT WorksheetFunction([out, retval] WorksheetFunction** RHS);
        [id(0x000001ee), propget, helpcontext(0x000101ee)]
        HRESULT Worksheets([out, retval] Sheets** RHS);
        [id(0x00000245), propget, helpcontext(0x00010245)]
        HRESULT Excel4IntlMacroSheets([out, retval] Sheets** RHS);
        [id(0x00000243), propget, helpcontext(0x00010243)]
        HRESULT Excel4MacroSheets([out, retval] Sheets** RHS);
    };

    [
      odl,
      uuid(00020857-0001-0000-C000-000000000046),
      helpcontext(0x00020017),
      hidden
    ]
    interface IAddIn : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, hidden, helpcontext(0x0001023e)]
        HRESULT _stdcall Author([out, retval] BSTR* RHS);
        [propget, hidden, helpcontext(0x0001023f)]
        HRESULT _stdcall Comments([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010121)]
        HRESULT _stdcall FullName([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010226)]
        HRESULT _stdcall Installed([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010226)]
        HRESULT _stdcall Installed([in] VARIANT_BOOL RHS);
        [propget, hidden, helpcontext(0x00010241)]
        HRESULT _stdcall Keywords([out, retval] BSTR* RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010123)]
        HRESULT _stdcall Path([out, retval] BSTR* RHS);
        [propget, hidden, helpcontext(0x000103b9)]
        HRESULT _stdcall Subject([out, retval] BSTR* RHS);
        [propget, hidden, helpcontext(0x000100c7)]
        HRESULT _stdcall Title([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000105f3)]
        HRESULT _stdcall progID([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000107fb)]
        HRESULT _stdcall CLSID([out, retval] BSTR* RHS);
    };

    [
      odl,
      uuid(00020858-0001-0000-C000-000000000046),
      helpcontext(0x00020018),
      hidden
    ]
    interface IAddIns : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT CopyFile, 
                        [out, retval] AddIn** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] AddIn** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] AddIn** RHS);
    };

    [
      odl,
      uuid(0002085C-0001-0000-C000-000000000046),
      helpcontext(0x0002001c),
      hidden
    ]
    interface IToolbar : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010229)]
        HRESULT _stdcall BuiltIn([out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] long* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] long RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] long* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] long RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010085)]
        HRESULT _stdcall Position([out, retval] long* RHS);
        [propput, helpcontext(0x00010085)]
        HRESULT _stdcall Position([in] long RHS);
        [propget, helpcontext(0x000100b0)]
        HRESULT _stdcall Protection([out, retval] XlToolbarProtection* RHS);
        [propput, helpcontext(0x000100b0)]
        HRESULT _stdcall Protection([in] XlToolbarProtection RHS);
        [helpcontext(0x0001022b)]
        HRESULT _stdcall Reset();
        [propget, helpcontext(0x000103c4)]
        HRESULT _stdcall ToolbarButtons([out, retval] ToolbarButtons** RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] long* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] long RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] long* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] long RHS);
    };

    [
      odl,
      uuid(0002085D-0001-0000-C000-000000000046),
      helpcontext(0x0002001d),
      hidden
    ]
    interface IToolbars : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in, optional] VARIANT Name, 
                        [out, retval] Toolbar** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] Toolbar** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] Toolbar** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(0002085E-0001-0000-C000-000000000046),
      helpcontext(0x0002001e),
      hidden
    ]
    interface IToolbarButton : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010229)]
        HRESULT _stdcall BuiltIn([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x0001022a)]
        HRESULT _stdcall BuiltInFace([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022a)]
        HRESULT _stdcall BuiltInFace([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy(
                        [in] Toolbar* Toolbar, 
                        [in] long Before);
        [helpcontext(0x000103c6)]
        HRESULT _stdcall CopyFace();
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x00010232)]
        HRESULT _stdcall Edit();
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010163)]
        HRESULT _stdcall HelpContextID([out, retval] long* RHS);
        [propput, helpcontext(0x00010163)]
        HRESULT _stdcall HelpContextID([in] long RHS);
        [propget, helpcontext(0x00010168)]
        HRESULT _stdcall HelpFile([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010168)]
        HRESULT _stdcall HelpFile([in] BSTR RHS);
        [propget, helpcontext(0x0001023a)]
        HRESULT _stdcall ID([out, retval] long* RHS);
        [propget, helpcontext(0x00010231)]
        HRESULT _stdcall IsGap([out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x0001027d)]
        HRESULT _stdcall Move(
                        [in] Toolbar* Toolbar, 
                        [in] long Before);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [helpcontext(0x000103c7)]
        HRESULT _stdcall PasteFace();
        [propget, helpcontext(0x00010230)]
        HRESULT _stdcall Pushed([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010230)]
        HRESULT _stdcall Pushed([in] VARIANT_BOOL RHS);
        [helpcontext(0x0001022b)]
        HRESULT _stdcall Reset();
        [propget, helpcontext(0x00010182)]
        HRESULT _stdcall StatusBar([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010182)]
        HRESULT _stdcall StatusBar([in] BSTR RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] long* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] long RHS);
    };

    [
      odl,
      uuid(0002085F-0001-0000-C000-000000000046),
      helpcontext(0x0002001f),
      hidden
    ]
    interface IToolbarButtons : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in, optional] VARIANT Button, 
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT OnAction, 
                        [in, optional] VARIANT Pushed, 
                        [in, optional] VARIANT Enabled, 
                        [in, optional] VARIANT StatusBar, 
                        [in, optional] VARIANT HelpFile, 
                        [in, optional] VARIANT HelpContextID, 
                        [out, retval] ToolbarButton** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] long Index, 
                        [out, retval] ToolbarButton** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] long Index, 
                        [out, retval] ToolbarButton** RHS);
    };

    [
      odl,
      uuid(00020860-0001-0000-C000-000000000046),
      helpcontext(0x00020020),
      hidden
    ]
    interface IAreas : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] long Index, 
                        [out, retval] Range** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] long Index, 
                        [out, retval] Range** RHS);
    };

    [
      odl,
      uuid(00024412-0001-0000-C000-000000000046),
      helpcontext(0x000200a8),
      hidden
    ]
    interface IWorkbookEvents : IDispatch {
        [helpcontext(0x00010783)]
        HRESULT _stdcall Open();
        [helpcontext(0x00010130)]
        HRESULT _stdcall Activate();
        [helpcontext(0x000105fa)]
        HRESULT _stdcall Deactivate();
        [helpcontext(0x0001060a)]
        HRESULT _stdcall BeforeClose([in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x0001060b)]
        HRESULT _stdcall BeforeSave(
                        [in] VARIANT_BOOL SaveAsUI, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x0001060d)]
        HRESULT _stdcall BeforePrint([in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x0001060e)]
        HRESULT _stdcall NewSheet([in] IDispatch* Sh);
        [helpcontext(0x00010610)]
        HRESULT _stdcall AddinInstall();
        [helpcontext(0x00010611)]
        HRESULT _stdcall AddinUninstall();
        [helpcontext(0x00010612)]
        HRESULT _stdcall WindowResize([in] Window* Wn);
        [helpcontext(0x00010614)]
        HRESULT _stdcall WindowActivate([in] Window* Wn);
        [helpcontext(0x00010615)]
        HRESULT _stdcall WindowDeactivate([in] Window* Wn);
        [helpcontext(0x00010616)]
        HRESULT _stdcall SheetSelectionChange(
                        [in] IDispatch* Sh, 
                        [in] Range* Target);
        [helpcontext(0x00010617)]
        HRESULT _stdcall SheetBeforeDoubleClick(
                        [in] IDispatch* Sh, 
                        [in] Range* Target, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x00010618)]
        HRESULT _stdcall SheetBeforeRightClick(
                        [in] IDispatch* Sh, 
                        [in] Range* Target, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x00010619)]
        HRESULT _stdcall SheetActivate([in] IDispatch* Sh);
        [helpcontext(0x0001061a)]
        HRESULT _stdcall SheetDeactivate([in] IDispatch* Sh);
        [helpcontext(0x0001061b)]
        HRESULT _stdcall SheetCalculate([in] IDispatch* Sh);
        [helpcontext(0x0001061c)]
        HRESULT _stdcall SheetChange(
                        [in] IDispatch* Sh, 
                        [in] Range* Target);
        [helpcontext(0x0001073e)]
        HRESULT _stdcall SheetFollowHyperlink(
                        [in] IDispatch* Sh, 
                        [in] Hyperlink* Target);
        [helpcontext(0x0001086d)]
        HRESULT _stdcall SheetPivotTableUpdate(
                        [in] IDispatch* Sh, 
                        [in] PivotTable* Target);
        [helpcontext(0x0001086e)]
        HRESULT _stdcall PivotTableCloseConnection([in] PivotTable* Target);
        [helpcontext(0x0001086f)]
        HRESULT _stdcall PivotTableOpenConnection([in] PivotTable* Target);
        [helpcontext(0x000108da)]
        HRESULT _stdcall Sync([in] MsoSyncEventType SyncEventType);
        [helpcontext(0x000108eb)]
        HRESULT _stdcall BeforeXmlImport(
                        [in] XmlMap* Map, 
                        [in] BSTR Url, 
                        [in] VARIANT_BOOL IsRefresh, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x000108ed)]
        HRESULT _stdcall AfterXmlImport(
                        [in] XmlMap* Map, 
                        [in] VARIANT_BOOL IsRefresh, 
                        [in] XlXmlImportResult Result);
        [helpcontext(0x000108ef)]
        HRESULT _stdcall BeforeXmlExport(
                        [in] XmlMap* Map, 
                        [in] BSTR Url, 
                        [in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x000108f0)]
        HRESULT _stdcall AfterXmlExport(
                        [in] XmlMap* Map, 
                        [in] BSTR Url, 
                        [in] XlXmlExportResult Result);
        [helpcontext(0x00010a32)]
        HRESULT _stdcall RowsetComplete(
                        [in] BSTR Description, 
                        [in] BSTR Sheet, 
                        [in] VARIANT_BOOL Success);
    };

    [
      odl,
      uuid(000208DA-0000-0000-C000-000000000046),
      helpcontext(0x00020021),
      dual,
      oleautomation
    ]
    interface _Workbook : IDispatch {
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] Application** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] XlCreator* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000005a1), propget, hidden, helpcontext(0x000105a1)]
        HRESULT AcceptLabelsInFormulas([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005a1), propput, hidden, helpcontext(0x000105a1)]
        HRESULT AcceptLabelsInFormulas([in] VARIANT_BOOL RHS);
        [id(0x00000130), helpcontext(0x00010130)]
        HRESULT Activate([in, lcid] long lcid);
        [id(0x000000b7), propget, helpcontext(0x000100b7)]
        HRESULT ActiveChart([out, retval] Chart** RHS);
        [id(0x00000133), propget, helpcontext(0x00010133)]
        HRESULT ActiveSheet([out, retval] IDispatch** RHS);
        [id(0x0000023e), propget, hidden, helpcontext(0x0001023e)]
        HRESULT Author(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x0000023e), propput, hidden, helpcontext(0x0001023e)]
        HRESULT Author(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x000005a2), propget, helpcontext(0x000105a2)]
        HRESULT AutoUpdateFrequency([out, retval] long* RHS);
        [id(0x000005a2), propput, helpcontext(0x000105a2)]
        HRESULT AutoUpdateFrequency([in] long RHS);
        [id(0x000005a3), propget, helpcontext(0x000105a3)]
        HRESULT AutoUpdateSaveChanges([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005a3), propput, helpcontext(0x000105a3)]
        HRESULT AutoUpdateSaveChanges([in] VARIANT_BOOL RHS);
        [id(0x000005a4), propget, helpcontext(0x000105a4)]
        HRESULT ChangeHistoryDuration([out, retval] long* RHS);
        [id(0x000005a4), propput, helpcontext(0x000105a4)]
        HRESULT ChangeHistoryDuration([in] long RHS);
        [id(0x00000498), propget, helpcontext(0x00010498)]
        HRESULT BuiltinDocumentProperties([out, retval] IDispatch** RHS);
        [id(0x000003dd), helpcontext(0x000103dd)]
        HRESULT ChangeFileAccess(
                        [in] XlFileAccess Mode, 
                        [in, optional] VARIANT WritePassword, 
                        [in, optional] VARIANT Notify, 
                        [in, lcid] long lcid);
        [id(0x00000322), helpcontext(0x00010322)]
        HRESULT ChangeLink(
                        [in] BSTR Name, 
                        [in] BSTR NewName, 
                        [in, optional, defaultvalue(1)] XlLinkType Type, 
                        [in, lcid] long lcid);
        [id(0x00000079), propget, helpcontext(0x00010079)]
        HRESULT Charts([out, retval] Sheets** RHS);
        [id(0x00000115), helpcontext(0x00010115)]
        HRESULT Close(
                        [in, optional] VARIANT SaveChanges, 
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT RouteWorkbook, 
                        [in, lcid] long lcid);
        [id(0x0000055d), propget, helpcontext(0x0001055d)]
        HRESULT CodeName([out, retval] BSTR* RHS);
        [id(0x80010000), propget, helpcontext(0x80020000)]
        HRESULT _CodeName([out, retval] BSTR* RHS);
        [id(0x80010000), propput, helpcontext(0x80020000)]
        HRESULT _CodeName([in] BSTR RHS);
        [id(0x0000011e), propget, helpcontext(0x0001011e)]
        HRESULT Colors(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x0000011e), propput, helpcontext(0x0001011e)]
        HRESULT Colors(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [id(0x0000059f), propget, helpcontext(0x0001059f)]
        HRESULT CommandBars([out, retval] CommandBars** RHS);
        [id(0x0000023f), propget, hidden, helpcontext(0x0001023f)]
        HRESULT Comments(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x0000023f), propput, hidden, helpcontext(0x0001023f)]
        HRESULT Comments(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000497), propget, helpcontext(0x00010497)]
        HRESULT ConflictResolution([out, retval] XlSaveConflictResolution* RHS);
        [id(0x00000497), propput, helpcontext(0x00010497)]
        HRESULT ConflictResolution([in] XlSaveConflictResolution RHS);
        [id(0x000004a6), propget, helpcontext(0x000104a6)]
        HRESULT Container([out, retval] IDispatch** RHS);
        [id(0x0000011f), propget, helpcontext(0x0001011f)]
        HRESULT CreateBackup(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000499), propget, helpcontext(0x00010499)]
        HRESULT CustomDocumentProperties([out, retval] IDispatch** RHS);
        [id(0x00000193), propget, helpcontext(0x00010193)]
        HRESULT Date1904(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000193), propput, helpcontext(0x00010193)]
        HRESULT Date1904(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x0000018d), helpcontext(0x0001018d)]
        HRESULT DeleteNumberFormat(
                        [in] BSTR NumberFormat, 
                        [in, lcid] long lcid);
        [id(0x000002fc), propget, hidden, helpcontext(0x000102fc)]
        HRESULT DialogSheets([out, retval] Sheets** RHS);
        [id(0x00000194), propget, helpcontext(0x00010194)]
        HRESULT DisplayDrawingObjects(
                        [in, lcid] long lcid, 
                        [out, retval] XlDisplayDrawingObjects* RHS);
        [id(0x00000194), propput, helpcontext(0x00010194)]
        HRESULT DisplayDrawingObjects(
                        [in, lcid] long lcid, 
                        [in] XlDisplayDrawingObjects RHS);
        [id(0x00000490), helpcontext(0x00010490)]
        HRESULT ExclusiveAccess(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000120), propget, helpcontext(0x00010120)]
        HRESULT FileFormat(
                        [in, lcid] long lcid, 
                        [out, retval] XlFileFormat* RHS);
        [id(0x000003cd), helpcontext(0x000103cd)]
        HRESULT ForwardMailer([in, lcid] long lcid);
        [id(0x00000121), propget, helpcontext(0x00010121)]
        HRESULT FullName(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x000003d0), propget, hidden, helpcontext(0x000103d0)]
        HRESULT HasMailer(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000003d0), propput, hidden, helpcontext(0x000103d0)]
        HRESULT HasMailer(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000122), propget, helpcontext(0x00010122)]
        HRESULT HasPassword(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000003b6), propget, hidden, helpcontext(0x000103b6)]
        HRESULT HasRoutingSlip(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000003b6), propput, hidden, helpcontext(0x000103b6)]
        HRESULT HasRoutingSlip(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x000005a5), propget, helpcontext(0x000105a5)]
        HRESULT IsAddin([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005a5), propput, helpcontext(0x000105a5)]
        HRESULT IsAddin([in] VARIANT_BOOL RHS);
        [id(0x00000241), propget, hidden, helpcontext(0x00010241)]
        HRESULT Keywords(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000241), propput, hidden, helpcontext(0x00010241)]
        HRESULT Keywords(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000327), helpcontext(0x00010327)]
        HRESULT LinkInfo(
                        [in] BSTR Name, 
                        [in] XlLinkInfo LinkInfo, 
                        [in, optional] VARIANT Type, 
                        [in, optional] VARIANT EditionRef, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x00000328), helpcontext(0x00010328)]
        HRESULT LinkSources(
                        [in, optional] VARIANT Type, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000003d3), propget, helpcontext(0x000103d3)]
        HRESULT Mailer([out, retval] Mailer** RHS);
        [id(0x000005a6), helpcontext(0x000105a6)]
        HRESULT MergeWorkbook([in] VARIANT Filename);
        [id(0x00000246), propget, hidden, helpcontext(0x00010246)]
        HRESULT Modules([out, retval] Sheets** RHS);
        [id(0x00000491), propget, helpcontext(0x00010491)]
        HRESULT MultiUserEditing(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x000001ba), propget, helpcontext(0x000101ba)]
        HRESULT Names([out, retval] Names** RHS);
        [id(0x00000118), helpcontext(0x00010118)]
        HRESULT NewWindow(
                        [in, lcid] long lcid, 
                        [out, retval] Window** RHS);
        [id(0x0000049a), propget, hidden, helpcontext(0x0001049a)]
        HRESULT OnSave(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x0000049a), propput, hidden, helpcontext(0x0001049a)]
        HRESULT OnSave(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000407), propget, hidden, helpcontext(0x00010407)]
        HRESULT OnSheetActivate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000407), propput, hidden, helpcontext(0x00010407)]
        HRESULT OnSheetActivate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000439), propget, hidden, helpcontext(0x00010439)]
        HRESULT OnSheetDeactivate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000439), propput, hidden, helpcontext(0x00010439)]
        HRESULT OnSheetDeactivate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x00000323), helpcontext(0x00010323)]
        HRESULT OpenLinks(
                        [in] BSTR Name, 
                        [in, optional] VARIANT ReadOnly, 
                        [in, optional] VARIANT Type, 
                        [in, lcid] long lcid);
        [id(0x00000123), propget, helpcontext(0x00010123)]
        HRESULT Path(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x000005a7), propget, helpcontext(0x000105a7)]
        HRESULT PersonalViewListSettings([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005a7), propput, helpcontext(0x000105a7)]
        HRESULT PersonalViewListSettings([in] VARIANT_BOOL RHS);
        [id(0x000005a8), propget, helpcontext(0x000105a8)]
        HRESULT PersonalViewPrintSettings([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005a8), propput, helpcontext(0x000105a8)]
        HRESULT PersonalViewPrintSettings([in] VARIANT_BOOL RHS);
        [id(0x000005a9), helpcontext(0x000105a9)]
        HRESULT PivotCaches([out, retval] PivotCaches** RHS);
        [id(0x0000048e), helpcontext(0x0001048e)]
        HRESULT Post(
                        [in, optional] VARIANT DestName, 
                        [in, lcid] long lcid);
        [id(0x00000195), propget, helpcontext(0x00010195)]
        HRESULT PrecisionAsDisplayed(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000195), propput, helpcontext(0x00010195)]
        HRESULT PrecisionAsDisplayed(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000389), hidden, helpcontext(0x00010389),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, _PrintOut)]
        HRESULT __PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, lcid] long lcid);
        [id(0x00000119), helpcontext(0x00010119)]
        HRESULT PrintPreview(
                        [in, optional] VARIANT EnableChanges, 
                        [in, lcid] long lcid);
        [id(0x0000011a), hidden, helpcontext(0x0001011a)]
        HRESULT _Protect(
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT Structure, 
                        [in, optional] VARIANT Windows);
        [id(0x000005aa), hidden, helpcontext(0x000105aa),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, ProtectSharing)]
        HRESULT _ProtectSharing(
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT ReadOnlyRecommended, 
                        [in, optional] VARIANT CreateBackup, 
                        [in, optional] VARIANT SharingPassword);
        [id(0x0000024c), propget, helpcontext(0x0001024c)]
        HRESULT ProtectStructure([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000127), propget, helpcontext(0x00010127)]
        HRESULT ProtectWindows([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000128), propget, helpcontext(0x00010128)]
        HRESULT ReadOnly(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000129), propget, hidden, helpcontext(0x00010129)]
        HRESULT _ReadOnlyRecommended(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000005ac), helpcontext(0x000105ac)]
        HRESULT RefreshAll();
        [id(0x000003d1), helpcontext(0x000103d1)]
        HRESULT Reply([in, lcid] long lcid);
        [id(0x000003d2), helpcontext(0x000103d2)]
        HRESULT ReplyAll([in, lcid] long lcid);
        [id(0x000005ad), helpcontext(0x000105ad)]
        HRESULT RemoveUser([in] long Index);
        [id(0x00000494), propget, helpcontext(0x00010494)]
        HRESULT RevisionNumber(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [id(0x000003b2), hidden, helpcontext(0x000103b2)]
        HRESULT Route([in, lcid] long lcid);
        [id(0x000003b7), propget, hidden, helpcontext(0x000103b7)]
        HRESULT Routed(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x000003b5), propget, hidden, helpcontext(0x000103b5)]
        HRESULT RoutingSlip([out, retval] RoutingSlip** RHS);
        [id(0x0000027a), helpcontext(0x0001027a)]
        HRESULT RunAutoMacros(
                        [in] XlRunAutoMacro Which, 
                        [in, lcid] long lcid);
        [id(0x0000011b), helpcontext(0x0001011b)]
        HRESULT Save([in, lcid] long lcid);
        [id(0x0000011c), hidden, helpcontext(0x0001011c)]
        HRESULT _SaveAs(
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT FileFormat, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT ReadOnlyRecommended, 
                        [in, optional] VARIANT CreateBackup, 
                        [in, optional, defaultvalue(1)] XlSaveAsAccessMode AccessMode, 
                        [in, optional] VARIANT ConflictResolution, 
                        [in, optional] VARIANT AddToMru, 
                        [in, optional] VARIANT TextCodepage, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, lcid] long lcid);
        [id(0x000000af), helpcontext(0x000100af)]
        HRESULT SaveCopyAs(
                        [in, optional] VARIANT Filename, 
                        [in, lcid] long lcid);
        [id(0x0000012a), propget, helpcontext(0x0001012a)]
        HRESULT Saved(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000012a), propput, helpcontext(0x0001012a)]
        HRESULT Saved(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x00000196), propget, helpcontext(0x00010196)]
        HRESULT SaveLinkValues(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000196), propput, helpcontext(0x00010196)]
        HRESULT SaveLinkValues(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x000003b3), helpcontext(0x000103b3)]
        HRESULT SendMail(
                        [in] VARIANT Recipients, 
                        [in, optional] VARIANT Subject, 
                        [in, optional] VARIANT ReturnReceipt, 
                        [in, lcid] long lcid);
        [id(0x000003d4), helpcontext(0x000103d4)]
        HRESULT SendMailer(
                        [in, optional] VARIANT FileFormat, 
                        [in, optional, defaultvalue(-4143)] XlPriority Priority, 
                        [in, lcid] long lcid);
        [id(0x00000329), helpcontext(0x00010329)]
        HRESULT SetLinkOnData(
                        [in] BSTR Name, 
                        [in, optional] VARIANT Procedure, 
                        [in, lcid] long lcid);
        [id(0x000001e5), propget, helpcontext(0x000101e5)]
        HRESULT Sheets([out, retval] Sheets** RHS);
        [id(0x00000493), propget, helpcontext(0x00010493)]
        HRESULT ShowConflictHistory(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000493), propput, helpcontext(0x00010493)]
        HRESULT ShowConflictHistory(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x000001ed), propget, helpcontext(0x000101ed)]
        HRESULT Styles([out, retval] Styles** RHS);
        [id(0x000003b9), propget, hidden, helpcontext(0x000103b9)]
        HRESULT Subject(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x000003b9), propput, hidden, helpcontext(0x000103b9)]
        HRESULT Subject(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x000000c7), propget, hidden, helpcontext(0x000100c7)]
        HRESULT Title(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x000000c7), propput, hidden, helpcontext(0x000100c7)]
        HRESULT Title(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [id(0x0000011d), helpcontext(0x0001011d)]
        HRESULT Unprotect(
                        [in, optional] VARIANT Password, 
                        [in, lcid] long lcid);
        [id(0x000005af), helpcontext(0x000105af)]
        HRESULT UnprotectSharing([in, optional] VARIANT SharingPassword);
        [id(0x000003e3), helpcontext(0x000103e3)]
        HRESULT UpdateFromFile([in, lcid] long lcid);
        [id(0x00000324), helpcontext(0x00010324)]
        HRESULT UpdateLink(
                        [in, optional] VARIANT Name, 
                        [in, optional] VARIANT Type, 
                        [in, lcid] long lcid);
        [id(0x0000019b), propget, helpcontext(0x0001019b)]
        HRESULT UpdateRemoteReferences(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000019b), propput, helpcontext(0x0001019b)]
        HRESULT UpdateRemoteReferences(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [id(0x000004ba), propget, hidden, helpcontext(0x000104ba)]
        HRESULT UserControl([out, retval] VARIANT_BOOL* RHS);
        [id(0x000004ba), propput, hidden, helpcontext(0x000104ba)]
        HRESULT UserControl([in] VARIANT_BOOL RHS);
        [id(0x00000495), propget, helpcontext(0x00010495)]
        HRESULT UserStatus(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [id(0x000005b0), propget, helpcontext(0x000105b0)]
        HRESULT CustomViews([out, retval] CustomViews** RHS);
        [id(0x000001ae), propget, helpcontext(0x000101ae)]
        HRESULT Windows([out, retval] Windows** RHS);
        [id(0x000001ee), propget, helpcontext(0x000101ee)]
        HRESULT Worksheets([out, retval] Sheets** RHS);
        [id(0x0000012b), propget, helpcontext(0x0001012b)]
        HRESULT WriteReserved(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x0000012c), propget, helpcontext(0x0001012c)]
        HRESULT WriteReservedBy(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000245), propget, helpcontext(0x00010245)]
        HRESULT Excel4IntlMacroSheets([out, retval] Sheets** RHS);
        [id(0x00000243), propget, helpcontext(0x00010243)]
        HRESULT Excel4MacroSheets([out, retval] Sheets** RHS);
        [id(0x000005b1), propget, helpcontext(0x000105b1)]
        HRESULT TemplateRemoveExtData([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005b1), propput, helpcontext(0x000105b1)]
        HRESULT TemplateRemoveExtData([in] VARIANT_BOOL RHS);
        [id(0x000005b2), helpcontext(0x000105b2)]
        HRESULT HighlightChangesOptions(
                        [in, optional] VARIANT When, 
                        [in, optional] VARIANT Who, 
                        [in, optional] VARIANT Where);
        [id(0x000005b5), propget, helpcontext(0x000105b5)]
        HRESULT HighlightChangesOnScreen([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005b5), propput, helpcontext(0x000105b5)]
        HRESULT HighlightChangesOnScreen([in] VARIANT_BOOL RHS);
        [id(0x000005b6), propget, helpcontext(0x000105b6)]
        HRESULT KeepChangeHistory([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005b6), propput, helpcontext(0x000105b6)]
        HRESULT KeepChangeHistory([in] VARIANT_BOOL RHS);
        [id(0x000005b7), propget, helpcontext(0x000105b7)]
        HRESULT ListChangesOnNewSheet([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005b7), propput, helpcontext(0x000105b7)]
        HRESULT ListChangesOnNewSheet([in] VARIANT_BOOL RHS);
        [id(0x000005b8), helpcontext(0x000105b8)]
        HRESULT PurgeChangeHistoryNow(
                        [in] long Days, 
                        [in, optional] VARIANT SharingPassword);
        [id(0x000005ba), helpcontext(0x000105ba)]
        HRESULT AcceptAllChanges(
                        [in, optional] VARIANT When, 
                        [in, optional] VARIANT Who, 
                        [in, optional] VARIANT Where);
        [id(0x000005bb), helpcontext(0x000105bb)]
        HRESULT RejectAllChanges(
                        [in, optional] VARIANT When, 
                        [in, optional] VARIANT Who, 
                        [in, optional] VARIANT Where);
        [id(0x000002ac), hidden, helpcontext(0x000102ac)]
        HRESULT PivotTableWizard(
                        [in, optional] VARIANT SourceType, 
                        [in, optional] VARIANT SourceData, 
                        [in, optional] VARIANT TableDestination, 
                        [in, optional] VARIANT TableName, 
                        [in, optional] VARIANT RowGrand, 
                        [in, optional] VARIANT ColumnGrand, 
                        [in, optional] VARIANT SaveData, 
                        [in, optional] VARIANT HasAutoFormat, 
                        [in, optional] VARIANT AutoPage, 
                        [in, optional] VARIANT Reserved, 
                        [in, optional] VARIANT BackgroundQuery, 
                        [in, optional] VARIANT OptimizeCache, 
                        [in, optional] VARIANT PageFieldOrder, 
                        [in, optional] VARIANT PageFieldWrapCount, 
                        [in, optional] VARIANT ReadData, 
                        [in, optional] VARIANT Connection, 
                        [in, lcid] long lcid);
        [id(0x000005bc), helpcontext(0x000105bc)]
        HRESULT ResetColors();
        [id(0x000005bd), propget, helpcontext(0x000105bd)]
        HRESULT VBProject([out, retval] VBProject** RHS);
        [id(0x000005be), helpcontext(0x000105be)]
        HRESULT FollowHyperlink(
                        [in] BSTR Address, 
                        [in, optional] VARIANT SubAddress, 
                        [in, optional] VARIANT NewWindow, 
                        [in, optional] VARIANT AddHistory, 
                        [in, optional] VARIANT ExtraInfo, 
                        [in, optional] VARIANT Method, 
                        [in, optional] VARIANT HeaderInfo);
        [id(0x000005c4), helpcontext(0x000105c4)]
        HRESULT AddToFavorites();
        [id(0x000006e9), propget, helpcontext(0x000106e9)]
        HRESULT IsInplace([out, retval] VARIANT_BOOL* RHS);
        [id(0x000006ec), hidden, helpcontext(0x000106ec),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOut)]
        HRESULT _PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, lcid] long lcid);
        [id(0x0000071a), helpcontext(0x0001071a)]
        HRESULT WebPagePreview();
        [id(0x0000071b), propget, helpcontext(0x0001071b)]
        HRESULT PublishObjects([out, retval] PublishObjects** RHS);
        [id(0x0000071c), propget, helpcontext(0x0001071c)]
        HRESULT WebOptions([out, retval] WebOptions** RHS);
        [id(0x0000071d), helpcontext(0x0001071d)]
        HRESULT ReloadAs([in] MsoEncoding Encoding);
        [id(0x0000071f), propget, hidden, helpcontext(0x0001071f)]
        HRESULT HTMLProject([out, retval] HTMLProject** RHS);
        [id(0x00000720), propget, helpcontext(0x00010720)]
        HRESULT EnvelopeVisible([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000720), propput, helpcontext(0x00010720)]
        HRESULT EnvelopeVisible([in] VARIANT_BOOL RHS);
        [id(0x0000070e), propget, helpcontext(0x0001070e)]
        HRESULT CalculationVersion([out, retval] long* RHS);
        [id(0x000007fc), hidden, helpcontext(0x000107fc)]
        HRESULT Dummy17([in] long calcid);
        [id(0x00000722), hidden, helpcontext(0x00010722)]
        HRESULT sblt([in] BSTR s);
        [id(0x00000724), propget, helpcontext(0x00010724)]
        HRESULT VBASigned([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007fe), propget, helpcontext(0x000107fe)]
        HRESULT ShowPivotTableFieldList([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007fe), propput, helpcontext(0x000107fe)]
        HRESULT ShowPivotTableFieldList([in] VARIANT_BOOL RHS);
        [id(0x00000360), propget, helpcontext(0x00010360)]
        HRESULT UpdateLinks([out, retval] XlUpdateLinks* RHS);
        [id(0x00000360), propput, helpcontext(0x00010360)]
        HRESULT UpdateLinks([in] XlUpdateLinks RHS);
        [id(0x000007ff), helpcontext(0x000107ff)]
        HRESULT BreakLink(
                        [in] BSTR Name, 
                        [in] XlLinkType Type);
        [id(0x00000800), hidden, helpcontext(0x00010800)]
        HRESULT Dummy16();
        [id(0x00000785), helpcontext(0x00010785)]
        HRESULT SaveAs(
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT FileFormat, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT ReadOnlyRecommended, 
                        [in, optional] VARIANT CreateBackup, 
                        [in, optional, defaultvalue(1)] XlSaveAsAccessMode AccessMode, 
                        [in, optional] VARIANT ConflictResolution, 
                        [in, optional] VARIANT AddToMru, 
                        [in, optional] VARIANT TextCodepage, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, optional] VARIANT Local, 
                        [in, lcid] long lcid);
        [id(0x00000801), propget, helpcontext(0x00010801)]
        HRESULT EnableAutoRecover([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000801), propput, helpcontext(0x00010801)]
        HRESULT EnableAutoRecover([in] VARIANT_BOOL RHS);
        [id(0x00000802), propget, helpcontext(0x00010802)]
        HRESULT RemovePersonalInformation([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000802), propput, helpcontext(0x00010802)]
        HRESULT RemovePersonalInformation([in] VARIANT_BOOL RHS);
        [id(0x00000787), propget, helpcontext(0x00010787)]
        HRESULT FullNameURLEncoded(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [id(0x00000803), helpcontext(0x00010803)]
        HRESULT CheckIn(
                        [in, optional] VARIANT SaveChanges, 
                        [in, optional] VARIANT Comments, 
                        [in, optional] VARIANT MakePublic);
        [id(0x00000805), helpcontext(0x00010805)]
        HRESULT CanCheckIn([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000806), helpcontext(0x00010806)]
        HRESULT SendForReview(
                        [in, optional] VARIANT Recipients, 
                        [in, optional] VARIANT Subject, 
                        [in, optional] VARIANT ShowMessage, 
                        [in, optional] VARIANT IncludeAttachment);
        [id(0x00000809), helpcontext(0x00010809)]
        HRESULT ReplyWithChanges([in, optional] VARIANT ShowMessage);
        [id(0x0000080a), helpcontext(0x0001080a)]
        HRESULT EndReview();
        [id(0x000001ad), propget, helpcontext(0x000101ad)]
        HRESULT Password([out, retval] BSTR* RHS);
        [id(0x000001ad), propput, helpcontext(0x000101ad)]
        HRESULT Password([in] BSTR RHS);
        [id(0x00000468), propget, helpcontext(0x00010468)]
        HRESULT WritePassword([out, retval] BSTR* RHS);
        [id(0x00000468), propput, helpcontext(0x00010468)]
        HRESULT WritePassword([in] BSTR RHS);
        [id(0x0000080b), propget, helpcontext(0x0001080b)]
        HRESULT PasswordEncryptionProvider([out, retval] BSTR* RHS);
        [id(0x0000080c), propget, helpcontext(0x0001080c)]
        HRESULT PasswordEncryptionAlgorithm([out, retval] BSTR* RHS);
        [id(0x0000080d), propget, helpcontext(0x0001080d)]
        HRESULT PasswordEncryptionKeyLength([out, retval] long* RHS);
        [id(0x0000080e), helpcontext(0x0001080e)]
        HRESULT SetPasswordEncryptionOptions(
                        [in, optional] VARIANT PasswordEncryptionProvider, 
                        [in, optional] VARIANT PasswordEncryptionAlgorithm, 
                        [in, optional] VARIANT PasswordEncryptionKeyLength, 
                        [in, optional] VARIANT PasswordEncryptionFileProperties);
        [id(0x0000080f), propget, helpcontext(0x0001080f)]
        HRESULT PasswordEncryptionFileProperties([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d5), propget, helpcontext(0x000107d5)]
        HRESULT ReadOnlyRecommended([out, retval] VARIANT_BOOL* RHS);
        [id(0x000007d5), propput, helpcontext(0x000107d5)]
        HRESULT ReadOnlyRecommended([in] VARIANT_BOOL RHS);
        [id(0x000007ed), helpcontext(0x000107ed)]
        HRESULT Protect(
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT Structure, 
                        [in, optional] VARIANT Windows);
        [id(0x00000810), propget, helpcontext(0x00010810)]
        HRESULT SmartTagOptions([out, retval] SmartTagOptions** RHS);
        [id(0x00000811), helpcontext(0x00010811)]
        HRESULT RecheckSmartTags();
        [id(0x000008d8), propget, helpcontext(0x000108d8)]
        HRESULT Permission([out, retval] Permission** RHS);
        [id(0x000008d9), propget, helpcontext(0x000108d9)]
        HRESULT SharedWorkspace([out, retval] SharedWorkspace** RHS);
        [id(0x000008da), propget, helpcontext(0x000108da)]
        HRESULT Sync([out, retval] Sync** RHS);
        [id(0x000008db), helpcontext(0x000108db)]
        HRESULT SendFaxOverInternet(
                        [in, optional] VARIANT Recipients, 
                        [in, optional] VARIANT Subject, 
                        [in, optional] VARIANT ShowMessage);
        [id(0x000008dc), propget, helpcontext(0x000108dc)]
        HRESULT XmlNamespaces([out, retval] XmlNamespaces** RHS);
        [id(0x000008dd), propget, helpcontext(0x000108dd)]
        HRESULT XmlMaps([out, retval] XmlMaps** RHS);
        [id(0x000008de), helpcontext(0x000108de)]
        HRESULT XmlImport(
                        [in] BSTR Url, 
                        [out] XmlMap** ImportMap, 
                        [in, optional] VARIANT Overwrite, 
                        [in, optional] VARIANT Destination, 
                        [out, retval] XlXmlImportResult* RHS);
        [id(0x000008e1), propget, helpcontext(0x000108e1)]
        HRESULT SmartDocument([out, retval] SmartDocument** RHS);
        [id(0x000008e2), propget, helpcontext(0x000108e2)]
        HRESULT DocumentLibraryVersions([out, retval] DocumentLibraryVersions** RHS);
        [id(0x000008e3), propget, helpcontext(0x000108e3)]
        HRESULT InactiveListBorderVisible([out, retval] VARIANT_BOOL* RHS);
        [id(0x000008e3), propput, helpcontext(0x000108e3)]
        HRESULT InactiveListBorderVisible([in] VARIANT_BOOL RHS);
        [id(0x000008e4), propget, helpcontext(0x000108e4)]
        HRESULT DisplayInkComments([out, retval] VARIANT_BOOL* RHS);
        [id(0x000008e4), propput, helpcontext(0x000108e4)]
        HRESULT DisplayInkComments([in] VARIANT_BOOL RHS);
        [id(0x000008e5), helpcontext(0x000108e5)]
        HRESULT XmlImportXml(
                        [in] BSTR Data, 
                        [out] XmlMap** ImportMap, 
                        [in, optional] VARIANT Overwrite, 
                        [in, optional] VARIANT Destination, 
                        [out, retval] XlXmlImportResult* RHS);
        [id(0x000008e6), helpcontext(0x000108e6)]
        HRESULT SaveAsXMLData(
                        [in] BSTR Filename, 
                        [in] XmlMap* Map);
        [id(0x000008e7), helpcontext(0x000108e7)]
        HRESULT ToggleFormsDesign();
        [id(0x000009d0), propget, helpcontext(0x000109d0)]
        HRESULT ContentTypeProperties([out, retval] MetaProperties** RHS);
        [id(0x000009d1), propget, helpcontext(0x000109d1)]
        HRESULT Connections([out, retval] Connections** RHS);
        [id(0x000009d2), helpcontext(0x000109d2)]
        HRESULT RemoveDocumentInformation([in] XlRemoveDocInfoType RemoveDocInfoType);
        [id(0x000009d4), propget, helpcontext(0x000109d4)]
        HRESULT Signatures([out, retval] SignatureSet** RHS);
        [id(0x000009d5), helpcontext(0x000109d5)]
        HRESULT CheckInWithVersion(
                        [in, optional] VARIANT SaveChanges, 
                        [in, optional] VARIANT Comments, 
                        [in, optional] VARIANT MakePublic, 
                        [in, optional] VARIANT VersionType);
        [id(0x000009d7), propget, helpcontext(0x000109d7)]
        HRESULT ServerPolicy([out, retval] ServerPolicy** RHS);
        [id(0x000009d8), helpcontext(0x000109d8)]
        HRESULT LockServerFile();
        [id(0x000009d9), propget, helpcontext(0x000109d9)]
        HRESULT DocumentInspectors([out, retval] DocumentInspectors** RHS);
        [id(0x000009da), helpcontext(0x000109da)]
        HRESULT GetWorkflowTasks([out, retval] WorkflowTasks** RHS);
        [id(0x000009db), helpcontext(0x000109db)]
        HRESULT GetWorkflowTemplates([out, retval] WorkflowTemplates** RHS);
        [id(0x00000939), helpcontext(0x00010939),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOutEx)]
        HRESULT PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, optional] VARIANT IgnorePrintAreas, 
                        [in, lcid] long lcid);
        [id(0x000009dc), propget, helpcontext(0x000109dc)]
        HRESULT ServerViewableItems([out, retval] ServerViewableItems** RHS);
        [id(0x000009dd), propget, helpcontext(0x000109dd)]
        HRESULT TableStyles([out, retval] TableStyles** RHS);
        [id(0x000009de), propget, helpcontext(0x000109de)]
        HRESULT DefaultTableStyle([out, retval] VARIANT* RHS);
        [id(0x000009de), propput, helpcontext(0x000109de)]
        HRESULT DefaultTableStyle([in] VARIANT RHS);
        [id(0x000009df), propget, helpcontext(0x000109df)]
        HRESULT DefaultPivotTableStyle([out, retval] VARIANT* RHS);
        [id(0x000009df), propput, helpcontext(0x000109df)]
        HRESULT DefaultPivotTableStyle([in] VARIANT RHS);
        [id(0x000009e0), propget, helpcontext(0x000109e0)]
        HRESULT CheckCompatibility([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009e0), propput, helpcontext(0x000109e0)]
        HRESULT CheckCompatibility([in] VARIANT_BOOL RHS);
        [id(0x000009e1), propget, helpcontext(0x000109e1)]
        HRESULT HasVBProject([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009e2), propget, helpcontext(0x000109e2)]
        HRESULT CustomXMLParts([out, retval] CustomXMLParts** RHS);
        [id(0x000009e3), propget, helpcontext(0x000109e3)]
        HRESULT Final([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009e3), propput, helpcontext(0x000109e3)]
        HRESULT Final([in] VARIANT_BOOL RHS);
        [id(0x000009e4), propget, helpcontext(0x000109e4)]
        HRESULT Research([out, retval] Research** RHS);
        [id(0x000009e5), propget, helpcontext(0x000109e5)]
        HRESULT Theme([out, retval] OfficeTheme** RHS);
        [id(0x000009e6), helpcontext(0x000109e6)]
        HRESULT ApplyTheme([in] BSTR Filename);
        [id(0x000009e7), propget, helpcontext(0x000109e7)]
        HRESULT Excel8CompatibilityMode([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009e8), propget, helpcontext(0x000109e8)]
        HRESULT ConnectionsDisabled([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009e9), helpcontext(0x000109e9)]
        HRESULT EnableConnections();
        [id(0x000009ea), propget, helpcontext(0x000109ea)]
        HRESULT ShowPivotChartActiveFields([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009ea), propput, helpcontext(0x000109ea)]
        HRESULT ShowPivotChartActiveFields([in] VARIANT_BOOL RHS);
        [id(0x000009bd), helpcontext(0x000109bd)]
        HRESULT ExportAsFixedFormat(
                        [in] XlFixedFormatType Type, 
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT Quality, 
                        [in, optional] VARIANT IncludeDocProperties, 
                        [in, optional] VARIANT IgnorePrintAreas, 
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT OpenAfterPublish, 
                        [in, optional] VARIANT FixedFormatExtClassPtr);
        [id(0x000009eb), propget, helpcontext(0x000109eb)]
        HRESULT IconSets([out, retval] IconSets** RHS);
        [id(0x000009ec), propget, helpcontext(0x000109ec)]
        HRESULT EncryptionProvider([out, retval] BSTR* RHS);
        [id(0x000009ec), propput, helpcontext(0x000109ec)]
        HRESULT EncryptionProvider([in] BSTR RHS);
        [id(0x000009ed), propget, helpcontext(0x000109ed)]
        HRESULT DoNotPromptForConvert([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009ed), propput, helpcontext(0x000109ed)]
        HRESULT DoNotPromptForConvert([in] VARIANT_BOOL RHS);
        [id(0x000009ee), propget, helpcontext(0x000109ee)]
        HRESULT ForceFullCalculation([out, retval] VARIANT_BOOL* RHS);
        [id(0x000009ee), propput, helpcontext(0x000109ee)]
        HRESULT ForceFullCalculation([in] VARIANT_BOOL RHS);
        [id(0x000009ef), helpcontext(0x000109ef),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, ProtectSharingEx)]
        HRESULT ProtectSharing(
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT ReadOnlyRecommended, 
                        [in, optional] VARIANT CreateBackup, 
                        [in, optional] VARIANT SharingPassword, 
                        [in, optional] VARIANT FileFormat);
    };

    [
      odl,
      uuid(000208DB-0000-0000-C000-000000000046),
      helpcontext(0x00020022),
      dual,
      nonextensible,
      oleautomation
    ]
    interface Workbooks : IDispatch {
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] Application** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] XlCreator* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x000000b5), helpcontext(0x000100b5)]
        HRESULT Add(
                        [in, optional] VARIANT Template, 
                        [in, lcid] long lcid, 
                        [out, retval] Workbook** RHS);
        [id(0x00000115), helpcontext(0x00010115)]
        HRESULT Close([in, lcid] long lcid);
        [id(0x00000076), propget, helpcontext(0x00010076)]
        HRESULT Count([out, retval] long* RHS);
        [id(0x000000aa), propget, helpcontext(0x000100aa)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] Workbook** RHS);
        [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** RHS);
        [id(0x000002aa), hidden, helpcontext(0x000102aa)]
        HRESULT _Open(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT UpdateLinks, 
                        [in, optional] VARIANT ReadOnly, 
                        [in, optional] VARIANT Format, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT IgnoreReadOnlyRecommended, 
                        [in, optional] VARIANT Origin, 
                        [in, optional] VARIANT Delimiter, 
                        [in, optional] VARIANT Editable, 
                        [in, optional] VARIANT Notify, 
                        [in, optional] VARIANT Converter, 
                        [in, optional] VARIANT AddToMru, 
                        [in, lcid] long lcid, 
                        [out, retval] Workbook** RHS);
        [id(0x000002ab), hidden, helpcontext(0x000102ab)]
        HRESULT __OpenText(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT Origin, 
                        [in, optional] VARIANT StartRow, 
                        [in, optional] VARIANT DataType, 
                        [in, optional, defaultvalue(1)] XlTextQualifier TextQualifier, 
                        [in, optional] VARIANT ConsecutiveDelimiter, 
                        [in, optional] VARIANT Tab, 
                        [in, optional] VARIANT Semicolon, 
                        [in, optional] VARIANT Comma, 
                        [in, optional] VARIANT Space, 
                        [in, optional] VARIANT Other, 
                        [in, optional] VARIANT OtherChar, 
                        [in, optional] VARIANT FieldInfo, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, lcid] long lcid);
        [id(00000000), propget, helpcontext(0x00010000)]
        HRESULT _Default(
                        [in] VARIANT Index, 
                        [out, retval] Workbook** RHS);
        [id(0x000006ed), hidden, helpcontext(0x000106ed)]
        HRESULT _OpenText(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT Origin, 
                        [in, optional] VARIANT StartRow, 
                        [in, optional] VARIANT DataType, 
                        [in, optional, defaultvalue(1)] XlTextQualifier TextQualifier, 
                        [in, optional] VARIANT ConsecutiveDelimiter, 
                        [in, optional] VARIANT Tab, 
                        [in, optional] VARIANT Semicolon, 
                        [in, optional] VARIANT Comma, 
                        [in, optional] VARIANT Space, 
                        [in, optional] VARIANT Other, 
                        [in, optional] VARIANT OtherChar, 
                        [in, optional] VARIANT FieldInfo, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, optional] VARIANT DecimalSeparator, 
                        [in, optional] VARIANT ThousandsSeparator, 
                        [in, lcid] long lcid);
        [id(0x00000783), helpcontext(0x00010783)]
        HRESULT Open(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT UpdateLinks, 
                        [in, optional] VARIANT ReadOnly, 
                        [in, optional] VARIANT Format, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT IgnoreReadOnlyRecommended, 
                        [in, optional] VARIANT Origin, 
                        [in, optional] VARIANT Delimiter, 
                        [in, optional] VARIANT Editable, 
                        [in, optional] VARIANT Notify, 
                        [in, optional] VARIANT Converter, 
                        [in, optional] VARIANT AddToMru, 
                        [in, optional] VARIANT Local, 
                        [in, optional] VARIANT CorruptLoad, 
                        [in, lcid] long lcid, 
                        [out, retval] Workbook** RHS);
        [id(0x00000784), helpcontext(0x00010784)]
        HRESULT OpenText(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT Origin, 
                        [in, optional] VARIANT StartRow, 
                        [in, optional] VARIANT DataType, 
                        [in, optional, defaultvalue(1)] XlTextQualifier TextQualifier, 
                        [in, optional] VARIANT ConsecutiveDelimiter, 
                        [in, optional] VARIANT Tab, 
                        [in, optional] VARIANT Semicolon, 
                        [in, optional] VARIANT Comma, 
                        [in, optional] VARIANT Space, 
                        [in, optional] VARIANT Other, 
                        [in, optional] VARIANT OtherChar, 
                        [in, optional] VARIANT FieldInfo, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, optional] VARIANT DecimalSeparator, 
                        [in, optional] VARIANT ThousandsSeparator, 
                        [in, optional] VARIANT TrailingMinusNumbers, 
                        [in, optional] VARIANT Local, 
                        [in, lcid] long lcid);
        [id(0x00000813), helpcontext(0x00010813)]
        HRESULT OpenDatabase(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT CommandText, 
                        [in, optional] VARIANT CommandType, 
                        [in, optional] VARIANT BackgroundQuery, 
                        [in, optional] VARIANT ImportDataAs, 
                        [out, retval] Workbook** RHS);
        [id(0x00000815), helpcontext(0x00010815)]
        HRESULT CheckOut([in] BSTR Filename);
        [id(0x00000816), helpcontext(0x00010816)]
        HRESULT CanCheckOut(
                        [in] BSTR Filename, 
                        [out, retval] VARIANT_BOOL* RHS);
        [id(0x00000817), hidden, helpcontext(0x00010817)]
        HRESULT _OpenXML(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT Stylesheets, 
                        [out, retval] Workbook** RHS);
        [id(0x000008e8), helpcontext(0x000108e8)]
        HRESULT OpenXML(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT Stylesheets, 
                        [in, optional] VARIANT LoadOption, 
                        [out, retval] Workbook** RHS);
    };

    [
      odl,
      uuid(00020863-0001-0000-C000-000000000046),
      helpcontext(0x00020023),
      hidden
    ]
    interface IMenuBars : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in, optional] VARIANT Name, 
                        [out, retval] MenuBar** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] MenuBar** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] MenuBar** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00020864-0001-0000-C000-000000000046),
      helpcontext(0x00020024),
      hidden
    ]
    interface IMenuBar : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010130)]
        HRESULT _stdcall Activate();
        [propget, helpcontext(0x00010229)]
        HRESULT _stdcall BuiltIn([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001024f)]
        HRESULT _stdcall Menus([out, retval] Menus** RHS);
        [helpcontext(0x0001022b)]
        HRESULT _stdcall Reset();
    };

    [
      odl,
      uuid(00020865-0001-0000-C000-000000000046),
      helpcontext(0x00020025),
      hidden
    ]
    interface IMenus : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR Caption, 
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT Restore, 
                        [out, retval] Menu** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] Menu** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] Menu** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00020866-0001-0000-C000-000000000046),
      helpcontext(0x00020026),
      hidden
    ]
    interface IMenu : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x00010251)]
        HRESULT _stdcall MenuItems([out, retval] MenuItems** RHS);
    };

    [
      odl,
      uuid(00020867-0001-0000-C000-000000000046),
      helpcontext(0x00020027),
      hidden
    ]
    interface IMenuItems : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR Caption, 
                        [in, optional] VARIANT OnAction, 
                        [in, optional] VARIANT ShortcutKey, 
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT Restore, 
                        [in, optional] VARIANT StatusBar, 
                        [in, optional] VARIANT HelpFile, 
                        [in, optional] VARIANT HelpContextID, 
                        [out, retval] MenuItem** RHS);
        [helpcontext(0x00010256)]
        HRESULT _stdcall AddMenu(
                        [in] BSTR Caption, 
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT Restore, 
                        [out, retval] Menu** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00020868-0001-0000-C000-000000000046),
      helpcontext(0x00020028),
      hidden
    ]
    interface IMenuItem : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x00010257)]
        HRESULT _stdcall Checked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010257)]
        HRESULT _stdcall Checked([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010163)]
        HRESULT _stdcall HelpContextID([out, retval] long* RHS);
        [propput, helpcontext(0x00010163)]
        HRESULT _stdcall HelpContextID([in] long RHS);
        [propget, helpcontext(0x00010168)]
        HRESULT _stdcall HelpFile([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010168)]
        HRESULT _stdcall HelpFile([in] BSTR RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010182)]
        HRESULT _stdcall StatusBar([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010182)]
        HRESULT _stdcall StatusBar([in] BSTR RHS);
    };

    [
      odl,
      uuid(0002086D-0001-0000-C000-000000000046),
      helpcontext(0x0002002d),
      hidden
    ]
    interface ICharts : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, optional] VARIANT Count, 
                        [out, retval] Chart** RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([in, lcid] long lcid);
        [restricted, hidden]
        void _stdcall _Dummy7();
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0001027d)]
        HRESULT _stdcall Move(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [hidden, helpcontext(0x00010389),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, _PrintOut)]
        HRESULT _stdcall __PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, lcid] long lcid);
        [helpcontext(0x00010119)]
        HRESULT _stdcall PrintPreview(
                        [in, optional] VARIANT EnableChanges, 
                        [in, lcid] long lcid);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x0001058a)]
        HRESULT _stdcall HPageBreaks([out, retval] HPageBreaks** RHS);
        [propget, helpcontext(0x0001058b)]
        HRESULT _stdcall VPageBreaks([out, retval] VPageBreaks** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible(
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x000106ec),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOut)]
        HRESULT _stdcall _PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, lcid] long lcid);
        [helpcontext(0x00010939)]
        HRESULT _stdcall PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName);
    };

    [
      odl,
      uuid(0002086F-0001-0000-C000-000000000046),
      helpcontext(0x0002002f),
      hidden
    ]
    interface IDrawingObjects : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([in] VARIANT RHS);
        [restricted, hidden]
        void _stdcall _Dummy28();
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010353)]
        HRESULT _stdcall AddItem(
                        [in] VARIANT Text, 
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010263)]
        HRESULT _stdcall ArrowHeadLength([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010263)]
        HRESULT _stdcall ArrowHeadLength([in] VARIANT RHS);
        [propget, helpcontext(0x00010264)]
        HRESULT _stdcall ArrowHeadStyle([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010264)]
        HRESULT _stdcall ArrowHeadStyle([in] VARIANT RHS);
        [propget, helpcontext(0x00010265)]
        HRESULT _stdcall ArrowHeadWidth([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010265)]
        HRESULT _stdcall ArrowHeadWidth([in] VARIANT RHS);
        [propget, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x0001035a)]
        HRESULT _stdcall CancelButton([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001035a)]
        HRESULT _stdcall CancelButton([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] long* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] long RHS);
        [propget, helpcontext(0x00010359)]
        HRESULT _stdcall DefaultButton([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010359)]
        HRESULT _stdcall DefaultButton([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001035b)]
        HRESULT _stdcall DismissButton([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001035b)]
        HRESULT _stdcall DismissButton([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001039a)]
        HRESULT _stdcall DisplayVerticalScrollBar([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001039a)]
        HRESULT _stdcall DisplayVerticalScrollBar([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010350)]
        HRESULT _stdcall DropDownLines([out, retval] long* RHS);
        [propput, helpcontext(0x00010350)]
        HRESULT _stdcall DropDownLines([in] long RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [restricted, hidden]
        void _stdcall _Dummy47();
        [propget, helpcontext(0x0001035c)]
        HRESULT _stdcall HelpButton([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001035c)]
        HRESULT _stdcall HelpButton([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x00010356)]
        HRESULT _stdcall InputType([out, retval] long* RHS);
        [propput, helpcontext(0x00010356)]
        HRESULT _stdcall InputType([in] long RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x0001034d)]
        HRESULT _stdcall LargeChange([out, retval] long* RHS);
        [propput, helpcontext(0x0001034d)]
        HRESULT _stdcall LargeChange([in] long RHS);
        [propget, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([in] BSTR RHS);
        [restricted, hidden]
        void _stdcall _Dummy54();
        [helpcontext(0x0001035d)]
        HRESULT _stdcall List(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [restricted, hidden]
        void _stdcall _Dummy56();
        [propget, helpcontext(0x0001034f)]
        HRESULT _stdcall ListFillRange([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001034f)]
        HRESULT _stdcall ListFillRange([in] BSTR RHS);
        [propget, helpcontext(0x00010352)]
        HRESULT _stdcall ListIndex([out, retval] long* RHS);
        [propput, helpcontext(0x00010352)]
        HRESULT _stdcall ListIndex([in] long RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001034a)]
        HRESULT _stdcall Max([out, retval] long* RHS);
        [propput, helpcontext(0x0001034a)]
        HRESULT _stdcall Max([in] long RHS);
        [propget, helpcontext(0x0001034b)]
        HRESULT _stdcall Min([out, retval] long* RHS);
        [propput, helpcontext(0x0001034b)]
        HRESULT _stdcall Min([in] long RHS);
        [propget, helpcontext(0x00010357)]
        HRESULT _stdcall MultiLine([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010357)]
        HRESULT _stdcall MultiLine([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010020)]
        HRESULT _stdcall MultiSelect([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010020)]
        HRESULT _stdcall MultiSelect([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([in] VARIANT RHS);
        [helpcontext(0x00010355)]
        HRESULT _stdcall RemoveAllItems([out, retval] VARIANT* RHS);
        [helpcontext(0x00010354)]
        HRESULT _stdcall RemoveItem(
                        [in] long Index, 
                        [in, optional] VARIANT Count, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025c)]
        HRESULT _stdcall Reshape(
                        [in] long Vertex, 
                        [in] VARIANT Insert, 
                        [in, optional] VARIANT Left, 
                        [in, optional] VARIANT Top, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010463)]
        HRESULT _stdcall Selected(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001034c)]
        HRESULT _stdcall SmallChange([out, retval] long* RHS);
        [propput, helpcontext(0x0001034c)]
        HRESULT _stdcall SmallChange([in] long RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [helpcontext(0x000100f4)]
        HRESULT _stdcall Ungroup([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] long* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] long RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [helpcontext(0x0001026d)]
        HRESULT _stdcall Vertices(
                        [in, optional] VARIANT Index1, 
                        [in, optional] VARIANT Index2, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x00010358)]
        HRESULT _stdcall LinkCombo(
                        [in, optional] VARIANT Link, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(0002441C-0001-0000-C000-000000000046),
      helpcontext(0x000200b2),
      hidden
    ]
    interface IPivotCache : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010593)]
        HRESULT _stdcall BackgroundQuery([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010593)]
        HRESULT _stdcall BackgroundQuery([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010598)]
        HRESULT _stdcall Connection([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010598)]
        HRESULT _stdcall Connection([in] VARIANT RHS);
        [propget, helpcontext(0x000105c5)]
        HRESULT _stdcall EnableRefresh([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105c5)]
        HRESULT _stdcall EnableRefresh([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x00010174)]
        HRESULT _stdcall MemoryUsed([out, retval] long* RHS);
        [propget, helpcontext(0x00010594)]
        HRESULT _stdcall OptimizeCache([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010594)]
        HRESULT _stdcall OptimizeCache([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105c6)]
        HRESULT _stdcall RecordCount([out, retval] long* RHS);
        [helpcontext(0x00010589)]
        HRESULT _stdcall Refresh();
        [propget, helpcontext(0x000102b8)]
        HRESULT _stdcall RefreshDate([out, retval] DATE* RHS);
        [propget, helpcontext(0x000102b9)]
        HRESULT _stdcall RefreshName([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000105c7)]
        HRESULT _stdcall RefreshOnFileOpen([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105c7)]
        HRESULT _stdcall RefreshOnFileOpen([in] VARIANT_BOOL RHS);
        [propget, hidden, helpcontext(0x000105c8)]
        HRESULT _stdcall Sql([out, retval] VARIANT* RHS);
        [propput, hidden, helpcontext(0x000105c8)]
        HRESULT _stdcall Sql([in] VARIANT RHS);
        [propget, helpcontext(0x000105c9)]
        HRESULT _stdcall SavePassword([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105c9)]
        HRESULT _stdcall SavePassword([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000102ae)]
        HRESULT _stdcall SourceData([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000102ae)]
        HRESULT _stdcall SourceData([in] VARIANT RHS);
        [propget, helpcontext(0x00010725)]
        HRESULT _stdcall CommandText([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010725)]
        HRESULT _stdcall CommandText([in] VARIANT RHS);
        [propget, helpcontext(0x00010726)]
        HRESULT _stdcall CommandType([out, retval] XlCmdType* RHS);
        [propput, helpcontext(0x00010726)]
        HRESULT _stdcall CommandType([in] XlCmdType RHS);
        [propget, helpcontext(0x00010727)]
        HRESULT _stdcall QueryType([out, retval] XlQueryType* RHS);
        [propget, helpcontext(0x00010728)]
        HRESULT _stdcall MaintainConnection([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010728)]
        HRESULT _stdcall MaintainConnection([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010729)]
        HRESULT _stdcall RefreshPeriod([out, retval] long* RHS);
        [propput, helpcontext(0x00010729)]
        HRESULT _stdcall RefreshPeriod([in] long RHS);
        [propget, helpcontext(0x0001048d)]
        HRESULT _stdcall Recordset([out, retval] IDispatch** RHS);
        [propputref, helpcontext(0x0001048d)]
        HRESULT _stdcall Recordset([in] IDispatch* RHS);
        [helpcontext(0x0001072a)]
        HRESULT _stdcall ResetTimer();
        [propget, helpcontext(0x0001072b)]
        HRESULT _stdcall LocalConnection([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001072b)]
        HRESULT _stdcall LocalConnection([in] VARIANT RHS);
        [helpcontext(0x0001072c)]
        HRESULT _stdcall CreatePivotTable(
                        [in] VARIANT TableDestination, 
                        [in, optional] VARIANT TableName, 
                        [in, optional] VARIANT ReadData, 
                        [in, optional] VARIANT DefaultVersion, 
                        [out, retval] PivotTable** RHS);
        [propget, helpcontext(0x0001072d)]
        HRESULT _stdcall UseLocalConnection([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001072d)]
        HRESULT _stdcall UseLocalConnection([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001081a)]
        HRESULT _stdcall ADOConnection([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001081b)]
        HRESULT _stdcall IsConnected([out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x0001081c)]
        HRESULT _stdcall MakeConnection();
        [propget, helpcontext(0x0001081d)]
        HRESULT _stdcall OLAP([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000102ad)]
        HRESULT _stdcall SourceType([out, retval] XlPivotTableSourceType* RHS);
        [propget, helpcontext(0x0001081e)]
        HRESULT _stdcall MissingItemsLimit([out, retval] XlPivotTableMissingItems* RHS);
        [propput, helpcontext(0x0001081e)]
        HRESULT _stdcall MissingItemsLimit([in] XlPivotTableMissingItems RHS);
        [propget, helpcontext(0x0001081f)]
        HRESULT _stdcall SourceConnectionFile([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001081f)]
        HRESULT _stdcall SourceConnectionFile([in] BSTR RHS);
        [propget, helpcontext(0x00010820)]
        HRESULT _stdcall SourceDataFile([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010821)]
        HRESULT _stdcall RobustConnect([out, retval] XlRobustConnect* RHS);
        [propput, helpcontext(0x00010821)]
        HRESULT _stdcall RobustConnect([in] XlRobustConnect RHS);
        [helpcontext(0x00010822)]
        HRESULT _stdcall SaveAsODC(
                        [in] BSTR ODCFileName, 
                        [in, optional] VARIANT Description, 
                        [in, optional] VARIANT Keywords);
        [propget, helpcontext(0x000109f0)]
        HRESULT _stdcall WorkbookConnection([out, retval] WorkbookConnection** RHS);
        [propget, helpcontext(0x00010188)]
        HRESULT _stdcall Version([out, retval] XlPivotTableVersionList* RHS);
        [propget, helpcontext(0x000109f1)]
        HRESULT _stdcall UpgradeOnRefresh([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000109f1)]
        HRESULT _stdcall UpgradeOnRefresh([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(0002441D-0001-0000-C000-000000000046),
      helpcontext(0x000200b3),
      hidden
    ]
    interface IPivotCaches : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] PivotCache** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] PivotCache** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [hidden, helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] XlPivotTableSourceType SourceType, 
                        [in, optional] VARIANT SourceData, 
                        [out, retval] PivotCache** RHS);
        [helpcontext(0x00010768)]
        HRESULT _stdcall Create(
                        [in] XlPivotTableSourceType SourceType, 
                        [in, optional] VARIANT SourceData, 
                        [in, optional] VARIANT Version, 
                        [out, retval] PivotCache** RHS);
    };

    [
      odl,
      uuid(0002441E-0001-0000-C000-000000000046),
      helpcontext(0x000200b4),
      hidden
    ]
    interface IPivotFormula : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] BSTR RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] BSTR RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propput, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([in] long RHS);
        [propget, helpcontext(0x00010824)]
        HRESULT _stdcall StandardFormula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010824)]
        HRESULT _stdcall StandardFormula([in] BSTR RHS);
    };

    [
      odl,
      uuid(0002441F-0001-0000-C000-000000000046),
      helpcontext(0x000200b5),
      hidden
    ]
    interface IPivotFormulas : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [hidden, helpcontext(0x00010825)]
        HRESULT _stdcall _Add(
                        [in] BSTR Formula, 
                        [out, retval] PivotFormula** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] PivotFormula** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] PivotFormula** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR Formula, 
                        [in, optional] VARIANT UseStandardFormula, 
                        [out, retval] PivotFormula** RHS);
    };

    [
      odl,
      uuid(00020872-0001-0000-C000-000000000046),
      helpcontext(0x00020032),
      hidden
    ]
    interface IPivotTable : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000102c4)]
        HRESULT _stdcall AddFields(
                        [in, optional] VARIANT RowFields, 
                        [in, optional] VARIANT ColumnFields, 
                        [in, optional] VARIANT PageFields, 
                        [in, optional] VARIANT AddToTable, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000102c9)]
        HRESULT _stdcall ColumnFields(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000102b6)]
        HRESULT _stdcall ColumnGrand([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000102b6)]
        HRESULT _stdcall ColumnGrand([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000102be)]
        HRESULT _stdcall ColumnRange([out, retval] Range** RHS);
        [helpcontext(0x000102c2)]
        HRESULT _stdcall ShowPages(
                        [in, optional] VARIANT PageField, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000102c1)]
        HRESULT _stdcall DataBodyRange([out, retval] Range** RHS);
        [propget, helpcontext(0x000102cb)]
        HRESULT _stdcall DataFields(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000102c0)]
        HRESULT _stdcall DataLabelRange([out, retval] Range** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] BSTR RHS);
        [propget, helpcontext(0x000102b7)]
        HRESULT _stdcall HasAutoFormat([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000102b7)]
        HRESULT _stdcall HasAutoFormat([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000102c7)]
        HRESULT _stdcall HiddenFields(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000102ba)]
        HRESULT _stdcall InnerDetail([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000102ba)]
        HRESULT _stdcall InnerDetail([in] BSTR RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, helpcontext(0x000102ca)]
        HRESULT _stdcall PageFields(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000102bf)]
        HRESULT _stdcall PageRange([out, retval] Range** RHS);
        [propget, helpcontext(0x000105ca)]
        HRESULT _stdcall PageRangeCells([out, retval] Range** RHS);
        [helpcontext(0x000102ce)]
        HRESULT _stdcall PivotFields(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000102b8)]
        HRESULT _stdcall RefreshDate([out, retval] DATE* RHS);
        [propget, helpcontext(0x000102b9)]
        HRESULT _stdcall RefreshName([out, retval] BSTR* RHS);
        [helpcontext(0x000102cd)]
        HRESULT _stdcall RefreshTable([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000102c8)]
        HRESULT _stdcall RowFields(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000102b5)]
        HRESULT _stdcall RowGrand([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000102b5)]
        HRESULT _stdcall RowGrand([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000102bd)]
        HRESULT _stdcall RowRange([out, retval] Range** RHS);
        [propget, helpcontext(0x000102b4)]
        HRESULT _stdcall SaveData([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000102b4)]
        HRESULT _stdcall SaveData([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000102ae)]
        HRESULT _stdcall SourceData([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000102ae)]
        HRESULT _stdcall SourceData([in] VARIANT RHS);
        [propget, helpcontext(0x000102bb)]
        HRESULT _stdcall TableRange1([out, retval] Range** RHS);
        [propget, helpcontext(0x000102bc)]
        HRESULT _stdcall TableRange2([out, retval] Range** RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] BSTR RHS);
        [propget, helpcontext(0x000102c6)]
        HRESULT _stdcall VisibleFields(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000105cb)]
        HRESULT _stdcall CacheIndex([out, retval] long* RHS);
        [propput, helpcontext(0x000105cb)]
        HRESULT _stdcall CacheIndex([in] long RHS);
        [helpcontext(0x000105cc)]
        HRESULT _stdcall CalculatedFields([out, retval] CalculatedFields** RHS);
        [propget, helpcontext(0x000105cd)]
        HRESULT _stdcall DisplayErrorString([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105cd)]
        HRESULT _stdcall DisplayErrorString([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105ce)]
        HRESULT _stdcall DisplayNullString([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105ce)]
        HRESULT _stdcall DisplayNullString([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105cf)]
        HRESULT _stdcall EnableDrilldown([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105cf)]
        HRESULT _stdcall EnableDrilldown([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105d0)]
        HRESULT _stdcall EnableFieldDialog([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105d0)]
        HRESULT _stdcall EnableFieldDialog([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105d1)]
        HRESULT _stdcall EnableWizard([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105d1)]
        HRESULT _stdcall EnableWizard([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105d2)]
        HRESULT _stdcall ErrorString([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000105d2)]
        HRESULT _stdcall ErrorString([in] BSTR RHS);
        [helpcontext(0x000105d3)]
        HRESULT _stdcall GetData(
                        [in] BSTR Name, 
                        [out, retval] double* RHS);
        [helpcontext(0x000105d4)]
        HRESULT _stdcall ListFormulas();
        [propget, helpcontext(0x000105d5)]
        HRESULT _stdcall ManualUpdate([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105d5)]
        HRESULT _stdcall ManualUpdate([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105d6)]
        HRESULT _stdcall MergeLabels([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105d6)]
        HRESULT _stdcall MergeLabels([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105d7)]
        HRESULT _stdcall NullString([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000105d7)]
        HRESULT _stdcall NullString([in] BSTR RHS);
        [helpcontext(0x000105d8)]
        HRESULT _stdcall PivotCache([out, retval] PivotCache** RHS);
        [propget, helpcontext(0x000105d9)]
        HRESULT _stdcall PivotFormulas([out, retval] PivotFormulas** RHS);
        [helpcontext(0x000102ac)]
        HRESULT _stdcall PivotTableWizard(
                        [in, optional] VARIANT SourceType, 
                        [in, optional] VARIANT SourceData, 
                        [in, optional] VARIANT TableDestination, 
                        [in, optional] VARIANT TableName, 
                        [in, optional] VARIANT RowGrand, 
                        [in, optional] VARIANT ColumnGrand, 
                        [in, optional] VARIANT SaveData, 
                        [in, optional] VARIANT HasAutoFormat, 
                        [in, optional] VARIANT AutoPage, 
                        [in, optional] VARIANT Reserved, 
                        [in, optional] VARIANT BackgroundQuery, 
                        [in, optional] VARIANT OptimizeCache, 
                        [in, optional] VARIANT PageFieldOrder, 
                        [in, optional] VARIANT PageFieldWrapCount, 
                        [in, optional] VARIANT ReadData, 
                        [in, optional] VARIANT Connection);
        [propget, helpcontext(0x000105da)]
        HRESULT _stdcall SubtotalHiddenPageItems([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105da)]
        HRESULT _stdcall SubtotalHiddenPageItems([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010595)]
        HRESULT _stdcall PageFieldOrder([out, retval] long* RHS);
        [propput, helpcontext(0x00010595)]
        HRESULT _stdcall PageFieldOrder([in] long RHS);
        [propget, helpcontext(0x000105db)]
        HRESULT _stdcall PageFieldStyle([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000105db)]
        HRESULT _stdcall PageFieldStyle([in] BSTR RHS);
        [propget, helpcontext(0x00010596)]
        HRESULT _stdcall PageFieldWrapCount([out, retval] long* RHS);
        [propput, helpcontext(0x00010596)]
        HRESULT _stdcall PageFieldWrapCount([in] long RHS);
        [propget, helpcontext(0x000105dc)]
        HRESULT _stdcall PreserveFormatting([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105dc)]
        HRESULT _stdcall PreserveFormatting([in] VARIANT_BOOL RHS);
        [hidden, helpcontext(0x00010827)]
        HRESULT _stdcall _PivotSelect(
                        [in] BSTR Name, 
                        [in, optional, defaultvalue(0)] XlPTSelectionMode Mode);
        [propget, helpcontext(0x000105de)]
        HRESULT _stdcall PivotSelection([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000105de)]
        HRESULT _stdcall PivotSelection([in] BSTR RHS);
        [propget, helpcontext(0x000105df)]
        HRESULT _stdcall SelectionMode([out, retval] XlPTSelectionMode* RHS);
        [propput, helpcontext(0x000105df)]
        HRESULT _stdcall SelectionMode([in] XlPTSelectionMode RHS);
        [propget, hidden, helpcontext(0x000105e0)]
        HRESULT _stdcall TableStyle([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x000105e0)]
        HRESULT _stdcall TableStyle([in] BSTR RHS);
        [propget, helpcontext(0x000105e1)]
        HRESULT _stdcall Tag([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000105e1)]
        HRESULT _stdcall Tag([in] BSTR RHS);
        [helpcontext(0x000102a8)]
        HRESULT _stdcall Update();
        [propget, helpcontext(0x000105e2)]
        HRESULT _stdcall VacatedStyle([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000105e2)]
        HRESULT _stdcall VacatedStyle([in] BSTR RHS);
        [hidden, helpcontext(0x00010074)]
        HRESULT _stdcall Format([in] XlPivotFormatType Format);
        [propget, helpcontext(0x0001072e)]
        HRESULT _stdcall PrintTitles([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001072e)]
        HRESULT _stdcall PrintTitles([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001072f)]
        HRESULT _stdcall CubeFields([out, retval] CubeFields** RHS);
        [propget, helpcontext(0x00010730)]
        HRESULT _stdcall GrandTotalName([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010730)]
        HRESULT _stdcall GrandTotalName([in] BSTR RHS);
        [propget, helpcontext(0x00010731)]
        HRESULT _stdcall SmallGrid([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010731)]
        HRESULT _stdcall SmallGrid([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010732)]
        HRESULT _stdcall RepeatItemsOnEachPrintedPage([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010732)]
        HRESULT _stdcall RepeatItemsOnEachPrintedPage([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010733)]
        HRESULT _stdcall TotalsAnnotation([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010733)]
        HRESULT _stdcall TotalsAnnotation([in] VARIANT_BOOL RHS);
        [helpcontext(0x000105dd)]
        HRESULT _stdcall PivotSelect(
                        [in] BSTR Name, 
                        [in, optional, defaultvalue(0)] XlPTSelectionMode Mode, 
                        [in, optional] VARIANT UseStandardName);
        [propget, helpcontext(0x00010829)]
        HRESULT _stdcall PivotSelectionStandard([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010829)]
        HRESULT _stdcall PivotSelectionStandard([in] BSTR RHS);
        [helpcontext(0x0001082a)]
        HRESULT _stdcall GetPivotData(
                        [in, optional] VARIANT DataField, 
                        [in, optional] VARIANT Field1, 
                        [in, optional] VARIANT Item1, 
                        [in, optional] VARIANT Field2, 
                        [in, optional] VARIANT Item2, 
                        [in, optional] VARIANT Field3, 
                        [in, optional] VARIANT Item3, 
                        [in, optional] VARIANT Field4, 
                        [in, optional] VARIANT Item4, 
                        [in, optional] VARIANT Field5, 
                        [in, optional] VARIANT Item5, 
                        [in, optional] VARIANT Field6, 
                        [in, optional] VARIANT Item6, 
                        [in, optional] VARIANT Field7, 
                        [in, optional] VARIANT Item7, 
                        [in, optional] VARIANT Field8, 
                        [in, optional] VARIANT Item8, 
                        [in, optional] VARIANT Field9, 
                        [in, optional] VARIANT Item9, 
                        [in, optional] VARIANT Field10, 
                        [in, optional] VARIANT Item10, 
                        [in, optional] VARIANT Field11, 
                        [in, optional] VARIANT Item11, 
                        [in, optional] VARIANT Field12, 
                        [in, optional] VARIANT Item12, 
                        [in, optional] VARIANT Field13, 
                        [in, optional] VARIANT Item13, 
                        [in, optional] VARIANT Field14, 
                        [in, optional] VARIANT Item14, 
                        [out, retval] Range** RHS);
        [propget, helpcontext(0x00010848)]
        HRESULT _stdcall DataPivotField([out, retval] PivotField** RHS);
        [propget, helpcontext(0x00010849)]
        HRESULT _stdcall EnableDataValueEditing([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010849)]
        HRESULT _stdcall EnableDataValueEditing([in] VARIANT_BOOL RHS);
        [helpcontext(0x0001084a)]
        HRESULT _stdcall AddDataField(
                        [in] IDispatch* Field, 
                        [in, optional] VARIANT Caption, 
                        [in, optional] VARIANT Function, 
                        [out, retval] PivotField** RHS);
        [propget, helpcontext(0x0001084b)]
        HRESULT _stdcall MDX([out, retval] BSTR* RHS);
        [propget, helpcontext(0x0001084c)]
        HRESULT _stdcall ViewCalculatedMembers([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001084c)]
        HRESULT _stdcall ViewCalculatedMembers([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001084d)]
        HRESULT _stdcall CalculatedMembers([out, retval] CalculatedMembers** RHS);
        [propget, helpcontext(0x0001084e)]
        HRESULT _stdcall DisplayImmediateItems([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001084e)]
        HRESULT _stdcall DisplayImmediateItems([in] VARIANT_BOOL RHS);
        [hidden, helpcontext(0x0001084f)]
        HRESULT _stdcall Dummy15(
                        [in] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010850)]
        HRESULT _stdcall EnableFieldList([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010850)]
        HRESULT _stdcall EnableFieldList([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010851)]
        HRESULT _stdcall VisualTotals([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010851)]
        HRESULT _stdcall VisualTotals([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010852)]
        HRESULT _stdcall ShowPageMultipleItemLabel([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010852)]
        HRESULT _stdcall ShowPageMultipleItemLabel([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010188)]
        HRESULT _stdcall Version([out, retval] XlPivotTableVersionList* RHS);
        [helpcontext(0x00010853)]
        HRESULT _stdcall CreateCubeFile(
                        [in] BSTR File, 
                        [in, optional] VARIANT Measures, 
                        [in, optional] VARIANT Levels, 
                        [in, optional] VARIANT Members, 
                        [in, optional] VARIANT Properties, 
                        [out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010858)]
        HRESULT _stdcall DisplayEmptyRow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010858)]
        HRESULT _stdcall DisplayEmptyRow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010859)]
        HRESULT _stdcall DisplayEmptyColumn([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010859)]
        HRESULT _stdcall DisplayEmptyColumn([in] VARIANT_BOOL RHS);
        [propget, hidden, helpcontext(0x0001085a)]
        HRESULT _stdcall ShowCellBackgroundFromOLAP([out, retval] VARIANT_BOOL* RHS);
        [propput, hidden, helpcontext(0x0001085a)]
        HRESULT _stdcall ShowCellBackgroundFromOLAP([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000109f2)]
        HRESULT _stdcall PivotColumnAxis([out, retval] PivotAxis** RHS);
        [propget, helpcontext(0x000109f3)]
        HRESULT _stdcall PivotRowAxis([out, retval] PivotAxis** RHS);
        [propget, helpcontext(0x000109f4)]
        HRESULT _stdcall ShowDrillIndicators([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000109f4)]
        HRESULT _stdcall ShowDrillIndicators([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000109f5)]
        HRESULT _stdcall PrintDrillIndicators([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000109f5)]
        HRESULT _stdcall PrintDrillIndicators([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000109f6)]
        HRESULT _stdcall DisplayMemberPropertyTooltips([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000109f6)]
        HRESULT _stdcall DisplayMemberPropertyTooltips([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000109f7)]
        HRESULT _stdcall DisplayContextTooltips([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000109f7)]
        HRESULT _stdcall DisplayContextTooltips([in] VARIANT_BOOL RHS);
        [helpcontext(0x000109f8)]
        HRESULT _stdcall ClearTable();
        [propget, helpcontext(0x000109f9)]
        HRESULT _stdcall CompactRowIndent([out, retval] long* RHS);
        [propput, helpcontext(0x000109f9)]
        HRESULT _stdcall CompactRowIndent([in] long RHS);
        [propget, helpcontext(0x000109fa)]
        HRESULT _stdcall LayoutRowDefault([out, retval] XlLayoutRowType* RHS);
        [propput, helpcontext(0x000109fa)]
        HRESULT _stdcall LayoutRowDefault([in] XlLayoutRowType RHS);
        [propget, helpcontext(0x000109fb)]
        HRESULT _stdcall DisplayFieldCaptions([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000109fb)]
        HRESULT _stdcall DisplayFieldCaptions([in] VARIANT_BOOL RHS);
        [helpcontext(0x000109fc)]
        HRESULT _stdcall RowAxisLayout([in] XlLayoutRowType RowLayout);
        [helpcontext(0x000109fe)]
        HRESULT _stdcall SubtotalLocation([in] XlSubtototalLocationType Location);
        [propget, helpcontext(0x000109ff)]
        HRESULT _stdcall ActiveFilters([out, retval] PivotFilters** RHS);
        [propget, helpcontext(0x00010a00)]
        HRESULT _stdcall InGridDropZones([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a00)]
        HRESULT _stdcall InGridDropZones([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010a01)]
        HRESULT _stdcall ClearAllFilters();
        [propget, helpcontext(0x00010a02)]
        HRESULT _stdcall TableStyle2([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010a02)]
        HRESULT _stdcall TableStyle2([in] VARIANT RHS);
        [propget, helpcontext(0x00010a03)]
        HRESULT _stdcall ShowTableStyleLastColumn([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a03)]
        HRESULT _stdcall ShowTableStyleLastColumn([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a04)]
        HRESULT _stdcall ShowTableStyleRowStripes([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a04)]
        HRESULT _stdcall ShowTableStyleRowStripes([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a05)]
        HRESULT _stdcall ShowTableStyleColumnStripes([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a05)]
        HRESULT _stdcall ShowTableStyleColumnStripes([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a06)]
        HRESULT _stdcall ShowTableStyleRowHeaders([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a06)]
        HRESULT _stdcall ShowTableStyleRowHeaders([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a07)]
        HRESULT _stdcall ShowTableStyleColumnHeaders([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a07)]
        HRESULT _stdcall ShowTableStyleColumnHeaders([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010a08)]
        HRESULT _stdcall ConvertToFormulas([in] VARIANT_BOOL ConvertFilters);
        [propget, helpcontext(0x00010a0a)]
        HRESULT _stdcall AllowMultipleFilters([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a0a)]
        HRESULT _stdcall AllowMultipleFilters([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a0b)]
        HRESULT _stdcall CompactLayoutRowHeader([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010a0b)]
        HRESULT _stdcall CompactLayoutRowHeader([in] BSTR RHS);
        [propget, helpcontext(0x00010a0c)]
        HRESULT _stdcall CompactLayoutColumnHeader([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010a0c)]
        HRESULT _stdcall CompactLayoutColumnHeader([in] BSTR RHS);
        [propget, helpcontext(0x00010a0d)]
        HRESULT _stdcall FieldListSortAscending([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a0d)]
        HRESULT _stdcall FieldListSortAscending([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a0e)]
        HRESULT _stdcall SortUsingCustomLists([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a0e)]
        HRESULT _stdcall SortUsingCustomLists([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010a0f)]
        HRESULT _stdcall ChangeConnection([in] WorkbookConnection* conn);
        [helpcontext(0x00010a11)]
        HRESULT _stdcall ChangePivotCache([in] VARIANT PivotCache);
        [propget, helpcontext(0x00010575)]
        HRESULT _stdcall Location([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010575)]
        HRESULT _stdcall Location([in] BSTR RHS);
    };

    [
      odl,
      uuid(00020873-0001-0000-C000-000000000046),
      helpcontext(0x00020033),
      hidden
    ]
    interface IPivotTables : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] PivotTable** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] PivotCache* PivotCache, 
                        [in] VARIANT TableDestination, 
                        [in, optional] VARIANT TableName, 
                        [in, optional] VARIANT ReadData, 
                        [in, optional] VARIANT DefaultVersion, 
                        [out, retval] PivotTable** RHS);
    };

    [
      odl,
      uuid(00020874-0001-0000-C000-000000000046),
      helpcontext(0x00020034),
      hidden
    ]
    interface IPivotField : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001013c)]
        HRESULT _stdcall Calculation([out, retval] XlPivotFieldCalculation* RHS);
        [propput, helpcontext(0x0001013c)]
        HRESULT _stdcall Calculation([in] XlPivotFieldCalculation RHS);
        [propget, helpcontext(0x000102e0)]
        HRESULT _stdcall ChildField([out, retval] PivotField** RHS);
        [propget, helpcontext(0x000102da)]
        HRESULT _stdcall ChildItems(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000102e2)]
        HRESULT _stdcall CurrentPage([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000102e2)]
        HRESULT _stdcall CurrentPage([in] VARIANT RHS);
        [propget, helpcontext(0x000102d0)]
        HRESULT _stdcall DataRange([out, retval] Range** RHS);
        [propget, helpcontext(0x000102d2)]
        HRESULT _stdcall DataType([out, retval] XlPivotFieldDataType* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] BSTR RHS);
        [propget, helpcontext(0x00010383)]
        HRESULT _stdcall Function([out, retval] XlConsolidationFunction* RHS);
        [propput, helpcontext(0x00010383)]
        HRESULT _stdcall Function([in] XlConsolidationFunction RHS);
        [propget, helpcontext(0x000102d3)]
        HRESULT _stdcall GroupLevel([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000102d8)]
        HRESULT _stdcall HiddenItems(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000102cf)]
        HRESULT _stdcall LabelRange([out, retval] Range** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([in] BSTR RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] XlPivotFieldOrientation* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] XlPivotFieldOrientation RHS);
        [propget, helpcontext(0x000101c4)]
        HRESULT _stdcall ShowAllItems([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000101c4)]
        HRESULT _stdcall ShowAllItems([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000102dc)]
        HRESULT _stdcall ParentField([out, retval] PivotField** RHS);
        [propget, helpcontext(0x000102d9)]
        HRESULT _stdcall ParentItems(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x000102e1)]
        HRESULT _stdcall PivotItems(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010085)]
        HRESULT _stdcall Position([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010085)]
        HRESULT _stdcall Position([in] VARIANT RHS);
        [propget, helpcontext(0x000102d1)]
        HRESULT _stdcall SourceName([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000102dd)]
        HRESULT _stdcall Subtotals(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000102dd)]
        HRESULT _stdcall Subtotals(
                        [in, optional] VARIANT Index, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x000102de)]
        HRESULT _stdcall BaseField([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000102de)]
        HRESULT _stdcall BaseField([in] VARIANT RHS);
        [propget, helpcontext(0x000102df)]
        HRESULT _stdcall BaseItem([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000102df)]
        HRESULT _stdcall BaseItem([in] VARIANT RHS);
        [propget, helpcontext(0x000102d4)]
        HRESULT _stdcall TotalLevels([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] BSTR RHS);
        [propget, helpcontext(0x000102d7)]
        HRESULT _stdcall VisibleItems(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x000105e3)]
        HRESULT _stdcall CalculatedItems([out, retval] CalculatedItems** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x000105e4)]
        HRESULT _stdcall DragToColumn([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105e4)]
        HRESULT _stdcall DragToColumn([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105e5)]
        HRESULT _stdcall DragToHide([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105e5)]
        HRESULT _stdcall DragToHide([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105e6)]
        HRESULT _stdcall DragToPage([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105e6)]
        HRESULT _stdcall DragToPage([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105e7)]
        HRESULT _stdcall DragToRow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105e7)]
        HRESULT _stdcall DragToRow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010734)]
        HRESULT _stdcall DragToData([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010734)]
        HRESULT _stdcall DragToData([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x000105e8)]
        HRESULT _stdcall IsCalculated([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010174)]
        HRESULT _stdcall MemoryUsed([out, retval] long* RHS);
        [propget, helpcontext(0x000105e9)]
        HRESULT _stdcall ServerBased([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105e9)]
        HRESULT _stdcall ServerBased([in] VARIANT_BOOL RHS);
        [hidden, helpcontext(0x00010a13),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, AutoSort)]
        HRESULT _stdcall _AutoSort(
                        [in] long Order, 
                        [in] BSTR Field);
        [helpcontext(0x000105eb)]
        HRESULT _stdcall AutoShow(
                        [in] long Type, 
                        [in] long Range, 
                        [in] long Count, 
                        [in] BSTR Field);
        [propget, helpcontext(0x000105ec)]
        HRESULT _stdcall AutoSortOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105ed)]
        HRESULT _stdcall AutoSortField([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000105ee)]
        HRESULT _stdcall AutoShowType([out, retval] long* RHS);
        [propget, helpcontext(0x000105ef)]
        HRESULT _stdcall AutoShowRange([out, retval] long* RHS);
        [propget, helpcontext(0x000105f0)]
        HRESULT _stdcall AutoShowCount([out, retval] long* RHS);
        [propget, helpcontext(0x000105f1)]
        HRESULT _stdcall AutoShowField([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010735)]
        HRESULT _stdcall LayoutBlankLine([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010735)]
        HRESULT _stdcall LayoutBlankLine([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010736)]
        HRESULT _stdcall LayoutSubtotalLocation([out, retval] XlSubtototalLocationType* RHS);
        [propput, helpcontext(0x00010736)]
        HRESULT _stdcall LayoutSubtotalLocation([in] XlSubtototalLocationType RHS);
        [propget, helpcontext(0x00010737)]
        HRESULT _stdcall LayoutPageBreak([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010737)]
        HRESULT _stdcall LayoutPageBreak([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010738)]
        HRESULT _stdcall LayoutForm([out, retval] XlLayoutFormType* RHS);
        [propput, helpcontext(0x00010738)]
        HRESULT _stdcall LayoutForm([in] XlLayoutFormType RHS);
        [propget, helpcontext(0x00010739)]
        HRESULT _stdcall SubtotalName([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010739)]
        HRESULT _stdcall SubtotalName([in] BSTR RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001073a)]
        HRESULT _stdcall DrilledDown([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001073a)]
        HRESULT _stdcall DrilledDown([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001073b)]
        HRESULT _stdcall CubeField([out, retval] CubeField** RHS);
        [propget, helpcontext(0x0001073c)]
        HRESULT _stdcall CurrentPageName([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001073c)]
        HRESULT _stdcall CurrentPageName([in] BSTR RHS);
        [propget, helpcontext(0x00010824)]
        HRESULT _stdcall StandardFormula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010824)]
        HRESULT _stdcall StandardFormula([in] BSTR RHS);
        [propget, helpcontext(0x0001085b)]
        HRESULT _stdcall HiddenItemsList([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001085b)]
        HRESULT _stdcall HiddenItemsList([in] VARIANT RHS);
        [propget, helpcontext(0x0001085c)]
        HRESULT _stdcall DatabaseSort([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001085c)]
        HRESULT _stdcall DatabaseSort([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001085d)]
        HRESULT _stdcall IsMemberProperty([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x0001085e)]
        HRESULT _stdcall PropertyParentField([out, retval] PivotField** RHS);
        [propget, helpcontext(0x0001085f)]
        HRESULT _stdcall PropertyOrder([out, retval] long* RHS);
        [propput, helpcontext(0x0001085f)]
        HRESULT _stdcall PropertyOrder([in] long RHS);
        [propget, helpcontext(0x00010860)]
        HRESULT _stdcall EnableItemSelection([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010860)]
        HRESULT _stdcall EnableItemSelection([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010861)]
        HRESULT _stdcall CurrentPageList([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010861)]
        HRESULT _stdcall CurrentPageList([in] VARIANT RHS);
        [helpcontext(0x00010862)]
        HRESULT _stdcall AddPageItem(
                        [in] BSTR Item, 
                        [in, optional] VARIANT ClearList);
        [propget, helpcontext(0x0001010c)]
        HRESULT _stdcall Hidden([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010c)]
        HRESULT _stdcall Hidden([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010a14)]
        HRESULT _stdcall DrillTo([in] BSTR Field);
        [propget, helpcontext(0x00010a15)]
        HRESULT _stdcall UseMemberPropertyAsCaption([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a15)]
        HRESULT _stdcall UseMemberPropertyAsCaption([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a16)]
        HRESULT _stdcall MemberPropertyCaption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010a16)]
        HRESULT _stdcall MemberPropertyCaption([in] BSTR RHS);
        [propget, helpcontext(0x00010a17)]
        HRESULT _stdcall DisplayAsTooltip([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a17)]
        HRESULT _stdcall DisplayAsTooltip([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a18)]
        HRESULT _stdcall DisplayInReport([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a18)]
        HRESULT _stdcall DisplayInReport([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a19)]
        HRESULT _stdcall DisplayAsCaption([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010a1a)]
        HRESULT _stdcall LayoutCompactRow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a1a)]
        HRESULT _stdcall LayoutCompactRow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a1b)]
        HRESULT _stdcall IncludeNewItemsInFilter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a1b)]
        HRESULT _stdcall IncludeNewItemsInFilter([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a1c)]
        HRESULT _stdcall VisibleItemsList([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010a1c)]
        HRESULT _stdcall VisibleItemsList([in] VARIANT RHS);
        [propget, helpcontext(0x00010a1d)]
        HRESULT _stdcall PivotFilters([out, retval] PivotFilters** RHS);
        [propget, helpcontext(0x00010a1e)]
        HRESULT _stdcall AutoSortPivotLine([out, retval] PivotLine** RHS);
        [propget, helpcontext(0x00010a1f)]
        HRESULT _stdcall AutoSortCustomSubtotal([out, retval] long* RHS);
        [propget, helpcontext(0x00010a20)]
        HRESULT _stdcall ShowingInAxis([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010888)]
        HRESULT _stdcall EnableMultiplePageItems([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010888)]
        HRESULT _stdcall EnableMultiplePageItems([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a21)]
        HRESULT _stdcall AllItemsVisible([out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x00010a22)]
        HRESULT _stdcall ClearManualFilter();
        [helpcontext(0x00010a01)]
        HRESULT _stdcall ClearAllFilters();
        [helpcontext(0x00010a23)]
        HRESULT _stdcall ClearValueFilters();
        [helpcontext(0x00010a24)]
        HRESULT _stdcall ClearLabelFilters();
        [helpcontext(0x000105ea)          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, AutoSortEx)]
        HRESULT _stdcall AutoSort(
                        [in] long Order, 
                        [in] BSTR Field, 
                        [in, optional] VARIANT PivotLine, 
                        [in, optional] VARIANT CustomSubtotal);
        [propget, helpcontext(0x00010a27)]
        HRESULT _stdcall SourceCaption([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010249)]
        HRESULT _stdcall ShowDetail([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010249)]
        HRESULT _stdcall ShowDetail([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(00020875-0001-0000-C000-000000000046),
      helpcontext(0x00020035),
      hidden
    ]
    interface IPivotFields : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] PivotTable** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00024420-0001-0000-C000-000000000046),
      helpcontext(0x000200b6),
      hidden
    ]
    interface ICalculatedFields : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [hidden, helpcontext(0x00010825)]
        HRESULT _stdcall _Add(
                        [in] BSTR Name, 
                        [in] BSTR Formula, 
                        [out, retval] PivotField** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] PivotField** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Field, 
                        [out, retval] PivotField** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR Name, 
                        [in] BSTR Formula, 
                        [in, optional] VARIANT UseStandardFormula, 
                        [out, retval] PivotField** RHS);
    };

    [
      odl,
      uuid(00020876-0001-0000-C000-000000000046),
      helpcontext(0x00020036),
      hidden
    ]
    interface IPivotItem : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] PivotField** RHS);
        [propget, helpcontext(0x000102da)]
        HRESULT _stdcall ChildItems(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000102d0)]
        HRESULT _stdcall DataRange([out, retval] Range** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] BSTR RHS);
        [propget, helpcontext(0x000102cf)]
        HRESULT _stdcall LabelRange([out, retval] Range** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, helpcontext(0x000102e5)]
        HRESULT _stdcall ParentItem([out, retval] PivotItem** RHS);
        [propget, helpcontext(0x000102e3)]
        HRESULT _stdcall ParentShowDetail([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010085)]
        HRESULT _stdcall Position([out, retval] long* RHS);
        [propput, helpcontext(0x00010085)]
        HRESULT _stdcall Position([in] long RHS);
        [propget, helpcontext(0x00010249)]
        HRESULT _stdcall ShowDetail([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010249)]
        HRESULT _stdcall ShowDetail([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000102d1)]
        HRESULT _stdcall SourceName([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] BSTR RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x000105e8)]
        HRESULT _stdcall IsCalculated([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000105c6)]
        HRESULT _stdcall RecordCount([out, retval] long* RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001073a)]
        HRESULT _stdcall DrilledDown([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001073a)]
        HRESULT _stdcall DrilledDown([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010824)]
        HRESULT _stdcall StandardFormula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010824)]
        HRESULT _stdcall StandardFormula([in] BSTR RHS);
        [propget, helpcontext(0x00010864)]
        HRESULT _stdcall SourceNameStandard([out, retval] BSTR* RHS);
        [helpcontext(0x00010a14)]
        HRESULT _stdcall DrillTo([in] BSTR Field);
    };

    [
      odl,
      uuid(00020877-0001-0000-C000-000000000046),
      helpcontext(0x00020037),
      hidden
    ]
    interface IPivotItems : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] PivotField** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add([in] BSTR Name);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00024421-0001-0000-C000-000000000046),
      helpcontext(0x000200b7),
      hidden
    ]
    interface ICalculatedItems : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [hidden, helpcontext(0x00010825)]
        HRESULT _stdcall _Add(
                        [in] BSTR Name, 
                        [in] BSTR Formula, 
                        [out, retval] PivotItem** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] PivotItem** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Field, 
                        [out, retval] PivotItem** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR Name, 
                        [in] BSTR Formula, 
                        [in, optional] VARIANT UseStandardFormula, 
                        [out, retval] PivotItem** RHS);
    };

    [
      odl,
      uuid(00020878-0001-0000-C000-000000000046),
      helpcontext(0x00020038),
      hidden
    ]
    interface ICharacters : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [helpcontext(0x000100fc)]
        HRESULT _stdcall Insert(
                        [in] BSTR String, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x000105f2)]
        HRESULT _stdcall PhoneticCharacters([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000105f2)]
        HRESULT _stdcall PhoneticCharacters([in] BSTR RHS);
    };

    [
      odl,
      uuid(00020879-0001-0000-C000-000000000046),
      helpcontext(0x00020039),
      hidden
    ]
    interface IDialogs : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] XlBuiltInDialog Index, 
                        [out, retval] Dialog** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] XlBuiltInDialog Index, 
                        [out, retval] Dialog** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(0002087A-0001-0000-C000-000000000046),
      helpcontext(0x0002003a),
      hidden
    ]
    interface IDialog : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000101f0)]
        HRESULT _stdcall Show(
                        [in, optional] VARIANT Arg1, 
                        [in, optional] VARIANT Arg2, 
                        [in, optional] VARIANT Arg3, 
                        [in, optional] VARIANT Arg4, 
                        [in, optional] VARIANT Arg5, 
                        [in, optional] VARIANT Arg6, 
                        [in, optional] VARIANT Arg7, 
                        [in, optional] VARIANT Arg8, 
                        [in, optional] VARIANT Arg9, 
                        [in, optional] VARIANT Arg10, 
                        [in, optional] VARIANT Arg11, 
                        [in, optional] VARIANT Arg12, 
                        [in, optional] VARIANT Arg13, 
                        [in, optional] VARIANT Arg14, 
                        [in, optional] VARIANT Arg15, 
                        [in, optional] VARIANT Arg16, 
                        [in, optional] VARIANT Arg17, 
                        [in, optional] VARIANT Arg18, 
                        [in, optional] VARIANT Arg19, 
                        [in, optional] VARIANT Arg20, 
                        [in, optional] VARIANT Arg21, 
                        [in, optional] VARIANT Arg22, 
                        [in, optional] VARIANT Arg23, 
                        [in, optional] VARIANT Arg24, 
                        [in, optional] VARIANT Arg25, 
                        [in, optional] VARIANT Arg26, 
                        [in, optional] VARIANT Arg27, 
                        [in, optional] VARIANT Arg28, 
                        [in, optional] VARIANT Arg29, 
                        [in, optional] VARIANT Arg30, 
                        [out, retval] VARIANT_BOOL* RHS);
    };

    [
      odl,
      uuid(0002087B-0001-0000-C000-000000000046),
      helpcontext(0x0002003b),
      hidden
    ]
    interface ISoundNote : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x00010395)]
        HRESULT _stdcall Import(
                        [in] BSTR Filename, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010396)]
        HRESULT _stdcall Play([out, retval] VARIANT* RHS);
        [helpcontext(0x00010397)]
        HRESULT _stdcall Record([out, retval] VARIANT* RHS);
    };

    [
      odl,
      uuid(0002087D-0001-0000-C000-000000000046),
      helpcontext(0x0002003d),
      hidden
    ]
    interface IButton : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([in] VARIANT RHS);
        [propget, helpcontext(0x0001035a)]
        HRESULT _stdcall CancelButton([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001035a)]
        HRESULT _stdcall CancelButton([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010359)]
        HRESULT _stdcall DefaultButton([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010359)]
        HRESULT _stdcall DefaultButton([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001035b)]
        HRESULT _stdcall DismissButton([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001035b)]
        HRESULT _stdcall DismissButton([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001035c)]
        HRESULT _stdcall HelpButton([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001035c)]
        HRESULT _stdcall HelpButton([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([in] VARIANT RHS);
    };

    [
      odl,
      uuid(0002087E-0001-0000-C000-000000000046),
      helpcontext(0x0002003e),
      hidden
    ]
    interface IButtons : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([in] VARIANT RHS);
        [propget, helpcontext(0x0001035a)]
        HRESULT _stdcall CancelButton([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001035a)]
        HRESULT _stdcall CancelButton([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010359)]
        HRESULT _stdcall DefaultButton([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010359)]
        HRESULT _stdcall DefaultButton([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001035b)]
        HRESULT _stdcall DismissButton([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001035b)]
        HRESULT _stdcall DismissButton([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001035c)]
        HRESULT _stdcall HelpButton([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001035c)]
        HRESULT _stdcall HelpButton([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([in] VARIANT RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double Left, 
                        [in] double Top, 
                        [in] double Width, 
                        [in] double Height, 
                        [out, retval] Button** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(0002087F-0001-0000-C000-000000000046),
      helpcontext(0x0002003f),
      hidden
    ]
    interface ICheckBox : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([in] VARIANT RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] long* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] long RHS);
        [propget, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([in] BSTR RHS);
        [propget, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([in] VARIANT RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] VARIANT RHS);
    };

    [
      odl,
      uuid(00020880-0001-0000-C000-000000000046),
      helpcontext(0x00020040),
      hidden
    ]
    interface ICheckBoxes : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([in] VARIANT RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] long* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] long RHS);
        [propget, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([in] BSTR RHS);
        [propget, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([in] VARIANT RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] VARIANT RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double Left, 
                        [in] double Top, 
                        [in] double Width, 
                        [in] double Height, 
                        [out, retval] CheckBox** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00020881-0001-0000-C000-000000000046),
      helpcontext(0x00020041),
      hidden
    ]
    interface IOptionButton : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([in] VARIANT RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] long* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] long RHS);
        [propget, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([in] BSTR RHS);
        [propget, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([in] VARIANT RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] VARIANT RHS);
        [propget, helpcontext(0x00010341)]
        HRESULT _stdcall GroupBox([out, retval] GroupBox** RHS);
    };

    [
      odl,
      uuid(00020882-0001-0000-C000-000000000046),
      helpcontext(0x00020042),
      hidden
    ]
    interface IOptionButtons : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([in] VARIANT RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] long* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] long RHS);
        [propget, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([in] BSTR RHS);
        [propget, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([in] VARIANT RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] VARIANT RHS);
        [propget, helpcontext(0x00010341)]
        HRESULT _stdcall GroupBox([out, retval] GroupBox** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double Left, 
                        [in] double Top, 
                        [in] double Width, 
                        [in] double Height, 
                        [out, retval] OptionButton** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00020883-0001-0000-C000-000000000046),
      helpcontext(0x00020043),
      hidden
    ]
    interface IEditBox : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x0001039a)]
        HRESULT _stdcall DisplayVerticalScrollBar([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001039a)]
        HRESULT _stdcall DisplayVerticalScrollBar([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010356)]
        HRESULT _stdcall InputType([out, retval] long* RHS);
        [propput, helpcontext(0x00010356)]
        HRESULT _stdcall InputType([in] long RHS);
        [propget, helpcontext(0x0001035e)]
        HRESULT _stdcall LinkedObject([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010357)]
        HRESULT _stdcall MultiLine([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010357)]
        HRESULT _stdcall MultiLine([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001048a)]
        HRESULT _stdcall PasswordEdit([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001048a)]
        HRESULT _stdcall PasswordEdit([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(00020884-0001-0000-C000-000000000046),
      helpcontext(0x00020044),
      hidden
    ]
    interface IEditBoxes : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x0001039a)]
        HRESULT _stdcall DisplayVerticalScrollBar([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001039a)]
        HRESULT _stdcall DisplayVerticalScrollBar([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010356)]
        HRESULT _stdcall InputType([out, retval] long* RHS);
        [propput, helpcontext(0x00010356)]
        HRESULT _stdcall InputType([in] long RHS);
        [restricted, hidden]
        void _stdcall _Dummy34();
        [propget, helpcontext(0x00010357)]
        HRESULT _stdcall MultiLine([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010357)]
        HRESULT _stdcall MultiLine([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001048a)]
        HRESULT _stdcall PasswordEdit([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001048a)]
        HRESULT _stdcall PasswordEdit([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double Left, 
                        [in] double Top, 
                        [in] double Width, 
                        [in] double Height, 
                        [out, retval] EditBox** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00020885-0001-0000-C000-000000000046),
      helpcontext(0x00020045),
      hidden
    ]
    interface IScrollBar : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] long* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] long RHS);
        [propget, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([in] BSTR RHS);
        [propget, helpcontext(0x0001034a)]
        HRESULT _stdcall Max([out, retval] long* RHS);
        [propput, helpcontext(0x0001034a)]
        HRESULT _stdcall Max([in] long RHS);
        [propget, helpcontext(0x0001034b)]
        HRESULT _stdcall Min([out, retval] long* RHS);
        [propput, helpcontext(0x0001034b)]
        HRESULT _stdcall Min([in] long RHS);
        [propget, helpcontext(0x0001034c)]
        HRESULT _stdcall SmallChange([out, retval] long* RHS);
        [propput, helpcontext(0x0001034c)]
        HRESULT _stdcall SmallChange([in] long RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] long* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] long RHS);
        [propget, helpcontext(0x0001034d)]
        HRESULT _stdcall LargeChange([out, retval] long* RHS);
        [propput, helpcontext(0x0001034d)]
        HRESULT _stdcall LargeChange([in] long RHS);
    };

    [
      odl,
      uuid(00020886-0001-0000-C000-000000000046),
      helpcontext(0x00020046),
      hidden
    ]
    interface IScrollBars : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] long* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] long RHS);
        [propget, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([in] BSTR RHS);
        [propget, helpcontext(0x0001034a)]
        HRESULT _stdcall Max([out, retval] long* RHS);
        [propput, helpcontext(0x0001034a)]
        HRESULT _stdcall Max([in] long RHS);
        [propget, helpcontext(0x0001034b)]
        HRESULT _stdcall Min([out, retval] long* RHS);
        [propput, helpcontext(0x0001034b)]
        HRESULT _stdcall Min([in] long RHS);
        [propget, helpcontext(0x0001034c)]
        HRESULT _stdcall SmallChange([out, retval] long* RHS);
        [propput, helpcontext(0x0001034c)]
        HRESULT _stdcall SmallChange([in] long RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] long* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] long RHS);
        [propget, helpcontext(0x0001034d)]
        HRESULT _stdcall LargeChange([out, retval] long* RHS);
        [propput, helpcontext(0x0001034d)]
        HRESULT _stdcall LargeChange([in] long RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double Left, 
                        [in] double Top, 
                        [in] double Width, 
                        [in] double Height, 
                        [out, retval] ScrollBar** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00020887-0001-0000-C000-000000000046),
      helpcontext(0x00020047),
      hidden
    ]
    interface IListBox : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [helpcontext(0x00010353)]
        HRESULT _stdcall AddItem(
                        [in] VARIANT Text, 
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] long* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] long RHS);
        [propget, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([in] BSTR RHS);
        [propget, helpcontext(0x0001035e)]
        HRESULT _stdcall LinkedObject([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001035d)]
        HRESULT _stdcall List(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001035d)]
        HRESULT _stdcall List(
                        [in, optional] VARIANT Index, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x00010351)]
        HRESULT _stdcall ListCount([out, retval] long* RHS);
        [propget, helpcontext(0x0001034f)]
        HRESULT _stdcall ListFillRange([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001034f)]
        HRESULT _stdcall ListFillRange([in] BSTR RHS);
        [propget, helpcontext(0x00010352)]
        HRESULT _stdcall ListIndex([out, retval] long* RHS);
        [propput, helpcontext(0x00010352)]
        HRESULT _stdcall ListIndex([in] long RHS);
        [propget, helpcontext(0x00010020)]
        HRESULT _stdcall MultiSelect([out, retval] long* RHS);
        [propput, helpcontext(0x00010020)]
        HRESULT _stdcall MultiSelect([in] long RHS);
        [helpcontext(0x00010355)]
        HRESULT _stdcall RemoveAllItems([out, retval] VARIANT* RHS);
        [helpcontext(0x00010354)]
        HRESULT _stdcall RemoveItem(
                        [in] long Index, 
                        [in, optional] VARIANT Count, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010463)]
        HRESULT _stdcall Selected(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010463)]
        HRESULT _stdcall Selected(
                        [in, optional] VARIANT Index, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] long* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] long RHS);
    };

    [
      odl,
      uuid(00020888-0001-0000-C000-000000000046),
      helpcontext(0x00020048),
      hidden
    ]
    interface IListBoxes : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [helpcontext(0x00010353)]
        HRESULT _stdcall AddItem(
                        [in] VARIANT Text, 
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] long* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] long RHS);
        [propget, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([in] BSTR RHS);
        [restricted, hidden]
        void _stdcall _Dummy31();
        [propget, helpcontext(0x0001035d)]
        HRESULT _stdcall List(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001035d)]
        HRESULT _stdcall List(
                        [in, optional] VARIANT Index, 
                        [in] VARIANT RHS);
        [restricted, hidden]
        void _stdcall _Dummy33();
        [propget, helpcontext(0x0001034f)]
        HRESULT _stdcall ListFillRange([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001034f)]
        HRESULT _stdcall ListFillRange([in] BSTR RHS);
        [propget, helpcontext(0x00010352)]
        HRESULT _stdcall ListIndex([out, retval] long* RHS);
        [propput, helpcontext(0x00010352)]
        HRESULT _stdcall ListIndex([in] long RHS);
        [propget, helpcontext(0x00010020)]
        HRESULT _stdcall MultiSelect([out, retval] long* RHS);
        [propput, helpcontext(0x00010020)]
        HRESULT _stdcall MultiSelect([in] long RHS);
        [helpcontext(0x00010355)]
        HRESULT _stdcall RemoveAllItems([out, retval] VARIANT* RHS);
        [helpcontext(0x00010354)]
        HRESULT _stdcall RemoveItem(
                        [in] long Index, 
                        [in, optional] VARIANT Count, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010463)]
        HRESULT _stdcall Selected(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010463)]
        HRESULT _stdcall Selected(
                        [in, optional] VARIANT Index, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] long* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] long RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double Left, 
                        [in] double Top, 
                        [in] double Width, 
                        [in] double Height, 
                        [out, retval] ListBox** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00020889-0001-0000-C000-000000000046),
      helpcontext(0x00020049),
      hidden
    ]
    interface IGroupBox : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([in] VARIANT RHS);
        [propget, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([in] VARIANT RHS);
    };

    [
      odl,
      uuid(0002088A-0001-0000-C000-000000000046),
      helpcontext(0x0002004a),
      hidden
    ]
    interface IGroupBoxes : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([in] VARIANT RHS);
        [propget, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([in] VARIANT RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double Left, 
                        [in] double Top, 
                        [in] double Width, 
                        [in] double Height, 
                        [out, retval] GroupBox** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(0002088B-0001-0000-C000-000000000046),
      helpcontext(0x0002004b),
      hidden
    ]
    interface IDropDown : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [helpcontext(0x00010353)]
        HRESULT _stdcall AddItem(
                        [in] VARIANT Text, 
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] long* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] long RHS);
        [propget, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([in] BSTR RHS);
        [propget, helpcontext(0x0001035e)]
        HRESULT _stdcall LinkedObject([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001035d)]
        HRESULT _stdcall List(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001035d)]
        HRESULT _stdcall List(
                        [in, optional] VARIANT Index, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x00010351)]
        HRESULT _stdcall ListCount([out, retval] long* RHS);
        [propget, helpcontext(0x0001034f)]
        HRESULT _stdcall ListFillRange([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001034f)]
        HRESULT _stdcall ListFillRange([in] BSTR RHS);
        [propget, helpcontext(0x00010352)]
        HRESULT _stdcall ListIndex([out, retval] long* RHS);
        [propput, helpcontext(0x00010352)]
        HRESULT _stdcall ListIndex([in] long RHS);
        [restricted, hidden]
        void _stdcall _Dummy36();
        [helpcontext(0x00010355)]
        HRESULT _stdcall RemoveAllItems([out, retval] VARIANT* RHS);
        [helpcontext(0x00010354)]
        HRESULT _stdcall RemoveItem(
                        [in] long Index, 
                        [in, optional] VARIANT Count, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010463)]
        HRESULT _stdcall Selected(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010463)]
        HRESULT _stdcall Selected(
                        [in, optional] VARIANT Index, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] long* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] long RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [propget, helpcontext(0x00010350)]
        HRESULT _stdcall DropDownLines([out, retval] long* RHS);
        [propput, helpcontext(0x00010350)]
        HRESULT _stdcall DropDownLines([in] long RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
    };

    [
      odl,
      uuid(0002088C-0001-0000-C000-000000000046),
      helpcontext(0x0002004c),
      hidden
    ]
    interface IDropDowns : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [helpcontext(0x00010353)]
        HRESULT _stdcall AddItem(
                        [in] VARIANT Text, 
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] long* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] long RHS);
        [propget, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([in] BSTR RHS);
        [restricted, hidden]
        void _stdcall _Dummy31();
        [propget, helpcontext(0x0001035d)]
        HRESULT _stdcall List(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001035d)]
        HRESULT _stdcall List(
                        [in, optional] VARIANT Index, 
                        [in] VARIANT RHS);
        [restricted, hidden]
        void _stdcall _Dummy33();
        [propget, helpcontext(0x0001034f)]
        HRESULT _stdcall ListFillRange([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001034f)]
        HRESULT _stdcall ListFillRange([in] BSTR RHS);
        [propget, helpcontext(0x00010352)]
        HRESULT _stdcall ListIndex([out, retval] long* RHS);
        [propput, helpcontext(0x00010352)]
        HRESULT _stdcall ListIndex([in] long RHS);
        [restricted, hidden]
        void _stdcall _Dummy36();
        [helpcontext(0x00010355)]
        HRESULT _stdcall RemoveAllItems([out, retval] VARIANT* RHS);
        [helpcontext(0x00010354)]
        HRESULT _stdcall RemoveItem(
                        [in] long Index, 
                        [in, optional] VARIANT Count, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010463)]
        HRESULT _stdcall Selected(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010463)]
        HRESULT _stdcall Selected(
                        [in, optional] VARIANT Index, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] long* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] long RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [propget, helpcontext(0x00010350)]
        HRESULT _stdcall DropDownLines([out, retval] long* RHS);
        [propput, helpcontext(0x00010350)]
        HRESULT _stdcall DropDownLines([in] long RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double Left, 
                        [in] double Top, 
                        [in] double Width, 
                        [in] double Height, 
                        [in, optional] VARIANT Editable, 
                        [out, retval] DropDown** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(0002088D-0001-0000-C000-000000000046),
      helpcontext(0x0002004d),
      hidden
    ]
    interface ISpinner : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] long* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] long RHS);
        [propget, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([in] BSTR RHS);
        [propget, helpcontext(0x0001034a)]
        HRESULT _stdcall Max([out, retval] long* RHS);
        [propput, helpcontext(0x0001034a)]
        HRESULT _stdcall Max([in] long RHS);
        [propget, helpcontext(0x0001034b)]
        HRESULT _stdcall Min([out, retval] long* RHS);
        [propput, helpcontext(0x0001034b)]
        HRESULT _stdcall Min([in] long RHS);
        [propget, helpcontext(0x0001034c)]
        HRESULT _stdcall SmallChange([out, retval] long* RHS);
        [propput, helpcontext(0x0001034c)]
        HRESULT _stdcall SmallChange([in] long RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] long* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] long RHS);
    };

    [
      odl,
      uuid(0002088E-0001-0000-C000-000000000046),
      helpcontext(0x0002004e),
      hidden
    ]
    interface ISpinners : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] long* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] long RHS);
        [propget, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010462)]
        HRESULT _stdcall Display3DShading([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([in] BSTR RHS);
        [propget, helpcontext(0x0001034a)]
        HRESULT _stdcall Max([out, retval] long* RHS);
        [propput, helpcontext(0x0001034a)]
        HRESULT _stdcall Max([in] long RHS);
        [propget, helpcontext(0x0001034b)]
        HRESULT _stdcall Min([out, retval] long* RHS);
        [propput, helpcontext(0x0001034b)]
        HRESULT _stdcall Min([in] long RHS);
        [propget, helpcontext(0x0001034c)]
        HRESULT _stdcall SmallChange([out, retval] long* RHS);
        [propput, helpcontext(0x0001034c)]
        HRESULT _stdcall SmallChange([in] long RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] long* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] long RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double Left, 
                        [in] double Top, 
                        [in] double Width, 
                        [in] double Height, 
                        [out, retval] Spinner** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(0002088F-0001-0000-C000-000000000046),
      helpcontext(0x0002004f),
      hidden
    ]
    interface IDialogFrame : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [restricted, hidden]
        void _stdcall _Dummy4();
        [restricted, hidden]
        void _stdcall _Dummy5();
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [restricted, hidden]
        void _stdcall _Dummy7();
        [restricted, hidden]
        void _stdcall _Dummy8();
        [restricted, hidden]
        void _stdcall _Dummy9();
        [restricted, hidden]
        void _stdcall _Dummy10();
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [restricted, hidden]
        void _stdcall _Dummy17();
        [restricted, hidden]
        void _stdcall _Dummy18();
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [restricted, hidden]
        void _stdcall _Dummy20();
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [restricted, hidden]
        void _stdcall _Dummy23();
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy25();
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
    };

    [
      odl,
      uuid(00020890-0001-0000-C000-000000000046),
      helpcontext(0x00020050),
      hidden
    ]
    interface ILabel : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([in] VARIANT RHS);
        [restricted, hidden]
        void _stdcall _Dummy33();
        [propget, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([in] VARIANT RHS);
    };

    [
      odl,
      uuid(00020891-0001-0000-C000-000000000046),
      helpcontext(0x00020051),
      hidden
    ]
    interface ILabels : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001034e)]
        HRESULT _stdcall Accelerator([in] VARIANT RHS);
        [restricted, hidden]
        void _stdcall _Dummy33();
        [propget, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010461)]
        HRESULT _stdcall PhoneticAccelerator([in] VARIANT RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double Left, 
                        [in] double Top, 
                        [in] double Width, 
                        [in] double Height, 
                        [out, retval] Label** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00020894-0001-0000-C000-000000000046),
      helpcontext(0x00020054),
      hidden
    ]
    interface IPanes : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] long Index, 
                        [out, retval] Pane** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] long Index, 
                        [out, retval] Pane** RHS);
    };

    [
      odl,
      uuid(00020895-0001-0000-C000-000000000046),
      helpcontext(0x00020055),
      hidden
    ]
    interface IPane : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010130)]
        HRESULT _stdcall Activate([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [helpcontext(0x00010223)]
        HRESULT _stdcall LargeScroll(
                        [in, optional] VARIANT Down, 
                        [in, optional] VARIANT Up, 
                        [in, optional] VARIANT ToRight, 
                        [in, optional] VARIANT ToLeft, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001028e)]
        HRESULT _stdcall ScrollColumn([out, retval] long* RHS);
        [propput, helpcontext(0x0001028e)]
        HRESULT _stdcall ScrollColumn([in] long RHS);
        [propget, helpcontext(0x0001028f)]
        HRESULT _stdcall ScrollRow([out, retval] long* RHS);
        [propput, helpcontext(0x0001028f)]
        HRESULT _stdcall ScrollRow([in] long RHS);
        [helpcontext(0x00010224)]
        HRESULT _stdcall SmallScroll(
                        [in, optional] VARIANT Down, 
                        [in, optional] VARIANT Up, 
                        [in, optional] VARIANT ToRight, 
                        [in, optional] VARIANT ToLeft, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001045e)]
        HRESULT _stdcall VisibleRange([out, retval] Range** RHS);
        [helpcontext(0x000106f5)]
        HRESULT _stdcall ScrollIntoView(
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Width, 
                        [in] long Height, 
                        [in, optional] VARIANT Start);
        [helpcontext(0x000106f0)]
        HRESULT _stdcall PointsToScreenPixelsX(
                        [in] long Points, 
                        [out, retval] long* RHS);
        [helpcontext(0x000106f1)]
        HRESULT _stdcall PointsToScreenPixelsY(
                        [in] long Points, 
                        [out, retval] long* RHS);
    };

    [
      odl,
      uuid(00020896-0001-0000-C000-000000000046),
      helpcontext(0x00020056),
      hidden
    ]
    interface IScenarios : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR Name, 
                        [in] VARIANT ChangingCells, 
                        [in, optional] VARIANT Values, 
                        [in, optional] VARIANT Comment, 
                        [in, optional] VARIANT Locked, 
                        [in, optional] VARIANT Hidden, 
                        [out, retval] Scenario** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x00010391)]
        HRESULT _stdcall CreateSummary(
                        [in, optional, defaultvalue(1)] XlSummaryReportType ReportType, 
                        [in, optional] VARIANT ResultCells, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] Scenario** RHS);
        [helpcontext(0x00010234)]
        HRESULT _stdcall Merge(
                        [in] VARIANT Source, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00020897-0001-0000-C000-000000000046),
      helpcontext(0x00020057),
      hidden
    ]
    interface IScenario : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010390)]
        HRESULT _stdcall ChangeScenario(
                        [in] VARIANT ChangingCells, 
                        [in, optional] VARIANT Values, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001038f)]
        HRESULT _stdcall ChangingCells([out, retval] Range** RHS);
        [propget, helpcontext(0x0001038e)]
        HRESULT _stdcall Comment([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001038e)]
        HRESULT _stdcall Comment([in] BSTR RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001010c)]
        HRESULT _stdcall Hidden([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010c)]
        HRESULT _stdcall Hidden([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [helpcontext(0x000101f0)]
        HRESULT _stdcall Show([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100a4)]
        HRESULT _stdcall Values(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
    };

    [
      odl,
      uuid(00020898-0001-0000-C000-000000000046),
      helpcontext(0x00020058),
      hidden
    ]
    interface IGroupObject : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [restricted, hidden]
        void _stdcall _Dummy27();
        [restricted, hidden]
        void _stdcall _Dummy28();
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy30();
        [propget, helpcontext(0x00010263)]
        HRESULT _stdcall ArrowHeadLength([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010263)]
        HRESULT _stdcall ArrowHeadLength([in] VARIANT RHS);
        [propget, helpcontext(0x00010264)]
        HRESULT _stdcall ArrowHeadStyle([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010264)]
        HRESULT _stdcall ArrowHeadStyle([in] VARIANT RHS);
        [propget, helpcontext(0x00010265)]
        HRESULT _stdcall ArrowHeadWidth([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010265)]
        HRESULT _stdcall ArrowHeadWidth([in] VARIANT RHS);
        [propget, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [restricted, hidden]
        void _stdcall _Dummy36();
        [restricted, hidden]
        void _stdcall _Dummy37();
        [restricted, hidden]
        void _stdcall _Dummy38();
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] long* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] long RHS);
        [restricted, hidden]
        void _stdcall _Dummy41();
        [restricted, hidden]
        void _stdcall _Dummy42();
        [restricted, hidden]
        void _stdcall _Dummy43();
        [restricted, hidden]
        void _stdcall _Dummy44();
        [restricted, hidden]
        void _stdcall _Dummy45();
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [restricted, hidden]
        void _stdcall _Dummy47();
        [restricted, hidden]
        void _stdcall _Dummy48();
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [restricted, hidden]
        void _stdcall _Dummy50();
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [restricted, hidden]
        void _stdcall _Dummy52();
        [restricted, hidden]
        void _stdcall _Dummy53();
        [restricted, hidden]
        void _stdcall _Dummy54();
        [restricted, hidden]
        void _stdcall _Dummy55();
        [restricted, hidden]
        void _stdcall _Dummy56();
        [restricted, hidden]
        void _stdcall _Dummy57();
        [restricted, hidden]
        void _stdcall _Dummy58();
        [restricted, hidden]
        void _stdcall _Dummy59();
        [restricted, hidden]
        void _stdcall _Dummy60();
        [restricted, hidden]
        void _stdcall _Dummy61();
        [restricted, hidden]
        void _stdcall _Dummy62();
        [restricted, hidden]
        void _stdcall _Dummy63();
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [restricted, hidden]
        void _stdcall _Dummy65();
        [restricted, hidden]
        void _stdcall _Dummy66();
        [restricted, hidden]
        void _stdcall _Dummy67();
        [restricted, hidden]
        void _stdcall _Dummy68();
        [propget, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy70();
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy72();
        [restricted, hidden]
        void _stdcall _Dummy73();
        [helpcontext(0x000100f4)]
        HRESULT _stdcall Ungroup([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy75();
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [restricted, hidden]
        void _stdcall _Dummy77();
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
    };

    [
      odl,
      uuid(00020899-0001-0000-C000-000000000046),
      helpcontext(0x00020059),
      hidden
    ]
    interface IGroupObjects : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [restricted, hidden]
        void _stdcall _Dummy27();
        [restricted, hidden]
        void _stdcall _Dummy28();
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy30();
        [propget, helpcontext(0x00010263)]
        HRESULT _stdcall ArrowHeadLength([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010263)]
        HRESULT _stdcall ArrowHeadLength([in] VARIANT RHS);
        [propget, helpcontext(0x00010264)]
        HRESULT _stdcall ArrowHeadStyle([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010264)]
        HRESULT _stdcall ArrowHeadStyle([in] VARIANT RHS);
        [propget, helpcontext(0x00010265)]
        HRESULT _stdcall ArrowHeadWidth([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010265)]
        HRESULT _stdcall ArrowHeadWidth([in] VARIANT RHS);
        [propget, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [restricted, hidden]
        void _stdcall _Dummy36();
        [restricted, hidden]
        void _stdcall _Dummy37();
        [restricted, hidden]
        void _stdcall _Dummy38();
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] long* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] long RHS);
        [restricted, hidden]
        void _stdcall _Dummy41();
        [restricted, hidden]
        void _stdcall _Dummy42();
        [restricted, hidden]
        void _stdcall _Dummy43();
        [restricted, hidden]
        void _stdcall _Dummy44();
        [restricted, hidden]
        void _stdcall _Dummy45();
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [restricted, hidden]
        void _stdcall _Dummy47();
        [restricted, hidden]
        void _stdcall _Dummy48();
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [restricted, hidden]
        void _stdcall _Dummy50();
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [restricted, hidden]
        void _stdcall _Dummy52();
        [restricted, hidden]
        void _stdcall _Dummy53();
        [restricted, hidden]
        void _stdcall _Dummy54();
        [restricted, hidden]
        void _stdcall _Dummy55();
        [restricted, hidden]
        void _stdcall _Dummy56();
        [restricted, hidden]
        void _stdcall _Dummy57();
        [restricted, hidden]
        void _stdcall _Dummy58();
        [restricted, hidden]
        void _stdcall _Dummy59();
        [restricted, hidden]
        void _stdcall _Dummy60();
        [restricted, hidden]
        void _stdcall _Dummy61();
        [restricted, hidden]
        void _stdcall _Dummy62();
        [restricted, hidden]
        void _stdcall _Dummy63();
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [restricted, hidden]
        void _stdcall _Dummy65();
        [restricted, hidden]
        void _stdcall _Dummy66();
        [restricted, hidden]
        void _stdcall _Dummy67();
        [restricted, hidden]
        void _stdcall _Dummy68();
        [propget, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy70();
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy72();
        [restricted, hidden]
        void _stdcall _Dummy73();
        [helpcontext(0x000100f4)]
        HRESULT _stdcall Ungroup([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy75();
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [restricted, hidden]
        void _stdcall _Dummy77();
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(0002089A-0001-0000-C000-000000000046),
      helpcontext(0x0002005a),
      hidden
    ]
    interface ILine : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010263)]
        HRESULT _stdcall ArrowHeadLength([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010263)]
        HRESULT _stdcall ArrowHeadLength([in] VARIANT RHS);
        [propget, helpcontext(0x00010264)]
        HRESULT _stdcall ArrowHeadStyle([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010264)]
        HRESULT _stdcall ArrowHeadStyle([in] VARIANT RHS);
        [propget, helpcontext(0x00010265)]
        HRESULT _stdcall ArrowHeadWidth([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010265)]
        HRESULT _stdcall ArrowHeadWidth([in] VARIANT RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
    };

    [
      odl,
      uuid(0002089B-0001-0000-C000-000000000046),
      helpcontext(0x0002005b),
      hidden
    ]
    interface ILines : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010263)]
        HRESULT _stdcall ArrowHeadLength([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010263)]
        HRESULT _stdcall ArrowHeadLength([in] VARIANT RHS);
        [propget, helpcontext(0x00010264)]
        HRESULT _stdcall ArrowHeadStyle([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010264)]
        HRESULT _stdcall ArrowHeadStyle([in] VARIANT RHS);
        [propget, helpcontext(0x00010265)]
        HRESULT _stdcall ArrowHeadWidth([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010265)]
        HRESULT _stdcall ArrowHeadWidth([in] VARIANT RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double X1, 
                        [in] double Y1, 
                        [in] double X2, 
                        [in] double Y2, 
                        [out, retval] Line** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(0002089C-0001-0000-C000-000000000046),
      helpcontext(0x0002005c),
      hidden
    ]
    interface IRectangle : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(0002089D-0001-0000-C000-000000000046),
      helpcontext(0x0002005d),
      hidden
    ]
    interface IRectangles : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double Left, 
                        [in] double Top, 
                        [in] double Width, 
                        [in] double Height, 
                        [out, retval] Rectangle** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(0002089E-0001-0000-C000-000000000046),
      helpcontext(0x0002005e),
      hidden
    ]
    interface IOval : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(0002089F-0001-0000-C000-000000000046),
      helpcontext(0x0002005f),
      hidden
    ]
    interface IOvals : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double Left, 
                        [in] double Top, 
                        [in] double Width, 
                        [in] double Height, 
                        [out, retval] Oval** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(000208A0-0001-0000-C000-000000000046),
      helpcontext(0x00020060),
      hidden
    ]
    interface IArc : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [restricted, hidden]
        void _stdcall _Dummy43();
    };

    [
      odl,
      uuid(000208A1-0001-0000-C000-000000000046),
      helpcontext(0x00020061),
      hidden
    ]
    interface IArcs : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [restricted, hidden]
        void _stdcall _Dummy43();
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double X1, 
                        [in] double Y1, 
                        [in] double X2, 
                        [in] double Y2, 
                        [out, retval] Arc** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00024410-0001-0000-C000-000000000046),
      helpcontext(0x000200a6),
      hidden
    ]
    interface IOLEObjectEvents : IDispatch {
        [helpcontext(0x00010605)]
        HRESULT _stdcall GotFocus();
        [helpcontext(0x00010606)]
        HRESULT _stdcall LostFocus();
    };

    [
      odl,
      uuid(000208A2-0001-0000-C000-000000000046),
      helpcontext(0x00020062),
      hidden
    ]
    interface _IOLEObject : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010130)]
        HRESULT _stdcall Activate([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000104a2)]
        HRESULT _stdcall AutoLoad([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000104a2)]
        HRESULT _stdcall AutoLoad([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010418)]
        HRESULT _stdcall AutoUpdate([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010418)]
        HRESULT _stdcall AutoUpdate([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010419)]
        HRESULT _stdcall Object([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001041e)]
        HRESULT _stdcall OLEType([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000102d1)]
        HRESULT _stdcall SourceName([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000102d1)]
        HRESULT _stdcall SourceName([in] BSTR RHS);
        [helpcontext(0x000102a8)]
        HRESULT _stdcall Update([out, retval] VARIANT* RHS);
        [helpcontext(0x0001025e)]
        HRESULT _stdcall Verb(
                        [in, optional, defaultvalue(1)] XlOLEVerb Verb, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([in] BSTR RHS);
        [propget, helpcontext(0x0001034f)]
        HRESULT _stdcall ListFillRange([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001034f)]
        HRESULT _stdcall ListFillRange([in] BSTR RHS);
        [propget, helpcontext(0x000105f3)]
        HRESULT _stdcall progID([out, retval] BSTR* RHS);
        [propget, hidden, helpcontext(0x0001073d)]
        HRESULT _stdcall AltHTML([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x0001073d)]
        HRESULT _stdcall AltHTML([in] BSTR RHS);
    };

    [
      odl,
      uuid(000208A3-0001-0000-C000-000000000046),
      helpcontext(0x00020063),
      hidden
    ]
    interface IOLEObjects : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy30();
        [propget, helpcontext(0x000104a2)]
        HRESULT _stdcall AutoLoad([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000104a2)]
        HRESULT _stdcall AutoLoad([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy32();
        [restricted, hidden]
        void _stdcall _Dummy33();
        [restricted, hidden]
        void _stdcall _Dummy34();
        [propget, helpcontext(0x000102d1)]
        HRESULT _stdcall SourceName([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000102d1)]
        HRESULT _stdcall SourceName([in] BSTR RHS);
        [restricted, hidden]
        void _stdcall _Dummy36();
        [restricted, hidden]
        void _stdcall _Dummy37();
        [restricted, hidden]
        void _stdcall _Dummy38();
        [restricted, hidden]
        void _stdcall _Dummy39();
        [restricted, hidden]
        void _stdcall _Dummy40();
        [restricted, hidden]
        void _stdcall _Dummy41();
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in, optional] VARIANT ClassType, 
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT Link, 
                        [in, optional] VARIANT DisplayAsIcon, 
                        [in, optional] VARIANT IconFileName, 
                        [in, optional] VARIANT IconIndex, 
                        [in, optional] VARIANT IconLabel, 
                        [in, optional] VARIANT Left, 
                        [in, optional] VARIANT Top, 
                        [in, optional] VARIANT Width, 
                        [in, optional] VARIANT Height, 
                        [out, retval] OLEObject** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [hidden, helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(000208A4-0001-0000-C000-000000000046),
      helpcontext(0x00020064),
      hidden
    ]
    interface ITextBox : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(000208A5-0001-0000-C000-000000000046),
      helpcontext(0x00020065),
      hidden
    ]
    interface ITextBoxes : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double Left, 
                        [in] double Top, 
                        [in] double Width, 
                        [in] double Height, 
                        [out, retval] TextBox** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(000208A6-0001-0000-C000-000000000046),
      helpcontext(0x00020066),
      hidden
    ]
    interface IPicture : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
    };

    [
      odl,
      uuid(000208A7-0001-0000-C000-000000000046),
      helpcontext(0x00020067),
      hidden
    ]
    interface IPictures : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double Left, 
                        [in] double Top, 
                        [in] double Width, 
                        [in] double Height, 
                        [out, retval] Picture** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100fc)]
        HRESULT _stdcall Insert(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT Converter, 
                        [out, retval] Picture** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x000100d3)]
        HRESULT _stdcall Paste(
                        [in, optional] VARIANT Link, 
                        [out, retval] Picture** RHS);
    };

    [
      odl,
      uuid(000208A8-0001-0000-C000-000000000046),
      helpcontext(0x00020068),
      hidden
    ]
    interface IDrawing : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010259)]
        HRESULT _stdcall AddVertex(
                        [in] double Left, 
                        [in] double Top, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025c)]
        HRESULT _stdcall Reshape(
                        [in] long Vertex, 
                        [in] VARIANT_BOOL Insert, 
                        [in, optional] VARIANT Left, 
                        [in, optional] VARIANT Top, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001026d)]
        HRESULT _stdcall Vertices(
                        [in, optional] VARIANT Index1, 
                        [in, optional] VARIANT Index2, 
                        [out, retval] VARIANT* RHS);
    };

    [
      odl,
      uuid(000208A9-0001-0000-C000-000000000046),
      helpcontext(0x00020069),
      hidden
    ]
    interface IDrawings : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy44();
        [helpcontext(0x0001025c)]
        HRESULT _stdcall Reshape(
                        [in] long Vertex, 
                        [in] VARIANT_BOOL Insert, 
                        [in, optional] VARIANT Left, 
                        [in, optional] VARIANT Top, 
                        [out, retval] VARIANT* RHS);
        [restricted, hidden]
        void _stdcall _Dummy46();
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double X1, 
                        [in] double Y1, 
                        [in] double X2, 
                        [in] double Y2, 
                        [in] VARIANT_BOOL Closed, 
                        [out, retval] Drawing** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(000208AA-0001-0000-C000-000000000046),
      helpcontext(0x0002006a),
      hidden
    ]
    interface IRoutingSlip : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000103bb)]
        HRESULT _stdcall Delivery([out, retval] XlRoutingSlipDelivery* RHS);
        [propput, helpcontext(0x000103bb)]
        HRESULT _stdcall Delivery([in] XlRoutingSlipDelivery RHS);
        [propget, helpcontext(0x000103ba)]
        HRESULT _stdcall Message([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103ba)]
        HRESULT _stdcall Message([in] VARIANT RHS);
        [propget, helpcontext(0x000103b8)]
        HRESULT _stdcall Recipients(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103b8)]
        HRESULT _stdcall Recipients(
                        [in, optional] VARIANT Index, 
                        [in] VARIANT RHS);
        [helpcontext(0x0001022b)]
        HRESULT _stdcall Reset([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000103bc)]
        HRESULT _stdcall ReturnWhenDone([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000103bc)]
        HRESULT _stdcall ReturnWhenDone([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000103be)]
        HRESULT _stdcall Status([out, retval] XlRoutingSlipStatus* RHS);
        [propget, helpcontext(0x000103b9)]
        HRESULT _stdcall Subject([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103b9)]
        HRESULT _stdcall Subject([in] VARIANT RHS);
        [propget, helpcontext(0x000103bd)]
        HRESULT _stdcall TrackStatus([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000103bd)]
        HRESULT _stdcall TrackStatus([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(000208AB-0001-0000-C000-000000000046),
      helpcontext(0x0002006b),
      hidden
    ]
    interface IOutline : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000103bf)]
        HRESULT _stdcall AutomaticStyles([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000103bf)]
        HRESULT _stdcall AutomaticStyles([in] VARIANT_BOOL RHS);
        [helpcontext(0x000103c0)]
        HRESULT _stdcall ShowLevels(
                        [in, optional] VARIANT RowLevels, 
                        [in, optional] VARIANT ColumnLevels, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000103c1)]
        HRESULT _stdcall SummaryColumn([out, retval] XlSummaryColumn* RHS);
        [propput, helpcontext(0x000103c1)]
        HRESULT _stdcall SummaryColumn([in] XlSummaryColumn RHS);
        [propget, helpcontext(0x00010386)]
        HRESULT _stdcall SummaryRow([out, retval] XlSummaryRow* RHS);
        [propput, helpcontext(0x00010386)]
        HRESULT _stdcall SummaryRow([in] XlSummaryRow RHS);
    };

    [
      odl,
      uuid(000208AD-0001-0000-C000-000000000046),
      helpcontext(0x0002006d),
      hidden
    ]
    interface IModule : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010130)]
        HRESULT _stdcall Activate([in, lcid] long lcid);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([in, lcid] long lcid);
        [propget, helpcontext(0x0001055d)]
        HRESULT _stdcall CodeName([out, retval] BSTR* RHS);
        [propget, helpcontext(0x80020000)]
        HRESULT _stdcall _CodeName([out, retval] BSTR* RHS);
        [propput, helpcontext(0x80020000)]
        HRESULT _stdcall _CodeName([in] BSTR RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [helpcontext(0x0001027d)]
        HRESULT _stdcall Move(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, helpcontext(0x000101f6)]
        HRESULT _stdcall Next([out, retval] IDispatch** RHS);
        [propget, hidden, helpcontext(0x00010274)]
        HRESULT _stdcall OnDoubleClick(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010274)]
        HRESULT _stdcall OnDoubleClick(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010407)]
        HRESULT _stdcall OnSheetActivate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010407)]
        HRESULT _stdcall OnSheetActivate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010439)]
        HRESULT _stdcall OnSheetDeactivate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010439)]
        HRESULT _stdcall OnSheetDeactivate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [propget, helpcontext(0x000103e6)]
        HRESULT _stdcall PageSetup([out, retval] PageSetup** RHS);
        [propget, helpcontext(0x000101f7)]
        HRESULT _stdcall Previous([out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x00010389),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, _PrintOut)]
        HRESULT _stdcall __PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, lcid] long lcid);
        [restricted, hidden]
        void _stdcall _Dummy18();
        [hidden, helpcontext(0x0001011a)]
        HRESULT _stdcall _Protect(
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT DrawingObjects, 
                        [in, optional] VARIANT Contents, 
                        [in, optional] VARIANT Scenarios, 
                        [in, optional] VARIANT UserInterfaceOnly, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x00010124)]
        HRESULT _stdcall ProtectContents(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [restricted, hidden]
        void _stdcall _Dummy21();
        [propget, helpcontext(0x00010487)]
        HRESULT _stdcall ProtectionMode(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [restricted, hidden]
        void _stdcall _Dummy23();
        [hidden, helpcontext(0x0001011c)]
        HRESULT _stdcall _SaveAs(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT FileFormat, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT ReadOnlyRecommended, 
                        [in, optional] VARIANT CreateBackup, 
                        [in, optional] VARIANT AddToMru, 
                        [in, optional] VARIANT TextCodepage, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, lcid] long lcid);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [in, lcid] long lcid);
        [helpcontext(0x0001011d)]
        HRESULT _stdcall Unprotect(
                        [in, optional] VARIANT Password, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible(
                        [in, lcid] long lcid, 
                        [out, retval] XlSheetVisibility* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible(
                        [in, lcid] long lcid, 
                        [in] XlSheetVisibility RHS);
        [propget, helpcontext(0x00010561)]
        HRESULT _stdcall Shapes([out, retval] Shapes** RHS);
        [helpcontext(0x00010248)]
        HRESULT _stdcall InsertFile(
                        [in] VARIANT Filename, 
                        [in, optional] VARIANT Merge, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010785)]
        HRESULT _stdcall SaveAs(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT FileFormat, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT ReadOnlyRecommended, 
                        [in, optional] VARIANT CreateBackup, 
                        [in, optional] VARIANT AddToMru, 
                        [in, optional] VARIANT TextCodepage, 
                        [in, optional] VARIANT TextVisualLayout);
        [helpcontext(0x000107ed)]
        HRESULT _stdcall Protect(
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT DrawingObjects, 
                        [in, optional] VARIANT Contents, 
                        [in, optional] VARIANT Scenarios, 
                        [in, optional] VARIANT UserInterfaceOnly);
        [hidden, helpcontext(0x000106ec)]
        HRESULT _stdcall _PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate);
        [helpcontext(0x00010939)]
        HRESULT _stdcall PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate);
    };

    [
      odl,
      uuid(000208AE-0001-0000-C000-000000000046),
      helpcontext(0x0002006e),
      hidden
    ]
    interface IModules : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, optional] VARIANT Count, 
                        [out, retval] Module** RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([in, lcid] long lcid);
        [restricted, hidden]
        void _stdcall _Dummy7();
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0001027d)]
        HRESULT _stdcall Move(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [hidden, helpcontext(0x00010389),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, _PrintOut)]
        HRESULT _stdcall __PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, lcid] long lcid);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x0001058a)]
        HRESULT _stdcall HPageBreaks([out, retval] HPageBreaks** RHS);
        [propget, helpcontext(0x0001058b)]
        HRESULT _stdcall VPageBreaks([out, retval] VPageBreaks** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible(
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x000106ec),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOut)]
        HRESULT _stdcall _PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, lcid] long lcid);
        [helpcontext(0x00010939)          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOutEx)]
        HRESULT _stdcall PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, optional] VARIANT IgnorePrintAreas, 
                        [in, lcid] long lcid);
    };

    [
      odl,
      uuid(000208AF-0001-0000-C000-000000000046),
      helpcontext(0x0002006f),
      hidden
    ]
    interface IDialogSheet : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010130)]
        HRESULT _stdcall Activate([in, lcid] long lcid);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([in, lcid] long lcid);
        [propget, helpcontext(0x0001055d)]
        HRESULT _stdcall CodeName([out, retval] BSTR* RHS);
        [propget, helpcontext(0x80020000)]
        HRESULT _stdcall _CodeName([out, retval] BSTR* RHS);
        [propput, helpcontext(0x80020000)]
        HRESULT _stdcall _CodeName([in] BSTR RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [helpcontext(0x0001027d)]
        HRESULT _stdcall Move(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, helpcontext(0x000101f6)]
        HRESULT _stdcall Next([out, retval] IDispatch** RHS);
        [propget, hidden, helpcontext(0x00010274)]
        HRESULT _stdcall OnDoubleClick(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010274)]
        HRESULT _stdcall OnDoubleClick(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010407)]
        HRESULT _stdcall OnSheetActivate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010407)]
        HRESULT _stdcall OnSheetActivate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010439)]
        HRESULT _stdcall OnSheetDeactivate(
                        [in, lcid] long lcid, 
                        [out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010439)]
        HRESULT _stdcall OnSheetDeactivate(
                        [in, lcid] long lcid, 
                        [in] BSTR RHS);
        [propget, helpcontext(0x000103e6)]
        HRESULT _stdcall PageSetup([out, retval] PageSetup** RHS);
        [propget, helpcontext(0x000101f7)]
        HRESULT _stdcall Previous([out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x00010389),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, _PrintOut)]
        HRESULT _stdcall __PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, lcid] long lcid);
        [helpcontext(0x00010119)]
        HRESULT _stdcall PrintPreview(
                        [in, optional] VARIANT EnableChanges, 
                        [in, lcid] long lcid);
        [hidden, helpcontext(0x0001011a)]
        HRESULT _stdcall _Protect(
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT DrawingObjects, 
                        [in, optional] VARIANT Contents, 
                        [in, optional] VARIANT Scenarios, 
                        [in, optional] VARIANT UserInterfaceOnly, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x00010124)]
        HRESULT _stdcall ProtectContents(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010125)]
        HRESULT _stdcall ProtectDrawingObjects(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010487)]
        HRESULT _stdcall ProtectionMode(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010126)]
        HRESULT _stdcall ProtectScenarios(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [hidden, helpcontext(0x0001011c)]
        HRESULT _stdcall _SaveAs(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT FileFormat, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT ReadOnlyRecommended, 
                        [in, optional] VARIANT CreateBackup, 
                        [in, optional] VARIANT AddToMru, 
                        [in, optional] VARIANT TextCodepage, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, lcid] long lcid);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [in, lcid] long lcid);
        [helpcontext(0x0001011d)]
        HRESULT _stdcall Unprotect(
                        [in, optional] VARIANT Password, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible(
                        [in, lcid] long lcid, 
                        [out, retval] XlSheetVisibility* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible(
                        [in, lcid] long lcid, 
                        [in] XlSheetVisibility RHS);
        [propget, helpcontext(0x00010561)]
        HRESULT _stdcall Shapes([out, retval] Shapes** RHS);
        [restricted, hidden]
        void _stdcall _Dummy29();
        [hidden, helpcontext(0x000102f8)]
        HRESULT _stdcall Arcs(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy31();
        [restricted, hidden]
        void _stdcall _Dummy32();
        [hidden, helpcontext(0x0001022d)]
        HRESULT _stdcall Buttons(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy34();
        [propget, helpcontext(0x00010590)]
        HRESULT _stdcall EnableCalculation([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010590)]
        HRESULT _stdcall EnableCalculation([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy36();
        [helpcontext(0x00010424)]
        HRESULT _stdcall ChartObjects(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x00010338)]
        HRESULT _stdcall CheckBoxes(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x000101f9)]
        HRESULT _stdcall CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [in, lcid] long lcid);
        [restricted, hidden]
        void _stdcall _Dummy40();
        [restricted, hidden]
        void _stdcall _Dummy41();
        [restricted, hidden]
        void _stdcall _Dummy42();
        [restricted, hidden]
        void _stdcall _Dummy43();
        [restricted, hidden]
        void _stdcall _Dummy44();
        [restricted, hidden]
        void _stdcall _Dummy45();
        [propget, hidden, helpcontext(0x00010283)]
        HRESULT _stdcall DisplayAutomaticPageBreaks(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [propput, hidden, helpcontext(0x00010283)]
        HRESULT _stdcall DisplayAutomaticPageBreaks(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [hidden, helpcontext(0x00010304)]
        HRESULT _stdcall Drawings(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x00010058)]
        HRESULT _stdcall DrawingObjects(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x00010344)]
        HRESULT _stdcall DropDowns(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010484)]
        HRESULT _stdcall EnableAutoFilter(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010484)]
        HRESULT _stdcall EnableAutoFilter(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010591)]
        HRESULT _stdcall EnableSelection([out, retval] XlEnableSelection* RHS);
        [propput, helpcontext(0x00010591)]
        HRESULT _stdcall EnableSelection([in] XlEnableSelection RHS);
        [propget, helpcontext(0x00010485)]
        HRESULT _stdcall EnableOutlining(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010485)]
        HRESULT _stdcall EnableOutlining(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010486)]
        HRESULT _stdcall EnablePivotTable(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010486)]
        HRESULT _stdcall EnablePivotTable(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [helpcontext(0x00010001)]
        HRESULT _stdcall Evaluate(
                        [in] VARIANT Name, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0000fffb)]
        HRESULT _stdcall _Evaluate(
                        [in] VARIANT Name, 
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [restricted, hidden]
        void _stdcall _Dummy56();
        [helpcontext(0x00010592)]
        HRESULT _stdcall ResetAllPageBreaks();
        [hidden, helpcontext(0x00010342)]
        HRESULT _stdcall GroupBoxes(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x00010459)]
        HRESULT _stdcall GroupObjects(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x00010349)]
        HRESULT _stdcall Labels(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x000102ff)]
        HRESULT _stdcall Lines(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x00010340)]
        HRESULT _stdcall ListBoxes(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000101ba)]
        HRESULT _stdcall Names([out, retval] Names** RHS);
        [helpcontext(0x0001031f)]
        HRESULT _stdcall OLEObjects(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy65();
        [restricted, hidden]
        void _stdcall _Dummy66();
        [restricted, hidden]
        void _stdcall _Dummy67();
        [hidden, helpcontext(0x0001033a)]
        HRESULT _stdcall OptionButtons(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy69();
        [hidden, helpcontext(0x00010321)]
        HRESULT _stdcall Ovals(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x000100d3)]
        HRESULT _stdcall Paste(
                        [in, optional] VARIANT Destination, 
                        [in, optional] VARIANT Link, 
                        [in, lcid] long lcid);
        [hidden, helpcontext(0x00010403)]
        HRESULT _stdcall _PasteSpecial(
                        [in, optional] VARIANT Format, 
                        [in, optional] VARIANT Link, 
                        [in, optional] VARIANT DisplayAsIcon, 
                        [in, optional] VARIANT IconFileName, 
                        [in, optional] VARIANT IconIndex, 
                        [in, optional] VARIANT IconLabel, 
                        [in, lcid] long lcid);
        [hidden, helpcontext(0x00010303)]
        HRESULT _stdcall Pictures(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy74();
        [restricted, hidden]
        void _stdcall _Dummy75();
        [restricted, hidden]
        void _stdcall _Dummy76();
        [hidden, helpcontext(0x00010306)]
        HRESULT _stdcall Rectangles(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy78();
        [restricted, hidden]
        void _stdcall _Dummy79();
        [propget, helpcontext(0x00010599)]
        HRESULT _stdcall ScrollArea([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010599)]
        HRESULT _stdcall ScrollArea([in] BSTR RHS);
        [hidden, helpcontext(0x0001033e)]
        HRESULT _stdcall ScrollBars(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy82();
        [restricted, hidden]
        void _stdcall _Dummy83();
        [hidden, helpcontext(0x00010346)]
        HRESULT _stdcall Spinners(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy85();
        [restricted, hidden]
        void _stdcall _Dummy86();
        [hidden, helpcontext(0x00010309)]
        HRESULT _stdcall TextBoxes(
                        [in, optional] VARIANT Index, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy88();
        [restricted, hidden]
        void _stdcall _Dummy89();
        [restricted, hidden]
        void _stdcall _Dummy90();
        [propget, helpcontext(0x0001058a)]
        HRESULT _stdcall HPageBreaks([out, retval] HPageBreaks** RHS);
        [propget, helpcontext(0x0001058b)]
        HRESULT _stdcall VPageBreaks([out, retval] VPageBreaks** RHS);
        [propget, helpcontext(0x0001059a)]
        HRESULT _stdcall QueryTables([out, retval] QueryTables** RHS);
        [propget, helpcontext(0x0001059b)]
        HRESULT _stdcall DisplayPageBreaks([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001059b)]
        HRESULT _stdcall DisplayPageBreaks([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001023f)]
        HRESULT _stdcall Comments([out, retval] Comments** RHS);
        [propget, helpcontext(0x00010571)]
        HRESULT _stdcall Hyperlinks([out, retval] Hyperlinks** RHS);
        [helpcontext(0x0001059c)]
        HRESULT _stdcall ClearCircles();
        [helpcontext(0x0001059d)]
        HRESULT _stdcall CircleInvalid();
        [propget, hidden, helpcontext(0x00010288)]
        HRESULT _stdcall _DisplayRightToLeft(
                        [in, lcid] long lcid, 
                        [out, retval] long* RHS);
        [propput, hidden, helpcontext(0x00010288)]
        HRESULT _stdcall _DisplayRightToLeft(
                        [in, lcid] long lcid, 
                        [in] long RHS);
        [propget, helpcontext(0x00010319)]
        HRESULT _stdcall AutoFilter([out, retval] AutoFilter** RHS);
        [propget, helpcontext(0x000106ee)]
        HRESULT _stdcall DisplayRightToLeft(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000106ee)]
        HRESULT _stdcall DisplayRightToLeft(
                        [in, lcid] long lcid, 
                        [in] VARIANT_BOOL RHS);
        [propget, hidden, helpcontext(0x00010718)]
        HRESULT _stdcall Scripts([out, retval] Scripts** RHS);
        [hidden, helpcontext(0x000106ec),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOut)]
        HRESULT _stdcall _PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, lcid] long lcid);
        [hidden, helpcontext(0x00010719)]
        HRESULT _stdcall _CheckSpelling(
                        [in, optional] VARIANT CustomDictionary, 
                        [in, optional] VARIANT IgnoreUppercase, 
                        [in, optional] VARIANT AlwaysSuggest, 
                        [in, optional] VARIANT SpellLang, 
                        [in, optional] VARIANT IgnoreFinalYaa, 
                        [in, optional] VARIANT SpellScript, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x00010411)]
        HRESULT _stdcall Tab([out, retval] Tab** RHS);
        [propget, helpcontext(0x000107e5)]
        HRESULT _stdcall MailEnvelope([out, retval] MsoEnvelope** RHS);
        [helpcontext(0x00010785)]
        HRESULT _stdcall SaveAs(
                        [in] BSTR Filename, 
                        [in, optional] VARIANT FileFormat, 
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT WriteResPassword, 
                        [in, optional] VARIANT ReadOnlyRecommended, 
                        [in, optional] VARIANT CreateBackup, 
                        [in, optional] VARIANT AddToMru, 
                        [in, optional] VARIANT TextCodepage, 
                        [in, optional] VARIANT TextVisualLayout, 
                        [in, optional] VARIANT Local);
        [propget, helpcontext(0x000107ee)]
        HRESULT _stdcall CustomProperties([out, retval] CustomProperties** RHS);
        [propget, helpcontext(0x000107e0)]
        HRESULT _stdcall SmartTags([out, retval] SmartTags** RHS);
        [propget, helpcontext(0x000100b0)]
        HRESULT _stdcall Protection([out, retval] Protection** RHS);
        [helpcontext(0x00010788)]
        HRESULT _stdcall PasteSpecial(
                        [in, optional] VARIANT Format, 
                        [in, optional] VARIANT Link, 
                        [in, optional] VARIANT DisplayAsIcon, 
                        [in, optional] VARIANT IconFileName, 
                        [in, optional] VARIANT IconIndex, 
                        [in, optional] VARIANT IconLabel, 
                        [in, optional] VARIANT NoHTMLFormatting, 
                        [in, lcid] long lcid);
        [helpcontext(0x000107ed)]
        HRESULT _stdcall Protect(
                        [in, optional] VARIANT Password, 
                        [in, optional] VARIANT DrawingObjects, 
                        [in, optional] VARIANT Contents, 
                        [in, optional] VARIANT Scenarios, 
                        [in, optional] VARIANT UserInterfaceOnly, 
                        [in, optional] VARIANT AllowFormattingCells, 
                        [in, optional] VARIANT AllowFormattingColumns, 
                        [in, optional] VARIANT AllowFormattingRows, 
                        [in, optional] VARIANT AllowInsertingColumns, 
                        [in, optional] VARIANT AllowInsertingRows, 
                        [in, optional] VARIANT AllowInsertingHyperlinks, 
                        [in, optional] VARIANT AllowDeletingColumns, 
                        [in, optional] VARIANT AllowDeletingRows, 
                        [in, optional] VARIANT AllowSorting, 
                        [in, optional] VARIANT AllowFiltering, 
                        [in, optional] VARIANT AllowUsingPivotTables);
        [restricted, hidden]
        void _stdcall _Dummy113();
        [restricted, hidden]
        void _stdcall _Dummy114();
        [restricted, hidden]
        void _stdcall _Dummy115();
        [helpcontext(0x00010939)          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOutEx)]
        HRESULT _stdcall PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName);
        [propget, helpcontext(0x000109cf)]
        HRESULT _stdcall EnableFormatConditionsCalculation([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000109cf)]
        HRESULT _stdcall EnableFormatConditionsCalculation([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010370)]
        HRESULT _stdcall Sort([out, retval] Sort** RHS);
        [helpcontext(0x000109bd)]
        HRESULT _stdcall ExportAsFixedFormat(
                        [in] XlFixedFormatType Type, 
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT Quality, 
                        [in, optional] VARIANT IncludeDocProperties, 
                        [in, optional] VARIANT IgnorePrintAreas, 
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT OpenAfterPublish, 
                        [in, optional] VARIANT FixedFormatExtClassPtr);
        [propget, helpcontext(0x00010359)]
        HRESULT _stdcall DefaultButton([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010359)]
        HRESULT _stdcall DefaultButton([in] VARIANT RHS);
        [propget, hidden, helpcontext(0x00010347)]
        HRESULT _stdcall DialogFrame([out, retval] DialogFrame** RHS);
        [hidden, helpcontext(0x0001033c)]
        HRESULT _stdcall EditBoxes(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001032e)]
        HRESULT _stdcall Focus([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001032e)]
        HRESULT _stdcall Focus([in] VARIANT RHS);
        [helpcontext(0x0001032d)]
        HRESULT _stdcall Hide(
                        [in, optional] VARIANT Cancel, 
                        [out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x000101f0)]
        HRESULT _stdcall Show([out, retval] VARIANT_BOOL* RHS);
    };

    [
      odl,
      uuid(000208B0-0001-0000-C000-000000000046),
      helpcontext(0x00020070),
      hidden
    ]
    interface IDialogSheets : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, optional] VARIANT Count, 
                        [out, retval] DialogSheet** RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([in, lcid] long lcid);
        [restricted, hidden]
        void _stdcall _Dummy7();
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0001027d)]
        HRESULT _stdcall Move(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [hidden, helpcontext(0x00010389),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, _PrintOut)]
        HRESULT _stdcall __PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, lcid] long lcid);
        [helpcontext(0x00010119)]
        HRESULT _stdcall PrintPreview(
                        [in, optional] VARIANT EnableChanges, 
                        [in, lcid] long lcid);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x0001058a)]
        HRESULT _stdcall HPageBreaks([out, retval] HPageBreaks** RHS);
        [propget, helpcontext(0x0001058b)]
        HRESULT _stdcall VPageBreaks([out, retval] VPageBreaks** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible(
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x000106ec),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOut)]
        HRESULT _stdcall _PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, lcid] long lcid);
        [helpcontext(0x00010939)          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOutEx)]
        HRESULT _stdcall PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName);
    };

    [
      odl,
      uuid(000208B1-0001-0000-C000-000000000046),
      helpcontext(0x00020071),
      hidden
    ]
    interface IWorksheets : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, optional] VARIANT Count, 
                        [in, optional] VARIANT Type, 
                        [in, lcid] long lcid, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([in, lcid] long lcid);
        [helpcontext(0x000101d5)]
        HRESULT _stdcall FillAcrossSheets(
                        [in] Range* Range, 
                        [in, optional, defaultvalue(-4104)] XlFillWith Type, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0001027d)]
        HRESULT _stdcall Move(
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT After, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [hidden, helpcontext(0x00010389),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, _PrintOut)]
        HRESULT _stdcall __PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, lcid] long lcid);
        [helpcontext(0x00010119)]
        HRESULT _stdcall PrintPreview(
                        [in, optional] VARIANT EnableChanges, 
                        [in, lcid] long lcid);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [in, lcid] long lcid);
        [propget, helpcontext(0x0001058a)]
        HRESULT _stdcall HPageBreaks([out, retval] HPageBreaks** RHS);
        [propget, helpcontext(0x0001058b)]
        HRESULT _stdcall VPageBreaks([out, retval] VPageBreaks** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible(
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x000106ec),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOut)]
        HRESULT _stdcall _PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, lcid] long lcid);
        [helpcontext(0x00010939)          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOutEx)]
        HRESULT _stdcall PrintOut(
                        [in, optional] VARIANT From, 
                        [in, optional] VARIANT To, 
                        [in, optional] VARIANT Copies, 
                        [in, optional] VARIANT Preview, 
                        [in, optional] VARIANT ActivePrinter, 
                        [in, optional] VARIANT PrintToFile, 
                        [in, optional] VARIANT Collate, 
                        [in, optional] VARIANT PrToFileName, 
                        [in, optional] VARIANT IgnorePrintAreas, 
                        [in, lcid] long lcid);
    };

    [
      odl,
      uuid(000208B4-0001-0000-C000-000000000046),
      helpcontext(0x00020074),
      hidden
    ]
    interface IPageSetup : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000103f1)]
        HRESULT _stdcall BlackAndWhite([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000103f1)]
        HRESULT _stdcall BlackAndWhite([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000103ea)]
        HRESULT _stdcall BottomMargin([out, retval] double* RHS);
        [propput, helpcontext(0x000103ea)]
        HRESULT _stdcall BottomMargin([in] double RHS);
        [propget, helpcontext(0x000103f2)]
        HRESULT _stdcall CenterFooter([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103f2)]
        HRESULT _stdcall CenterFooter([in] BSTR RHS);
        [propget, helpcontext(0x000103f3)]
        HRESULT _stdcall CenterHeader([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103f3)]
        HRESULT _stdcall CenterHeader([in] BSTR RHS);
        [propget, helpcontext(0x000103ed)]
        HRESULT _stdcall CenterHorizontally([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000103ed)]
        HRESULT _stdcall CenterHorizontally([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000103ee)]
        HRESULT _stdcall CenterVertically([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000103ee)]
        HRESULT _stdcall CenterVertically([in] VARIANT_BOOL RHS);
        [propget, hidden, helpcontext(0x000103f4)]
        HRESULT _stdcall ChartSize([out, retval] XlObjectSize* RHS);
        [propput, hidden, helpcontext(0x000103f4)]
        HRESULT _stdcall ChartSize([in] XlObjectSize RHS);
        [propget, helpcontext(0x000103fc)]
        HRESULT _stdcall Draft([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000103fc)]
        HRESULT _stdcall Draft([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000103f0)]
        HRESULT _stdcall FirstPageNumber([out, retval] long* RHS);
        [propput, helpcontext(0x000103f0)]
        HRESULT _stdcall FirstPageNumber([in] long RHS);
        [propget, helpcontext(0x000103f5)]
        HRESULT _stdcall FitToPagesTall([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103f5)]
        HRESULT _stdcall FitToPagesTall([in] VARIANT RHS);
        [propget, helpcontext(0x000103f6)]
        HRESULT _stdcall FitToPagesWide([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103f6)]
        HRESULT _stdcall FitToPagesWide([in] VARIANT RHS);
        [propget, helpcontext(0x000103f7)]
        HRESULT _stdcall FooterMargin([out, retval] double* RHS);
        [propput, helpcontext(0x000103f7)]
        HRESULT _stdcall FooterMargin([in] double RHS);
        [propget, helpcontext(0x000103f8)]
        HRESULT _stdcall HeaderMargin([out, retval] double* RHS);
        [propput, helpcontext(0x000103f8)]
        HRESULT _stdcall HeaderMargin([in] double RHS);
        [propget, helpcontext(0x000103f9)]
        HRESULT _stdcall LeftFooter([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103f9)]
        HRESULT _stdcall LeftFooter([in] BSTR RHS);
        [propget, helpcontext(0x000103fa)]
        HRESULT _stdcall LeftHeader([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103fa)]
        HRESULT _stdcall LeftHeader([in] BSTR RHS);
        [propget, helpcontext(0x000103e7)]
        HRESULT _stdcall LeftMargin([out, retval] double* RHS);
        [propput, helpcontext(0x000103e7)]
        HRESULT _stdcall LeftMargin([in] double RHS);
        [propget, helpcontext(0x000100c0)]
        HRESULT _stdcall Order([out, retval] XlOrder* RHS);
        [propput, helpcontext(0x000100c0)]
        HRESULT _stdcall Order([in] XlOrder RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] XlPageOrientation* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] XlPageOrientation RHS);
        [propget, helpcontext(0x000103ef)]
        HRESULT _stdcall PaperSize([out, retval] XlPaperSize* RHS);
        [propput, helpcontext(0x000103ef)]
        HRESULT _stdcall PaperSize([in] XlPaperSize RHS);
        [propget, helpcontext(0x000103fb)]
        HRESULT _stdcall PrintArea([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103fb)]
        HRESULT _stdcall PrintArea([in] BSTR RHS);
        [propget, helpcontext(0x000103ec)]
        HRESULT _stdcall PrintGridlines([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000103ec)]
        HRESULT _stdcall PrintGridlines([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000103eb)]
        HRESULT _stdcall PrintHeadings([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000103eb)]
        HRESULT _stdcall PrintHeadings([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000103fd)]
        HRESULT _stdcall PrintNotes([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000103fd)]
        HRESULT _stdcall PrintNotes([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000103fe)]
        HRESULT _stdcall PrintQuality(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103fe)]
        HRESULT _stdcall PrintQuality(
                        [in, optional] VARIANT Index, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x000103ff)]
        HRESULT _stdcall PrintTitleColumns([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103ff)]
        HRESULT _stdcall PrintTitleColumns([in] BSTR RHS);
        [propget, helpcontext(0x00010400)]
        HRESULT _stdcall PrintTitleRows([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010400)]
        HRESULT _stdcall PrintTitleRows([in] BSTR RHS);
        [propget, helpcontext(0x00010401)]
        HRESULT _stdcall RightFooter([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010401)]
        HRESULT _stdcall RightFooter([in] BSTR RHS);
        [propget, helpcontext(0x00010402)]
        HRESULT _stdcall RightHeader([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010402)]
        HRESULT _stdcall RightHeader([in] BSTR RHS);
        [propget, helpcontext(0x000103e8)]
        HRESULT _stdcall RightMargin([out, retval] double* RHS);
        [propput, helpcontext(0x000103e8)]
        HRESULT _stdcall RightMargin([in] double RHS);
        [propget, helpcontext(0x000103e9)]
        HRESULT _stdcall TopMargin([out, retval] double* RHS);
        [propput, helpcontext(0x000103e9)]
        HRESULT _stdcall TopMargin([in] double RHS);
        [propget, helpcontext(0x00010297)]
        HRESULT _stdcall Zoom([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010297)]
        HRESULT _stdcall Zoom([in] VARIANT RHS);
        [propget, helpcontext(0x000105f4)]
        HRESULT _stdcall PrintComments([out, retval] XlPrintLocation* RHS);
        [propput, helpcontext(0x000105f4)]
        HRESULT _stdcall PrintComments([in] XlPrintLocation RHS);
        [propget, helpcontext(0x00010865)]
        HRESULT _stdcall PrintErrors([out, retval] XlPrintErrors* RHS);
        [propput, helpcontext(0x00010865)]
        HRESULT _stdcall PrintErrors([in] XlPrintErrors RHS);
        [propget, helpcontext(0x00010866)]
        HRESULT _stdcall CenterHeaderPicture([out, retval] Graphic** RHS);
        [propget, helpcontext(0x00010867)]
        HRESULT _stdcall CenterFooterPicture([out, retval] Graphic** RHS);
        [propget, helpcontext(0x00010868)]
        HRESULT _stdcall LeftHeaderPicture([out, retval] Graphic** RHS);
        [propget, helpcontext(0x00010869)]
        HRESULT _stdcall LeftFooterPicture([out, retval] Graphic** RHS);
        [propget, helpcontext(0x0001086a)]
        HRESULT _stdcall RightHeaderPicture([out, retval] Graphic** RHS);
        [propget, helpcontext(0x0001086b)]
        HRESULT _stdcall RightFooterPicture([out, retval] Graphic** RHS);
        [propget, helpcontext(0x00010a28)]
        HRESULT _stdcall OddAndEvenPagesHeaderFooter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a28)]
        HRESULT _stdcall OddAndEvenPagesHeaderFooter([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a29)]
        HRESULT _stdcall DifferentFirstPageHeaderFooter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a29)]
        HRESULT _stdcall DifferentFirstPageHeaderFooter([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a2a)]
        HRESULT _stdcall ScaleWithDocHeaderFooter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a2a)]
        HRESULT _stdcall ScaleWithDocHeaderFooter([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a2b)]
        HRESULT _stdcall AlignMarginsHeaderFooter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a2b)]
        HRESULT _stdcall AlignMarginsHeaderFooter([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a2c)]
        HRESULT _stdcall Pages([out, retval] Pages** RHS);
        [propget, helpcontext(0x00010a2d)]
        HRESULT _stdcall EvenPage([out, retval] Page** RHS);
        [propget, helpcontext(0x00010a2e)]
        HRESULT _stdcall FirstPage([out, retval] Page** RHS);
    };

    [
      odl,
      uuid(000208B8-0001-0000-C000-000000000046),
      helpcontext(0x00020078),
      hidden
    ]
    interface INames : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in, optional] VARIANT Name, 
                        [in, optional] VARIANT RefersTo, 
                        [in, optional] VARIANT Visible, 
                        [in, optional] VARIANT MacroType, 
                        [in, optional] VARIANT ShortcutKey, 
                        [in, optional] VARIANT Category, 
                        [in, optional] VARIANT NameLocal, 
                        [in, optional] VARIANT RefersToLocal, 
                        [in, optional] VARIANT CategoryLocal, 
                        [in, optional] VARIANT RefersToR1C1, 
                        [in, optional] VARIANT RefersToR1C1Local, 
                        [out, retval] Name** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in, optional] VARIANT Index, 
                        [in, optional] VARIANT IndexLocal, 
                        [in, optional] VARIANT RefersTo, 
                        [in, lcid] long lcid, 
                        [out, retval] Name** RHS);
        [helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in, optional] VARIANT Index, 
                        [in, optional] VARIANT IndexLocal, 
                        [in, optional] VARIANT RefersTo, 
                        [in, lcid] long lcid, 
                        [out, retval] Name** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(000208B9-0001-0000-C000-000000000046),
      helpcontext(0x00020079),
      hidden
    ]
    interface IName : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x000103a6)]
        HRESULT _stdcall Category(
                        [in, lcid] long lcidIn, 
                        [out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103a6)]
        HRESULT _stdcall Category(
                        [in, lcid] long lcidIn, 
                        [in] BSTR RHS);
        [propget, helpcontext(0x000103a7)]
        HRESULT _stdcall CategoryLocal([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103a7)]
        HRESULT _stdcall CategoryLocal([in] BSTR RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x000103a8)]
        HRESULT _stdcall MacroType([out, retval] XlXLMMacroType* RHS);
        [propput, helpcontext(0x000103a8)]
        HRESULT _stdcall MacroType([in] XlXLMMacroType RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name(
                        [in, lcid] long lcidIn, 
                        [out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name(
                        [in, lcid] long lcidIn, 
                        [in] BSTR RHS);
        [propget, helpcontext(0x000103aa)]
        HRESULT _stdcall RefersTo(
                        [in, lcid] long lcidIn, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103aa)]
        HRESULT _stdcall RefersTo(
                        [in, lcid] long lcidIn, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x00010255)]
        HRESULT _stdcall ShortcutKey([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010255)]
        HRESULT _stdcall ShortcutKey([in] BSTR RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] BSTR RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000103a9)]
        HRESULT _stdcall NameLocal([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103a9)]
        HRESULT _stdcall NameLocal([in] BSTR RHS);
        [propget, helpcontext(0x000103ab)]
        HRESULT _stdcall RefersToLocal([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103ab)]
        HRESULT _stdcall RefersToLocal([in] VARIANT RHS);
        [propget, helpcontext(0x000103ac)]
        HRESULT _stdcall RefersToR1C1(
                        [in, lcid] long lcidIn, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103ac)]
        HRESULT _stdcall RefersToR1C1(
                        [in, lcid] long lcidIn, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x000103ad)]
        HRESULT _stdcall RefersToR1C1Local([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103ad)]
        HRESULT _stdcall RefersToR1C1Local([in] VARIANT RHS);
        [propget, helpcontext(0x00010488)]
        HRESULT _stdcall RefersToRange([out, retval] Range** RHS);
        [propget, helpcontext(0x0001038e)]
        HRESULT _stdcall Comment([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001038e)]
        HRESULT _stdcall Comment([in] BSTR RHS);
        [propget, helpcontext(0x00010a2f)]
        HRESULT _stdcall WorkbookParameter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a2f)]
        HRESULT _stdcall WorkbookParameter([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a30)]
        HRESULT _stdcall ValidWorkbookParameter([out, retval] VARIANT_BOOL* RHS);
    };

    [
      odl,
      uuid(000208CF-0001-0000-C000-000000000046),
      helpcontext(0x0002008e),
      hidden
    ]
    interface IChartObject : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [hidden, helpcontext(0x00010a31)]
        HRESULT _stdcall _Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, hidden, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, hidden, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([out, retval] long* RHS);
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [helpcontext(0x00010130)]
        HRESULT _stdcall Activate([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010007)]
        HRESULT _stdcall Chart([out, retval] Chart** RHS);
        [propget, helpcontext(0x000105f9)]
        HRESULT _stdcall ProtectChartObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105f9)]
        HRESULT _stdcall ProtectChartObject([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([in] VARIANT_BOOL RHS);
        [propget, hidden, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, hidden, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
    };

    [
      odl,
      uuid(000208D0-0001-0000-C000-000000000046),
      helpcontext(0x0002008f),
      hidden
    ]
    interface IChartObjects : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [restricted, hidden]
        void _stdcall _Dummy3();
        [hidden, helpcontext(0x0001025a)]
        HRESULT _stdcall BringToFront([out, retval] VARIANT* RHS);
        [hidden, helpcontext(0x00010a31)]
        HRESULT _stdcall _Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                        [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] IDispatch** RHS);
        [propget, hidden, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, hidden, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy12();
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy15();
        [propget, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] VARIANT RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select(
                        [in, optional] VARIANT Replace, 
                        [out, retval] VARIANT* RHS);
        [hidden, helpcontext(0x0001025d)]
        HRESULT _stdcall SendToBack([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy22();
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [restricted, hidden]
        void _stdcall _Dummy25();
        [propget, helpcontext(0x000105f8)]
        HRESULT _stdcall ShapeRange([out, retval] ShapeRange** RHS);
        [restricted, hidden]
        void _stdcall _Dummy27();
        [restricted, hidden]
        void _stdcall _Dummy28();
        [propget, helpcontext(0x000105f9)]
        HRESULT _stdcall ProtectChartObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105f9)]
        HRESULT _stdcall ProtectChartObject([in] VARIANT_BOOL RHS);
        [propget, hidden, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([out, retval] VARIANT_BOOL* RHS);
        [propput, hidden, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([in] VARIANT_BOOL RHS);
        [propget, hidden, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, hidden, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, hidden, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, hidden, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double Left, 
                        [in] double Top, 
                        [in] double Width, 
                        [in] double Height, 
                        [out, retval] ChartObject** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [hidden, helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] GroupObject** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
    };

    [
      odl,
      uuid(000208D1-0001-0000-C000-000000000046),
      helpcontext(0x00020090),
      hidden
    ]
    interface IMailer : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000103d7)]
        HRESULT _stdcall BCCRecipients([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103d7)]
        HRESULT _stdcall BCCRecipients([in] VARIANT RHS);
        [propget, helpcontext(0x000103d6)]
        HRESULT _stdcall CCRecipients([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103d6)]
        HRESULT _stdcall CCRecipients([in] VARIANT RHS);
        [propget, helpcontext(0x000103d8)]
        HRESULT _stdcall Enclosures([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103d8)]
        HRESULT _stdcall Enclosures([in] VARIANT RHS);
        [propget, helpcontext(0x000103da)]
        HRESULT _stdcall Received([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000103db)]
        HRESULT _stdcall SendDateTime([out, retval] DATE* RHS);
        [propget, helpcontext(0x000103dc)]
        HRESULT _stdcall Sender([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000103b9)]
        HRESULT _stdcall Subject([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000103b9)]
        HRESULT _stdcall Subject([in] BSTR RHS);
        [propget, helpcontext(0x000103d5)]
        HRESULT _stdcall ToRecipients([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103d5)]
        HRESULT _stdcall ToRecipients([in] VARIANT RHS);
        [propget, helpcontext(0x000103ce)]
        HRESULT _stdcall WhichAddress([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000103ce)]
        HRESULT _stdcall WhichAddress([in] VARIANT RHS);
    };

    [
      odl,
      uuid(00024422-0001-0000-C000-000000000046),
      helpcontext(0x000200b8),
      hidden
    ]
    interface ICustomViews : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT ViewName, 
                        [out, retval] CustomView** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR ViewName, 
                        [in, optional] VARIANT PrintSettings, 
                        [in, optional] VARIANT RowColSettings, 
                        [out, retval] CustomView** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT ViewName, 
                        [out, retval] CustomView** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00024423-0001-0000-C000-000000000046),
      helpcontext(0x000200b9),
      hidden
    ]
    interface ICustomView : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010629)]
        HRESULT _stdcall PrintSettings([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x0001062a)]
        HRESULT _stdcall RowColSettings([out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x000101f0)]
        HRESULT _stdcall Show();
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
    };

    [
      odl,
      uuid(00024424-0001-0000-C000-000000000046),
      helpcontext(0x000200ba),
      hidden
    ]
    interface IFormatConditions : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] XlFormatConditionType Type, 
                        [in, optional] VARIANT Operator, 
                        [in, optional] VARIANT Formula1, 
                        [in, optional] VARIANT Formula2, 
                        [in, optional] VARIANT String, 
                        [in, optional] VARIANT TextOperator, 
                        [in, optional] VARIANT DateOperator, 
                        [in, optional] VARIANT ScopeType, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x00010a38)]
        HRESULT _stdcall AddColorScale(
                        [in] long ColorScaleType, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x00010a3a)]
        HRESULT _stdcall AddDatabar([out, retval] IDispatch** RHS);
        [helpcontext(0x00010a3b)]
        HRESULT _stdcall AddIconSetCondition([out, retval] IDispatch** RHS);
        [helpcontext(0x00010a3c)]
        HRESULT _stdcall AddTop10([out, retval] IDispatch** RHS);
        [helpcontext(0x00010a3d)]
        HRESULT _stdcall AddAboveAverage([out, retval] IDispatch** RHS);
        [helpcontext(0x00010a3e)]
        HRESULT _stdcall AddUniqueValues([out, retval] IDispatch** RHS);
    };

    [
      odl,
      uuid(00024425-0001-0000-C000-000000000046),
      helpcontext(0x000200bb),
      hidden
    ]
    interface IFormatCondition : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x00010a3f),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, Modify)]
        HRESULT _stdcall _Modify(
                        [in] XlFormatConditionType Type, 
                        [in, optional] VARIANT Operator, 
                        [in, optional] VARIANT Formula1, 
                        [in, optional] VARIANT Formula2);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] long* RHS);
        [propget, helpcontext(0x0001031d)]
        HRESULT _stdcall Operator([out, retval] long* RHS);
        [propget, helpcontext(0x0001062b)]
        HRESULT _stdcall Formula1([out, retval] BSTR* RHS);
        [propget, helpcontext(0x0001062c)]
        HRESULT _stdcall Formula2([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x000101b3)]
        HRESULT _stdcall Borders([out, retval] Borders** RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x0001062d)          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, ModifyEx)]
        HRESULT _stdcall Modify(
                        [in] XlFormatConditionType Type, 
                        [in, optional] VARIANT Operator, 
                        [in, optional] VARIANT Formula1, 
                        [in, optional] VARIANT Formula2, 
                        [in, optional] VARIANT String, 
                        [in, optional] VARIANT Operator2);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x00010a35)]
        HRESULT _stdcall TextOperator([out, retval] XlContainsOperator* RHS);
        [propput, helpcontext(0x00010a35)]
        HRESULT _stdcall TextOperator([in] XlContainsOperator RHS);
        [propget, helpcontext(0x00010a36)]
        HRESULT _stdcall DateOperator([out, retval] XlTimePeriods* RHS);
        [propput, helpcontext(0x00010a36)]
        HRESULT _stdcall DateOperator([in] XlTimePeriods RHS);
        [propget, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([in] VARIANT RHS);
        [propget, helpcontext(0x000103d9)]
        HRESULT _stdcall Priority([out, retval] long* RHS);
        [propput, helpcontext(0x000103d9)]
        HRESULT _stdcall Priority([in] long RHS);
        [propget, helpcontext(0x00010a41)]
        HRESULT _stdcall StopIfTrue([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a41)]
        HRESULT _stdcall StopIfTrue([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a42)]
        HRESULT _stdcall AppliesTo([out, retval] Range** RHS);
        [helpcontext(0x00010a43)]
        HRESULT _stdcall ModifyAppliesToRange([in] Range* Range);
        [helpcontext(0x00010a45)]
        HRESULT _stdcall SetFirstPriority();
        [helpcontext(0x00010a46)]
        HRESULT _stdcall SetLastPriority();
        [propget, helpcontext(0x00010a47)]
        HRESULT _stdcall PTCondition([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010a37)]
        HRESULT _stdcall ScopeType([out, retval] XlPivotConditionScope* RHS);
        [propput, helpcontext(0x00010a37)]
        HRESULT _stdcall ScopeType([in] XlPivotConditionScope RHS);
    };

    [
      odl,
      uuid(00024426-0001-0000-C000-000000000046),
      helpcontext(0x000200bc),
      hidden
    ]
    interface IComments : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] long Index, 
                        [out, retval] Comment** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] long Index, 
                        [out, retval] Comment** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00024427-0001-0000-C000-000000000046),
      helpcontext(0x000200bd),
      hidden
    ]
    interface IComment : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001023e)]
        HRESULT _stdcall Author([out, retval] BSTR* RHS);
        [propget, helpcontext(0x0001062e)]
        HRESULT _stdcall Shape([out, retval] Shape** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [helpcontext(0x0001008a)]
        HRESULT _stdcall Text(
                        [in, optional] VARIANT Text, 
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Overwrite, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x000101f6)]
        HRESULT _stdcall Next([out, retval] Comment** RHS);
        [helpcontext(0x000101f7)]
        HRESULT _stdcall Previous([out, retval] Comment** RHS);
    };

    [
      odl,
      uuid(0002441B-0001-0000-C000-000000000046),
      helpcontext(0x000200b1),
      hidden
    ]
    interface IRefreshEvents : IDispatch {
        [helpcontext(0x0001063c)]
        HRESULT _stdcall BeforeRefresh([in, out] VARIANT_BOOL* Cancel);
        [helpcontext(0x0001063d)]
        HRESULT _stdcall AfterRefresh([in] VARIANT_BOOL Success);
    };

    [
      odl,
      uuid(00024428-0001-0000-C000-000000000046),
      helpcontext(0x000200be),
      hidden
    ]
    interface _IQueryTable : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, helpcontext(0x00010630)]
        HRESULT _stdcall FieldNames([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010630)]
        HRESULT _stdcall FieldNames([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010631)]
        HRESULT _stdcall RowNumbers([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010631)]
        HRESULT _stdcall RowNumbers([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010632)]
        HRESULT _stdcall FillAdjacentFormulas([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010632)]
        HRESULT _stdcall FillAdjacentFormulas([in] VARIANT_BOOL RHS);
        [propget, hidden, helpcontext(0x000102b7)]
        HRESULT _stdcall HasAutoFormat([out, retval] VARIANT_BOOL* RHS);
        [propput, hidden, helpcontext(0x000102b7)]
        HRESULT _stdcall HasAutoFormat([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105c7)]
        HRESULT _stdcall RefreshOnFileOpen([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105c7)]
        HRESULT _stdcall RefreshOnFileOpen([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010633)]
        HRESULT _stdcall Refreshing([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010634)]
        HRESULT _stdcall FetchedRowOverflow([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010593)]
        HRESULT _stdcall BackgroundQuery([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010593)]
        HRESULT _stdcall BackgroundQuery([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010635)]
        HRESULT _stdcall CancelRefresh();
        [propget, helpcontext(0x00010636)]
        HRESULT _stdcall RefreshStyle([out, retval] XlCellInsertionMode* RHS);
        [propput, helpcontext(0x00010636)]
        HRESULT _stdcall RefreshStyle([in] XlCellInsertionMode RHS);
        [propget, helpcontext(0x000105c5)]
        HRESULT _stdcall EnableRefresh([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105c5)]
        HRESULT _stdcall EnableRefresh([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105c9)]
        HRESULT _stdcall SavePassword([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105c9)]
        HRESULT _stdcall SavePassword([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000102a9)]
        HRESULT _stdcall Destination([out, retval] Range** RHS);
        [propget, helpcontext(0x00010598)]
        HRESULT _stdcall Connection([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010598)]
        HRESULT _stdcall Connection([in] VARIANT RHS);
        [propget, hidden, helpcontext(0x000105c8)]
        HRESULT _stdcall Sql([out, retval] VARIANT* RHS);
        [propput, hidden, helpcontext(0x000105c8)]
        HRESULT _stdcall Sql([in] VARIANT RHS);
        [propget, helpcontext(0x00010637)]
        HRESULT _stdcall PostText([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010637)]
        HRESULT _stdcall PostText([in] BSTR RHS);
        [propget, helpcontext(0x00010638)]
        HRESULT _stdcall ResultRange([out, retval] Range** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x00010589)]
        HRESULT _stdcall Refresh(
                        [in, optional] VARIANT BackgroundQuery, 
                        [out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010639)]
        HRESULT _stdcall Parameters([out, retval] Parameters** RHS);
        [propget, helpcontext(0x0001048d)]
        HRESULT _stdcall Recordset([out, retval] IDispatch** RHS);
        [propputref, helpcontext(0x0001048d)]
        HRESULT _stdcall Recordset([in] IDispatch* RHS);
        [propget, helpcontext(0x000102b4)]
        HRESULT _stdcall SaveData([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000102b4)]
        HRESULT _stdcall SaveData([in] VARIANT_BOOL RHS);
        [propget, hidden, helpcontext(0x0001063a)]
        HRESULT _stdcall TablesOnlyFromHTML([out, retval] VARIANT_BOOL* RHS);
        [propput, hidden, helpcontext(0x0001063a)]
        HRESULT _stdcall TablesOnlyFromHTML([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001063b)]
        HRESULT _stdcall EnableEditing([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001063b)]
        HRESULT _stdcall EnableEditing([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001073f)]
        HRESULT _stdcall TextFilePlatform([out, retval] long* RHS);
        [propput, helpcontext(0x0001073f)]
        HRESULT _stdcall TextFilePlatform([in] long RHS);
        [propget, helpcontext(0x00010740)]
        HRESULT _stdcall TextFileStartRow([out, retval] long* RHS);
        [propput, helpcontext(0x00010740)]
        HRESULT _stdcall TextFileStartRow([in] long RHS);
        [propget, helpcontext(0x00010741)]
        HRESULT _stdcall TextFileParseType([out, retval] XlTextParsingType* RHS);
        [propput, helpcontext(0x00010741)]
        HRESULT _stdcall TextFileParseType([in] XlTextParsingType RHS);
        [propget, helpcontext(0x00010742)]
        HRESULT _stdcall TextFileTextQualifier([out, retval] XlTextQualifier* RHS);
        [propput, helpcontext(0x00010742)]
        HRESULT _stdcall TextFileTextQualifier([in] XlTextQualifier RHS);
        [propget, helpcontext(0x00010743)]
        HRESULT _stdcall TextFileConsecutiveDelimiter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010743)]
        HRESULT _stdcall TextFileConsecutiveDelimiter([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010744)]
        HRESULT _stdcall TextFileTabDelimiter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010744)]
        HRESULT _stdcall TextFileTabDelimiter([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010745)]
        HRESULT _stdcall TextFileSemicolonDelimiter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010745)]
        HRESULT _stdcall TextFileSemicolonDelimiter([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010746)]
        HRESULT _stdcall TextFileCommaDelimiter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010746)]
        HRESULT _stdcall TextFileCommaDelimiter([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010747)]
        HRESULT _stdcall TextFileSpaceDelimiter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010747)]
        HRESULT _stdcall TextFileSpaceDelimiter([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010748)]
        HRESULT _stdcall TextFileOtherDelimiter([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010748)]
        HRESULT _stdcall TextFileOtherDelimiter([in] BSTR RHS);
        [propget, helpcontext(0x00010749)]
        HRESULT _stdcall TextFileColumnDataTypes([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010749)]
        HRESULT _stdcall TextFileColumnDataTypes([in] VARIANT RHS);
        [propget, helpcontext(0x0001074a)]
        HRESULT _stdcall TextFileFixedColumnWidths([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001074a)]
        HRESULT _stdcall TextFileFixedColumnWidths([in] VARIANT RHS);
        [propget, helpcontext(0x0001074b)]
        HRESULT _stdcall PreserveColumnInfo([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001074b)]
        HRESULT _stdcall PreserveColumnInfo([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000105dc)]
        HRESULT _stdcall PreserveFormatting([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105dc)]
        HRESULT _stdcall PreserveFormatting([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001074c)]
        HRESULT _stdcall AdjustColumnWidth([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001074c)]
        HRESULT _stdcall AdjustColumnWidth([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010725)]
        HRESULT _stdcall CommandText([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010725)]
        HRESULT _stdcall CommandText([in] VARIANT RHS);
        [propget, helpcontext(0x00010726)]
        HRESULT _stdcall CommandType([out, retval] XlCmdType* RHS);
        [propput, helpcontext(0x00010726)]
        HRESULT _stdcall CommandType([in] XlCmdType RHS);
        [propget, helpcontext(0x0001074d)]
        HRESULT _stdcall TextFilePromptOnRefresh([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001074d)]
        HRESULT _stdcall TextFilePromptOnRefresh([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010727)]
        HRESULT _stdcall QueryType([out, retval] XlQueryType* RHS);
        [propget, helpcontext(0x00010728)]
        HRESULT _stdcall MaintainConnection([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010728)]
        HRESULT _stdcall MaintainConnection([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001074e)]
        HRESULT _stdcall TextFileDecimalSeparator([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001074e)]
        HRESULT _stdcall TextFileDecimalSeparator([in] BSTR RHS);
        [propget, helpcontext(0x0001074f)]
        HRESULT _stdcall TextFileThousandsSeparator([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001074f)]
        HRESULT _stdcall TextFileThousandsSeparator([in] BSTR RHS);
        [propget, helpcontext(0x00010729)]
        HRESULT _stdcall RefreshPeriod([out, retval] long* RHS);
        [propput, helpcontext(0x00010729)]
        HRESULT _stdcall RefreshPeriod([in] long RHS);
        [helpcontext(0x0001072a)]
        HRESULT _stdcall ResetTimer();
        [propget, helpcontext(0x00010750)]
        HRESULT _stdcall WebSelectionType([out, retval] XlWebSelectionType* RHS);
        [propput, helpcontext(0x00010750)]
        HRESULT _stdcall WebSelectionType([in] XlWebSelectionType RHS);
        [propget, helpcontext(0x00010751)]
        HRESULT _stdcall WebFormatting([out, retval] XlWebFormatting* RHS);
        [propput, helpcontext(0x00010751)]
        HRESULT _stdcall WebFormatting([in] XlWebFormatting RHS);
        [propget, helpcontext(0x00010752)]
        HRESULT _stdcall WebTables([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010752)]
        HRESULT _stdcall WebTables([in] BSTR RHS);
        [propget, helpcontext(0x00010753)]
        HRESULT _stdcall WebPreFormattedTextToColumns([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010753)]
        HRESULT _stdcall WebPreFormattedTextToColumns([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010754)]
        HRESULT _stdcall WebSingleBlockTextImport([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010754)]
        HRESULT _stdcall WebSingleBlockTextImport([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010755)]
        HRESULT _stdcall WebDisableDateRecognition([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010755)]
        HRESULT _stdcall WebDisableDateRecognition([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010756)]
        HRESULT _stdcall WebConsecutiveDelimitersAsOne([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010756)]
        HRESULT _stdcall WebConsecutiveDelimitersAsOne([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010872)]
        HRESULT _stdcall WebDisableRedirections([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010872)]
        HRESULT _stdcall WebDisableRedirections([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010873)]
        HRESULT _stdcall EditWebPage([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010873)]
        HRESULT _stdcall EditWebPage([in] VARIANT RHS);
        [propget, helpcontext(0x0001081f)]
        HRESULT _stdcall SourceConnectionFile([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001081f)]
        HRESULT _stdcall SourceConnectionFile([in] BSTR RHS);
        [propget, helpcontext(0x00010820)]
        HRESULT _stdcall SourceDataFile([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010820)]
        HRESULT _stdcall SourceDataFile([in] BSTR RHS);
        [propget, helpcontext(0x00010821)]
        HRESULT _stdcall RobustConnect([out, retval] XlRobustConnect* RHS);
        [propput, helpcontext(0x00010821)]
        HRESULT _stdcall RobustConnect([in] XlRobustConnect RHS);
        [propget, helpcontext(0x00010874)]
        HRESULT _stdcall TextFileTrailingMinusNumbers([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010874)]
        HRESULT _stdcall TextFileTrailingMinusNumbers([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010822)]
        HRESULT _stdcall SaveAsODC(
                        [in] BSTR ODCFileName, 
                        [in, optional] VARIANT Description, 
                        [in, optional] VARIANT Keywords);
        [propget, helpcontext(0x000108d1)]
        HRESULT _stdcall ListObject([out, retval] ListObject** RHS);
        [propget, helpcontext(0x000108c5)]
        HRESULT _stdcall TextFileVisualLayout([out, retval] XlTextVisualLayoutType* RHS);
        [propput, helpcontext(0x000108c5)]
        HRESULT _stdcall TextFileVisualLayout([in] XlTextVisualLayoutType RHS);
        [propget, helpcontext(0x000109f0)]
        HRESULT _stdcall WorkbookConnection([out, retval] WorkbookConnection** RHS);
        [propget, helpcontext(0x00010370)]
        HRESULT _stdcall Sort([out, retval] Sort** RHS);
    };

    [
      odl,
      uuid(00024429-0001-0000-C000-000000000046),
      helpcontext(0x000200bf),
      hidden
    ]
    interface IQueryTables : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] VARIANT Connection, 
                        [in] Range* Destination, 
                        [in, optional] VARIANT Sql, 
                        [out, retval] QueryTable** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] QueryTable** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] QueryTable** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(0002442A-0001-0000-C000-000000000046),
      helpcontext(0x000200c0),
      hidden
    ]
    interface IParameter : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000102d2)]
        HRESULT _stdcall DataType([out, retval] XlParameterDataType* RHS);
        [propput, helpcontext(0x000102d2)]
        HRESULT _stdcall DataType([in] XlParameterDataType RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] XlParameterType* RHS);
        [propget, helpcontext(0x0001063f)]
        HRESULT _stdcall PromptString([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010640)]
        HRESULT _stdcall SourceRange([out, retval] Range** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [helpcontext(0x00010641)]
        HRESULT _stdcall SetParam(
                        [in] XlParameterType Type, 
                        [in] VARIANT Value);
        [propget, helpcontext(0x00010757)]
        HRESULT _stdcall RefreshOnChange([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010757)]
        HRESULT _stdcall RefreshOnChange([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(0002442B-0001-0000-C000-000000000046),
      helpcontext(0x000200c1),
      hidden
    ]
    interface IParameters : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR Name, 
                        [in, optional] VARIANT iDataType, 
                        [out, retval] Parameter** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] Parameter** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] Parameter** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(0002442C-0001-0000-C000-000000000046),
      helpcontext(0x000200c2),
      hidden
    ]
    interface IODBCError : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010643)]
        HRESULT _stdcall SqlState([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000105d2)]
        HRESULT _stdcall ErrorString([out, retval] BSTR* RHS);
    };

    [
      odl,
      uuid(0002442D-0001-0000-C000-000000000046),
      helpcontext(0x000200c3),
      hidden
    ]
    interface IODBCErrors : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] long Index, 
                        [out, retval] ODBCError** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] long Index, 
                        [out, retval] ODBCError** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(0002442F-0001-0000-C000-000000000046),
      helpcontext(0x000200c5),
      hidden
    ]
    interface IValidation : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] XlDVType Type, 
                        [in, optional] VARIANT AlertStyle, 
                        [in, optional] VARIANT Operator, 
                        [in, optional] VARIANT Formula1, 
                        [in, optional] VARIANT Formula2);
        [propget, helpcontext(0x00010645)]
        HRESULT _stdcall AlertStyle([out, retval] long* RHS);
        [propget, helpcontext(0x00010646)]
        HRESULT _stdcall IgnoreBlank([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010646)]
        HRESULT _stdcall IgnoreBlank([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010647)]
        HRESULT _stdcall IMEMode([out, retval] long* RHS);
        [propput, helpcontext(0x00010647)]
        HRESULT _stdcall IMEMode([in] long RHS);
        [propget, helpcontext(0x00010648)]
        HRESULT _stdcall InCellDropdown([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010648)]
        HRESULT _stdcall InCellDropdown([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x00010649)]
        HRESULT _stdcall ErrorMessage([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010649)]
        HRESULT _stdcall ErrorMessage([in] BSTR RHS);
        [propget, helpcontext(0x0001064a)]
        HRESULT _stdcall ErrorTitle([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001064a)]
        HRESULT _stdcall ErrorTitle([in] BSTR RHS);
        [propget, helpcontext(0x0001064b)]
        HRESULT _stdcall InputMessage([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001064b)]
        HRESULT _stdcall InputMessage([in] BSTR RHS);
        [propget, helpcontext(0x0001064c)]
        HRESULT _stdcall InputTitle([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001064c)]
        HRESULT _stdcall InputTitle([in] BSTR RHS);
        [propget, helpcontext(0x0001062b)]
        HRESULT _stdcall Formula1([out, retval] BSTR* RHS);
        [propget, helpcontext(0x0001062c)]
        HRESULT _stdcall Formula2([out, retval] BSTR* RHS);
        [helpcontext(0x0001062d)]
        HRESULT _stdcall Modify(
                        [in, optional] VARIANT Type, 
                        [in, optional] VARIANT AlertStyle, 
                        [in, optional] VARIANT Operator, 
                        [in, optional] VARIANT Formula1, 
                        [in, optional] VARIANT Formula2);
        [propget, helpcontext(0x0001031d)]
        HRESULT _stdcall Operator([out, retval] long* RHS);
        [propget, helpcontext(0x0001064d)]
        HRESULT _stdcall ShowError([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001064d)]
        HRESULT _stdcall ShowError([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001064e)]
        HRESULT _stdcall ShowInput([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001064e)]
        HRESULT _stdcall ShowInput([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] long* RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] VARIANT_BOOL* RHS);
    };

    [
      odl,
      uuid(00024430-0001-0000-C000-000000000046),
      helpcontext(0x000200c6),
      hidden
    ]
    interface IHyperlinks : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] IDispatch* Anchor, 
                        [in] BSTR Address, 
                        [in, optional] VARIANT SubAddress, 
                        [in, optional] VARIANT ScreenTip, 
                        [in, optional] VARIANT TextToDisplay, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] Hyperlink** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] Hyperlink** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
    };

    [
      odl,
      uuid(00024431-0001-0000-C000-000000000046),
      helpcontext(0x000200c7),
      hidden
    ]
    interface IHyperlink : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000100c5)]
        HRESULT _stdcall Range([out, retval] Range** RHS);
        [propget, helpcontext(0x0001062e)]
        HRESULT _stdcall Shape([out, retval] Shape** RHS);
        [propget, helpcontext(0x000105bf)]
        HRESULT _stdcall SubAddress([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000105bf)]
        HRESULT _stdcall SubAddress([in] BSTR RHS);
        [propget, helpcontext(0x000100ec)]
        HRESULT _stdcall Address([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000100ec)]
        HRESULT _stdcall Address([in] BSTR RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] long* RHS);
        [helpcontext(0x000105c4)]
        HRESULT _stdcall AddToFavorites();
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x00010650)]
        HRESULT _stdcall Follow(
                        [in, optional] VARIANT NewWindow, 
                        [in, optional] VARIANT AddHistory, 
                        [in, optional] VARIANT ExtraInfo, 
                        [in, optional] VARIANT Method, 
                        [in, optional] VARIANT HeaderInfo);
        [propget, helpcontext(0x0001075b)]
        HRESULT _stdcall EmailSubject([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001075b)]
        HRESULT _stdcall EmailSubject([in] BSTR RHS);
        [propget, helpcontext(0x00010759)]
        HRESULT _stdcall ScreenTip([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010759)]
        HRESULT _stdcall ScreenTip([in] BSTR RHS);
        [propget, helpcontext(0x0001075a)]
        HRESULT _stdcall TextToDisplay([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001075a)]
        HRESULT _stdcall TextToDisplay([in] BSTR RHS);
        [helpcontext(0x0001075c)]
        HRESULT _stdcall CreateNewDocument(
                        [in] BSTR Filename, 
                        [in] VARIANT_BOOL EditNow, 
                        [in] VARIANT_BOOL Overwrite);
    };

    [
      odl,
      uuid(00024432-0001-0000-C000-000000000046),
      helpcontext(0x000200c8),
      hidden
    ]
    interface IAutoFilter : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000100c5)]
        HRESULT _stdcall Range([out, retval] Range** RHS);
        [propget, helpcontext(0x00010651)]
        HRESULT _stdcall Filters([out, retval] Filters** RHS);
        [propget, helpcontext(0x00010320)]
        HRESULT _stdcall FilterMode([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010370)]
        HRESULT _stdcall Sort([out, retval] Sort** RHS);
        [helpcontext(0x00010a50)]
        HRESULT _stdcall ApplyFilter();
        [helpcontext(0x0001031a)]
        HRESULT _stdcall ShowAllData();
    };

    [
      odl,
      uuid(00024433-0001-0000-C000-000000000046),
      helpcontext(0x000200c9),
      hidden
    ]
    interface IFilters : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] long Index, 
                        [out, retval] Filter** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] long Index, 
                        [out, retval] Filter** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00024434-0001-0000-C000-000000000046),
      helpcontext(0x000200ca),
      hidden
    ]
    interface IFilter : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010652)]
        HRESULT _stdcall On([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x0001031c)]
        HRESULT _stdcall Criteria1([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010a51)]
        HRESULT _stdcall _Operator([out, retval] XlAutoFilterOperator* RHS);
        [propget, helpcontext(0x0001031e)]
        HRESULT _stdcall Criteria2([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001031d)]
        HRESULT _stdcall Operator([out, retval] XlAutoFilterOperator* RHS);
        [propput, helpcontext(0x0001031d)]
        HRESULT _stdcall Operator([in] XlAutoFilterOperator RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
    };

    [
      odl,
      uuid(000208D4-0001-0000-C000-000000000046),
      helpcontext(0x00020093),
      hidden
    ]
    interface IAutoCorrect : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x0001047a)]
        HRESULT _stdcall AddReplacement(
                        [in] BSTR What, 
                        [in] BSTR Replacement, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001047e)]
        HRESULT _stdcall CapitalizeNamesOfDays([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001047e)]
        HRESULT _stdcall CapitalizeNamesOfDays([in] VARIANT_BOOL RHS);
        [helpcontext(0x0001047b)]
        HRESULT _stdcall DeleteReplacement(
                        [in] BSTR What, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001047f)]
        HRESULT _stdcall ReplacementList(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001047f)]
        HRESULT _stdcall ReplacementList(
                        [in, optional] VARIANT Index, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x0001047c)]
        HRESULT _stdcall ReplaceText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001047c)]
        HRESULT _stdcall ReplaceText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001047d)]
        HRESULT _stdcall TwoInitialCapitals([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001047d)]
        HRESULT _stdcall TwoInitialCapitals([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010653)]
        HRESULT _stdcall CorrectSentenceCap([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010653)]
        HRESULT _stdcall CorrectSentenceCap([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010654)]
        HRESULT _stdcall CorrectCapsLock([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010654)]
        HRESULT _stdcall CorrectCapsLock([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010786)]
        HRESULT _stdcall DisplayAutoCorrectOptions([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010786)]
        HRESULT _stdcall DisplayAutoCorrectOptions([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000108f6)]
        HRESULT _stdcall AutoExpandListRange([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108f6)]
        HRESULT _stdcall AutoExpandListRange([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a52)]
        HRESULT _stdcall AutoFillFormulasInLists([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a52)]
        HRESULT _stdcall AutoFillFormulasInLists([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(00020854-0001-0000-C000-000000000046),
      helpcontext(0x00020014),
      hidden
    ]
    interface IBorder : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010063)]
        HRESULT _stdcall Color([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010063)]
        HRESULT _stdcall Color([in] VARIANT RHS);
        [propget, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([in] VARIANT RHS);
        [propget, helpcontext(0x00010077)]
        HRESULT _stdcall LineStyle([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010077)]
        HRESULT _stdcall LineStyle([in] VARIANT RHS);
        [propget, helpcontext(0x00010078)]
        HRESULT _stdcall Weight([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010078)]
        HRESULT _stdcall Weight([in] VARIANT RHS);
        [propget, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([in] VARIANT RHS);
        [propget, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([in] VARIANT RHS);
    };

    [
      odl,
      uuid(00020870-0001-0000-C000-000000000046),
      helpcontext(0x00020030),
      hidden
    ]
    interface IInterior : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010063)]
        HRESULT _stdcall Color([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010063)]
        HRESULT _stdcall Color([in] VARIANT RHS);
        [propget, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([in] VARIANT RHS);
        [propget, helpcontext(0x00010084)]
        HRESULT _stdcall InvertIfNegative([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010084)]
        HRESULT _stdcall InvertIfNegative([in] VARIANT RHS);
        [propget, helpcontext(0x0001005f)]
        HRESULT _stdcall Pattern([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001005f)]
        HRESULT _stdcall Pattern([in] VARIANT RHS);
        [propget, helpcontext(0x00010064)]
        HRESULT _stdcall PatternColor([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010064)]
        HRESULT _stdcall PatternColor([in] VARIANT RHS);
        [propget, helpcontext(0x00010062)]
        HRESULT _stdcall PatternColorIndex([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010062)]
        HRESULT _stdcall PatternColorIndex([in] VARIANT RHS);
        [propget, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([in] VARIANT RHS);
        [propget, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([in] VARIANT RHS);
        [propget, helpcontext(0x00010a53)]
        HRESULT _stdcall PatternThemeColor([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010a53)]
        HRESULT _stdcall PatternThemeColor([in] VARIANT RHS);
        [propget, helpcontext(0x00010a54)]
        HRESULT _stdcall PatternTintAndShade([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010a54)]
        HRESULT _stdcall PatternTintAndShade([in] VARIANT RHS);
        [propget, helpcontext(0x00010a55)]
        HRESULT _stdcall Gradient([out, retval] IDispatch** RHS);
    };

    [
      odl,
      uuid(00024435-0001-0000-C000-000000000046),
      helpcontext(0x000200cb),
      hidden
    ]
    interface IChartFillFormat : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010655)]
        HRESULT _stdcall OneColorGradient(
                        [in] MsoGradientStyle Style, 
                        [in] long Variant, 
                        [in] single Degree);
        [helpcontext(0x00010658)]
        HRESULT _stdcall TwoColorGradient(
                        [in] MsoGradientStyle Style, 
                        [in] long Variant);
        [helpcontext(0x00010659)]
        HRESULT _stdcall PresetTextured([in] MsoPresetTexture PresetTexture);
        [helpcontext(0x0001065b)]
        HRESULT _stdcall Solid();
        [helpcontext(0x0001065c)]
        HRESULT _stdcall Patterned([in] MsoPatternType Pattern);
        [helpcontext(0x0001065d)]
        HRESULT _stdcall UserPicture(
                        [in, optional] VARIANT PictureFile, 
                        [in, optional] VARIANT PictureFormat, 
                        [in, optional] VARIANT PictureStackUnit, 
                        [in, optional] VARIANT PicturePlacement);
        [helpcontext(0x00010662)]
        HRESULT _stdcall UserTextured([in] BSTR TextureFile);
        [helpcontext(0x00010664)]
        HRESULT _stdcall PresetGradient(
                        [in] MsoGradientStyle Style, 
                        [in] long Variant, 
                        [in] MsoPresetGradientType PresetGradientType);
        [propget, helpcontext(0x00010666)]
        HRESULT _stdcall BackColor([out, retval] ChartColorFormat** RHS);
        [propget, helpcontext(0x00010667)]
        HRESULT _stdcall ForeColor([out, retval] ChartColorFormat** RHS);
        [propget, helpcontext(0x00010668)]
        HRESULT _stdcall GradientColorType([out, retval] MsoGradientColorType* RHS);
        [propget, helpcontext(0x00010669)]
        HRESULT _stdcall GradientDegree([out, retval] single* RHS);
        [propget, helpcontext(0x0001066a)]
        HRESULT _stdcall GradientStyle([out, retval] MsoGradientStyle* RHS);
        [propget, helpcontext(0x0001066b)]
        HRESULT _stdcall GradientVariant([out, retval] long* RHS);
        [propget, helpcontext(0x0001005f)]
        HRESULT _stdcall Pattern([out, retval] MsoPatternType* RHS);
        [propget, helpcontext(0x00010665)]
        HRESULT _stdcall PresetGradientType([out, retval] MsoPresetGradientType* RHS);
        [propget, helpcontext(0x0001065a)]
        HRESULT _stdcall PresetTexture([out, retval] MsoPresetTexture* RHS);
        [propget, helpcontext(0x0001066c)]
        HRESULT _stdcall TextureName([out, retval] BSTR* RHS);
        [propget, helpcontext(0x0001066d)]
        HRESULT _stdcall TextureType([out, retval] MsoTextureType* RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] MsoFillType* RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] MsoTriState* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] MsoTriState RHS);
    };

    [
      odl,
      uuid(00024436-0001-0000-C000-000000000046),
      helpcontext(0x000200cc),
      hidden
    ]
    interface IChartColorFormat : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001066e)]
        HRESULT _stdcall SchemeColor([out, retval] long* RHS);
        [propput, helpcontext(0x0001066e)]
        HRESULT _stdcall SchemeColor([in] long RHS);
        [propget, helpcontext(0x0001041f)]
        HRESULT _stdcall RGB([out, retval] long* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] long* RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] long* RHS);
    };

    [
      odl,
      uuid(00020848-0001-0000-C000-000000000046),
      helpcontext(0x00020008),
      hidden
    ]
    interface IAxis : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001002d)]
        HRESULT _stdcall AxisBetweenCategories([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001002d)]
        HRESULT _stdcall AxisBetweenCategories([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001002f)]
        HRESULT _stdcall AxisGroup([out, retval] XlAxisGroup* RHS);
        [propget, helpcontext(0x00010052)]
        HRESULT _stdcall AxisTitle([out, retval] AxisTitle** RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x0001009c)]
        HRESULT _stdcall CategoryNames([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001009c)]
        HRESULT _stdcall CategoryNames([in] VARIANT RHS);
        [propget, helpcontext(0x0001002a)]
        HRESULT _stdcall Crosses([out, retval] XlAxisCrosses* RHS);
        [propput, helpcontext(0x0001002a)]
        HRESULT _stdcall Crosses([in] XlAxisCrosses RHS);
        [propget, helpcontext(0x0001002b)]
        HRESULT _stdcall CrossesAt([out, retval] double* RHS);
        [propput, helpcontext(0x0001002b)]
        HRESULT _stdcall CrossesAt([in] double RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010018)]
        HRESULT _stdcall HasMajorGridlines([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010018)]
        HRESULT _stdcall HasMajorGridlines([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010019)]
        HRESULT _stdcall HasMinorGridlines([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010019)]
        HRESULT _stdcall HasMinorGridlines([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010036)]
        HRESULT _stdcall HasTitle([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010036)]
        HRESULT _stdcall HasTitle([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010059)]
        HRESULT _stdcall MajorGridlines([out, retval] Gridlines** RHS);
        [propget, helpcontext(0x0001001a)]
        HRESULT _stdcall MajorTickMark([out, retval] XlTickMark* RHS);
        [propput, helpcontext(0x0001001a)]
        HRESULT _stdcall MajorTickMark([in] XlTickMark RHS);
        [propget, helpcontext(0x00010025)]
        HRESULT _stdcall MajorUnit([out, retval] double* RHS);
        [propput, helpcontext(0x00010025)]
        HRESULT _stdcall MajorUnit([in] double RHS);
        [propget, helpcontext(0x00010026)]
        HRESULT _stdcall MajorUnitIsAuto([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010026)]
        HRESULT _stdcall MajorUnitIsAuto([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010023)]
        HRESULT _stdcall MaximumScale([out, retval] double* RHS);
        [propput, helpcontext(0x00010023)]
        HRESULT _stdcall MaximumScale([in] double RHS);
        [propget, helpcontext(0x00010024)]
        HRESULT _stdcall MaximumScaleIsAuto([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010024)]
        HRESULT _stdcall MaximumScaleIsAuto([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010021)]
        HRESULT _stdcall MinimumScale([out, retval] double* RHS);
        [propput, helpcontext(0x00010021)]
        HRESULT _stdcall MinimumScale([in] double RHS);
        [propget, helpcontext(0x00010022)]
        HRESULT _stdcall MinimumScaleIsAuto([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010022)]
        HRESULT _stdcall MinimumScaleIsAuto([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001005a)]
        HRESULT _stdcall MinorGridlines([out, retval] Gridlines** RHS);
        [propget, helpcontext(0x0001001b)]
        HRESULT _stdcall MinorTickMark([out, retval] XlTickMark* RHS);
        [propput, helpcontext(0x0001001b)]
        HRESULT _stdcall MinorTickMark([in] XlTickMark RHS);
        [propget, helpcontext(0x00010027)]
        HRESULT _stdcall MinorUnit([out, retval] double* RHS);
        [propput, helpcontext(0x00010027)]
        HRESULT _stdcall MinorUnit([in] double RHS);
        [propget, helpcontext(0x00010028)]
        HRESULT _stdcall MinorUnitIsAuto([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010028)]
        HRESULT _stdcall MinorUnitIsAuto([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001002c)]
        HRESULT _stdcall ReversePlotOrder([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001002c)]
        HRESULT _stdcall ReversePlotOrder([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010029)]
        HRESULT _stdcall ScaleType([out, retval] XlScaleType* RHS);
        [propput, helpcontext(0x00010029)]
        HRESULT _stdcall ScaleType([in] XlScaleType RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001001c)]
        HRESULT _stdcall TickLabelPosition([out, retval] XlTickLabelPosition* RHS);
        [propput, helpcontext(0x0001001c)]
        HRESULT _stdcall TickLabelPosition([in] XlTickLabelPosition RHS);
        [propget, helpcontext(0x0001005b)]
        HRESULT _stdcall TickLabels([out, retval] TickLabels** RHS);
        [propget, helpcontext(0x0001001d)]
        HRESULT _stdcall TickLabelSpacing([out, retval] long* RHS);
        [propput, helpcontext(0x0001001d)]
        HRESULT _stdcall TickLabelSpacing([in] long RHS);
        [propget, helpcontext(0x0001001f)]
        HRESULT _stdcall TickMarkSpacing([out, retval] long* RHS);
        [propput, helpcontext(0x0001001f)]
        HRESULT _stdcall TickMarkSpacing([in] long RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] XlAxisType* RHS);
        [propput, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([in] XlAxisType RHS);
        [propget, helpcontext(0x0001066f)]
        HRESULT _stdcall BaseUnit([out, retval] XlTimeUnit* RHS);
        [propput, helpcontext(0x0001066f)]
        HRESULT _stdcall BaseUnit([in] XlTimeUnit RHS);
        [propget, helpcontext(0x00010670)]
        HRESULT _stdcall BaseUnitIsAuto([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010670)]
        HRESULT _stdcall BaseUnitIsAuto([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010671)]
        HRESULT _stdcall MajorUnitScale([out, retval] XlTimeUnit* RHS);
        [propput, helpcontext(0x00010671)]
        HRESULT _stdcall MajorUnitScale([in] XlTimeUnit RHS);
        [propget, helpcontext(0x00010672)]
        HRESULT _stdcall MinorUnitScale([out, retval] XlTimeUnit* RHS);
        [propput, helpcontext(0x00010672)]
        HRESULT _stdcall MinorUnitScale([in] XlTimeUnit RHS);
        [propget, helpcontext(0x00010673)]
        HRESULT _stdcall CategoryType([out, retval] XlCategoryType* RHS);
        [propput, helpcontext(0x00010673)]
        HRESULT _stdcall CategoryType([in] XlCategoryType RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propget, helpcontext(0x0001075e)]
        HRESULT _stdcall DisplayUnit([out, retval] XlDisplayUnit* RHS);
        [propput, helpcontext(0x0001075e)]
        HRESULT _stdcall DisplayUnit([in] XlDisplayUnit RHS);
        [propget, helpcontext(0x0001075f)]
        HRESULT _stdcall DisplayUnitCustom([out, retval] double* RHS);
        [propput, helpcontext(0x0001075f)]
        HRESULT _stdcall DisplayUnitCustom([in] double RHS);
        [propget, helpcontext(0x00010760)]
        HRESULT _stdcall HasDisplayUnitLabel([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010760)]
        HRESULT _stdcall HasDisplayUnitLabel([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010761)]
        HRESULT _stdcall DisplayUnitLabel([out, retval] DisplayUnitLabel** RHS);
        [propget, helpcontext(0x00010a56)]
        HRESULT _stdcall LogBase([out, retval] double* RHS);
        [propput, helpcontext(0x00010a56)]
        HRESULT _stdcall LogBase([in] double RHS);
        [propget, helpcontext(0x00010a57)]
        HRESULT _stdcall TickLabelSpacingIsAuto([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a57)]
        HRESULT _stdcall TickLabelSpacingIsAuto([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(00020849-0001-0000-C000-000000000046),
      helpcontext(0x00020009),
      hidden
    ]
    interface IChartTitle : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, hidden, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [propget, hidden, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010a58)]
        HRESULT _stdcall IncludeInLayout([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a58)]
        HRESULT _stdcall IncludeInLayout([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010085)]
        HRESULT _stdcall Position([out, retval] XlChartElementPosition* RHS);
        [propput, helpcontext(0x00010085)]
        HRESULT _stdcall Position([in] XlChartElementPosition RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(0002084A-0001-0000-C000-000000000046),
      helpcontext(0x0002000a),
      hidden
    ]
    interface IAxisTitle : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, hidden, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [propget, hidden, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010a58)]
        HRESULT _stdcall IncludeInLayout([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a58)]
        HRESULT _stdcall IncludeInLayout([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010085)]
        HRESULT _stdcall Position([out, retval] XlChartElementPosition* RHS);
        [propput, helpcontext(0x00010085)]
        HRESULT _stdcall Position([in] XlChartElementPosition RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(00020859-0001-0000-C000-000000000046),
      helpcontext(0x00020019),
      hidden
    ]
    interface IChartGroup : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001002f)]
        HRESULT _stdcall AxisGroup([out, retval] XlAxisGroup* RHS);
        [propput, helpcontext(0x0001002f)]
        HRESULT _stdcall AxisGroup([in] XlAxisGroup RHS);
        [propget, helpcontext(0x00010466)]
        HRESULT _stdcall DoughnutHoleSize([out, retval] long* RHS);
        [propput, helpcontext(0x00010466)]
        HRESULT _stdcall DoughnutHoleSize([in] long RHS);
        [propget, helpcontext(0x0001008d)]
        HRESULT _stdcall DownBars([out, retval] DownBars** RHS);
        [propget, helpcontext(0x0001008e)]
        HRESULT _stdcall DropLines([out, retval] DropLines** RHS);
        [propget, helpcontext(0x0001003f)]
        HRESULT _stdcall FirstSliceAngle([out, retval] long* RHS);
        [propput, helpcontext(0x0001003f)]
        HRESULT _stdcall FirstSliceAngle([in] long RHS);
        [propget, helpcontext(0x00010033)]
        HRESULT _stdcall GapWidth([out, retval] long* RHS);
        [propput, helpcontext(0x00010033)]
        HRESULT _stdcall GapWidth([in] long RHS);
        [propget, helpcontext(0x0001003d)]
        HRESULT _stdcall HasDropLines([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001003d)]
        HRESULT _stdcall HasDropLines([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001003e)]
        HRESULT _stdcall HasHiLoLines([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001003e)]
        HRESULT _stdcall HasHiLoLines([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010040)]
        HRESULT _stdcall HasRadarAxisLabels([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010040)]
        HRESULT _stdcall HasRadarAxisLabels([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010041)]
        HRESULT _stdcall HasSeriesLines([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010041)]
        HRESULT _stdcall HasSeriesLines([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010042)]
        HRESULT _stdcall HasUpDownBars([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010042)]
        HRESULT _stdcall HasUpDownBars([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008f)]
        HRESULT _stdcall HiLoLines([out, retval] HiLoLines** RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x00010038)]
        HRESULT _stdcall Overlap([out, retval] long* RHS);
        [propput, helpcontext(0x00010038)]
        HRESULT _stdcall Overlap([in] long RHS);
        [propget, helpcontext(0x00010090)]
        HRESULT _stdcall RadarAxisLabels([out, retval] TickLabels** RHS);
        [helpcontext(0x00010044)]
        HRESULT _stdcall SeriesCollection(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010091)]
        HRESULT _stdcall SeriesLines([out, retval] SeriesLines** RHS);
        [propget, hidden, helpcontext(0x0001006d)]
        HRESULT _stdcall SubType([out, retval] long* RHS);
        [propput, hidden, helpcontext(0x0001006d)]
        HRESULT _stdcall SubType([in] long RHS);
        [propget, hidden, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] long* RHS);
        [propput, hidden, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([in] long RHS);
        [propget, helpcontext(0x0001008c)]
        HRESULT _stdcall UpBars([out, retval] UpBars** RHS);
        [propget, helpcontext(0x0001003c)]
        HRESULT _stdcall VaryByCategories([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001003c)]
        HRESULT _stdcall VaryByCategories([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010674)]
        HRESULT _stdcall SizeRepresents([out, retval] XlSizeRepresents* RHS);
        [propput, helpcontext(0x00010674)]
        HRESULT _stdcall SizeRepresents([in] XlSizeRepresents RHS);
        [propget, helpcontext(0x00010675)]
        HRESULT _stdcall BubbleScale([out, retval] long* RHS);
        [propput, helpcontext(0x00010675)]
        HRESULT _stdcall BubbleScale([in] long RHS);
        [propget, helpcontext(0x00010676)]
        HRESULT _stdcall ShowNegativeBubbles([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010676)]
        HRESULT _stdcall ShowNegativeBubbles([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010677)]
        HRESULT _stdcall SplitType([out, retval] XlChartSplitType* RHS);
        [propput, helpcontext(0x00010677)]
        HRESULT _stdcall SplitType([in] XlChartSplitType RHS);
        [propget, helpcontext(0x00010678)]
        HRESULT _stdcall SplitValue([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010678)]
        HRESULT _stdcall SplitValue([in] VARIANT RHS);
        [propget, helpcontext(0x00010679)]
        HRESULT _stdcall SecondPlotSize([out, retval] long* RHS);
        [propput, helpcontext(0x00010679)]
        HRESULT _stdcall SecondPlotSize([in] long RHS);
        [propget, helpcontext(0x0001067a)]
        HRESULT _stdcall Has3DShading([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001067a)]
        HRESULT _stdcall Has3DShading([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(0002085A-0001-0000-C000-000000000046),
      helpcontext(0x0002001a),
      hidden
    ]
    interface IChartGroups : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] ChartGroup** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(0002085B-0001-0000-C000-000000000046),
      helpcontext(0x0002001b),
      hidden
    ]
    interface IAxes : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] XlAxisType Type, 
                        [in, optional, defaultvalue(1)] XlAxisGroup AxisGroup, 
                        [out, retval] Axis** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] XlAxisType Type, 
                        [in, optional, defaultvalue(1)] XlAxisGroup AxisGroup, 
                        [out, retval] Axis** RHS);
    };

    [
      odl,
      uuid(00020869-0001-0000-C000-000000000046),
      helpcontext(0x00020029),
      hidden
    ]
    interface IPoints : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] long Index, 
                        [out, retval] Point** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] long Index, 
                        [out, retval] Point** RHS);
    };

    [
      odl,
      uuid(0002086A-0001-0000-C000-000000000046),
      helpcontext(0x0002002a),
      hidden
    ]
    interface IPoint : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x00010097)]
        HRESULT _stdcall _ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                        [in, optional] VARIANT LegendKey, 
                        [in, optional] VARIANT AutoText, 
                        [in, optional] VARIANT HasLeaderLines, 
                        [out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010070)]
        HRESULT _stdcall ClearFormats([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001009e)]
        HRESULT _stdcall DataLabel([out, retval] DataLabel** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100b6)]
        HRESULT _stdcall Explosion([out, retval] long* RHS);
        [propput, helpcontext(0x000100b6)]
        HRESULT _stdcall Explosion([in] long RHS);
        [propget, helpcontext(0x0001004d)]
        HRESULT _stdcall HasDataLabel([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001004d)]
        HRESULT _stdcall HasDataLabel([in] VARIANT_BOOL RHS);
        [propget, hidden, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x00010084)]
        HRESULT _stdcall InvertIfNegative([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010084)]
        HRESULT _stdcall InvertIfNegative([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010049)]
        HRESULT _stdcall MarkerBackgroundColor([out, retval] long* RHS);
        [propput, helpcontext(0x00010049)]
        HRESULT _stdcall MarkerBackgroundColor([in] long RHS);
        [propget, helpcontext(0x0001004a)]
        HRESULT _stdcall MarkerBackgroundColorIndex([out, retval] XlColorIndex* RHS);
        [propput, helpcontext(0x0001004a)]
        HRESULT _stdcall MarkerBackgroundColorIndex([in] XlColorIndex RHS);
        [propget, helpcontext(0x0001004b)]
        HRESULT _stdcall MarkerForegroundColor([out, retval] long* RHS);
        [propput, helpcontext(0x0001004b)]
        HRESULT _stdcall MarkerForegroundColor([in] long RHS);
        [propget, helpcontext(0x0001004c)]
        HRESULT _stdcall MarkerForegroundColorIndex([out, retval] XlColorIndex* RHS);
        [propput, helpcontext(0x0001004c)]
        HRESULT _stdcall MarkerForegroundColorIndex([in] XlColorIndex RHS);
        [propget, helpcontext(0x000100e7)]
        HRESULT _stdcall MarkerSize([out, retval] long* RHS);
        [propput, helpcontext(0x000100e7)]
        HRESULT _stdcall MarkerSize([in] long RHS);
        [propget, helpcontext(0x00010048)]
        HRESULT _stdcall MarkerStyle([out, retval] XlMarkerStyle* RHS);
        [propput, helpcontext(0x00010048)]
        HRESULT _stdcall MarkerStyle([in] XlMarkerStyle RHS);
        [helpcontext(0x000100d3)]
        HRESULT _stdcall Paste([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100a1)]
        HRESULT _stdcall PictureType([out, retval] XlChartPictureType* RHS);
        [propput, helpcontext(0x000100a1)]
        HRESULT _stdcall PictureType([in] XlChartPictureType RHS);
        [propget, hidden, helpcontext(0x000100a2)]
        HRESULT _stdcall PictureUnit([out, retval] long* RHS);
        [propput, hidden, helpcontext(0x000100a2)]
        HRESULT _stdcall PictureUnit([in] long RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001067b)]
        HRESULT _stdcall ApplyPictToSides([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001067b)]
        HRESULT _stdcall ApplyPictToSides([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001067c)]
        HRESULT _stdcall ApplyPictToFront([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001067c)]
        HRESULT _stdcall ApplyPictToFront([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001067d)]
        HRESULT _stdcall ApplyPictToEnd([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001067d)]
        HRESULT _stdcall ApplyPictToEnd([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001067e)]
        HRESULT _stdcall SecondaryPlot([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001067e)]
        HRESULT _stdcall SecondaryPlot([in] VARIANT_BOOL RHS);
        [propget, hidden, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [helpcontext(0x00010782)]
        HRESULT _stdcall ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                        [in, optional] VARIANT LegendKey, 
                        [in, optional] VARIANT AutoText, 
                        [in, optional] VARIANT HasLeaderLines, 
                        [in, optional] VARIANT ShowSeriesName, 
                        [in, optional] VARIANT ShowCategoryName, 
                        [in, optional] VARIANT ShowValue, 
                        [in, optional] VARIANT ShowPercentage, 
                        [in, optional] VARIANT ShowBubbleSize, 
                        [in, optional] VARIANT Separator, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010681)]
        HRESULT _stdcall Has3DEffect([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010681)]
        HRESULT _stdcall Has3DEffect([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a59)]
        HRESULT _stdcall PictureUnit2([out, retval] double* RHS);
        [propput, helpcontext(0x00010a59)]
        HRESULT _stdcall PictureUnit2([in] double RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(0002086B-0001-0000-C000-000000000046),
      helpcontext(0x0002002b),
      hidden
    ]
    interface ISeries : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x00010097)]
        HRESULT _stdcall _ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                        [in, optional] VARIANT LegendKey, 
                        [in, optional] VARIANT AutoText, 
                        [in, optional] VARIANT HasLeaderLines, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001002f)]
        HRESULT _stdcall AxisGroup([out, retval] XlAxisGroup* RHS);
        [propput, helpcontext(0x0001002f)]
        HRESULT _stdcall AxisGroup([in] XlAxisGroup RHS);
        [propget, hidden, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010070)]
        HRESULT _stdcall ClearFormats([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [helpcontext(0x0001009d)]
        HRESULT _stdcall DataLabels(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x00010098)]
        HRESULT _stdcall ErrorBar(
                        [in] XlErrorBarDirection Direction, 
                        [in] XlErrorBarInclude Include, 
                        [in] XlErrorBarType Type, 
                        [in, optional] VARIANT Amount, 
                        [in, optional] VARIANT MinusValues, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001009f)]
        HRESULT _stdcall ErrorBars([out, retval] ErrorBars** RHS);
        [propget, helpcontext(0x000100b6)]
        HRESULT _stdcall Explosion([out, retval] long* RHS);
        [propput, helpcontext(0x000100b6)]
        HRESULT _stdcall Explosion([in] long RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x00010107)]
        HRESULT _stdcall FormulaLocal([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010107)]
        HRESULT _stdcall FormulaLocal([in] BSTR RHS);
        [propget, helpcontext(0x00010108)]
        HRESULT _stdcall FormulaR1C1([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010108)]
        HRESULT _stdcall FormulaR1C1([in] BSTR RHS);
        [propget, helpcontext(0x00010109)]
        HRESULT _stdcall FormulaR1C1Local([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010109)]
        HRESULT _stdcall FormulaR1C1Local([in] BSTR RHS);
        [propget, helpcontext(0x0001004e)]
        HRESULT _stdcall HasDataLabels([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001004e)]
        HRESULT _stdcall HasDataLabels([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000100a0)]
        HRESULT _stdcall HasErrorBars([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100a0)]
        HRESULT _stdcall HasErrorBars([in] VARIANT_BOOL RHS);
        [propget, hidden, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, hidden, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [propget, helpcontext(0x00010084)]
        HRESULT _stdcall InvertIfNegative([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010084)]
        HRESULT _stdcall InvertIfNegative([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010049)]
        HRESULT _stdcall MarkerBackgroundColor([out, retval] long* RHS);
        [propput, helpcontext(0x00010049)]
        HRESULT _stdcall MarkerBackgroundColor([in] long RHS);
        [propget, helpcontext(0x0001004a)]
        HRESULT _stdcall MarkerBackgroundColorIndex([out, retval] XlColorIndex* RHS);
        [propput, helpcontext(0x0001004a)]
        HRESULT _stdcall MarkerBackgroundColorIndex([in] XlColorIndex RHS);
        [propget, helpcontext(0x0001004b)]
        HRESULT _stdcall MarkerForegroundColor([out, retval] long* RHS);
        [propput, helpcontext(0x0001004b)]
        HRESULT _stdcall MarkerForegroundColor([in] long RHS);
        [propget, helpcontext(0x0001004c)]
        HRESULT _stdcall MarkerForegroundColorIndex([out, retval] XlColorIndex* RHS);
        [propput, helpcontext(0x0001004c)]
        HRESULT _stdcall MarkerForegroundColorIndex([in] XlColorIndex RHS);
        [propget, helpcontext(0x000100e7)]
        HRESULT _stdcall MarkerSize([out, retval] long* RHS);
        [propput, helpcontext(0x000100e7)]
        HRESULT _stdcall MarkerSize([in] long RHS);
        [propget, helpcontext(0x00010048)]
        HRESULT _stdcall MarkerStyle([out, retval] XlMarkerStyle* RHS);
        [propput, helpcontext(0x00010048)]
        HRESULT _stdcall MarkerStyle([in] XlMarkerStyle RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [helpcontext(0x000100d3)]
        HRESULT _stdcall Paste([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100a1)]
        HRESULT _stdcall PictureType([out, retval] XlChartPictureType* RHS);
        [propput, helpcontext(0x000100a1)]
        HRESULT _stdcall PictureType([in] XlChartPictureType RHS);
        [propget, hidden, helpcontext(0x000100a2)]
        HRESULT _stdcall PictureUnit([out, retval] long* RHS);
        [propput, hidden, helpcontext(0x000100a2)]
        HRESULT _stdcall PictureUnit([in] long RHS);
        [propget, helpcontext(0x000100e4)]
        HRESULT _stdcall PlotOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000100e4)]
        HRESULT _stdcall PlotOrder([in] long RHS);
        [helpcontext(0x00010046)]
        HRESULT _stdcall Points(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100a3)]
        HRESULT _stdcall Smooth([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100a3)]
        HRESULT _stdcall Smooth([in] VARIANT_BOOL RHS);
        [helpcontext(0x0001009a)]
        HRESULT _stdcall Trendlines(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] long* RHS);
        [propput, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([in] long RHS);
        [propget, helpcontext(0x00010578)]
        HRESULT _stdcall ChartType([out, retval] XlChartType* RHS);
        [propput, helpcontext(0x00010578)]
        HRESULT _stdcall ChartType([in] XlChartType RHS);
        [hidden, helpcontext(0x00010579)]
        HRESULT _stdcall ApplyCustomType([in] XlChartType ChartType);
        [propget, helpcontext(0x000100a4)]
        HRESULT _stdcall Values([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100a4)]
        HRESULT _stdcall Values([in] VARIANT RHS);
        [propget, helpcontext(0x00010457)]
        HRESULT _stdcall XValues([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010457)]
        HRESULT _stdcall XValues([in] VARIANT RHS);
        [propget, helpcontext(0x00010680)]
        HRESULT _stdcall BubbleSizes([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010680)]
        HRESULT _stdcall BubbleSizes([in] VARIANT RHS);
        [propget, helpcontext(0x0001057b)]
        HRESULT _stdcall BarShape([out, retval] XlBarShape* RHS);
        [propput, helpcontext(0x0001057b)]
        HRESULT _stdcall BarShape([in] XlBarShape RHS);
        [propget, helpcontext(0x0001067b)]
        HRESULT _stdcall ApplyPictToSides([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001067b)]
        HRESULT _stdcall ApplyPictToSides([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001067c)]
        HRESULT _stdcall ApplyPictToFront([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001067c)]
        HRESULT _stdcall ApplyPictToFront([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001067d)]
        HRESULT _stdcall ApplyPictToEnd([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001067d)]
        HRESULT _stdcall ApplyPictToEnd([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010681)]
        HRESULT _stdcall Has3DEffect([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010681)]
        HRESULT _stdcall Has3DEffect([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010572)]
        HRESULT _stdcall HasLeaderLines([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010572)]
        HRESULT _stdcall HasLeaderLines([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010682)]
        HRESULT _stdcall LeaderLines([out, retval] LeaderLines** RHS);
        [helpcontext(0x00010782)]
        HRESULT _stdcall ApplyDataLabels(
                        [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                        [in, optional] VARIANT LegendKey, 
                        [in, optional] VARIANT AutoText, 
                        [in, optional] VARIANT HasLeaderLines, 
                        [in, optional] VARIANT ShowSeriesName, 
                        [in, optional] VARIANT ShowCategoryName, 
                        [in, optional] VARIANT ShowValue, 
                        [in, optional] VARIANT ShowPercentage, 
                        [in, optional] VARIANT ShowBubbleSize, 
                        [in, optional] VARIANT Separator, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010a59)]
        HRESULT _stdcall PictureUnit2([out, retval] double* RHS);
        [propput, helpcontext(0x00010a59)]
        HRESULT _stdcall PictureUnit2([in] double RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(0002086C-0001-0000-C000-000000000046),
      helpcontext(0x0002002c),
      hidden
    ]
    interface ISeriesCollection : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] VARIANT Source, 
                        [in, optional, defaultvalue(-4105)] XlRowCol Rowcol, 
                        [in, optional] VARIANT SeriesLabels, 
                        [in, optional] VARIANT CategoryLabels, 
                        [in, optional] VARIANT Replace, 
                        [out, retval] Series** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100e3)]
        HRESULT _stdcall Extend(
                        [in] VARIANT Source, 
                        [in, optional] VARIANT Rowcol, 
                        [in, optional] VARIANT CategoryLabels, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] Series** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x000100d3)]
        HRESULT _stdcall Paste(
                        [in, optional, defaultvalue(-4105)] XlRowCol Rowcol, 
                        [in, optional] VARIANT SeriesLabels, 
                        [in, optional] VARIANT CategoryLabels, 
                        [in, optional] VARIANT Replace, 
                        [in, optional] VARIANT NewSeries, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x0001045d)]
        HRESULT _stdcall NewSeries([out, retval] Series** RHS);
        [helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] Series** RHS);
    };

    [
      odl,
      uuid(000208B2-0001-0000-C000-000000000046),
      helpcontext(0x00020072),
      hidden
    ]
    interface IDataLabel : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, hidden, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [propget, hidden, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010087)]
        HRESULT _stdcall AutoText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010087)]
        HRESULT _stdcall AutoText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([in] BSTR RHS);
        [propget, helpcontext(0x000100c2)]
        HRESULT _stdcall NumberFormatLinked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100c2)]
        HRESULT _stdcall NumberFormatLinked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010449)]
        HRESULT _stdcall NumberFormatLocal([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010449)]
        HRESULT _stdcall NumberFormatLocal([in] VARIANT RHS);
        [propget, helpcontext(0x000100ab)]
        HRESULT _stdcall ShowLegendKey([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100ab)]
        HRESULT _stdcall ShowLegendKey([in] VARIANT_BOOL RHS);
        [propget, hidden, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] VARIANT* RHS);
        [propput, hidden, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([in] VARIANT RHS);
        [propget, helpcontext(0x00010085)]
        HRESULT _stdcall Position([out, retval] XlDataLabelPosition* RHS);
        [propput, helpcontext(0x00010085)]
        HRESULT _stdcall Position([in] XlDataLabelPosition RHS);
        [propget, helpcontext(0x000107e6)]
        HRESULT _stdcall ShowSeriesName([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107e6)]
        HRESULT _stdcall ShowSeriesName([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107e7)]
        HRESULT _stdcall ShowCategoryName([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107e7)]
        HRESULT _stdcall ShowCategoryName([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107e8)]
        HRESULT _stdcall ShowValue([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107e8)]
        HRESULT _stdcall ShowValue([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107e9)]
        HRESULT _stdcall ShowPercentage([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107e9)]
        HRESULT _stdcall ShowPercentage([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107ea)]
        HRESULT _stdcall ShowBubbleSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107ea)]
        HRESULT _stdcall ShowBubbleSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107eb)]
        HRESULT _stdcall Separator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000107eb)]
        HRESULT _stdcall Separator([in] VARIANT RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(000208B3-0001-0000-C000-000000000046),
      helpcontext(0x00020073),
      hidden
    ]
    interface IDataLabels : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, hidden, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [restricted, hidden]
        void _stdcall _Dummy9();
        [restricted, hidden]
        void _stdcall _Dummy10();
        [propget, hidden, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [restricted, hidden]
        void _stdcall _Dummy13();
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [restricted, hidden]
        void _stdcall _Dummy16();
        [restricted, hidden]
        void _stdcall _Dummy17();
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010087)]
        HRESULT _stdcall AutoText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010087)]
        HRESULT _stdcall AutoText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([in] BSTR RHS);
        [propget, helpcontext(0x000100c2)]
        HRESULT _stdcall NumberFormatLinked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100c2)]
        HRESULT _stdcall NumberFormatLinked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010449)]
        HRESULT _stdcall NumberFormatLocal([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010449)]
        HRESULT _stdcall NumberFormatLocal([in] VARIANT RHS);
        [propget, helpcontext(0x000100ab)]
        HRESULT _stdcall ShowLegendKey([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100ab)]
        HRESULT _stdcall ShowLegendKey([in] VARIANT_BOOL RHS);
        [propget, hidden, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] VARIANT* RHS);
        [propput, hidden, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([in] VARIANT RHS);
        [propget, helpcontext(0x00010085)]
        HRESULT _stdcall Position([out, retval] XlDataLabelPosition* RHS);
        [propput, helpcontext(0x00010085)]
        HRESULT _stdcall Position([in] XlDataLabelPosition RHS);
        [propget, helpcontext(0x000107e6)]
        HRESULT _stdcall ShowSeriesName([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107e6)]
        HRESULT _stdcall ShowSeriesName([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107e7)]
        HRESULT _stdcall ShowCategoryName([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107e7)]
        HRESULT _stdcall ShowCategoryName([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107e8)]
        HRESULT _stdcall ShowValue([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107e8)]
        HRESULT _stdcall ShowValue([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107e9)]
        HRESULT _stdcall ShowPercentage([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107e9)]
        HRESULT _stdcall ShowPercentage([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107ea)]
        HRESULT _stdcall ShowBubbleSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107ea)]
        HRESULT _stdcall ShowBubbleSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000107eb)]
        HRESULT _stdcall Separator([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000107eb)]
        HRESULT _stdcall Separator([in] VARIANT RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] DataLabel** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] DataLabel** RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(000208BA-0001-0000-C000-000000000046),
      helpcontext(0x0002007a),
      hidden
    ]
    interface ILegendEntry : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x000100ae)]
        HRESULT _stdcall LegendKey([out, retval] LegendKey** RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(000208BB-0001-0000-C000-000000000046),
      helpcontext(0x0002007b),
      hidden
    ]
    interface ILegendEntries : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] LegendEntry** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] LegendEntry** RHS);
    };

    [
      odl,
      uuid(000208BC-0001-0000-C000-000000000046),
      helpcontext(0x0002007c),
      hidden
    ]
    interface ILegendKey : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, hidden, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010070)]
        HRESULT _stdcall ClearFormats([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, hidden, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [propget, helpcontext(0x00010084)]
        HRESULT _stdcall InvertIfNegative([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010084)]
        HRESULT _stdcall InvertIfNegative([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010049)]
        HRESULT _stdcall MarkerBackgroundColor([out, retval] long* RHS);
        [propput, helpcontext(0x00010049)]
        HRESULT _stdcall MarkerBackgroundColor([in] long RHS);
        [propget, helpcontext(0x0001004a)]
        HRESULT _stdcall MarkerBackgroundColorIndex([out, retval] XlColorIndex* RHS);
        [propput, helpcontext(0x0001004a)]
        HRESULT _stdcall MarkerBackgroundColorIndex([in] XlColorIndex RHS);
        [propget, helpcontext(0x0001004b)]
        HRESULT _stdcall MarkerForegroundColor([out, retval] long* RHS);
        [propput, helpcontext(0x0001004b)]
        HRESULT _stdcall MarkerForegroundColor([in] long RHS);
        [propget, helpcontext(0x0001004c)]
        HRESULT _stdcall MarkerForegroundColorIndex([out, retval] XlColorIndex* RHS);
        [propput, helpcontext(0x0001004c)]
        HRESULT _stdcall MarkerForegroundColorIndex([in] XlColorIndex RHS);
        [propget, helpcontext(0x000100e7)]
        HRESULT _stdcall MarkerSize([out, retval] long* RHS);
        [propput, helpcontext(0x000100e7)]
        HRESULT _stdcall MarkerSize([in] long RHS);
        [propget, helpcontext(0x00010048)]
        HRESULT _stdcall MarkerStyle([out, retval] XlMarkerStyle* RHS);
        [propput, helpcontext(0x00010048)]
        HRESULT _stdcall MarkerStyle([in] XlMarkerStyle RHS);
        [propget, helpcontext(0x000100a1)]
        HRESULT _stdcall PictureType([out, retval] long* RHS);
        [propput, helpcontext(0x000100a1)]
        HRESULT _stdcall PictureType([in] long RHS);
        [propget, hidden, helpcontext(0x000100a2)]
        HRESULT _stdcall PictureUnit([out, retval] long* RHS);
        [propput, hidden, helpcontext(0x000100a2)]
        HRESULT _stdcall PictureUnit([in] long RHS);
        [hidden, helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100a3)]
        HRESULT _stdcall Smooth([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100a3)]
        HRESULT _stdcall Smooth([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a59)]
        HRESULT _stdcall PictureUnit2([out, retval] double* RHS);
        [propput, helpcontext(0x00010a59)]
        HRESULT _stdcall PictureUnit2([in] double RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(000208BD-0001-0000-C000-000000000046),
      helpcontext(0x0002007d),
      hidden
    ]
    interface ITrendlines : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in, optional, defaultvalue(-4132)] XlTrendlineType Type, 
                        [in, optional] VARIANT Order, 
                        [in, optional] VARIANT Period, 
                        [in, optional] VARIANT Forward, 
                        [in, optional] VARIANT Backward, 
                        [in, optional] VARIANT Intercept, 
                        [in, optional] VARIANT DisplayEquation, 
                        [in, optional] VARIANT DisplayRSquared, 
                        [in, optional] VARIANT Name, 
                        [out, retval] Trendline** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in, optional] VARIANT Index, 
                        [out, retval] Trendline** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in, optional] VARIANT Index, 
                        [out, retval] Trendline** RHS);
    };

    [
      odl,
      uuid(000208BE-0001-0000-C000-000000000046),
      helpcontext(0x0002007e),
      hidden
    ]
    interface ITrendline : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, hidden, helpcontext(0x000100b9)]
        HRESULT _stdcall Backward([out, retval] long* RHS);
        [propput, hidden, helpcontext(0x000100b9)]
        HRESULT _stdcall Backward([in] long RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010070)]
        HRESULT _stdcall ClearFormats([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001009e)]
        HRESULT _stdcall DataLabel([out, retval] DataLabel** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000100be)]
        HRESULT _stdcall DisplayEquation([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100be)]
        HRESULT _stdcall DisplayEquation([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000100bd)]
        HRESULT _stdcall DisplayRSquared([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100bd)]
        HRESULT _stdcall DisplayRSquared([in] VARIANT_BOOL RHS);
        [propget, hidden, helpcontext(0x000100bf)]
        HRESULT _stdcall Forward([out, retval] long* RHS);
        [propput, hidden, helpcontext(0x000100bf)]
        HRESULT _stdcall Forward([in] long RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x000100ba)]
        HRESULT _stdcall Intercept([out, retval] double* RHS);
        [propput, helpcontext(0x000100ba)]
        HRESULT _stdcall Intercept([in] double RHS);
        [propget, helpcontext(0x000100bb)]
        HRESULT _stdcall InterceptIsAuto([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100bb)]
        HRESULT _stdcall InterceptIsAuto([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, helpcontext(0x000100bc)]
        HRESULT _stdcall NameIsAuto([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100bc)]
        HRESULT _stdcall NameIsAuto([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000100c0)]
        HRESULT _stdcall Order([out, retval] long* RHS);
        [propput, helpcontext(0x000100c0)]
        HRESULT _stdcall Order([in] long RHS);
        [propget, helpcontext(0x000100b8)]
        HRESULT _stdcall Period([out, retval] long* RHS);
        [propput, helpcontext(0x000100b8)]
        HRESULT _stdcall Period([in] long RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] XlTrendlineType* RHS);
        [propput, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([in] XlTrendlineType RHS);
        [propget, helpcontext(0x00010a5a)]
        HRESULT _stdcall Backward2([out, retval] double* RHS);
        [propput, helpcontext(0x00010a5a)]
        HRESULT _stdcall Backward2([in] double RHS);
        [propget, helpcontext(0x00010a5b)]
        HRESULT _stdcall Forward2([out, retval] double* RHS);
        [propput, helpcontext(0x00010a5b)]
        HRESULT _stdcall Forward2([in] double RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(000208C0-0001-0000-C000-000000000046),
      helpcontext(0x00020080),
      hidden
    ]
    interface ICorners : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, hidden, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, hidden, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [hidden, helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
    };

    [
      odl,
      uuid(000208C1-0001-0000-C000-000000000046),
      helpcontext(0x00020081),
      hidden
    ]
    interface ISeriesLines : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(000208C2-0001-0000-C000-000000000046),
      helpcontext(0x00020082),
      hidden
    ]
    interface IHiLoLines : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(000208C3-0001-0000-C000-000000000046),
      helpcontext(0x00020083),
      hidden
    ]
    interface IGridlines : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(000208C4-0001-0000-C000-000000000046),
      helpcontext(0x00020084),
      hidden
    ]
    interface IDropLines : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(00024437-0001-0000-C000-000000000046),
      helpcontext(0x000200cd),
      hidden
    ]
    interface ILeaderLines : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select();
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(000208C5-0001-0000-C000-000000000046),
      helpcontext(0x00020085),
      hidden
    ]
    interface IUpBars : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, hidden, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(000208C6-0001-0000-C000-000000000046),
      helpcontext(0x00020086),
      hidden
    ]
    interface IDownBars : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, hidden, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(000208C7-0001-0000-C000-000000000046),
      helpcontext(0x00020087),
      hidden
    ]
    interface IFloor : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010070)]
        HRESULT _stdcall ClearFormats([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, hidden, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [propget, helpcontext(0x000100a1)]
        HRESULT _stdcall PictureType([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100a1)]
        HRESULT _stdcall PictureType([in] VARIANT RHS);
        [helpcontext(0x000100d3)]
        HRESULT _stdcall Paste();
        [propget, helpcontext(0x00010a5c)]
        HRESULT _stdcall Thickness([out, retval] long* RHS);
        [propput, helpcontext(0x00010a5c)]
        HRESULT _stdcall Thickness([in] long RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(000208C8-0001-0000-C000-000000000046),
      helpcontext(0x00020088),
      hidden
    ]
    interface IWalls : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010070)]
        HRESULT _stdcall ClearFormats([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, hidden, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [propget, helpcontext(0x000100a1)]
        HRESULT _stdcall PictureType([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100a1)]
        HRESULT _stdcall PictureType([in] VARIANT RHS);
        [helpcontext(0x000100d3)]
        HRESULT _stdcall Paste();
        [propget, helpcontext(0x000100a2)]
        HRESULT _stdcall PictureUnit([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100a2)]
        HRESULT _stdcall PictureUnit([in] VARIANT RHS);
        [propget, helpcontext(0x00010a5c)]
        HRESULT _stdcall Thickness([out, retval] long* RHS);
        [propput, helpcontext(0x00010a5c)]
        HRESULT _stdcall Thickness([in] long RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(000208C9-0001-0000-C000-000000000046),
      helpcontext(0x00020089),
      hidden
    ]
    interface ITickLabels : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([in] BSTR RHS);
        [propget, helpcontext(0x000100c2)]
        HRESULT _stdcall NumberFormatLinked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100c2)]
        HRESULT _stdcall NumberFormatLinked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010449)]
        HRESULT _stdcall NumberFormatLocal([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010449)]
        HRESULT _stdcall NumberFormatLocal([in] VARIANT RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] XlTickLabelOrientation* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] XlTickLabelOrientation RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010762)]
        HRESULT _stdcall Depth([out, retval] long* RHS);
        [propget, helpcontext(0x000100fe)]
        HRESULT _stdcall Offset([out, retval] long* RHS);
        [propput, helpcontext(0x000100fe)]
        HRESULT _stdcall Offset([in] long RHS);
        [propget, helpcontext(0x000101c5)]
        HRESULT _stdcall Alignment([out, retval] long* RHS);
        [propput, helpcontext(0x000101c5)]
        HRESULT _stdcall Alignment([in] long RHS);
        [propget, helpcontext(0x00010a5d)]
        HRESULT _stdcall MultiLevel([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a5d)]
        HRESULT _stdcall MultiLevel([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(000208CB-0001-0000-C000-000000000046),
      helpcontext(0x0002008a),
      hidden
    ]
    interface IPlotArea : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010070)]
        HRESULT _stdcall ClearFormats([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, hidden, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, hidden, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, hidden, helpcontext(0x00010a5e)]
        HRESULT _stdcall _InsideLeft([out, retval] double* RHS);
        [propget, hidden, helpcontext(0x00010a5f)]
        HRESULT _stdcall _InsideTop([out, retval] double* RHS);
        [propget, hidden, helpcontext(0x00010a60)]
        HRESULT _stdcall _InsideWidth([out, retval] double* RHS);
        [propget, hidden, helpcontext(0x00010a61)]
        HRESULT _stdcall _InsideHeight([out, retval] double* RHS);
        [propget, helpcontext(0x00010683)]
        HRESULT _stdcall InsideLeft([out, retval] double* RHS);
        [propput, helpcontext(0x00010683)]
        HRESULT _stdcall InsideLeft([in] double RHS);
        [propget, helpcontext(0x00010684)]
        HRESULT _stdcall InsideTop([out, retval] double* RHS);
        [propput, helpcontext(0x00010684)]
        HRESULT _stdcall InsideTop([in] double RHS);
        [propget, helpcontext(0x00010685)]
        HRESULT _stdcall InsideWidth([out, retval] double* RHS);
        [propput, helpcontext(0x00010685)]
        HRESULT _stdcall InsideWidth([in] double RHS);
        [propget, helpcontext(0x00010686)]
        HRESULT _stdcall InsideHeight([out, retval] double* RHS);
        [propput, helpcontext(0x00010686)]
        HRESULT _stdcall InsideHeight([in] double RHS);
        [propget, helpcontext(0x00010085)]
        HRESULT _stdcall Position([out, retval] XlChartElementPosition* RHS);
        [propput, helpcontext(0x00010085)]
        HRESULT _stdcall Position([in] XlChartElementPosition RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(000208CC-0001-0000-C000-000000000046),
      helpcontext(0x0002008b),
      hidden
    ]
    interface IChartArea : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x0001006f)]
        HRESULT _stdcall Clear([out, retval] VARIANT* RHS);
        [helpcontext(0x00010071)]
        HRESULT _stdcall ClearContents([out, retval] VARIANT* RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010070)]
        HRESULT _stdcall ClearFormats([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, hidden, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, hidden, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
        [propget, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026b)]
        HRESULT _stdcall RoundedCorners([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(000208CD-0001-0000-C000-000000000046),
      helpcontext(0x0002008c),
      hidden
    ]
    interface ILegend : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [helpcontext(0x000100ad)]
        HRESULT _stdcall LegendEntries(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010085)]
        HRESULT _stdcall Position([out, retval] XlLegendPosition* RHS);
        [propput, helpcontext(0x00010085)]
        HRESULT _stdcall Position([in] XlLegendPosition RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [helpcontext(0x0001006f)]
        HRESULT _stdcall Clear([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] double* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] double RHS);
        [propget, hidden, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, hidden, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] double* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] double RHS);
        [propget, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010a58)]
        HRESULT _stdcall IncludeInLayout([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a58)]
        HRESULT _stdcall IncludeInLayout([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(000208CE-0001-0000-C000-000000000046),
      helpcontext(0x0002008d),
      hidden
    ]
    interface IErrorBars : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [helpcontext(0x00010070)]
        HRESULT _stdcall ClearFormats([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010464)]
        HRESULT _stdcall EndStyle([out, retval] XlEndStyleCap* RHS);
        [propput, helpcontext(0x00010464)]
        HRESULT _stdcall EndStyle([in] XlEndStyleCap RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(00020843-0001-0000-C000-000000000046),
      helpcontext(0x00020003),
      hidden
    ]
    interface IDataTable : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000100ab)]
        HRESULT _stdcall ShowLegendKey([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000100ab)]
        HRESULT _stdcall ShowLegendKey([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010687)]
        HRESULT _stdcall HasBorderHorizontal([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010687)]
        HRESULT _stdcall HasBorderHorizontal([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010688)]
        HRESULT _stdcall HasBorderVertical([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010688)]
        HRESULT _stdcall HasBorderVertical([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010689)]
        HRESULT _stdcall HasBorderOutline([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010689)]
        HRESULT _stdcall HasBorderOutline([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select();
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(00024438-0001-0000-C000-000000000046),
      helpcontext(0x000200ce),
      hidden
    ]
    interface IPhonetic : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001068a)]
        HRESULT _stdcall CharacterType([out, retval] long* RHS);
        [propput, helpcontext(0x0001068a)]
        HRESULT _stdcall CharacterType([in] long RHS);
        [propget, helpcontext(0x000101c5)]
        HRESULT _stdcall Alignment([out, retval] long* RHS);
        [propput, helpcontext(0x000101c5)]
        HRESULT _stdcall Alignment([in] long RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
    };

    [
      odl,
      uuid(00024439-0001-0000-C000-000000000046),
      helpcontext(0x000200cf),
      hidden
    ]
    interface IShape : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x0001068b)]
        HRESULT _stdcall Apply();
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] Shape** RHS);
        [helpcontext(0x0001068c)]
        HRESULT _stdcall Flip([in] MsoFlipCmd FlipCmd);
        [helpcontext(0x0001068e)]
        HRESULT _stdcall IncrementLeft([in] single Increment);
        [helpcontext(0x00010690)]
        HRESULT _stdcall IncrementRotation([in] single Increment);
        [helpcontext(0x00010691)]
        HRESULT _stdcall IncrementTop([in] single Increment);
        [helpcontext(0x00010692)]
        HRESULT _stdcall PickUp();
        [helpcontext(0x00010693)]
        HRESULT _stdcall RerouteConnections();
        [helpcontext(0x00010694)]
        HRESULT _stdcall ScaleHeight(
                        [in] single Factor, 
                        [in] MsoTriState RelativeToOriginalSize, 
                        [in, optional] VARIANT Scale);
        [helpcontext(0x00010698)]
        HRESULT _stdcall ScaleWidth(
                        [in] single Factor, 
                        [in] MsoTriState RelativeToOriginalSize, 
                        [in, optional] VARIANT Scale);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([in, optional] VARIANT Replace);
        [helpcontext(0x00010699)]
        HRESULT _stdcall SetShapesDefaultProperties();
        [helpcontext(0x000100f4)]
        HRESULT _stdcall Ungroup([out, retval] ShapeRange** RHS);
        [helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([in] MsoZOrderCmd ZOrderCmd);
        [propget, helpcontext(0x0001069b)]
        HRESULT _stdcall Adjustments([out, retval] Adjustments** RHS);
        [propget, helpcontext(0x0001069c)]
        HRESULT _stdcall TextFrame([out, retval] TextFrame** RHS);
        [propget, helpcontext(0x0001069d)]
        HRESULT _stdcall AutoShapeType([out, retval] MsoAutoShapeType* RHS);
        [propput, helpcontext(0x0001069d)]
        HRESULT _stdcall AutoShapeType([in] MsoAutoShapeType RHS);
        [propget, helpcontext(0x0001069e)]
        HRESULT _stdcall Callout([out, retval] CalloutFormat** RHS);
        [propget, helpcontext(0x0001069f)]
        HRESULT _stdcall ConnectionSiteCount([out, retval] long* RHS);
        [propget, helpcontext(0x000106a0)]
        HRESULT _stdcall Connector([out, retval] MsoTriState* RHS);
        [propget, helpcontext(0x000106a1)]
        HRESULT _stdcall ConnectorFormat([out, retval] ConnectorFormat** RHS);
        [propget, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] FillFormat** RHS);
        [propget, helpcontext(0x000106a2)]
        HRESULT _stdcall GroupItems([out, retval] GroupShapes** RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] single* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] single RHS);
        [propget, helpcontext(0x000106a3)]
        HRESULT _stdcall HorizontalFlip([out, retval] MsoTriState* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] single* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] single RHS);
        [propget, helpcontext(0x00010331)]
        HRESULT _stdcall Line([out, retval] LineFormat** RHS);
        [propget, helpcontext(0x000106a4)]
        HRESULT _stdcall LockAspectRatio([out, retval] MsoTriState* RHS);
        [propput, helpcontext(0x000106a4)]
        HRESULT _stdcall LockAspectRatio([in] MsoTriState RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, helpcontext(0x000106a5)]
        HRESULT _stdcall Nodes([out, retval] ShapeNodes** RHS);
        [propget, helpcontext(0x0001003b)]
        HRESULT _stdcall Rotation([out, retval] single* RHS);
        [propput, helpcontext(0x0001003b)]
        HRESULT _stdcall Rotation([in] single RHS);
        [propget, helpcontext(0x0001065f)]
        HRESULT _stdcall PictureFormat([out, retval] PictureFormat** RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] ShadowFormat** RHS);
        [propget, helpcontext(0x000106a6)]
        HRESULT _stdcall TextEffect([out, retval] TextEffectFormat** RHS);
        [propget, helpcontext(0x000106a7)]
        HRESULT _stdcall ThreeD([out, retval] ThreeDFormat** RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] single* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] single RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] MsoShapeType* RHS);
        [propget, helpcontext(0x000106a8)]
        HRESULT _stdcall VerticalFlip([out, retval] MsoTriState* RHS);
        [propget, helpcontext(0x0001026d)]
        HRESULT _stdcall Vertices([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] MsoTriState* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] MsoTriState RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] single* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] single RHS);
        [propget, helpcontext(0x000106a9)]
        HRESULT _stdcall ZOrderPosition([out, retval] long* RHS);
        [propget, helpcontext(0x000106aa)]
        HRESULT _stdcall Hyperlink([out, retval] Hyperlink** RHS);
        [propget, helpcontext(0x000106ab)]
        HRESULT _stdcall BlackWhiteMode([out, retval] MsoBlackWhiteMode* RHS);
        [propput, helpcontext(0x000106ab)]
        HRESULT _stdcall BlackWhiteMode([in] MsoBlackWhiteMode RHS);
        [propget, hidden, helpcontext(0x000106ac)]
        HRESULT _stdcall DrawingObject([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010254)]
        HRESULT _stdcall OnAction([in] BSTR RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001026c)]
        HRESULT _stdcall TopLeftCell([out, retval] Range** RHS);
        [propget, helpcontext(0x00010267)]
        HRESULT _stdcall BottomRightCell([out, retval] Range** RHS);
        [propget, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([out, retval] XlPlacement* RHS);
        [propput, helpcontext(0x00010269)]
        HRESULT _stdcall Placement([in] XlPlacement RHS);
        [helpcontext(0x00010227)]
        HRESULT _stdcall Copy();
        [helpcontext(0x00010235)]
        HRESULT _stdcall Cut();
        [helpcontext(0x000100d5)]
        HRESULT _stdcall CopyPicture(
                        [in, optional] VARIANT Appearance, 
                        [in, optional] VARIANT Format);
        [propget, helpcontext(0x000106ad)]
        HRESULT _stdcall ControlFormat([out, retval] ControlFormat** RHS);
        [propget, helpcontext(0x000106ae)]
        HRESULT _stdcall LinkFormat([out, retval] LinkFormat** RHS);
        [propget, helpcontext(0x000106af)]
        HRESULT _stdcall OLEFormat([out, retval] OLEFormat** RHS);
        [propget, helpcontext(0x000106b0)]
        HRESULT _stdcall FormControlType([out, retval] XlFormControl* RHS);
        [propget, helpcontext(0x00010763)]
        HRESULT _stdcall AlternativeText([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010763)]
        HRESULT _stdcall AlternativeText([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010764)]
        HRESULT _stdcall Script([out, retval] Script** RHS);
        [propget, hidden, helpcontext(0x00010875)]
        HRESULT _stdcall DiagramNode([out, retval] DiagramNode** RHS);
        [propget, hidden, helpcontext(0x00010876)]
        HRESULT _stdcall HasDiagramNode([out, retval] MsoTriState* RHS);
        [propget, hidden, helpcontext(0x00010877)]
        HRESULT _stdcall Diagram([out, retval] Diagram** RHS);
        [propget, hidden, helpcontext(0x00010878)]
        HRESULT _stdcall HasDiagram([out, retval] MsoTriState* RHS);
        [propget, helpcontext(0x00010879)]
        HRESULT _stdcall Child([out, retval] MsoTriState* RHS);
        [propget, helpcontext(0x0001087a)]
        HRESULT _stdcall ParentGroup([out, retval] Shape** RHS);
        [propget, hidden, helpcontext(0x0001087b)]
        HRESULT _stdcall CanvasItems([out, retval] CanvasShapes** RHS);
        [propget, helpcontext(0x0001023a)]
        HRESULT _stdcall ID([out, retval] long* RHS);
        [hidden, helpcontext(0x0001087c)]
        HRESULT _stdcall CanvasCropLeft([in] single Increment);
        [hidden, helpcontext(0x0001087d)]
        HRESULT _stdcall CanvasCropTop([in] single Increment);
        [hidden, helpcontext(0x0001087e)]
        HRESULT _stdcall CanvasCropRight([in] single Increment);
        [hidden, helpcontext(0x0001087f)]
        HRESULT _stdcall CanvasCropBottom([in] single Increment);
        [propget, helpcontext(0x00010007)]
        HRESULT _stdcall Chart([out, retval] Chart** RHS);
        [propget, helpcontext(0x00010a62)]
        HRESULT _stdcall HasChart([out, retval] MsoTriState* RHS);
        [propget, helpcontext(0x00010a63)]
        HRESULT _stdcall TextFrame2([out, retval] TextFrame2** RHS);
        [propget, helpcontext(0x00010a64)]
        HRESULT _stdcall ShapeStyle([out, retval] MsoShapeStyleIndex* RHS);
        [propput, helpcontext(0x00010a64)]
        HRESULT _stdcall ShapeStyle([in] MsoShapeStyleIndex RHS);
        [propget, helpcontext(0x00010a65)]
        HRESULT _stdcall BackgroundStyle([out, retval] MsoBackgroundStyleIndex* RHS);
        [propput, helpcontext(0x00010a65)]
        HRESULT _stdcall BackgroundStyle([in] MsoBackgroundStyleIndex RHS);
        [propget, helpcontext(0x00010a66)]
        HRESULT _stdcall SoftEdge([out, retval] SoftEdgeFormat** RHS);
        [propget, helpcontext(0x00010a67)]
        HRESULT _stdcall Glow([out, retval] GlowFormat** RHS);
        [propget, helpcontext(0x00010a68)]
        HRESULT _stdcall Reflection([out, retval] ReflectionFormat** RHS);
    };

    [
      odl,
      uuid(0002443A-0001-0000-C000-000000000046),
      helpcontext(0x000200d0),
      hidden
    ]
    interface IShapes : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] Shape** RHS);
        [helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] Shape** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x000106b1)]
        HRESULT _stdcall AddCallout(
                        [in] MsoCalloutType Type, 
                        [in] single Left, 
                        [in] single Top, 
                        [in] single Width, 
                        [in] single Height, 
                        [out, retval] Shape** RHS);
        [helpcontext(0x000106b2)]
        HRESULT _stdcall AddConnector(
                        [in] MsoConnectorType Type, 
                        [in] single BeginX, 
                        [in] single BeginY, 
                        [in] single EndX, 
                        [in] single EndY, 
                        [out, retval] Shape** RHS);
        [helpcontext(0x000106b7)]
        HRESULT _stdcall AddCurve(
                        [in] VARIANT SafeArrayOfPoints, 
                        [out, retval] Shape** RHS);
        [helpcontext(0x000106b9)]
        HRESULT _stdcall AddLabel(
                        [in] MsoTextOrientation Orientation, 
                        [in] single Left, 
                        [in] single Top, 
                        [in] single Width, 
                        [in] single Height, 
                        [out, retval] Shape** RHS);
        [helpcontext(0x000106ba)]
        HRESULT _stdcall AddLine(
                        [in] single BeginX, 
                        [in] single BeginY, 
                        [in] single EndX, 
                        [in] single EndY, 
                        [out, retval] Shape** RHS);
        [helpcontext(0x000106bb)]
        HRESULT _stdcall AddPicture(
                        [in] BSTR Filename, 
                        [in] MsoTriState LinkToFile, 
                        [in] MsoTriState SaveWithDocument, 
                        [in] single Left, 
                        [in] single Top, 
                        [in] single Width, 
                        [in] single Height, 
                        [out, retval] Shape** RHS);
        [helpcontext(0x000106be)]
        HRESULT _stdcall AddPolyline(
                        [in] VARIANT SafeArrayOfPoints, 
                        [out, retval] Shape** RHS);
        [helpcontext(0x000106bf)]
        HRESULT _stdcall AddShape(
                        [in] MsoAutoShapeType Type, 
                        [in] single Left, 
                        [in] single Top, 
                        [in] single Width, 
                        [in] single Height, 
                        [out, retval] Shape** RHS);
        [helpcontext(0x000106c0)]
        HRESULT _stdcall AddTextEffect(
                        [in] MsoPresetTextEffect PresetTextEffect, 
                        [in] BSTR Text, 
                        [in] BSTR FontName, 
                        [in] single FontSize, 
                        [in] MsoTriState FontBold, 
                        [in] MsoTriState FontItalic, 
                        [in] single Left, 
                        [in] single Top, 
                        [out, retval] Shape** RHS);
        [helpcontext(0x000106c6)]
        HRESULT _stdcall AddTextbox(
                        [in] MsoTextOrientation Orientation, 
                        [in] single Left, 
                        [in] single Top, 
                        [in] single Width, 
                        [in] single Height, 
                        [out, retval] Shape** RHS);
        [helpcontext(0x000106c7)]
        HRESULT _stdcall BuildFreeform(
                        [in] MsoEditingType EditingType, 
                        [in] single X1, 
                        [in] single Y1, 
                        [out, retval] FreeformBuilder** RHS);
        [propget, helpcontext(0x000100c5)]
        HRESULT _stdcall Range(
                        [in] VARIANT Index, 
                        [out, retval] ShapeRange** RHS);
        [helpcontext(0x000106c9)]
        HRESULT _stdcall SelectAll();
        [helpcontext(0x000106ca)]
        HRESULT _stdcall AddFormControl(
                        [in] XlFormControl Type, 
                        [in] long Left, 
                        [in] long Top, 
                        [in] long Width, 
                        [in] long Height, 
                        [out, retval] Shape** RHS);
        [helpcontext(0x000106cb)]
        HRESULT _stdcall AddOLEObject(
                        [in, optional] VARIANT ClassType, 
                        [in, optional] VARIANT Filename, 
                        [in, optional] VARIANT Link, 
                        [in, optional] VARIANT DisplayAsIcon, 
                        [in, optional] VARIANT IconFileName, 
                        [in, optional] VARIANT IconIndex, 
                        [in, optional] VARIANT IconLabel, 
                        [in, optional] VARIANT Left, 
                        [in, optional] VARIANT Top, 
                        [in, optional] VARIANT Width, 
                        [in, optional] VARIANT Height, 
                        [out, retval] Shape** RHS);
        [hidden, helpcontext(0x00010880)]
        HRESULT _stdcall AddDiagram(
                        [in] MsoDiagramType Type, 
                        [in] single Left, 
                        [in] single Top, 
                        [in] single Width, 
                        [in] single Height, 
                        [out, retval] Shape** RHS);
        [hidden, helpcontext(0x00010881)]
        HRESULT _stdcall AddCanvas(
                        [in] single Left, 
                        [in] single Top, 
                        [in] single Width, 
                        [in] single Height, 
                        [out, retval] Shape** RHS);
        [helpcontext(0x00010a69)]
        HRESULT _stdcall AddChart(
                        [in, optional] VARIANT XlChartType, 
                        [in, optional] VARIANT Left, 
                        [in, optional] VARIANT Top, 
                        [in, optional] VARIANT Width, 
                        [in, optional] VARIANT Height, 
                        [out, retval] Shape** RHS);
    };

    [
      odl,
      uuid(0002443B-0001-0000-C000-000000000046),
      helpcontext(0x000200d1),
      hidden
    ]
    interface IShapeRange : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] Shape** RHS);
        [helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] Shape** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x000106cc)]
        HRESULT _stdcall Align(
                        [in] MsoAlignCmd AlignCmd, 
                        [in] MsoTriState RelativeTo);
        [helpcontext(0x0001068b)]
        HRESULT _stdcall Apply();
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x000106ce)]
        HRESULT _stdcall Distribute(
                        [in] MsoDistributeCmd DistributeCmd, 
                        [in] MsoTriState RelativeTo);
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate([out, retval] ShapeRange** RHS);
        [helpcontext(0x0001068c)]
        HRESULT _stdcall Flip([in] MsoFlipCmd FlipCmd);
        [helpcontext(0x0001068e)]
        HRESULT _stdcall IncrementLeft([in] single Increment);
        [helpcontext(0x00010690)]
        HRESULT _stdcall IncrementRotation([in] single Increment);
        [helpcontext(0x00010691)]
        HRESULT _stdcall IncrementTop([in] single Increment);
        [helpcontext(0x0001002e)]
        HRESULT _stdcall Group([out, retval] Shape** RHS);
        [helpcontext(0x00010692)]
        HRESULT _stdcall PickUp();
        [helpcontext(0x00010693)]
        HRESULT _stdcall RerouteConnections();
        [helpcontext(0x000106d0)]
        HRESULT _stdcall Regroup([out, retval] Shape** RHS);
        [helpcontext(0x00010694)]
        HRESULT _stdcall ScaleHeight(
                        [in] single Factor, 
                        [in] MsoTriState RelativeToOriginalSize, 
                        [in, optional] VARIANT Scale);
        [helpcontext(0x00010698)]
        HRESULT _stdcall ScaleWidth(
                        [in] single Factor, 
                        [in] MsoTriState RelativeToOriginalSize, 
                        [in, optional] VARIANT Scale);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([in, optional] VARIANT Replace);
        [helpcontext(0x00010699)]
        HRESULT _stdcall SetShapesDefaultProperties();
        [helpcontext(0x000100f4)]
        HRESULT _stdcall Ungroup([out, retval] ShapeRange** RHS);
        [helpcontext(0x0001026e)]
        HRESULT _stdcall ZOrder([in] MsoZOrderCmd ZOrderCmd);
        [propget, helpcontext(0x0001069b)]
        HRESULT _stdcall Adjustments([out, retval] Adjustments** RHS);
        [propget, helpcontext(0x0001069c)]
        HRESULT _stdcall TextFrame([out, retval] TextFrame** RHS);
        [propget, helpcontext(0x0001069d)]
        HRESULT _stdcall AutoShapeType([out, retval] MsoAutoShapeType* RHS);
        [propput, helpcontext(0x0001069d)]
        HRESULT _stdcall AutoShapeType([in] MsoAutoShapeType RHS);
        [propget, helpcontext(0x0001069e)]
        HRESULT _stdcall Callout([out, retval] CalloutFormat** RHS);
        [propget, helpcontext(0x0001069f)]
        HRESULT _stdcall ConnectionSiteCount([out, retval] long* RHS);
        [propget, helpcontext(0x000106a0)]
        HRESULT _stdcall Connector([out, retval] MsoTriState* RHS);
        [propget, helpcontext(0x000106a1)]
        HRESULT _stdcall ConnectorFormat([out, retval] ConnectorFormat** RHS);
        [propget, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] FillFormat** RHS);
        [propget, helpcontext(0x000106a2)]
        HRESULT _stdcall GroupItems([out, retval] GroupShapes** RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] single* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] single RHS);
        [propget, helpcontext(0x000106a3)]
        HRESULT _stdcall HorizontalFlip([out, retval] MsoTriState* RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] single* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] single RHS);
        [propget, helpcontext(0x00010331)]
        HRESULT _stdcall Line([out, retval] LineFormat** RHS);
        [propget, helpcontext(0x000106a4)]
        HRESULT _stdcall LockAspectRatio([out, retval] MsoTriState* RHS);
        [propput, helpcontext(0x000106a4)]
        HRESULT _stdcall LockAspectRatio([in] MsoTriState RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, helpcontext(0x000106a5)]
        HRESULT _stdcall Nodes([out, retval] ShapeNodes** RHS);
        [propget, helpcontext(0x0001003b)]
        HRESULT _stdcall Rotation([out, retval] single* RHS);
        [propput, helpcontext(0x0001003b)]
        HRESULT _stdcall Rotation([in] single RHS);
        [propget, helpcontext(0x0001065f)]
        HRESULT _stdcall PictureFormat([out, retval] PictureFormat** RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] ShadowFormat** RHS);
        [propget, helpcontext(0x000106a6)]
        HRESULT _stdcall TextEffect([out, retval] TextEffectFormat** RHS);
        [propget, helpcontext(0x000106a7)]
        HRESULT _stdcall ThreeD([out, retval] ThreeDFormat** RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] single* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] single RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] MsoShapeType* RHS);
        [propget, helpcontext(0x000106a8)]
        HRESULT _stdcall VerticalFlip([out, retval] MsoTriState* RHS);
        [propget, helpcontext(0x0001026d)]
        HRESULT _stdcall Vertices([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] MsoTriState* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] MsoTriState RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] single* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] single RHS);
        [propget, helpcontext(0x000106a9)]
        HRESULT _stdcall ZOrderPosition([out, retval] long* RHS);
        [propget, helpcontext(0x000106ab)]
        HRESULT _stdcall BlackWhiteMode([out, retval] MsoBlackWhiteMode* RHS);
        [propput, helpcontext(0x000106ab)]
        HRESULT _stdcall BlackWhiteMode([in] MsoBlackWhiteMode RHS);
        [propget, helpcontext(0x00010763)]
        HRESULT _stdcall AlternativeText([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010763)]
        HRESULT _stdcall AlternativeText([in] BSTR RHS);
        [propget, hidden, helpcontext(0x00010875)]
        HRESULT _stdcall DiagramNode([out, retval] DiagramNode** RHS);
        [propget, hidden, helpcontext(0x00010876)]
        HRESULT _stdcall HasDiagramNode([out, retval] MsoTriState* RHS);
        [propget, hidden, helpcontext(0x00010877)]
        HRESULT _stdcall Diagram([out, retval] Diagram** RHS);
        [propget, hidden, helpcontext(0x00010878)]
        HRESULT _stdcall HasDiagram([out, retval] MsoTriState* RHS);
        [propget, helpcontext(0x00010879)]
        HRESULT _stdcall Child([out, retval] MsoTriState* RHS);
        [propget, helpcontext(0x0001087a)]
        HRESULT _stdcall ParentGroup([out, retval] Shape** RHS);
        [propget, hidden, helpcontext(0x0001087b)]
        HRESULT _stdcall CanvasItems([out, retval] CanvasShapes** RHS);
        [propget, helpcontext(0x0001023a)]
        HRESULT _stdcall ID([out, retval] long* RHS);
        [hidden, helpcontext(0x0001087c)]
        HRESULT _stdcall CanvasCropLeft([in] single Increment);
        [hidden, helpcontext(0x0001087d)]
        HRESULT _stdcall CanvasCropTop([in] single Increment);
        [hidden, helpcontext(0x0001087e)]
        HRESULT _stdcall CanvasCropRight([in] single Increment);
        [hidden, helpcontext(0x0001087f)]
        HRESULT _stdcall CanvasCropBottom([in] single Increment);
        [propget, helpcontext(0x00010007)]
        HRESULT _stdcall Chart([out, retval] Chart** RHS);
        [propget, helpcontext(0x00010a62)]
        HRESULT _stdcall HasChart([out, retval] MsoTriState* RHS);
        [propget, helpcontext(0x00010a63)]
        HRESULT _stdcall TextFrame2([out, retval] TextFrame2** RHS);
        [propget, helpcontext(0x00010a64)]
        HRESULT _stdcall ShapeStyle([out, retval] MsoShapeStyleIndex* RHS);
        [propput, helpcontext(0x00010a64)]
        HRESULT _stdcall ShapeStyle([in] MsoShapeStyleIndex RHS);
        [propget, helpcontext(0x00010a65)]
        HRESULT _stdcall BackgroundStyle([out, retval] MsoBackgroundStyleIndex* RHS);
        [propput, helpcontext(0x00010a65)]
        HRESULT _stdcall BackgroundStyle([in] MsoBackgroundStyleIndex RHS);
        [propget, helpcontext(0x00010a66)]
        HRESULT _stdcall SoftEdge([out, retval] SoftEdgeFormat** RHS);
        [propget, helpcontext(0x00010a67)]
        HRESULT _stdcall Glow([out, retval] GlowFormat** RHS);
        [propget, helpcontext(0x00010a68)]
        HRESULT _stdcall Reflection([out, retval] ReflectionFormat** RHS);
    };

    [
      odl,
      uuid(0002443C-0001-0000-C000-000000000046),
      helpcontext(0x000200d2),
      hidden
    ]
    interface IGroupShapes : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] Shape** RHS);
        [helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] Shape** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x000100c5)]
        HRESULT _stdcall Range(
                        [in] VARIANT Index, 
                        [out, retval] ShapeRange** RHS);
    };

    [
      odl,
      uuid(0002443D-0001-0000-C000-000000000046),
      helpcontext(0x000200d3),
      hidden
    ]
    interface ITextFrame : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000106d1)]
        HRESULT _stdcall MarginBottom([out, retval] single* RHS);
        [propput, helpcontext(0x000106d1)]
        HRESULT _stdcall MarginBottom([in] single RHS);
        [propget, helpcontext(0x000106d2)]
        HRESULT _stdcall MarginLeft([out, retval] single* RHS);
        [propput, helpcontext(0x000106d2)]
        HRESULT _stdcall MarginLeft([in] single RHS);
        [propget, helpcontext(0x000106d3)]
        HRESULT _stdcall MarginRight([out, retval] single* RHS);
        [propput, helpcontext(0x000106d3)]
        HRESULT _stdcall MarginRight([in] single RHS);
        [propget, helpcontext(0x000106d4)]
        HRESULT _stdcall MarginTop([out, retval] single* RHS);
        [propput, helpcontext(0x000106d4)]
        HRESULT _stdcall MarginTop([in] single RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] MsoTextOrientation* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] MsoTextOrientation RHS);
        [helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] XlHAlign* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] XlHAlign RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] XlVAlign* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] XlVAlign RHS);
        [propget, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010266)]
        HRESULT _stdcall AutoSize([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, helpcontext(0x000106d5)]
        HRESULT _stdcall AutoMargins([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000106d5)]
        HRESULT _stdcall AutoMargins([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(0002443E-0001-0000-C000-000000000046),
      helpcontext(0x000200d4),
      hidden
    ]
    interface IConnectorFormat : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000106d6)]
        HRESULT _stdcall BeginConnect(
                        [in] Shape* ConnectedShape, 
                        [in] long ConnectionSite);
        [helpcontext(0x000106d9)]
        HRESULT _stdcall BeginDisconnect();
        [helpcontext(0x000106da)]
        HRESULT _stdcall EndConnect(
                        [in] Shape* ConnectedShape, 
                        [in] long ConnectionSite);
        [helpcontext(0x000106db)]
        HRESULT _stdcall EndDisconnect();
        [propget, helpcontext(0x000106dc)]
        HRESULT _stdcall BeginConnected([out, retval] MsoTriState* RHS);
        [propget, helpcontext(0x000106dd)]
        HRESULT _stdcall BeginConnectedShape([out, retval] Shape** RHS);
        [propget, helpcontext(0x000106de)]
        HRESULT _stdcall BeginConnectionSite([out, retval] long* RHS);
        [propget, helpcontext(0x000106df)]
        HRESULT _stdcall EndConnected([out, retval] MsoTriState* RHS);
        [propget, helpcontext(0x000106e0)]
        HRESULT _stdcall EndConnectedShape([out, retval] Shape** RHS);
        [propget, helpcontext(0x000106e1)]
        HRESULT _stdcall EndConnectionSite([out, retval] long* RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] MsoConnectorType* RHS);
        [propput, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([in] MsoConnectorType RHS);
    };

    [
      odl,
      uuid(0002443F-0001-0000-C000-000000000046),
      helpcontext(0x000200d5),
      hidden
    ]
    interface IFreeformBuilder : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000106e2)]
        HRESULT _stdcall AddNodes(
                        [in] MsoSegmentType SegmentType, 
                        [in] MsoEditingType EditingType, 
                        [in] single X1, 
                        [in] single Y1, 
                        [in, optional] VARIANT X2, 
                        [in, optional] VARIANT Y2, 
                        [in, optional] VARIANT X3, 
                        [in, optional] VARIANT Y3);
        [helpcontext(0x000106e6)]
        HRESULT _stdcall ConvertToShape([out, retval] Shape** RHS);
    };

    [
      odl,
      uuid(00024440-0001-0000-C000-000000000046),
      helpcontext(0x000200d6),
      hidden
    ]
    interface IControlFormat : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010353)]
        HRESULT _stdcall AddItem(
                        [in] BSTR Text, 
                        [in, optional] VARIANT Index);
        [helpcontext(0x00010355)]
        HRESULT _stdcall RemoveAllItems();
        [helpcontext(0x00010354)]
        HRESULT _stdcall RemoveItem(
                        [in] long Index, 
                        [in, optional] VARIANT Count);
        [propget, helpcontext(0x00010350)]
        HRESULT _stdcall DropDownLines([out, retval] long* RHS);
        [propput, helpcontext(0x00010350)]
        HRESULT _stdcall DropDownLines([in] long RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001034d)]
        HRESULT _stdcall LargeChange([out, retval] long* RHS);
        [propput, helpcontext(0x0001034d)]
        HRESULT _stdcall LargeChange([in] long RHS);
        [propget, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010422)]
        HRESULT _stdcall LinkedCell([in] BSTR RHS);
        [helpcontext(0x0001035d)          custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, propget)]
        HRESULT _stdcall List(
                        [in, optional] VARIANT Index, 
                        [out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010351)]
        HRESULT _stdcall ListCount([out, retval] long* RHS);
        [propput, helpcontext(0x00010351)]
        HRESULT _stdcall ListCount([in] long RHS);
        [propget, helpcontext(0x0001034f)]
        HRESULT _stdcall ListFillRange([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001034f)]
        HRESULT _stdcall ListFillRange([in] BSTR RHS);
        [propget, helpcontext(0x00010352)]
        HRESULT _stdcall ListIndex([out, retval] long* RHS);
        [propput, helpcontext(0x00010352)]
        HRESULT _stdcall ListIndex([in] long RHS);
        [propget, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010268)]
        HRESULT _stdcall LockedText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001034a)]
        HRESULT _stdcall Max([out, retval] long* RHS);
        [propput, helpcontext(0x0001034a)]
        HRESULT _stdcall Max([in] long RHS);
        [propget, helpcontext(0x0001034b)]
        HRESULT _stdcall Min([out, retval] long* RHS);
        [propput, helpcontext(0x0001034b)]
        HRESULT _stdcall Min([in] long RHS);
        [propget, helpcontext(0x00010020)]
        HRESULT _stdcall MultiSelect([out, retval] long* RHS);
        [propput, helpcontext(0x00010020)]
        HRESULT _stdcall MultiSelect([in] long RHS);
        [propget, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001026a)]
        HRESULT _stdcall PrintObject([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001034c)]
        HRESULT _stdcall SmallChange([out, retval] long* RHS);
        [propput, helpcontext(0x0001034c)]
        HRESULT _stdcall SmallChange([in] long RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] long* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] long RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] long* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] long RHS);
    };

    [
      odl,
      uuid(00024441-0001-0000-C000-000000000046),
      helpcontext(0x000200d7),
      hidden
    ]
    interface IOLEFormat : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010130)]
        HRESULT _stdcall Activate();
        [propget, helpcontext(0x00010419)]
        HRESULT _stdcall Object([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000105f3)]
        HRESULT _stdcall progID([out, retval] BSTR* RHS);
        [helpcontext(0x0001025e)]
        HRESULT _stdcall Verb([in, optional] VARIANT Verb);
    };

    [
      odl,
      uuid(00024442-0001-0000-C000-000000000046),
      helpcontext(0x000200d8),
      hidden
    ]
    interface ILinkFormat : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010418)]
        HRESULT _stdcall AutoUpdate([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010418)]
        HRESULT _stdcall AutoUpdate([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT_BOOL RHS);
        [helpcontext(0x000102a8)]
        HRESULT _stdcall Update();
    };

    [
      odl,
      uuid(00024443-0001-0000-C000-000000000046),
      helpcontext(0x000200d9),
      hidden
    ]
    interface IPublishObjects : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] XlSourceType SourceType, 
                        [in] BSTR Filename, 
                        [in, optional] VARIANT Sheet, 
                        [in, optional] VARIANT Source, 
                        [in, optional] VARIANT HtmlType, 
                        [in, optional] VARIANT DivID, 
                        [in, optional] VARIANT Title, 
                        [out, retval] PublishObject** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] PublishObject** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] PublishObject** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x00010767)]
        HRESULT _stdcall Publish();
    };

    [
      odl,
      uuid(00024444-0000-0000-C000-000000000046),
      helpcontext(0x000200da),
      dual,
      nonextensible,
      oleautomation
    ]
    interface PublishObject : IDispatch {
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] Application** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] XlCreator* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete();
        [id(0x00000767), helpcontext(0x00010767)]
        HRESULT Publish([in, optional] VARIANT Create);
        [id(0x00000766), propget, helpcontext(0x00010766)]
        HRESULT DivID([out, retval] BSTR* RHS);
        [id(0x000002ef), propget, helpcontext(0x000102ef)]
        HRESULT Sheet([out, retval] BSTR* RHS);
        [id(0x000002ad), propget, helpcontext(0x000102ad)]
        HRESULT SourceType([out, retval] XlSourceType* RHS);
        [id(0x000000de), propget, helpcontext(0x000100de)]
        HRESULT Source([out, retval] BSTR* RHS);
        [id(0x00000765), propget, helpcontext(0x00010765)]
        HRESULT HtmlType([out, retval] XlHtmlType* RHS);
        [id(0x00000765), propput, helpcontext(0x00010765)]
        HRESULT HtmlType([in] XlHtmlType RHS);
        [id(0x000000c7), propget, helpcontext(0x000100c7)]
        HRESULT Title([out, retval] BSTR* RHS);
        [id(0x000000c7), propput, helpcontext(0x000100c7)]
        HRESULT Title([in] BSTR RHS);
        [id(0x00000587), propget, helpcontext(0x00010587)]
        HRESULT Filename([out, retval] BSTR* RHS);
        [id(0x00000587), propput, helpcontext(0x00010587)]
        HRESULT Filename([in] BSTR RHS);
        [id(0x00000882), propget, helpcontext(0x00010882)]
        HRESULT AutoRepublish([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000882), propput, helpcontext(0x00010882)]
        HRESULT AutoRepublish([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(00024445-0001-0000-C000-000000000046),
      helpcontext(0x000200db),
      hidden
    ]
    interface IOLEDBError : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010643)]
        HRESULT _stdcall SqlState([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000105d2)]
        HRESULT _stdcall ErrorString([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010769)]
        HRESULT _stdcall Native([out, retval] long* RHS);
        [propget, helpcontext(0x000101c3)]
        HRESULT _stdcall Number([out, retval] long* RHS);
        [propget, helpcontext(0x0001076a)]
        HRESULT _stdcall Stage([out, retval] long* RHS);
    };

    [
      odl,
      uuid(00024446-0001-0000-C000-000000000046),
      helpcontext(0x000200dc),
      hidden
    ]
    interface IOLEDBErrors : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] long Index, 
                        [out, retval] OLEDBError** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] long Index, 
                        [out, retval] OLEDBError** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00024447-0001-0000-C000-000000000046),
      helpcontext(0x000200dd),
      hidden
    ]
    interface IPhonetics : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x00010260)]
        HRESULT _stdcall Start([out, retval] long* RHS);
        [propget, helpcontext(0x00010261)]
        HRESULT _stdcall Length([out, retval] long* RHS);
        [propget, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001022e)]
        HRESULT _stdcall Visible([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001068a)]
        HRESULT _stdcall CharacterType([out, retval] long* RHS);
        [propput, helpcontext(0x0001068a)]
        HRESULT _stdcall CharacterType([in] long RHS);
        [propget, helpcontext(0x000101c5)]
        HRESULT _stdcall Alignment([out, retval] long* RHS);
        [propput, helpcontext(0x000101c5)]
        HRESULT _stdcall Alignment([in] long RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] long Index, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] long Start, 
                        [in] long Length, 
                        [in] BSTR Text);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] long Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00024448-0000-0000-C000-000000000046),
      helpcontext(0x000200de),
      dual,
      nonextensible,
      oleautomation
    ]
    interface DefaultWebOptions : IDispatch {
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] Application** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] XlCreator* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x0000076b), propget, helpcontext(0x0001076b)]
        HRESULT RelyOnCSS([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000076b), propput, helpcontext(0x0001076b)]
        HRESULT RelyOnCSS([in] VARIANT_BOOL RHS);
        [id(0x0000076c), propget, helpcontext(0x0001076c)]
        HRESULT SaveHiddenData([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000076c), propput, helpcontext(0x0001076c)]
        HRESULT SaveHiddenData([in] VARIANT_BOOL RHS);
        [id(0x0000076d), propget, helpcontext(0x0001076d)]
        HRESULT LoadPictures([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000076d), propput, helpcontext(0x0001076d)]
        HRESULT LoadPictures([in] VARIANT_BOOL RHS);
        [id(0x0000076e), propget, helpcontext(0x0001076e)]
        HRESULT OrganizeInFolder([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000076e), propput, helpcontext(0x0001076e)]
        HRESULT OrganizeInFolder([in] VARIANT_BOOL RHS);
        [id(0x0000076f), propget, helpcontext(0x0001076f)]
        HRESULT UpdateLinksOnSave([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000076f), propput, helpcontext(0x0001076f)]
        HRESULT UpdateLinksOnSave([in] VARIANT_BOOL RHS);
        [id(0x00000770), propget, helpcontext(0x00010770)]
        HRESULT UseLongFileNames([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000770), propput, helpcontext(0x00010770)]
        HRESULT UseLongFileNames([in] VARIANT_BOOL RHS);
        [id(0x00000771), propget, helpcontext(0x00010771)]
        HRESULT CheckIfOfficeIsHTMLEditor([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000771), propput, helpcontext(0x00010771)]
        HRESULT CheckIfOfficeIsHTMLEditor([in] VARIANT_BOOL RHS);
        [id(0x00000772), propget, helpcontext(0x00010772)]
        HRESULT DownloadComponents([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000772), propput, helpcontext(0x00010772)]
        HRESULT DownloadComponents([in] VARIANT_BOOL RHS);
        [id(0x00000773), propget, helpcontext(0x00010773)]
        HRESULT RelyOnVML([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000773), propput, helpcontext(0x00010773)]
        HRESULT RelyOnVML([in] VARIANT_BOOL RHS);
        [id(0x00000774), propget, helpcontext(0x00010774)]
        HRESULT AllowPNG([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000774), propput, helpcontext(0x00010774)]
        HRESULT AllowPNG([in] VARIANT_BOOL RHS);
        [id(0x00000775), propget, helpcontext(0x00010775)]
        HRESULT ScreenSize([out, retval] MsoScreenSize* RHS);
        [id(0x00000775), propput, helpcontext(0x00010775)]
        HRESULT ScreenSize([in] MsoScreenSize RHS);
        [id(0x00000776), propget, helpcontext(0x00010776)]
        HRESULT PixelsPerInch([out, retval] long* RHS);
        [id(0x00000776), propput, helpcontext(0x00010776)]
        HRESULT PixelsPerInch([in] long RHS);
        [id(0x00000777), propget, helpcontext(0x00010777)]
        HRESULT LocationOfComponents([out, retval] BSTR* RHS);
        [id(0x00000777), propput, helpcontext(0x00010777)]
        HRESULT LocationOfComponents([in] BSTR RHS);
        [id(0x0000071e), propget, helpcontext(0x0001071e)]
        HRESULT Encoding([out, retval] MsoEncoding* RHS);
        [id(0x0000071e), propput, helpcontext(0x0001071e)]
        HRESULT Encoding([in] MsoEncoding RHS);
        [id(0x00000778), propget, helpcontext(0x00010778)]
        HRESULT AlwaysSaveInDefaultEncoding([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000778), propput, helpcontext(0x00010778)]
        HRESULT AlwaysSaveInDefaultEncoding([in] VARIANT_BOOL RHS);
        [id(0x00000779), propget, helpcontext(0x00010779)]
        HRESULT Fonts([out, retval] WebPageFonts** RHS);
        [id(0x0000077a), propget, helpcontext(0x0001077a)]
        HRESULT FolderSuffix([out, retval] BSTR* RHS);
        [id(0x00000883), propget, helpcontext(0x00010883)]
        HRESULT TargetBrowser([out, retval] MsoTargetBrowser* RHS);
        [id(0x00000883), propput, helpcontext(0x00010883)]
        HRESULT TargetBrowser([in] MsoTargetBrowser RHS);
        [id(0x00000884), propget, helpcontext(0x00010884)]
        HRESULT SaveNewWebPagesAsWebArchives([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000884), propput, helpcontext(0x00010884)]
        HRESULT SaveNewWebPagesAsWebArchives([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(00024449-0000-0000-C000-000000000046),
      helpcontext(0x000200df),
      dual,
      nonextensible,
      oleautomation
    ]
    interface WebOptions : IDispatch {
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] Application** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] XlCreator* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x0000076b), propget, helpcontext(0x0001076b)]
        HRESULT RelyOnCSS([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000076b), propput, helpcontext(0x0001076b)]
        HRESULT RelyOnCSS([in] VARIANT_BOOL RHS);
        [id(0x0000076e), propget, helpcontext(0x0001076e)]
        HRESULT OrganizeInFolder([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000076e), propput, helpcontext(0x0001076e)]
        HRESULT OrganizeInFolder([in] VARIANT_BOOL RHS);
        [id(0x00000770), propget, helpcontext(0x00010770)]
        HRESULT UseLongFileNames([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000770), propput, helpcontext(0x00010770)]
        HRESULT UseLongFileNames([in] VARIANT_BOOL RHS);
        [id(0x00000772), propget, helpcontext(0x00010772)]
        HRESULT DownloadComponents([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000772), propput, helpcontext(0x00010772)]
        HRESULT DownloadComponents([in] VARIANT_BOOL RHS);
        [id(0x00000773), propget, helpcontext(0x00010773)]
        HRESULT RelyOnVML([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000773), propput, helpcontext(0x00010773)]
        HRESULT RelyOnVML([in] VARIANT_BOOL RHS);
        [id(0x00000774), propget, helpcontext(0x00010774)]
        HRESULT AllowPNG([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000774), propput, helpcontext(0x00010774)]
        HRESULT AllowPNG([in] VARIANT_BOOL RHS);
        [id(0x00000775), propget, helpcontext(0x00010775)]
        HRESULT ScreenSize([out, retval] MsoScreenSize* RHS);
        [id(0x00000775), propput, helpcontext(0x00010775)]
        HRESULT ScreenSize([in] MsoScreenSize RHS);
        [id(0x00000776), propget, helpcontext(0x00010776)]
        HRESULT PixelsPerInch([out, retval] long* RHS);
        [id(0x00000776), propput, helpcontext(0x00010776)]
        HRESULT PixelsPerInch([in] long RHS);
        [id(0x00000777), propget, helpcontext(0x00010777)]
        HRESULT LocationOfComponents([out, retval] BSTR* RHS);
        [id(0x00000777), propput, helpcontext(0x00010777)]
        HRESULT LocationOfComponents([in] BSTR RHS);
        [id(0x0000071e), propget, helpcontext(0x0001071e)]
        HRESULT Encoding([out, retval] MsoEncoding* RHS);
        [id(0x0000071e), propput, helpcontext(0x0001071e)]
        HRESULT Encoding([in] MsoEncoding RHS);
        [id(0x0000077a), propget, helpcontext(0x0001077a)]
        HRESULT FolderSuffix([out, retval] BSTR* RHS);
        [id(0x0000077b), helpcontext(0x0001077b)]
        HRESULT UseDefaultFolderSuffix();
        [id(0x00000883), propget, helpcontext(0x00010883)]
        HRESULT TargetBrowser([out, retval] MsoTargetBrowser* RHS);
        [id(0x00000883), propput, helpcontext(0x00010883)]
        HRESULT TargetBrowser([in] MsoTargetBrowser RHS);
    };

    [
      odl,
      uuid(0002444A-0001-0000-C000-000000000046),
      helpcontext(0x000200e0),
      hidden
    ]
    interface IPivotLayout : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, hidden, helpcontext(0x000102c9)]
        HRESULT _stdcall ColumnFields(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, hidden, helpcontext(0x000102cb)]
        HRESULT _stdcall DataFields(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, hidden, helpcontext(0x000102ca)]
        HRESULT _stdcall PageFields(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, hidden, helpcontext(0x000102c8)]
        HRESULT _stdcall RowFields(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, hidden, helpcontext(0x000102c7)]
        HRESULT _stdcall HiddenFields(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, hidden, helpcontext(0x000102c6)]
        HRESULT _stdcall VisibleFields(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, hidden, helpcontext(0x000102ce)]
        HRESULT _stdcall PivotFields(
                        [in, optional] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, hidden, helpcontext(0x0001072f)]
        HRESULT _stdcall CubeFields([out, retval] CubeFields** RHS);
        [propget, hidden, helpcontext(0x000105d8)]
        HRESULT _stdcall PivotCache([out, retval] PivotCache** RHS);
        [propget, helpcontext(0x000102cc)]
        HRESULT _stdcall PivotTable([out, retval] PivotTable** RHS);
        [propget, hidden, helpcontext(0x000102ba)]
        HRESULT _stdcall InnerDetail([out, retval] BSTR* RHS);
        [propput, hidden, helpcontext(0x000102ba)]
        HRESULT _stdcall InnerDetail([in] BSTR RHS);
        [hidden, helpcontext(0x000102c4)]
        HRESULT _stdcall AddFields(
                        [in, optional] VARIANT RowFields, 
                        [in, optional] VARIANT ColumnFields, 
                        [in, optional] VARIANT PageFields, 
                        [in, optional] VARIANT AppendField);
    };

    [
      odl,
      uuid(0002444B-0000-0000-C000-000000000046),
      helpcontext(0x000200e1),
      dual,
      nonextensible,
      oleautomation
    ]
    interface TreeviewControl : IDispatch {
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] Application** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] XlCreator* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x0000010c), propget, helpcontext(0x0001010c)]
        HRESULT Hidden([out, retval] VARIANT* RHS);
        [id(0x0000010c), propput, helpcontext(0x0001010c)]
        HRESULT Hidden([in] VARIANT RHS);
        [id(0x0000077d), propget, helpcontext(0x0001077d)]
        HRESULT Drilled([out, retval] VARIANT* RHS);
        [id(0x0000077d), propput, helpcontext(0x0001077d)]
        HRESULT Drilled([in] VARIANT RHS);
    };

    [
      odl,
      uuid(0002444C-0000-0000-C000-000000000046),
      helpcontext(0x000200e2),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CubeField : IDispatch {
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] Application** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] XlCreator* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x0000077e), propget, helpcontext(0x0001077e)]
        HRESULT CubeFieldType([out, retval] XlCubeFieldType* RHS);
        [id(0x00000a6b), propget, hidden, helpcontext(0x00010a6b)]
        HRESULT _Caption([out, retval] BSTR* RHS);
        [id(0x0000006e), propget, helpcontext(0x0001006e)]
        HRESULT Name([out, retval] BSTR* RHS);
        [id(0x00000006), propget, helpcontext(0x00010006)]
        HRESULT Value([out, retval] BSTR* RHS);
        [id(0x00000086), propget, helpcontext(0x00010086)]
        HRESULT Orientation([out, retval] XlPivotFieldOrientation* RHS);
        [id(0x00000086), propput, helpcontext(0x00010086)]
        HRESULT Orientation([in] XlPivotFieldOrientation RHS);
        [id(0x00000085), propget, helpcontext(0x00010085)]
        HRESULT Position([out, retval] long* RHS);
        [id(0x00000085), propput, helpcontext(0x00010085)]
        HRESULT Position([in] long RHS);
        [id(0x0000077f), propget, helpcontext(0x0001077f)]
        HRESULT TreeviewControl([out, retval] TreeviewControl** RHS);
        [id(0x000005e4), propget, helpcontext(0x000105e4)]
        HRESULT DragToColumn([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005e4), propput, helpcontext(0x000105e4)]
        HRESULT DragToColumn([in] VARIANT_BOOL RHS);
        [id(0x000005e5), propget, helpcontext(0x000105e5)]
        HRESULT DragToHide([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005e5), propput, helpcontext(0x000105e5)]
        HRESULT DragToHide([in] VARIANT_BOOL RHS);
        [id(0x000005e6), propget, helpcontext(0x000105e6)]
        HRESULT DragToPage([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005e6), propput, helpcontext(0x000105e6)]
        HRESULT DragToPage([in] VARIANT_BOOL RHS);
        [id(0x000005e7), propget, helpcontext(0x000105e7)]
        HRESULT DragToRow([out, retval] VARIANT_BOOL* RHS);
        [id(0x000005e7), propput, helpcontext(0x000105e7)]
        HRESULT DragToRow([in] VARIANT_BOOL RHS);
        [id(0x00000734), propget, helpcontext(0x00010734)]
        HRESULT DragToData([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000734), propput, helpcontext(0x00010734)]
        HRESULT DragToData([in] VARIANT_BOOL RHS);
        [id(0x00000780), propget, hidden, helpcontext(0x00010780)]
        HRESULT HiddenLevels([out, retval] long* RHS);
        [id(0x00000780), propput, hidden, helpcontext(0x00010780)]
        HRESULT HiddenLevels([in] long RHS);
        [id(0x00000885), propget, helpcontext(0x00010885)]
        HRESULT HasMemberProperties([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000738), propget, helpcontext(0x00010738)]
        HRESULT LayoutForm([out, retval] XlLayoutFormType* RHS);
        [id(0x00000738), propput, helpcontext(0x00010738)]
        HRESULT LayoutForm([in] XlLayoutFormType RHS);
        [id(0x000002ce), propget, helpcontext(0x000102ce)]
        HRESULT PivotFields([out, retval] PivotFields** RHS);
        [id(0x00000886), hidden, helpcontext(0x00010886),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, AddMemberPropertyField)]
        HRESULT _AddMemberPropertyField(
                        [in] BSTR Property, 
                        [in, optional] VARIANT PropertyOrder);
        [id(0x00000888), propget, helpcontext(0x00010888)]
        HRESULT EnableMultiplePageItems([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000888), propput, helpcontext(0x00010888)]
        HRESULT EnableMultiplePageItems([in] VARIANT_BOOL RHS);
        [id(0x00000736), propget, helpcontext(0x00010736)]
        HRESULT LayoutSubtotalLocation([out, retval] XlSubtototalLocationType* RHS);
        [id(0x00000736), propput, helpcontext(0x00010736)]
        HRESULT LayoutSubtotalLocation([in] XlSubtototalLocationType RHS);
        [id(0x00000889), propget, helpcontext(0x00010889)]
        HRESULT ShowInFieldList([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000889), propput, helpcontext(0x00010889)]
        HRESULT ShowInFieldList([in] VARIANT_BOOL RHS);
        [id(0x00000075), helpcontext(0x00010075)]
        HRESULT Delete();
        [id(0x00000a6c), helpcontext(0x00010a6c),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, AddMemberPropertyFieldEx)]
        HRESULT AddMemberPropertyField(
                        [in] BSTR Property, 
                        [in, optional] VARIANT PropertyOrder, 
                        [in, optional] VARIANT PropertyDisplayedIn);
        [id(0x00000a1b), propget, helpcontext(0x00010a1b)]
        HRESULT IncludeNewItemsInFilter([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000a1b), propput, helpcontext(0x00010a1b)]
        HRESULT IncludeNewItemsInFilter([in] VARIANT_BOOL RHS);
        [id(0x00000a6e), propget, helpcontext(0x00010a6e)]
        HRESULT CubeFieldSubType([out, retval] XlCubeFieldSubType* RHS);
        [id(0x00000a21), propget, helpcontext(0x00010a21)]
        HRESULT AllItemsVisible([out, retval] VARIANT_BOOL* RHS);
        [id(0x00000a22), helpcontext(0x00010a22)]
        HRESULT ClearManualFilter();
        [id(0x00000a6f), helpcontext(0x00010a6f)]
        HRESULT CreatePivotFields();
        [id(0x0000073c), propget, helpcontext(0x0001073c)]
        HRESULT CurrentPageName([out, retval] BSTR* RHS);
        [id(0x0000073c), propput, helpcontext(0x0001073c)]
        HRESULT CurrentPageName([in] BSTR RHS);
        [id(0x00000a70), propget, helpcontext(0x00010a70)]
        HRESULT IsDate([out, retval] VARIANT_BOOL* RHS);
        [id(0x0000008b), propget, helpcontext(0x0001008b)]
        HRESULT Caption([out, retval] BSTR* RHS);
        [id(0x0000008b), propput, helpcontext(0x0001008b)]
        HRESULT Caption([in] BSTR RHS);
    };

    [
      odl,
      uuid(0002444D-0000-0000-C000-000000000046),
      helpcontext(0x000200e3),
      dual,
      nonextensible,
      oleautomation
    ]
    interface CubeFields : IDispatch {
        [id(0x00000094), propget, helpcontext(0x00010094)]
        HRESULT Application([out, retval] Application** RHS);
        [id(0x00000095), propget, helpcontext(0x00010095)]
        HRESULT Creator([out, retval] XlCreator* RHS);
        [id(0x00000096), propget, helpcontext(0x00010096)]
        HRESULT Parent([out, retval] IDispatch** RHS);
        [id(0x00000076), propget, helpcontext(0x00010076)]
        HRESULT Count([out, retval] long* RHS);
        [id(0x000000aa), propget, helpcontext(0x000100aa)]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] CubeField** RHS);
        [id(00000000), propget, helpcontext(0x00010000)]
        HRESULT _Default(
                        [in] VARIANT Index, 
                        [out, retval] CubeField** RHS);
        [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
        HRESULT _NewEnum([out, retval] IUnknown** RHS);
        [id(0x0000088a), helpcontext(0x0001088a)]
        HRESULT AddSet(
                        [in] BSTR Name, 
                        [in] BSTR Caption, 
                        [out, retval] CubeField** RHS);
    };

    [
      odl,
      uuid(0002084C-0001-0000-C000-000000000046),
      helpcontext(0x0002000f),
      hidden
    ]
    interface IDisplayUnitLabel : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000100eb)]
        HRESULT _stdcall Select([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010080)]
        HRESULT _stdcall Border([out, retval] Border** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([out, retval] VARIANT* RHS);
        [propget, hidden, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, hidden, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] ChartFillFormat** RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([in] BSTR RHS);
        [propget, helpcontext(0x0001025b)]
        HRESULT _stdcall Characters(
                        [in, optional] VARIANT Start, 
                        [in, optional] VARIANT Length, 
                        [out, retval] Characters** RHS);
        [propget, hidden, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([out, retval] double* RHS);
        [propput, helpcontext(0x0001007f)]
        HRESULT _stdcall Left([in] double RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([out, retval] double* RHS);
        [propput, helpcontext(0x0001007e)]
        HRESULT _stdcall Top([in] double RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([out, retval] long* RHS);
        [propput, helpcontext(0x000103cf)]
        HRESULT _stdcall ReadingOrder([in] long RHS);
        [propget, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([out, retval] VARIANT* RHS);
        [propput, hidden, helpcontext(0x000105f5)]
        HRESULT _stdcall AutoScaleFont([in] VARIANT RHS);
        [restricted, hidden]
        void _stdcall _Dummy21();
        [propget, helpcontext(0x00010085)]
        HRESULT _stdcall Position([out, retval] XlChartElementPosition* RHS);
        [propput, helpcontext(0x00010085)]
        HRESULT _stdcall Position([in] XlChartElementPosition RHS);
        [propget, helpcontext(0x00010074)]
        HRESULT _stdcall Format([out, retval] ChartFormat** RHS);
    };

    [
      odl,
      uuid(00024450-0001-0000-C000-000000000046),
      helpcontext(0x000200e6),
      hidden
    ]
    interface ICellFormat : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000101b3)]
        HRESULT _stdcall Borders([out, retval] Borders** RHS);
        [propputref, helpcontext(0x000101b3)]
        HRESULT _stdcall Borders([in] Borders* RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propputref, helpcontext(0x00010092)]
        HRESULT _stdcall Font([in] Font* RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propputref, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([in] Interior* RHS);
        [propget, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat(
                        [in, lcid] long lcid, 
                        [out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat(
                        [in, lcid] long lcid, 
                        [in] VARIANT RHS);
        [propget, helpcontext(0x00010449)]
        HRESULT _stdcall NumberFormatLocal([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010449)]
        HRESULT _stdcall NumberFormatLocal([in] VARIANT RHS);
        [propget, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010427)]
        HRESULT _stdcall AddIndent([in] VARIANT RHS);
        [propget, helpcontext(0x000100c9)]
        HRESULT _stdcall IndentLevel([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100c9)]
        HRESULT _stdcall IndentLevel([in] VARIANT RHS);
        [propget, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010088)]
        HRESULT _stdcall HorizontalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010089)]
        HRESULT _stdcall VerticalAlignment([in] VARIANT RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] VARIANT RHS);
        [propget, helpcontext(0x000100d1)]
        HRESULT _stdcall ShrinkToFit([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100d1)]
        HRESULT _stdcall ShrinkToFit([in] VARIANT RHS);
        [propget, helpcontext(0x00010114)]
        HRESULT _stdcall WrapText([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010114)]
        HRESULT _stdcall WrapText([in] VARIANT RHS);
        [propget, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001010d)]
        HRESULT _stdcall Locked([in] VARIANT RHS);
        [propget, helpcontext(0x00010106)]
        HRESULT _stdcall FormulaHidden([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010106)]
        HRESULT _stdcall FormulaHidden([in] VARIANT RHS);
        [propget, helpcontext(0x000100d0)]
        HRESULT _stdcall MergeCells([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100d0)]
        HRESULT _stdcall MergeCells([in] VARIANT RHS);
        [helpcontext(0x0001006f)]
        HRESULT _stdcall Clear();
    };

    [
      odl,
      uuid(00024451-0001-0000-C000-000000000046),
      helpcontext(0x000200e7),
      hidden
    ]
    interface IUsedObjects : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
    };

    [
      odl,
      uuid(00024452-0001-0000-C000-000000000046),
      helpcontext(0x000200e8),
      hidden
    ]
    interface ICustomProperties : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR Name, 
                        [in] VARIANT Value, 
                        [out, retval] CustomProperty** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] CustomProperty** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] CustomProperty** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00024453-0001-0000-C000-000000000046),
      helpcontext(0x000200e9),
      hidden
    ]
    interface ICustomProperty : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] VARIANT RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] VARIANT* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
    };

    [
      odl,
      uuid(00024454-0001-0000-C000-000000000046),
      helpcontext(0x000200ea),
      hidden
    ]
    interface ICalculatedMembers : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] CalculatedMember** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] CalculatedMember** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR Name, 
                        [in] BSTR Formula, 
                        [in, optional] VARIANT SolveOrder, 
                        [in, optional] VARIANT Type, 
                        [out, retval] CalculatedMember** RHS);
    };

    [
      odl,
      uuid(00024455-0001-0000-C000-000000000046),
      helpcontext(0x000200eb),
      hidden
    ]
    interface ICalculatedMember : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000102d1)]
        HRESULT _stdcall SourceName([out, retval] BSTR* RHS);
        [propget, helpcontext(0x0001088b)]
        HRESULT _stdcall SolveOrder([out, retval] long* RHS);
        [propget, helpcontext(0x0001088c)]
        HRESULT _stdcall IsValid([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] BSTR* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] XlCalculatedMemberType* RHS);
    };

    [
      odl,
      uuid(00024456-0001-0000-C000-000000000046),
      helpcontext(0x000200ec),
      hidden
    ]
    interface IWatches : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] VARIANT Source, 
                        [out, retval] Watch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] Watch** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] Watch** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
    };

    [
      odl,
      uuid(00024457-0001-0000-C000-000000000046),
      helpcontext(0x000200ed),
      hidden
    ]
    interface IWatch : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x000100de)]
        HRESULT _stdcall Source([out, retval] VARIANT* RHS);
    };

    [
      odl,
      uuid(00024458-0001-0000-C000-000000000046),
      helpcontext(0x000200ee),
      hidden
    ]
    interface IPivotCell : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001088d)]
        HRESULT _stdcall PivotCellType([out, retval] XlPivotCellType* RHS);
        [propget, helpcontext(0x000102cc)]
        HRESULT _stdcall PivotTable([out, retval] PivotTable** RHS);
        [propget, helpcontext(0x0001082b)]
        HRESULT _stdcall DataField([out, retval] PivotField** RHS);
        [propget, helpcontext(0x000102db)]
        HRESULT _stdcall PivotField([out, retval] PivotField** RHS);
        [propget, helpcontext(0x000102e4)]
        HRESULT _stdcall PivotItem([out, retval] PivotItem** RHS);
        [propget, helpcontext(0x0001088e)]
        HRESULT _stdcall RowItems([out, retval] PivotItemList** RHS);
        [propget, helpcontext(0x0001088f)]
        HRESULT _stdcall ColumnItems([out, retval] PivotItemList** RHS);
        [propget, helpcontext(0x000100c5)]
        HRESULT _stdcall Range([out, retval] Range** RHS);
        [propget, hidden, helpcontext(0x000108f7)]
        HRESULT _stdcall Dummy18([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010891)]
        HRESULT _stdcall CustomSubtotalFunction([out, retval] XlConsolidationFunction* RHS);
        [propget, helpcontext(0x00010a71)]
        HRESULT _stdcall PivotRowLine([out, retval] PivotLine** RHS);
        [propget, helpcontext(0x00010a72)]
        HRESULT _stdcall PivotColumnLine([out, retval] PivotLine** RHS);
    };

    [
      odl,
      uuid(00024459-0001-0000-C000-000000000046),
      helpcontext(0x000200ef),
      hidden
    ]
    interface IGraphic : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010892)]
        HRESULT _stdcall Brightness([out, retval] single* RHS);
        [propput, helpcontext(0x00010892)]
        HRESULT _stdcall Brightness([in] single RHS);
        [propget, helpcontext(0x00010893)]
        HRESULT _stdcall ColorType([out, retval] MsoPictureColorType* RHS);
        [propput, helpcontext(0x00010893)]
        HRESULT _stdcall ColorType([in] MsoPictureColorType RHS);
        [propget, helpcontext(0x00010894)]
        HRESULT _stdcall Contrast([out, retval] single* RHS);
        [propput, helpcontext(0x00010894)]
        HRESULT _stdcall Contrast([in] single RHS);
        [propget, helpcontext(0x00010895)]
        HRESULT _stdcall CropBottom([out, retval] single* RHS);
        [propput, helpcontext(0x00010895)]
        HRESULT _stdcall CropBottom([in] single RHS);
        [propget, helpcontext(0x00010896)]
        HRESULT _stdcall CropLeft([out, retval] single* RHS);
        [propput, helpcontext(0x00010896)]
        HRESULT _stdcall CropLeft([in] single RHS);
        [propget, helpcontext(0x00010897)]
        HRESULT _stdcall CropRight([out, retval] single* RHS);
        [propput, helpcontext(0x00010897)]
        HRESULT _stdcall CropRight([in] single RHS);
        [propget, helpcontext(0x00010898)]
        HRESULT _stdcall CropTop([out, retval] single* RHS);
        [propput, helpcontext(0x00010898)]
        HRESULT _stdcall CropTop([in] single RHS);
        [propget, helpcontext(0x00010587)]
        HRESULT _stdcall Filename([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010587)]
        HRESULT _stdcall Filename([in] BSTR RHS);
        [propget, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([out, retval] single* RHS);
        [propput, helpcontext(0x0001007b)]
        HRESULT _stdcall Height([in] single RHS);
        [propget, helpcontext(0x000106a4)]
        HRESULT _stdcall LockAspectRatio([out, retval] MsoTriState* RHS);
        [propput, helpcontext(0x000106a4)]
        HRESULT _stdcall LockAspectRatio([in] MsoTriState RHS);
        [propget, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([out, retval] single* RHS);
        [propput, helpcontext(0x0001007a)]
        HRESULT _stdcall Width([in] single RHS);
    };

    [
      odl,
      uuid(0002445A-0001-0000-C000-000000000046),
      helpcontext(0x000200f0),
      hidden
    ]
    interface IAutoRecover : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001018a)]
        HRESULT _stdcall Time([out, retval] long* RHS);
        [propput, helpcontext(0x0001018a)]
        HRESULT _stdcall Time([in] long RHS);
        [propget, helpcontext(0x00010123)]
        HRESULT _stdcall Path([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010123)]
        HRESULT _stdcall Path([in] BSTR RHS);
    };

    [
      odl,
      uuid(0002445B-0001-0000-C000-000000000046),
      helpcontext(0x000200f1),
      hidden
    ]
    interface IErrorCheckingOptions : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010899)]
        HRESULT _stdcall BackgroundChecking([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010899)]
        HRESULT _stdcall BackgroundChecking([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001089a)]
        HRESULT _stdcall IndicatorColorIndex([out, retval] XlColorIndex* RHS);
        [propput, helpcontext(0x0001089a)]
        HRESULT _stdcall IndicatorColorIndex([in] XlColorIndex RHS);
        [propget, helpcontext(0x0001089b)]
        HRESULT _stdcall EvaluateToError([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001089b)]
        HRESULT _stdcall EvaluateToError([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001089c)]
        HRESULT _stdcall TextDate([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001089c)]
        HRESULT _stdcall TextDate([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001089d)]
        HRESULT _stdcall NumberAsText([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001089d)]
        HRESULT _stdcall NumberAsText([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001089e)]
        HRESULT _stdcall InconsistentFormula([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001089e)]
        HRESULT _stdcall InconsistentFormula([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001089f)]
        HRESULT _stdcall OmittedCells([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001089f)]
        HRESULT _stdcall OmittedCells([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000108a0)]
        HRESULT _stdcall UnlockedFormulaCells([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108a0)]
        HRESULT _stdcall UnlockedFormulaCells([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000108a1)]
        HRESULT _stdcall EmptyCellReferences([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108a1)]
        HRESULT _stdcall EmptyCellReferences([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000108f8)]
        HRESULT _stdcall ListDataValidation([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108f8)]
        HRESULT _stdcall ListDataValidation([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a73)]
        HRESULT _stdcall InconsistentTableFormula([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a73)]
        HRESULT _stdcall InconsistentTableFormula([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(0002445C-0001-0000-C000-000000000046),
      helpcontext(0x000200f2),
      hidden
    ]
    interface IErrors : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] Error** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] Error** RHS);
    };

    [
      odl,
      uuid(0002445D-0001-0000-C000-000000000046),
      helpcontext(0x000200f3),
      hidden
    ]
    interface IError : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000108a2)]
        HRESULT _stdcall Ignore([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108a2)]
        HRESULT _stdcall Ignore([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(0002445E-0001-0000-C000-000000000046),
      helpcontext(0x000200f4),
      hidden
    ]
    interface ISmartTagAction : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [helpcontext(0x000108a3)]
        HRESULT _stdcall Execute();
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] BSTR* RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] XlSmartTagControlType* RHS);
        [propget, helpcontext(0x000108f9)]
        HRESULT _stdcall PresentInPane([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000108fa)]
        HRESULT _stdcall ExpandHelp([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108fa)]
        HRESULT _stdcall ExpandHelp([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000108fb)]
        HRESULT _stdcall CheckboxState([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108fb)]
        HRESULT _stdcall CheckboxState([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000108fc)]
        HRESULT _stdcall TextboxText([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000108fc)]
        HRESULT _stdcall TextboxText([in] BSTR RHS);
        [propget, helpcontext(0x000108fd)]
        HRESULT _stdcall ListSelection([out, retval] long* RHS);
        [propput, helpcontext(0x000108fd)]
        HRESULT _stdcall ListSelection([in] long RHS);
        [propget, helpcontext(0x000108fe)]
        HRESULT _stdcall RadioGroupSelection([out, retval] long* RHS);
        [propput, helpcontext(0x000108fe)]
        HRESULT _stdcall RadioGroupSelection([in] long RHS);
        [propget, helpcontext(0x000108ff)]
        HRESULT _stdcall ActiveXControl([out, retval] IDispatch** RHS);
    };

    [
      odl,
      uuid(0002445F-0001-0000-C000-000000000046),
      helpcontext(0x000200f5),
      hidden
    ]
    interface ISmartTagActions : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] SmartTagAction** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] SmartTagAction** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00024460-0001-0000-C000-000000000046),
      helpcontext(0x000200f6),
      hidden
    ]
    interface ISmartTag : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000108a4)]
        HRESULT _stdcall DownloadURL([out, retval] BSTR* RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000108a5)]
        HRESULT _stdcall XML([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000100c5)]
        HRESULT _stdcall Range([out, retval] Range** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x000108a6)]
        HRESULT _stdcall SmartTagActions([out, retval] SmartTagActions** RHS);
        [propget, helpcontext(0x00010857)]
        HRESULT _stdcall Properties([out, retval] CustomProperties** RHS);
    };

    [
      odl,
      uuid(00024461-0001-0000-C000-000000000046),
      helpcontext(0x000200f7),
      hidden
    ]
    interface ISmartTags : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR SmartTagType, 
                        [out, retval] SmartTag** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] SmartTag** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00024462-0001-0000-C000-000000000046),
      helpcontext(0x000200f8),
      hidden
    ]
    interface ISmartTagRecognizer : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000108a8)]
        HRESULT _stdcall progID([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010121)]
        HRESULT _stdcall FullName([out, retval] BSTR* RHS);
    };

    [
      odl,
      uuid(00024463-0001-0000-C000-000000000046),
      helpcontext(0x000200f9),
      hidden
    ]
    interface ISmartTagRecognizers : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] SmartTagRecognizer** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] SmartTagRecognizer** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x000108a9)]
        HRESULT _stdcall Recognize([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108a9)]
        HRESULT _stdcall Recognize([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(00024464-0001-0000-C000-000000000046),
      helpcontext(0x000200fa),
      hidden
    ]
    interface ISmartTagOptions : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000108aa)]
        HRESULT _stdcall DisplaySmartTags([out, retval] XlSmartTagDisplayMode* RHS);
        [propput, helpcontext(0x000108aa)]
        HRESULT _stdcall DisplaySmartTags([in] XlSmartTagDisplayMode RHS);
        [propget, helpcontext(0x000108ab)]
        HRESULT _stdcall EmbedSmartTags([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108ab)]
        HRESULT _stdcall EmbedSmartTags([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(00024465-0001-0000-C000-000000000046),
      helpcontext(0x000200fb),
      hidden
    ]
    interface ISpellingOptions : IDispatch {
        [propget, helpcontext(0x000108ac)]
        HRESULT _stdcall DictLang([out, retval] long* RHS);
        [propput, helpcontext(0x000108ac)]
        HRESULT _stdcall DictLang([in] long RHS);
        [propget, helpcontext(0x000108ad)]
        HRESULT _stdcall UserDict([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000108ad)]
        HRESULT _stdcall UserDict([in] BSTR RHS);
        [propget, helpcontext(0x000108ae)]
        HRESULT _stdcall IgnoreCaps([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108ae)]
        HRESULT _stdcall IgnoreCaps([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000108af)]
        HRESULT _stdcall SuggestMainOnly([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108af)]
        HRESULT _stdcall SuggestMainOnly([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000108b0)]
        HRESULT _stdcall IgnoreMixedDigits([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108b0)]
        HRESULT _stdcall IgnoreMixedDigits([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000108b1)]
        HRESULT _stdcall IgnoreFileNames([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108b1)]
        HRESULT _stdcall IgnoreFileNames([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000108b2)]
        HRESULT _stdcall GermanPostReform([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108b2)]
        HRESULT _stdcall GermanPostReform([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000108b3)]
        HRESULT _stdcall KoreanCombineAux([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108b3)]
        HRESULT _stdcall KoreanCombineAux([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000108b4)]
        HRESULT _stdcall KoreanUseAutoChangeList([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108b4)]
        HRESULT _stdcall KoreanUseAutoChangeList([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000108b5)]
        HRESULT _stdcall KoreanProcessCompound([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108b5)]
        HRESULT _stdcall KoreanProcessCompound([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000108b6)]
        HRESULT _stdcall HebrewModes([out, retval] XlHebrewModes* RHS);
        [propput, helpcontext(0x000108b6)]
        HRESULT _stdcall HebrewModes([in] XlHebrewModes RHS);
        [propget, helpcontext(0x000108b7)]
        HRESULT _stdcall ArabicModes([out, retval] XlArabicModes* RHS);
        [propput, helpcontext(0x000108b7)]
        HRESULT _stdcall ArabicModes([in] XlArabicModes RHS);
    };

    [
      odl,
      uuid(00024466-0001-0000-C000-000000000046),
      helpcontext(0x000200fc),
      hidden
    ]
    interface ISpeech : IDispatch {
        [helpcontext(0x000107e1)]
        HRESULT _stdcall Speak(
                        [in] BSTR Text, 
                        [in, optional] VARIANT SpeakAsync, 
                        [in, optional] VARIANT SpeakXML, 
                        [in, optional] VARIANT Purge);
        [propget, helpcontext(0x000100a8)]
        HRESULT _stdcall Direction([out, retval] XlSpeakDirection* RHS);
        [propput, helpcontext(0x000100a8)]
        HRESULT _stdcall Direction([in] XlSpeakDirection RHS);
        [propget, helpcontext(0x000108bb)]
        HRESULT _stdcall SpeakCellOnEnter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000108bb)]
        HRESULT _stdcall SpeakCellOnEnter([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(00024467-0001-0000-C000-000000000046),
      helpcontext(0x000200fd),
      hidden
    ]
    interface IProtection : IDispatch {
        [propget, helpcontext(0x000107f0)]
        HRESULT _stdcall AllowFormattingCells([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000107f1)]
        HRESULT _stdcall AllowFormattingColumns([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000107f2)]
        HRESULT _stdcall AllowFormattingRows([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000107f3)]
        HRESULT _stdcall AllowInsertingColumns([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000107f4)]
        HRESULT _stdcall AllowInsertingRows([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000107f5)]
        HRESULT _stdcall AllowInsertingHyperlinks([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000107f6)]
        HRESULT _stdcall AllowDeletingColumns([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000107f7)]
        HRESULT _stdcall AllowDeletingRows([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000107f8)]
        HRESULT _stdcall AllowSorting([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000107f9)]
        HRESULT _stdcall AllowFiltering([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000107fa)]
        HRESULT _stdcall AllowUsingPivotTables([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000108bc)]
        HRESULT _stdcall AllowEditRanges([out, retval] AllowEditRanges** RHS);
    };

    [
      odl,
      uuid(00024468-0001-0000-C000-000000000046),
      helpcontext(0x000200fe),
      hidden
    ]
    interface IPivotItemList : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] PivotItem** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Field, 
                        [out, retval] PivotItem** RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00024469-0001-0000-C000-000000000046),
      helpcontext(0x000200ff),
      hidden
    ]
    interface ITab : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010063)]
        HRESULT _stdcall Color([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010063)]
        HRESULT _stdcall Color([in] VARIANT RHS);
        [propget, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([out, retval] XlColorIndex* RHS);
        [propput, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([in] XlColorIndex RHS);
        [propget, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([out, retval] XlThemeColor* RHS);
        [propput, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([in] XlThemeColor RHS);
        [propget, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([in] VARIANT RHS);
    };

    [
      odl,
      uuid(0002446A-0001-0000-C000-000000000046),
      helpcontext(0x00020100),
      hidden
    ]
    interface IAllowEditRanges : IDispatch {
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] AllowEditRange** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR Title, 
                        [in] Range* Range, 
                        [in, optional] VARIANT Password, 
                        [out, retval] AllowEditRange** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] AllowEditRange** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(0002446B-0001-0000-C000-000000000046),
      helpcontext(0x00020101),
      hidden
    ]
    interface IAllowEditRange : IDispatch {
        [propget, helpcontext(0x000100c7)]
        HRESULT _stdcall Title([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000100c7)]
        HRESULT _stdcall Title([in] BSTR RHS);
        [propget, helpcontext(0x000100c5)]
        HRESULT _stdcall Range([out, retval] Range** RHS);
        [propputref, helpcontext(0x000100c5)]
        HRESULT _stdcall Range([in] Range* RHS);
        [helpcontext(0x000108bd)]
        HRESULT _stdcall ChangePassword([in] BSTR Password);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x0001011d)]
        HRESULT _stdcall Unprotect([in, optional] VARIANT Password);
        [propget, helpcontext(0x000108be)]
        HRESULT _stdcall Users([out, retval] UserAccessList** RHS);
    };

    [
      odl,
      uuid(0002446C-0001-0000-C000-000000000046),
      helpcontext(0x00020102),
      hidden
    ]
    interface IUserAccessList : IDispatch {
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] UserAccess** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR Name, 
                        [in] VARIANT_BOOL AllowEdit, 
                        [out, retval] UserAccess** RHS);
        [helpcontext(0x000108bf)]
        HRESULT _stdcall DeleteAll();
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] UserAccess** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(0002446D-0001-0000-C000-000000000046),
      helpcontext(0x00020103),
      hidden
    ]
    interface IUserAccess : IDispatch {
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000107e4)]
        HRESULT _stdcall AllowEdit([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107e4)]
        HRESULT _stdcall AllowEdit([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
    };

    [
      odl,
      uuid(0002446E-0001-0000-C000-000000000046),
      helpcontext(0x00020104),
      hidden
    ]
    interface IRTD : IDispatch {
        [propget, helpcontext(0x000108c0)]
        HRESULT _stdcall ThrottleInterval([out, retval] long* RHS);
        [propput, helpcontext(0x000108c0)]
        HRESULT _stdcall ThrottleInterval([in] long RHS);
        [helpcontext(0x000108c1)]
        HRESULT _stdcall RefreshData();
        [helpcontext(0x000108c2)]
        HRESULT _stdcall RestartServers();
    };

    [
      odl,
      uuid(0002446F-0001-0000-C000-000000000046),
      helpcontext(0x00020105),
      hidden
    ]
    interface IDiagram : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000106a5)]
        HRESULT _stdcall Nodes([out, retval] DiagramNodes** RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] MsoDiagramType* RHS);
        [propget, helpcontext(0x000108c3)]
        HRESULT _stdcall AutoLayout([out, retval] MsoTriState* RHS);
        [propput, helpcontext(0x000108c3)]
        HRESULT _stdcall AutoLayout([in] MsoTriState RHS);
        [propget, helpcontext(0x000108c4)]
        HRESULT _stdcall Reverse([out, retval] MsoTriState* RHS);
        [propput, helpcontext(0x000108c4)]
        HRESULT _stdcall Reverse([in] MsoTriState RHS);
        [propget, helpcontext(0x00010072)]
        HRESULT _stdcall AutoFormat([out, retval] MsoTriState* RHS);
        [propput, helpcontext(0x00010072)]
        HRESULT _stdcall AutoFormat([in] MsoTriState RHS);
        [helpcontext(0x00010416)]
        HRESULT _stdcall Convert([in] MsoDiagramType Type);
        [helpcontext(0x00010900)]
        HRESULT _stdcall FitText();
    };

    [
      odl,
      uuid(00024470-0001-0000-C000-000000000046),
      helpcontext(0x00020106),
      hidden
    ]
    interface IListObjects : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x00010825),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, Add)]
        HRESULT _stdcall _Add(
                        [in, optional, defaultvalue(1)] XlListObjectSourceType SourceType, 
                        [in, optional] VARIANT Source, 
                        [in, optional] VARIANT LinkSource, 
                        [in, optional, defaultvalue(0)] XlYesNoGuess XlListObjectHasHeaders, 
                        [in, optional] VARIANT Destination, 
                        [out, retval] ListObject** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] ListObject** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] ListObject** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100b5)          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, AddEx)]
        HRESULT _stdcall Add(
                        [in, optional, defaultvalue(1)] XlListObjectSourceType SourceType, 
                        [in, optional] VARIANT Source, 
                        [in, optional] VARIANT LinkSource, 
                        [in, optional, defaultvalue(0)] XlYesNoGuess XlListObjectHasHeaders, 
                        [in, optional] VARIANT Destination, 
                        [in, optional] VARIANT TableStyleName, 
                        [out, retval] ListObject** RHS);
    };

    [
      odl,
      uuid(00024471-0001-0000-C000-000000000046),
      helpcontext(0x00020107),
      hidden
    ]
    interface IListObject : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x00010767)]
        HRESULT _stdcall Publish(
                        [in] VARIANT Target, 
                        [in] VARIANT_BOOL LinkSource, 
                        [out, retval] BSTR* RHS);
        [helpcontext(0x00010589)]
        HRESULT _stdcall Refresh();
        [helpcontext(0x00010904)]
        HRESULT _stdcall Unlink();
        [helpcontext(0x00010905)]
        HRESULT _stdcall Unlist();
        [hidden, helpcontext(0x00010906)]
        HRESULT _stdcall UpdateChanges([in, optional, defaultvalue(0)] XlListConflict iConflictType);
        [helpcontext(0x00010100)]
        HRESULT _stdcall Resize([in] Range* Range);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010908)]
        HRESULT _stdcall Active([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000102c1)]
        HRESULT _stdcall DataBodyRange([out, retval] Range** RHS);
        [propget, helpcontext(0x000106ee)]
        HRESULT _stdcall DisplayRightToLeft([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010909)]
        HRESULT _stdcall HeaderRowRange([out, retval] Range** RHS);
        [propget, helpcontext(0x0001090a)]
        HRESULT _stdcall InsertRowRange([out, retval] Range** RHS);
        [propget, helpcontext(0x0001090b)]
        HRESULT _stdcall ListColumns([out, retval] ListColumns** RHS);
        [propget, helpcontext(0x0001090c)]
        HRESULT _stdcall ListRows([out, retval] ListRows** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, helpcontext(0x0001056a)]
        HRESULT _stdcall QueryTable([out, retval] QueryTable** RHS);
        [propget, helpcontext(0x000100c5)]
        HRESULT _stdcall Range([out, retval] Range** RHS);
        [propget, helpcontext(0x0001090d)]
        HRESULT _stdcall ShowAutoFilter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001090d)]
        HRESULT _stdcall ShowAutoFilter([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001090e)]
        HRESULT _stdcall ShowTotals([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001090e)]
        HRESULT _stdcall ShowTotals([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x000102ad)]
        HRESULT _stdcall SourceType([out, retval] XlListObjectSourceType* RHS);
        [propget, helpcontext(0x0001090f)]
        HRESULT _stdcall TotalsRowRange([out, retval] Range** RHS);
        [propget, helpcontext(0x00010910)]
        HRESULT _stdcall SharePointURL([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000108cd)]
        HRESULT _stdcall XmlMap([out, retval] XmlMap** RHS);
        [propget, helpcontext(0x00010a75)]
        HRESULT _stdcall DisplayName([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010a75)]
        HRESULT _stdcall DisplayName([in] BSTR RHS);
        [propget, helpcontext(0x00010a76)]
        HRESULT _stdcall ShowHeaders([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a76)]
        HRESULT _stdcall ShowHeaders([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010319)]
        HRESULT _stdcall AutoFilter([out, retval] AutoFilter** RHS);
        [propget, helpcontext(0x000105e0)]
        HRESULT _stdcall TableStyle([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000105e0)]
        HRESULT _stdcall TableStyle([in] VARIANT RHS);
        [propget, helpcontext(0x00010a77)]
        HRESULT _stdcall ShowTableStyleFirstColumn([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a77)]
        HRESULT _stdcall ShowTableStyleFirstColumn([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a03)]
        HRESULT _stdcall ShowTableStyleLastColumn([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a03)]
        HRESULT _stdcall ShowTableStyleLastColumn([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a04)]
        HRESULT _stdcall ShowTableStyleRowStripes([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a04)]
        HRESULT _stdcall ShowTableStyleRowStripes([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a05)]
        HRESULT _stdcall ShowTableStyleColumnStripes([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a05)]
        HRESULT _stdcall ShowTableStyleColumnStripes([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010370)]
        HRESULT _stdcall Sort([out, retval] Sort** RHS);
        [propget, helpcontext(0x0001038e)]
        HRESULT _stdcall Comment([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001038e)]
        HRESULT _stdcall Comment([in] BSTR RHS);
        [helpcontext(0x00010a78)]
        HRESULT _stdcall ExportToVisio();
    };

    [
      odl,
      uuid(00024472-0001-0000-C000-000000000046),
      helpcontext(0x00020108),
      hidden
    ]
    interface IListColumns : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in, optional] VARIANT Position, 
                        [out, retval] ListColumn** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] ListColumn** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] ListColumn** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
    };

    [
      odl,
      uuid(00024473-0001-0000-C000-000000000046),
      helpcontext(0x00020109),
      hidden
    ]
    interface IListColumn : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] BSTR* RHS);
        [propget, hidden, helpcontext(0x00010911)]
        HRESULT _stdcall ListDataFormat([out, retval] ListDataFormat** RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, helpcontext(0x000100c5)]
        HRESULT _stdcall Range([out, retval] Range** RHS);
        [propget, helpcontext(0x00010912)]
        HRESULT _stdcall TotalsCalculation([out, retval] XlTotalsCalculation* RHS);
        [propput, helpcontext(0x00010912)]
        HRESULT _stdcall TotalsCalculation([in] XlTotalsCalculation RHS);
        [propget, helpcontext(0x000108d2)]
        HRESULT _stdcall XPath([out, retval] XPath** RHS);
        [propget, hidden, helpcontext(0x00010913)]
        HRESULT _stdcall SharePointFormula([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000102c1)]
        HRESULT _stdcall DataBodyRange([out, retval] Range** RHS);
        [propget, helpcontext(0x00010a79)]
        HRESULT _stdcall Total([out, retval] Range** RHS);
    };

    [
      odl,
      uuid(00024474-0001-0000-C000-000000000046),
      helpcontext(0x0002010a),
      hidden
    ]
    interface IListRows : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [hidden, helpcontext(0x00010825),
          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, Add)]
        HRESULT _stdcall _Add(
                        [in, optional] VARIANT Position, 
                        [out, retval] ListRow** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] ListRow** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] ListRow** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100b5)          custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, AddEx)]
        HRESULT _stdcall Add(
                        [in, optional] VARIANT Position, 
                        [in, optional] VARIANT AlwaysInsert, 
                        [out, retval] ListRow** RHS);
    };

    [
      odl,
      uuid(00024475-0001-0000-C000-000000000046),
      helpcontext(0x0002010b),
      hidden
    ]
    interface IListRow : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, hidden, helpcontext(0x00010914)]
        HRESULT _stdcall InvalidData([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000100c5)]
        HRESULT _stdcall Range([out, retval] Range** RHS);
    };

    [
      odl,
      uuid(00024476-0001-0000-C000-000000000046),
      helpcontext(0x0002010c),
      hidden
    ]
    interface IXmlNamespace : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010915)]
        HRESULT _stdcall Uri([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010916)]
        HRESULT _stdcall Prefix([out, retval] BSTR* RHS);
    };

    [
      odl,
      uuid(00024477-0001-0000-C000-000000000046),
      helpcontext(0x0002010d),
      hidden
    ]
    interface IXmlNamespaces : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] XmlNamespace** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] XmlNamespace** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] BSTR* RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x00010917)]
        HRESULT _stdcall InstallManifest(
                        [in] BSTR Path, 
                        [in, optional] VARIANT InstallForAllUsers);
    };

    [
      odl,
      uuid(00024478-0001-0000-C000-000000000046),
      helpcontext(0x0002010e),
      hidden
    ]
    interface IXmlDataBinding : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] BSTR* RHS);
        [helpcontext(0x00010589)]
        HRESULT _stdcall Refresh([out, retval] XlXmlImportResult* RHS);
        [helpcontext(0x00010919)]
        HRESULT _stdcall LoadSettings([in] BSTR Url);
        [helpcontext(0x0001091a)]
        HRESULT _stdcall ClearSettings();
        [propget, helpcontext(0x0001091b)]
        HRESULT _stdcall SourceUrl([out, retval] BSTR* RHS);
    };

    [
      odl,
      uuid(00024479-0001-0000-C000-000000000046),
      helpcontext(0x0002010f),
      hidden
    ]
    interface IXmlSchema : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001091c)]
        HRESULT _stdcall Namespace([out, retval] XmlNamespace** RHS);
        [propget, helpcontext(0x0001091d)]
        HRESULT _stdcall XML([out, retval] BSTR* RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
    };

    [
      odl,
      uuid(0002447A-0001-0000-C000-000000000046),
      helpcontext(0x00020110),
      hidden
    ]
    interface IXmlSchemas : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] XmlSchema** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] XmlSchema** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(0002447B-0001-0000-C000-000000000046),
      helpcontext(0x00020111),
      hidden
    ]
    interface IXmlMap : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] BSTR* RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, helpcontext(0x0001091e)]
        HRESULT _stdcall IsExportable([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x0001091f)]
        HRESULT _stdcall ShowImportExportValidationErrors([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001091f)]
        HRESULT _stdcall ShowImportExportValidationErrors([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010920)]
        HRESULT _stdcall SaveDataSourceDefinition([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010920)]
        HRESULT _stdcall SaveDataSourceDefinition([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001074c)]
        HRESULT _stdcall AdjustColumnWidth([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001074c)]
        HRESULT _stdcall AdjustColumnWidth([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010921)]
        HRESULT _stdcall PreserveColumnFilter([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010921)]
        HRESULT _stdcall PreserveColumnFilter([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010922)]
        HRESULT _stdcall PreserveNumberFormatting([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010922)]
        HRESULT _stdcall PreserveNumberFormatting([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010923)]
        HRESULT _stdcall AppendOnImport([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010923)]
        HRESULT _stdcall AppendOnImport([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010924)]
        HRESULT _stdcall RootElementName([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010925)]
        HRESULT _stdcall RootElementNamespace([out, retval] XmlNamespace** RHS);
        [propget, helpcontext(0x00010926)]
        HRESULT _stdcall Schemas([out, retval] XmlSchemas** RHS);
        [propget, helpcontext(0x00010927)]
        HRESULT _stdcall DataBinding([out, retval] XmlDataBinding** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x00010395)]
        HRESULT _stdcall Import(
                        [in] BSTR Url, 
                        [in, optional] VARIANT Overwrite, 
                        [out, retval] XlXmlImportResult* RHS);
        [helpcontext(0x00010928)]
        HRESULT _stdcall ImportXml(
                        [in] BSTR XmlData, 
                        [in, optional] VARIANT Overwrite, 
                        [out, retval] XlXmlImportResult* RHS);
        [helpcontext(0x00010586)]
        HRESULT _stdcall Export(
                        [in] BSTR Url, 
                        [in, optional] VARIANT Overwrite, 
                        [out, retval] XlXmlExportResult* RHS);
        [helpcontext(0x0001092a)]
        HRESULT _stdcall ExportXml(
                        [out] BSTR* Data, 
                        [out, retval] XlXmlExportResult* RHS);
        [propget, helpcontext(0x000109f0)]
        HRESULT _stdcall WorkbookConnection([out, retval] WorkbookConnection** RHS);
    };

    [
      odl,
      uuid(0002447C-0001-0000-C000-000000000046),
      helpcontext(0x00020112),
      hidden
    ]
    interface IXmlMaps : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR Schema, 
                        [in, optional] VARIANT RootElementName, 
                        [out, retval] XmlMap** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] XmlMap** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] XmlMap** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(0002447D-0001-0000-C000-000000000046),
      helpcontext(0x00020113),
      hidden
    ]
    interface IListDataFormat : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] XlListDataType* RHS);
        [propget, helpcontext(0x0001092c)]
        HRESULT _stdcall Choices([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001092d)]
        HRESULT _stdcall DecimalPlaces([out, retval] long* RHS);
        [propget, helpcontext(0x0001092e)]
        HRESULT _stdcall DefaultValue([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001092f)]
        HRESULT _stdcall IsPercent([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010930)]
        HRESULT _stdcall lcid([out, retval] long* RHS);
        [propget, helpcontext(0x00010931)]
        HRESULT _stdcall MaxCharacters([out, retval] long* RHS);
        [propget, helpcontext(0x00010932)]
        HRESULT _stdcall MaxNumber([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010933)]
        HRESULT _stdcall MinNumber([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010934)]
        HRESULT _stdcall Required([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] XlListDataType* RHS);
        [propget, helpcontext(0x00010128)]
        HRESULT _stdcall ReadOnly([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010935)]
        HRESULT _stdcall AllowFillIn([out, retval] VARIANT_BOOL* RHS);
    };

    [
      odl,
      uuid(0002447E-0001-0000-C000-000000000046),
      helpcontext(0x00020114),
      hidden
    ]
    interface IXPath : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000108d6)]
        HRESULT _stdcall Map([out, retval] XmlMap** RHS);
        [helpcontext(0x00010936)]
        HRESULT _stdcall SetValue(
                        [in] XmlMap* Map, 
                        [in] BSTR XPath, 
                        [in, optional] VARIANT SelectionNamespace, 
                        [in, optional] VARIANT Repeating);
        [helpcontext(0x0001006f)]
        HRESULT _stdcall Clear();
        [propget, helpcontext(0x00010938)]
        HRESULT _stdcall Repeating([out, retval] VARIANT_BOOL* RHS);
    };

    [
      odl,
      uuid(0002447F-0001-0000-C000-000000000046),
      helpcontext(0x00020115),
      hidden
    ]
    interface IPivotLineCells : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] PivotCell** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] PivotCell** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
    };

    [
      odl,
      uuid(00024480-0001-0000-C000-000000000046),
      helpcontext(0x00020116),
      hidden
    ]
    interface IPivotLine : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010a7b)]
        HRESULT _stdcall LineType([out, retval] XlPivotLineType* RHS);
        [propget, helpcontext(0x00010085)]
        HRESULT _stdcall Position([out, retval] long* RHS);
        [propget, helpcontext(0x00010a7c)]
        HRESULT _stdcall PivotLineCells([out, retval] PivotLineCells** RHS);
    };

    [
      odl,
      uuid(00024481-0001-0000-C000-000000000046),
      helpcontext(0x00020117),
      hidden
    ]
    interface IPivotLines : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] PivotLine** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] PivotLine** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
    };

    [
      odl,
      uuid(00024482-0001-0000-C000-000000000046),
      helpcontext(0x00020118),
      hidden
    ]
    interface IPivotAxis : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010a7d)]
        HRESULT _stdcall PivotLines([out, retval] PivotLines** RHS);
    };

    [
      odl,
      uuid(00024483-0001-0000-C000-000000000046),
      helpcontext(0x00020119),
      hidden
    ]
    interface IPivotFilter : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000100c0)]
        HRESULT _stdcall Order([out, retval] long* RHS);
        [propput, helpcontext(0x000100c0)]
        HRESULT _stdcall Order([in] long RHS);
        [propget, helpcontext(0x00010a7e)]
        HRESULT _stdcall FilterType([out, retval] XlPivotFilterType* RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000100da)]
        HRESULT _stdcall Description([out, retval] BSTR* RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x00010908)]
        HRESULT _stdcall Active([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000102db)]
        HRESULT _stdcall PivotField([out, retval] PivotField** RHS);
        [propget, helpcontext(0x0001082b)]
        HRESULT _stdcall DataField([out, retval] PivotField** RHS);
        [propget, helpcontext(0x00010a7f)]
        HRESULT _stdcall DataCubeField([out, retval] CubeField** RHS);
        [propget, helpcontext(0x00010a80)]
        HRESULT _stdcall Value1([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x0001056c)]
        HRESULT _stdcall Value2([out, retval] VARIANT* RHS);
        [propget, helpcontext(0x00010a81)]
        HRESULT _stdcall MemberPropertyField([out, retval] PivotField** RHS);
        [propget, helpcontext(0x00010a82)]
        HRESULT _stdcall IsMemberPropertyFilter([out, retval] VARIANT_BOOL* RHS);
    };

    [
      odl,
      uuid(00024484-0001-0000-C000-000000000046),
      helpcontext(0x0002011a),
      hidden
    ]
    interface IPivotFilters : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] PivotFilter** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] PivotFilter** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] XlPivotFilterType Type, 
                        [in, optional] VARIANT DataField, 
                        [in, optional] VARIANT Value1, 
                        [in, optional] VARIANT Value2, 
                        [in, optional] VARIANT Order, 
                        [in, optional] VARIANT Name, 
                        [in, optional] VARIANT Description, 
                        [in, optional] VARIANT MemberPropertyField, 
                        [out, retval] PivotFilter** RHS);
    };

    [
      odl,
      uuid(00024485-0001-0000-C000-000000000046),
      helpcontext(0x0002011b),
      hidden
    ]
    interface IWorkbookConnection : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([in] BSTR RHS);
        [propget, helpcontext(0x000100da)]
        HRESULT _stdcall Description([out, retval] BSTR* RHS);
        [propput, helpcontext(0x000100da)]
        HRESULT _stdcall Description([in] BSTR RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([in] BSTR RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] XlConnectionType* RHS);
        [propget, helpcontext(0x00010a89)]
        HRESULT _stdcall OLEDBConnection([out, retval] OLEDBConnection** RHS);
        [propget, helpcontext(0x00010a8a)]
        HRESULT _stdcall ODBCConnection([out, retval] ODBCConnection** RHS);
        [propget, helpcontext(0x00010a8b)]
        HRESULT _stdcall Ranges([out, retval] Ranges** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x00010589)]
        HRESULT _stdcall Refresh();
    };

    [
      odl,
      uuid(00024486-0001-0000-C000-000000000046),
      helpcontext(0x0002011c),
      hidden
    ]
    interface IConnections : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x00010a8c)]
        HRESULT _stdcall AddFromFile(
                        [in] BSTR Filename, 
                        [out, retval] WorkbookConnection** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR Name, 
                        [in] BSTR Description, 
                        [in] VARIANT ConnectionString, 
                        [in] VARIANT CommandText, 
                        [in, optional] VARIANT lCmdtype, 
                        [out, retval] WorkbookConnection** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] WorkbookConnection** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] WorkbookConnection** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(00024487-0001-0000-C000-000000000046),
      helpcontext(0x0002011d),
      hidden
    ]
    interface IWorksheetView : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000102ef)]
        HRESULT _stdcall Sheet([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010285)]
        HRESULT _stdcall DisplayGridlines([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010285)]
        HRESULT _stdcall DisplayGridlines([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010284)]
        HRESULT _stdcall DisplayFormulas([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010284)]
        HRESULT _stdcall DisplayFormulas([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010286)]
        HRESULT _stdcall DisplayHeadings([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010286)]
        HRESULT _stdcall DisplayHeadings([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010287)]
        HRESULT _stdcall DisplayOutline([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010287)]
        HRESULT _stdcall DisplayOutline([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010289)]
        HRESULT _stdcall DisplayZeros([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010289)]
        HRESULT _stdcall DisplayZeros([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(00024488-0001-0000-C000-000000000046),
      helpcontext(0x0002011e),
      hidden
    ]
    interface IChartView : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000102ef)]
        HRESULT _stdcall Sheet([out, retval] IDispatch** RHS);
    };

    [
      odl,
      uuid(00024489-0001-0000-C000-000000000046),
      helpcontext(0x0002011f),
      hidden
    ]
    interface IModuleView : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000102ef)]
        HRESULT _stdcall Sheet([out, retval] IDispatch** RHS);
    };

    [
      odl,
      uuid(0002448A-0001-0000-C000-000000000046),
      helpcontext(0x00020120),
      hidden
    ]
    interface IDialogSheetView : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000102ef)]
        HRESULT _stdcall Sheet([out, retval] IDispatch** RHS);
    };

    [
      odl,
      uuid(0002448C-0001-0000-C000-000000000046),
      helpcontext(0x00020122),
      hidden
    ]
    interface ISheetViews : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
    };

    [
      odl,
      uuid(0002448D-0001-0000-C000-000000000046),
      helpcontext(0x00020123),
      hidden
    ]
    interface IOLEDBConnection : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001081a)]
        HRESULT _stdcall ADOConnection([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010593)]
        HRESULT _stdcall BackgroundQuery([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010593)]
        HRESULT _stdcall BackgroundQuery([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010635)]
        HRESULT _stdcall CancelRefresh();
        [propget, helpcontext(0x00010725)]
        HRESULT _stdcall CommandText([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010725)]
        HRESULT _stdcall CommandText([in] VARIANT RHS);
        [propget, helpcontext(0x00010726)]
        HRESULT _stdcall CommandType([out, retval] XlCmdType* RHS);
        [propput, helpcontext(0x00010726)]
        HRESULT _stdcall CommandType([in] XlCmdType RHS);
        [propget, helpcontext(0x00010598)]
        HRESULT _stdcall Connection([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010598)]
        HRESULT _stdcall Connection([in] VARIANT RHS);
        [propget, helpcontext(0x000105c5)]
        HRESULT _stdcall EnableRefresh([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105c5)]
        HRESULT _stdcall EnableRefresh([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001072b)]
        HRESULT _stdcall LocalConnection([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001072b)]
        HRESULT _stdcall LocalConnection([in] VARIANT RHS);
        [propget, helpcontext(0x00010728)]
        HRESULT _stdcall MaintainConnection([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010728)]
        HRESULT _stdcall MaintainConnection([in] VARIANT_BOOL RHS);
        [helpcontext(0x0001081c)]
        HRESULT _stdcall MakeConnection();
        [helpcontext(0x00010589)]
        HRESULT _stdcall Refresh();
        [propget, helpcontext(0x000102b8)]
        HRESULT _stdcall RefreshDate([out, retval] DATE* RHS);
        [propget, helpcontext(0x00010633)]
        HRESULT _stdcall Refreshing([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000105c7)]
        HRESULT _stdcall RefreshOnFileOpen([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105c7)]
        HRESULT _stdcall RefreshOnFileOpen([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010729)]
        HRESULT _stdcall RefreshPeriod([out, retval] long* RHS);
        [propput, helpcontext(0x00010729)]
        HRESULT _stdcall RefreshPeriod([in] long RHS);
        [propget, helpcontext(0x00010821)]
        HRESULT _stdcall RobustConnect([out, retval] XlRobustConnect* RHS);
        [propput, helpcontext(0x00010821)]
        HRESULT _stdcall RobustConnect([in] XlRobustConnect RHS);
        [helpcontext(0x00010822)]
        HRESULT _stdcall SaveAsODC(
                        [in] BSTR ODCFileName, 
                        [in, optional] VARIANT Description, 
                        [in, optional] VARIANT Keywords);
        [propget, helpcontext(0x000105c9)]
        HRESULT _stdcall SavePassword([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105c9)]
        HRESULT _stdcall SavePassword([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001081f)]
        HRESULT _stdcall SourceConnectionFile([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001081f)]
        HRESULT _stdcall SourceConnectionFile([in] BSTR RHS);
        [propget, helpcontext(0x00010820)]
        HRESULT _stdcall SourceDataFile([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010820)]
        HRESULT _stdcall SourceDataFile([in] BSTR RHS);
        [propget, helpcontext(0x0001081d)]
        HRESULT _stdcall OLAP([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x0001072d)]
        HRESULT _stdcall UseLocalConnection([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x0001072d)]
        HRESULT _stdcall UseLocalConnection([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a8f)]
        HRESULT _stdcall MaxDrillthroughRecords([out, retval] long* RHS);
        [propput, helpcontext(0x00010a8f)]
        HRESULT _stdcall MaxDrillthroughRecords([in] long RHS);
        [propget, helpcontext(0x0001081b)]
        HRESULT _stdcall IsConnected([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010a90)]
        HRESULT _stdcall ServerCredentialsMethod([out, retval] XlCredentialsMethod* RHS);
        [propput, helpcontext(0x00010a90)]
        HRESULT _stdcall ServerCredentialsMethod([in] XlCredentialsMethod RHS);
        [propget, helpcontext(0x00010a91)]
        HRESULT _stdcall ServerSSOApplicationID([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010a91)]
        HRESULT _stdcall ServerSSOApplicationID([in] BSTR RHS);
        [propget, helpcontext(0x00010a92)]
        HRESULT _stdcall AlwaysUseConnectionFile([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a92)]
        HRESULT _stdcall AlwaysUseConnectionFile([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a93)]
        HRESULT _stdcall ServerFillColor([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a93)]
        HRESULT _stdcall ServerFillColor([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a94)]
        HRESULT _stdcall ServerFontStyle([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a94)]
        HRESULT _stdcall ServerFontStyle([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a95)]
        HRESULT _stdcall ServerNumberFormat([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a95)]
        HRESULT _stdcall ServerNumberFormat([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a96)]
        HRESULT _stdcall ServerTextColor([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a96)]
        HRESULT _stdcall ServerTextColor([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a97)]
        HRESULT _stdcall RetrieveInOfficeUILang([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a97)]
        HRESULT _stdcall RetrieveInOfficeUILang([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(0002448E-0001-0000-C000-000000000046),
      helpcontext(0x00020124),
      hidden
    ]
    interface IODBCConnection : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010593)]
        HRESULT _stdcall BackgroundQuery([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010593)]
        HRESULT _stdcall BackgroundQuery([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010635)]
        HRESULT _stdcall CancelRefresh();
        [propget, helpcontext(0x00010725)]
        HRESULT _stdcall CommandText([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010725)]
        HRESULT _stdcall CommandText([in] VARIANT RHS);
        [propget, helpcontext(0x00010726)]
        HRESULT _stdcall CommandType([out, retval] XlCmdType* RHS);
        [propput, helpcontext(0x00010726)]
        HRESULT _stdcall CommandType([in] XlCmdType RHS);
        [propget, helpcontext(0x00010598)]
        HRESULT _stdcall Connection([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010598)]
        HRESULT _stdcall Connection([in] VARIANT RHS);
        [propget, helpcontext(0x000105c5)]
        HRESULT _stdcall EnableRefresh([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105c5)]
        HRESULT _stdcall EnableRefresh([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010589)]
        HRESULT _stdcall Refresh();
        [propget, helpcontext(0x000102b8)]
        HRESULT _stdcall RefreshDate([out, retval] DATE* RHS);
        [propget, helpcontext(0x00010633)]
        HRESULT _stdcall Refreshing([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x000105c7)]
        HRESULT _stdcall RefreshOnFileOpen([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105c7)]
        HRESULT _stdcall RefreshOnFileOpen([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010729)]
        HRESULT _stdcall RefreshPeriod([out, retval] long* RHS);
        [propput, helpcontext(0x00010729)]
        HRESULT _stdcall RefreshPeriod([in] long RHS);
        [propget, helpcontext(0x00010821)]
        HRESULT _stdcall RobustConnect([out, retval] XlRobustConnect* RHS);
        [propput, helpcontext(0x00010821)]
        HRESULT _stdcall RobustConnect([in] XlRobustConnect RHS);
        [helpcontext(0x00010822)]
        HRESULT _stdcall SaveAsODC(
                        [in] BSTR ODCFileName, 
                        [in, optional] VARIANT Description, 
                        [in, optional] VARIANT Keywords);
        [propget, helpcontext(0x000105c9)]
        HRESULT _stdcall SavePassword([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000105c9)]
        HRESULT _stdcall SavePassword([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x0001081f)]
        HRESULT _stdcall SourceConnectionFile([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001081f)]
        HRESULT _stdcall SourceConnectionFile([in] BSTR RHS);
        [propget, helpcontext(0x000102ae)]
        HRESULT _stdcall SourceData([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000102ae)]
        HRESULT _stdcall SourceData([in] VARIANT RHS);
        [propget, helpcontext(0x00010820)]
        HRESULT _stdcall SourceDataFile([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010820)]
        HRESULT _stdcall SourceDataFile([in] BSTR RHS);
        [propget, helpcontext(0x00010a90)]
        HRESULT _stdcall ServerCredentialsMethod([out, retval] XlCredentialsMethod* RHS);
        [propput, helpcontext(0x00010a90)]
        HRESULT _stdcall ServerCredentialsMethod([in] XlCredentialsMethod RHS);
        [propget, helpcontext(0x00010a91)]
        HRESULT _stdcall ServerSSOApplicationID([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010a91)]
        HRESULT _stdcall ServerSSOApplicationID([in] BSTR RHS);
        [propget, helpcontext(0x00010a92)]
        HRESULT _stdcall AlwaysUseConnectionFile([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a92)]
        HRESULT _stdcall AlwaysUseConnectionFile([in] VARIANT_BOOL RHS);
    };

    [
      odl,
      uuid(0002448F-0001-0000-C000-000000000046),
      helpcontext(0x00020125),
      hidden
    ]
    interface IAction : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propget, helpcontext(0x0001008b)]
        HRESULT _stdcall Caption([out, retval] BSTR* RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] XlActionType* RHS);
        [propget, helpcontext(0x00010a98)]
        HRESULT _stdcall Coordinate([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010a99)]
        HRESULT _stdcall Content([out, retval] BSTR* RHS);
        [helpcontext(0x000108a3)]
        HRESULT _stdcall Execute();
    };

    [
      odl,
      uuid(00024490-0001-0000-C000-000000000046),
      helpcontext(0x00020126),
      hidden
    ]
    interface IActions : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] Action** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] Action** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
    };

    [
      odl,
      uuid(00024491-0001-0000-C000-000000000046),
      helpcontext(0x00020127),
      hidden
    ]
    interface IFormatColor : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010063)]
        HRESULT _stdcall Color([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010063)]
        HRESULT _stdcall Color([in] VARIANT RHS);
        [propget, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([out, retval] XlColorIndex* RHS);
        [propput, helpcontext(0x00010061)]
        HRESULT _stdcall ColorIndex([in] XlColorIndex RHS);
        [propget, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([in] VARIANT RHS);
        [propget, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([in] VARIANT RHS);
    };

    [
      odl,
      uuid(00024492-0001-0000-C000-000000000046),
      helpcontext(0x00020128),
      hidden
    ]
    interface IConditionValue : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x0001062d)]
        HRESULT _stdcall Modify(
                        [in] XlConditionValueTypes newtype, 
                        [in, optional] VARIANT newvalue);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] XlConditionValueTypes* RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] VARIANT* RHS);
    };

    [
      odl,
      uuid(00024493-0001-0000-C000-000000000046),
      helpcontext(0x00020129),
      hidden
    ]
    interface IColorScale : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000103d9)]
        HRESULT _stdcall Priority([out, retval] long* RHS);
        [propput, helpcontext(0x000103d9)]
        HRESULT _stdcall Priority([in] long RHS);
        [propget, helpcontext(0x00010a41)]
        HRESULT _stdcall StopIfTrue([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010a42)]
        HRESULT _stdcall AppliesTo([out, retval] Range** RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] long* RHS);
        [helpcontext(0x00010a45)]
        HRESULT _stdcall SetFirstPriority();
        [helpcontext(0x00010a46)]
        HRESULT _stdcall SetLastPriority();
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x00010a43)]
        HRESULT _stdcall ModifyAppliesToRange([in] Range* Range);
        [propget, helpcontext(0x00010a47)]
        HRESULT _stdcall PTCondition([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010a37)]
        HRESULT _stdcall ScopeType([out, retval] XlPivotConditionScope* RHS);
        [propput, helpcontext(0x00010a37)]
        HRESULT _stdcall ScopeType([in] XlPivotConditionScope RHS);
        [propget, helpcontext(0x00010a9c)]
        HRESULT _stdcall ColorScaleCriteria([out, retval] ColorScaleCriteria** RHS);
    };

    [
      odl,
      uuid(00024494-0001-0000-C000-000000000046),
      helpcontext(0x0002012a),
      hidden
    ]
    interface IColorScaleCriteria : IDispatch {
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] ColorScaleCriterion** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] ColorScaleCriterion** RHS);
    };

    [
      odl,
      uuid(00024495-0001-0000-C000-000000000046),
      helpcontext(0x0002012b),
      hidden
    ]
    interface IColorScaleCriterion : IDispatch {
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] XlConditionValueTypes* RHS);
        [propput, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([in] XlConditionValueTypes RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] VARIANT RHS);
        [propget, helpcontext(0x00010a9d)]
        HRESULT _stdcall FormatColor([out, retval] FormatColor** RHS);
    };

    [
      odl,
      uuid(00024496-0001-0000-C000-000000000046),
      helpcontext(0x0002012c),
      hidden
    ]
    interface IDatabar : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000103d9)]
        HRESULT _stdcall Priority([out, retval] long* RHS);
        [propput, helpcontext(0x000103d9)]
        HRESULT _stdcall Priority([in] long RHS);
        [propget, helpcontext(0x00010a41)]
        HRESULT _stdcall StopIfTrue([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010a42)]
        HRESULT _stdcall AppliesTo([out, retval] Range** RHS);
        [propget, helpcontext(0x00010a9e)]
        HRESULT _stdcall MinPoint([out, retval] ConditionValue** RHS);
        [propget, helpcontext(0x00010a9f)]
        HRESULT _stdcall MaxPoint([out, retval] ConditionValue** RHS);
        [propget, helpcontext(0x00010aa0)]
        HRESULT _stdcall PercentMin([out, retval] long* RHS);
        [propput, helpcontext(0x00010aa0)]
        HRESULT _stdcall PercentMin([in] long RHS);
        [propget, helpcontext(0x00010aa1)]
        HRESULT _stdcall PercentMax([out, retval] long* RHS);
        [propput, helpcontext(0x00010aa1)]
        HRESULT _stdcall PercentMax([in] long RHS);
        [propget, helpcontext(0x00010aa2)]
        HRESULT _stdcall BarColor([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000107e8)]
        HRESULT _stdcall ShowValue([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000107e8)]
        HRESULT _stdcall ShowValue([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] long* RHS);
        [helpcontext(0x00010a45)]
        HRESULT _stdcall SetFirstPriority();
        [helpcontext(0x00010a46)]
        HRESULT _stdcall SetLastPriority();
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x00010a43)]
        HRESULT _stdcall ModifyAppliesToRange([in] Range* Range);
        [propget, helpcontext(0x00010a47)]
        HRESULT _stdcall PTCondition([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010a37)]
        HRESULT _stdcall ScopeType([out, retval] XlPivotConditionScope* RHS);
        [propput, helpcontext(0x00010a37)]
        HRESULT _stdcall ScopeType([in] XlPivotConditionScope RHS);
    };

    [
      odl,
      uuid(00024497-0001-0000-C000-000000000046),
      helpcontext(0x0002012d),
      hidden
    ]
    interface IIconSetCondition : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000103d9)]
        HRESULT _stdcall Priority([out, retval] long* RHS);
        [propput, helpcontext(0x000103d9)]
        HRESULT _stdcall Priority([in] long RHS);
        [propget, helpcontext(0x00010a41)]
        HRESULT _stdcall StopIfTrue([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010a42)]
        HRESULT _stdcall AppliesTo([out, retval] Range** RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] long* RHS);
        [helpcontext(0x00010a43)]
        HRESULT _stdcall ModifyAppliesToRange([in] Range* Range);
        [propget, helpcontext(0x00010a47)]
        HRESULT _stdcall PTCondition([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010a37)]
        HRESULT _stdcall ScopeType([out, retval] XlPivotConditionScope* RHS);
        [propput, helpcontext(0x00010a37)]
        HRESULT _stdcall ScopeType([in] XlPivotConditionScope RHS);
        [helpcontext(0x00010a45)]
        HRESULT _stdcall SetFirstPriority();
        [helpcontext(0x00010a46)]
        HRESULT _stdcall SetLastPriority();
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x00010aa3)]
        HRESULT _stdcall ReverseOrder([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010aa3)]
        HRESULT _stdcall ReverseOrder([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010aa4)]
        HRESULT _stdcall PercentileValues([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010aa4)]
        HRESULT _stdcall PercentileValues([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010aa5)]
        HRESULT _stdcall ShowIconOnly([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010aa5)]
        HRESULT _stdcall ShowIconOnly([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([out, retval] BSTR* RHS);
        [propput, helpcontext(0x00010105)]
        HRESULT _stdcall Formula([in] BSTR RHS);
        [propget, helpcontext(0x00010aa6)]
        HRESULT _stdcall IconSet([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010aa6)]
        HRESULT _stdcall IconSet([in] VARIANT RHS);
        [propget, helpcontext(0x00010aa7)]
        HRESULT _stdcall IconCriteria([out, retval] IconCriteria** RHS);
    };

    [
      odl,
      uuid(00024498-0001-0000-C000-000000000046),
      helpcontext(0x0002012e),
      hidden
    ]
    interface IIconCriteria : IDispatch {
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] IconCriterion** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IconCriterion** RHS);
    };

    [
      odl,
      uuid(00024499-0001-0000-C000-000000000046),
      helpcontext(0x0002012f),
      hidden
    ]
    interface IIconCriterion : IDispatch {
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] XlConditionValueTypes* RHS);
        [propput, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([in] XlConditionValueTypes RHS);
        [propget, helpcontext(0x00010006)]
        HRESULT _stdcall Value([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010006)]
        HRESULT _stdcall Value([in] VARIANT RHS);
        [propget, helpcontext(0x0001031d)]
        HRESULT _stdcall Operator([out, retval] long* RHS);
        [propput, helpcontext(0x0001031d)]
        HRESULT _stdcall Operator([in] long RHS);
    };

    [
      odl,
      uuid(0002449A-0001-0000-C000-000000000046),
      helpcontext(0x00020130),
      hidden
    ]
    interface IIcon : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IconSet** RHS);
        [propget, helpcontext(0x000101e6)]
        HRESULT _stdcall Index([out, retval] long* RHS);
    };

    [
      odl,
      uuid(0002449B-0001-0000-C000-000000000046),
      helpcontext(0x00020131),
      hidden
    ]
    interface IIconSet : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001023a)]
        HRESULT _stdcall ID([out, retval] XlIconSet* RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] Icon** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] Icon** RHS);
    };

    [
      odl,
      uuid(0002449C-0001-0000-C000-000000000046),
      helpcontext(0x00020132),
      hidden
    ]
    interface IIconSets : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
    };

    [
      odl,
      uuid(0002449D-0001-0000-C000-000000000046),
      helpcontext(0x00020133),
      hidden
    ]
    interface ITop10 : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000103d9)]
        HRESULT _stdcall Priority([out, retval] long* RHS);
        [propput, helpcontext(0x000103d9)]
        HRESULT _stdcall Priority([in] long RHS);
        [propget, helpcontext(0x00010a41)]
        HRESULT _stdcall StopIfTrue([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a41)]
        HRESULT _stdcall StopIfTrue([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a42)]
        HRESULT _stdcall AppliesTo([out, retval] Range** RHS);
        [propget, helpcontext(0x00010aa8)]
        HRESULT _stdcall TopBottom([out, retval] XlTopBottom* RHS);
        [propput, helpcontext(0x00010aa8)]
        HRESULT _stdcall TopBottom([in] XlTopBottom RHS);
        [propget, helpcontext(0x0001050a)]
        HRESULT _stdcall Rank([out, retval] long* RHS);
        [propput, helpcontext(0x0001050a)]
        HRESULT _stdcall Rank([in] long RHS);
        [propget, helpcontext(0x00010aa9)]
        HRESULT _stdcall Percent([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010aa9)]
        HRESULT _stdcall Percent([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x000101b3)]
        HRESULT _stdcall Borders([out, retval] Borders** RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] long* RHS);
        [propget, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([in] VARIANT RHS);
        [helpcontext(0x00010a45)]
        HRESULT _stdcall SetFirstPriority();
        [helpcontext(0x00010a46)]
        HRESULT _stdcall SetLastPriority();
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x00010a43)]
        HRESULT _stdcall ModifyAppliesToRange([in] Range* Range);
        [propget, helpcontext(0x00010a47)]
        HRESULT _stdcall PTCondition([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010a37)]
        HRESULT _stdcall ScopeType([out, retval] XlPivotConditionScope* RHS);
        [propput, helpcontext(0x00010a37)]
        HRESULT _stdcall ScopeType([in] XlPivotConditionScope RHS);
        [propget, helpcontext(0x00010aaa)]
        HRESULT _stdcall CalcFor([out, retval] XlCalcFor* RHS);
        [propput, helpcontext(0x00010aaa)]
        HRESULT _stdcall CalcFor([in] XlCalcFor RHS);
    };

    [
      odl,
      uuid(0002449E-0001-0000-C000-000000000046),
      helpcontext(0x00020134),
      hidden
    ]
    interface IAboveAverage : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000103d9)]
        HRESULT _stdcall Priority([out, retval] long* RHS);
        [propput, helpcontext(0x000103d9)]
        HRESULT _stdcall Priority([in] long RHS);
        [propget, helpcontext(0x00010a41)]
        HRESULT _stdcall StopIfTrue([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a41)]
        HRESULT _stdcall StopIfTrue([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a42)]
        HRESULT _stdcall AppliesTo([out, retval] Range** RHS);
        [propget, helpcontext(0x00010aab)]
        HRESULT _stdcall AboveBelow([out, retval] XlAboveBelow* RHS);
        [propput, helpcontext(0x00010aab)]
        HRESULT _stdcall AboveBelow([in] XlAboveBelow RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x000101b3)]
        HRESULT _stdcall Borders([out, retval] Borders** RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] long* RHS);
        [propget, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([in] VARIANT RHS);
        [helpcontext(0x00010a45)]
        HRESULT _stdcall SetFirstPriority();
        [helpcontext(0x00010a46)]
        HRESULT _stdcall SetLastPriority();
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x00010a43)]
        HRESULT _stdcall ModifyAppliesToRange([in] Range* Range);
        [propget, helpcontext(0x00010a47)]
        HRESULT _stdcall PTCondition([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010a37)]
        HRESULT _stdcall ScopeType([out, retval] XlPivotConditionScope* RHS);
        [propput, helpcontext(0x00010a37)]
        HRESULT _stdcall ScopeType([in] XlPivotConditionScope RHS);
        [propget, helpcontext(0x00010aaa)]
        HRESULT _stdcall CalcFor([out, retval] XlCalcFor* RHS);
        [propput, helpcontext(0x00010aaa)]
        HRESULT _stdcall CalcFor([in] XlCalcFor RHS);
        [propget, helpcontext(0x00010aac)]
        HRESULT _stdcall NumStdDev([out, retval] long* RHS);
        [propput, helpcontext(0x00010aac)]
        HRESULT _stdcall NumStdDev([in] long RHS);
    };

    [
      odl,
      uuid(0002449F-0001-0000-C000-000000000046),
      helpcontext(0x00020135),
      hidden
    ]
    interface IUniqueValues : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x000103d9)]
        HRESULT _stdcall Priority([out, retval] long* RHS);
        [propput, helpcontext(0x000103d9)]
        HRESULT _stdcall Priority([in] long RHS);
        [propget, helpcontext(0x00010a41)]
        HRESULT _stdcall StopIfTrue([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a41)]
        HRESULT _stdcall StopIfTrue([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010a42)]
        HRESULT _stdcall AppliesTo([out, retval] Range** RHS);
        [propget, helpcontext(0x00010aad)]
        HRESULT _stdcall DupeUnique([out, retval] XlDupeUnique* RHS);
        [propput, helpcontext(0x00010aad)]
        HRESULT _stdcall DupeUnique([in] XlDupeUnique RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x000101b3)]
        HRESULT _stdcall Borders([out, retval] Borders** RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x0001006c)]
        HRESULT _stdcall Type([out, retval] long* RHS);
        [propget, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x000100c1)]
        HRESULT _stdcall NumberFormat([in] VARIANT RHS);
        [helpcontext(0x00010a45)]
        HRESULT _stdcall SetFirstPriority();
        [helpcontext(0x00010a46)]
        HRESULT _stdcall SetLastPriority();
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x00010a43)]
        HRESULT _stdcall ModifyAppliesToRange([in] Range* Range);
        [propget, helpcontext(0x00010a47)]
        HRESULT _stdcall PTCondition([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010a37)]
        HRESULT _stdcall ScopeType([out, retval] XlPivotConditionScope* RHS);
        [propput, helpcontext(0x00010a37)]
        HRESULT _stdcall ScopeType([in] XlPivotConditionScope RHS);
    };

    [
      odl,
      uuid(000244A0-0001-0000-C000-000000000046),
      helpcontext(0x00020136),
      hidden
    ]
    interface IRanges : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] Range** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] Range** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
    };

    [
      odl,
      uuid(000244A1-0001-0000-C000-000000000046),
      helpcontext(0x00020137),
      hidden
    ]
    interface IHeaderFooter : IDispatch {
        [propget, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([out, retval] BSTR* RHS);
        [propput, helpcontext(0x0001008a)]
        HRESULT _stdcall Text([in] BSTR RHS);
        [propget, helpcontext(0x000101df)]
        HRESULT _stdcall Picture([out, retval] Graphic** RHS);
    };

    [
      odl,
      uuid(000244A2-0001-0000-C000-000000000046),
      helpcontext(0x00020138),
      hidden
    ]
    interface IPage : IDispatch {
        [propget, helpcontext(0x000103fa)]
        HRESULT _stdcall LeftHeader([out, retval] HeaderFooter** RHS);
        [propget, helpcontext(0x000103f3)]
        HRESULT _stdcall CenterHeader([out, retval] HeaderFooter** RHS);
        [propget, helpcontext(0x00010402)]
        HRESULT _stdcall RightHeader([out, retval] HeaderFooter** RHS);
        [propget, helpcontext(0x000103f9)]
        HRESULT _stdcall LeftFooter([out, retval] HeaderFooter** RHS);
        [propget, helpcontext(0x000103f2)]
        HRESULT _stdcall CenterFooter([out, retval] HeaderFooter** RHS);
        [propget, helpcontext(0x00010401)]
        HRESULT _stdcall RightFooter([out, retval] HeaderFooter** RHS);
    };

    [
      odl,
      uuid(000244A3-0001-0000-C000-000000000046),
      helpcontext(0x00020139),
      hidden
    ]
    interface IPages : IDispatch {
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] Page** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] Page** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(000244A4-0001-0000-C000-000000000046),
      helpcontext(0x0002013a),
      hidden
    ]
    interface IServerViewableItems : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] VARIANT Obj, 
                        [out, retval] IDispatch** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete([in] VARIANT Index);
        [helpcontext(0x000108bf)]
        HRESULT _stdcall DeleteAll();
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(000244A5-0001-0000-C000-000000000046),
      helpcontext(0x0002013b),
      hidden
    ]
    interface ITableStyleElement : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010aaf)]
        HRESULT _stdcall HasFormat([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010081)]
        HRESULT _stdcall Interior([out, retval] Interior** RHS);
        [propget, helpcontext(0x000101b3)]
        HRESULT _stdcall Borders([out, retval] Borders** RHS);
        [propget, helpcontext(0x00010092)]
        HRESULT _stdcall Font([out, retval] Font** RHS);
        [propget, helpcontext(0x00010ab0)]
        HRESULT _stdcall StripeSize([out, retval] long* RHS);
        [propput, helpcontext(0x00010ab0)]
        HRESULT _stdcall StripeSize([in] long RHS);
        [helpcontext(0x0001006f)]
        HRESULT _stdcall Clear();
    };

    [
      odl,
      uuid(000244A6-0001-0000-C000-000000000046),
      helpcontext(0x0002013c),
      hidden
    ]
    interface ITableStyleElements : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] XlTableStyleElementType Index, 
                        [out, retval] TableStyleElement** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] XlTableStyleElementType Index, 
                        [out, retval] TableStyleElement** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(000244A7-0001-0000-C000-000000000046),
      helpcontext(0x0002013d),
      hidden
    ]
    interface ITableStyle : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default([out, retval] BSTR* RHS);
        [propget, helpcontext(0x0001006e)]
        HRESULT _stdcall Name([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000103a9)]
        HRESULT _stdcall NameLocal([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010229)]
        HRESULT _stdcall BuiltIn([out, retval] VARIANT_BOOL* RHS);
        [propget, helpcontext(0x00010ab1)]
        HRESULT _stdcall TableStyleElements([out, retval] TableStyleElements** RHS);
        [propget, helpcontext(0x00010ab2)]
        HRESULT _stdcall ShowAsAvailableTableStyle([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010ab2)]
        HRESULT _stdcall ShowAsAvailableTableStyle([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010ab3)]
        HRESULT _stdcall ShowAsAvailablePivotTableStyle([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010ab3)]
        HRESULT _stdcall ShowAsAvailablePivotTableStyle([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x0001040f)]
        HRESULT _stdcall Duplicate(
                        [in, optional] VARIANT NewTableStyleName, 
                        [out, retval] TableStyle** RHS);
    };

    [
      odl,
      uuid(000244A8-0001-0000-C000-000000000046),
      helpcontext(0x0002013e),
      hidden
    ]
    interface ITableStyles : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] BSTR TableStyleName, 
                        [out, retval] TableStyle** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] TableStyle** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] TableStyle** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(000244A9-0001-0000-C000-000000000046),
      helpcontext(0x0002013f),
      hidden
    ]
    interface ISortField : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010ab5)]
        HRESULT _stdcall SortOn([out, retval] XlSortOn* RHS);
        [propput, helpcontext(0x00010ab5)]
        HRESULT _stdcall SortOn([in] XlSortOn RHS);
        [propget, helpcontext(0x00010ab6)]
        HRESULT _stdcall SortOnValue([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001009b)]
        HRESULT _stdcall Key([out, retval] Range** RHS);
        [propget, helpcontext(0x000100c0)]
        HRESULT _stdcall Order([out, retval] XlSortOrder* RHS);
        [propput, helpcontext(0x000100c0)]
        HRESULT _stdcall Order([in] XlSortOrder RHS);
        [propget, helpcontext(0x00010ab7)]
        HRESULT _stdcall CustomOrder([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010ab7)]
        HRESULT _stdcall CustomOrder([in] VARIANT RHS);
        [propget, helpcontext(0x00010ab8)]
        HRESULT _stdcall DataOption([out, retval] XlSortDataOption* RHS);
        [propput, helpcontext(0x00010ab8)]
        HRESULT _stdcall DataOption([in] XlSortDataOption RHS);
        [propget, helpcontext(0x000103d9)]
        HRESULT _stdcall Priority([out, retval] long* RHS);
        [propput, helpcontext(0x000103d9)]
        HRESULT _stdcall Priority([in] long RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [helpcontext(0x00010ab9)]
        HRESULT _stdcall ModifyKey([in] Range* Key);
        [helpcontext(0x00010aba)]
        HRESULT _stdcall SetIcon([in] Icon* Icon);
    };

    [
      odl,
      uuid(000244AA-0001-0000-C000-000000000046),
      helpcontext(0x00020140),
      hidden
    ]
    interface ISortFields : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] Range* Key, 
                        [in, optional] VARIANT SortOn, 
                        [in, optional] VARIANT Order, 
                        [in, optional] VARIANT CustomOrder, 
                        [in, optional] VARIANT DataOption, 
                        [out, retval] SortField** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] SortField** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x0001006f)]
        HRESULT _stdcall Clear();
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] SortField** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
    };

    [
      odl,
      uuid(000244AB-0001-0000-C000-000000000046),
      helpcontext(0x00020141),
      hidden
    ]
    interface ISort : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010abc)]
        HRESULT _stdcall Rng([out, retval] Range** RHS);
        [propget, helpcontext(0x0001037f)]
        HRESULT _stdcall Header([out, retval] XlYesNoGuess* RHS);
        [propput, helpcontext(0x0001037f)]
        HRESULT _stdcall Header([in] XlYesNoGuess RHS);
        [propget, helpcontext(0x000101aa)]
        HRESULT _stdcall MatchCase([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x000101aa)]
        HRESULT _stdcall MatchCase([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([out, retval] XlSortOrientation* RHS);
        [propput, helpcontext(0x00010086)]
        HRESULT _stdcall Orientation([in] XlSortOrientation RHS);
        [propget, helpcontext(0x00010381)]
        HRESULT _stdcall SortMethod([out, retval] XlSortMethod* RHS);
        [propput, helpcontext(0x00010381)]
        HRESULT _stdcall SortMethod([in] XlSortMethod RHS);
        [propget, helpcontext(0x00010abd)]
        HRESULT _stdcall SortFields([out, retval] SortFields** RHS);
        [helpcontext(0x00010abe)]
        HRESULT _stdcall SetRange([in] Range* Rng);
        [helpcontext(0x0001068b)]
        HRESULT _stdcall Apply();
    };

    [
      odl,
      uuid(000244AC-0001-0000-C000-000000000046),
      helpcontext(0x00020142),
      hidden
    ]
    interface IResearch : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010abf)]
        HRESULT _stdcall Query(
                        [in] BSTR ServiceID, 
                        [in, optional] VARIANT QueryString, 
                        [in, optional] VARIANT QueryLanguage, 
                        [in, optional] VARIANT UseSelection, 
                        [in, optional] VARIANT LaunchQuery, 
                        [out, retval] VARIANT* RHS);
        [helpcontext(0x00010ac5)]
        HRESULT _stdcall IsResearchService(
                        [in] BSTR ServiceID, 
                        [out, retval] VARIANT_BOOL* RHS);
        [helpcontext(0x00010ac6)]
        HRESULT _stdcall SetLanguagePair(
                        [in] long LanguageFrom, 
                        [in] long LanguageTo, 
                        [out, retval] VARIANT* RHS);
    };

    [
      odl,
      uuid(000244AD-0001-0000-C000-000000000046),
      helpcontext(0x00020143),
      hidden
    ]
    interface IColorStop : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [helpcontext(0x00010075)]
        HRESULT _stdcall Delete();
        [propget, helpcontext(0x00010063)]
        HRESULT _stdcall Color([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x00010063)]
        HRESULT _stdcall Color([in] VARIANT RHS);
        [propget, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([out, retval] long* RHS);
        [propput, helpcontext(0x0001093d)]
        HRESULT _stdcall ThemeColor([in] long RHS);
        [propget, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([out, retval] VARIANT* RHS);
        [propput, helpcontext(0x0001093e)]
        HRESULT _stdcall TintAndShade([in] VARIANT RHS);
        [propget, helpcontext(0x00010085)]
        HRESULT _stdcall Position([out, retval] double* RHS);
        [propput, helpcontext(0x00010085)]
        HRESULT _stdcall Position([in] double RHS);
    };

    [
      odl,
      uuid(000244AE-0001-0000-C000-000000000046),
      helpcontext(0x00020144),
      hidden
    ]
    interface IColorStops : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [helpcontext(0x000100b5)]
        HRESULT _stdcall Add(
                        [in] double Position, 
                        [out, retval] ColorStop** RHS);
        [helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] ColorStop** RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] ColorStop** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [helpcontext(0x0001006f)]
        HRESULT _stdcall Clear();
    };

    [
      odl,
      uuid(000244AF-0001-0000-C000-000000000046),
      helpcontext(0x00020145),
      hidden
    ]
    interface ILinearGradient : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010ac9)]
        HRESULT _stdcall ColorStops([out, retval] ColorStops** RHS);
        [propget, helpcontext(0x00010657)]
        HRESULT _stdcall Degree([out, retval] double* RHS);
        [propput, helpcontext(0x00010657)]
        HRESULT _stdcall Degree([in] double RHS);
    };

    [
      odl,
      uuid(000244B0-0001-0000-C000-000000000046),
      helpcontext(0x00020146),
      hidden
    ]
    interface IRectangularGradient : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010ac9)]
        HRESULT _stdcall ColorStops([out, retval] ColorStops** RHS);
        [propget, helpcontext(0x00010aca)]
        HRESULT _stdcall RectangleTop([out, retval] double* RHS);
        [propput, helpcontext(0x00010aca)]
        HRESULT _stdcall RectangleTop([in] double RHS);
        [propget, helpcontext(0x00010acb)]
        HRESULT _stdcall RectangleBottom([out, retval] double* RHS);
        [propput, helpcontext(0x00010acb)]
        HRESULT _stdcall RectangleBottom([in] double RHS);
        [propget, helpcontext(0x00010acc)]
        HRESULT _stdcall RectangleLeft([out, retval] double* RHS);
        [propput, helpcontext(0x00010acc)]
        HRESULT _stdcall RectangleLeft([in] double RHS);
        [propget, helpcontext(0x00010acd)]
        HRESULT _stdcall RectangleRight([out, retval] double* RHS);
        [propput, helpcontext(0x00010acd)]
        HRESULT _stdcall RectangleRight([in] double RHS);
    };

    [
      odl,
      uuid(000244B1-0001-0000-C000-000000000046),
      helpcontext(0x00020147),
      hidden
    ]
    interface IMultiThreadedCalculation : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010258)]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL RHS);
        [propget, helpcontext(0x00010ace)]
        HRESULT _stdcall ThreadMode([out, retval] XlThreadMode* RHS);
        [propput, helpcontext(0x00010ace)]
        HRESULT _stdcall ThreadMode([in] XlThreadMode RHS);
        [propget, helpcontext(0x00010acf)]
        HRESULT _stdcall ThreadCount([out, retval] long* RHS);
        [propput, helpcontext(0x00010acf)]
        HRESULT _stdcall ThreadCount([in] long RHS);
    };

    [
      odl,
      uuid(000244B2-0001-0000-C000-000000000046),
      helpcontext(0x00020148),
      hidden
    ]
    interface IChartFormat : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x0001067f)]
        HRESULT _stdcall Fill([out, retval] FillFormat** RHS);
        [propget, helpcontext(0x00010a67)]
        HRESULT _stdcall Glow([out, retval] GlowFormat** RHS);
        [propget, helpcontext(0x00010331)]
        HRESULT _stdcall Line([out, retval] LineFormat** RHS);
        [propget, helpcontext(0x0001065f)]
        HRESULT _stdcall PictureFormat([out, retval] PictureFormat** RHS);
        [propget, helpcontext(0x00010067)]
        HRESULT _stdcall Shadow([out, retval] ShadowFormat** RHS);
        [propget, helpcontext(0x00010a66)]
        HRESULT _stdcall SoftEdge([out, retval] SoftEdgeFormat** RHS);
        [propget, helpcontext(0x00010a63)]
        HRESULT _stdcall TextFrame2([out, retval] TextFrame2** RHS);
        [propget, helpcontext(0x000106a7)]
        HRESULT _stdcall ThreeD([out, retval] ThreeDFormat** RHS);
    };

    [
      odl,
      uuid(000244B3-0001-0000-C000-000000000046),
      helpcontext(0x00020149),
      hidden
    ]
    interface IFileExportConverter : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010ad1)]
        HRESULT _stdcall Extensions([out, retval] BSTR* RHS);
        [propget, helpcontext(0x000100da)]
        HRESULT _stdcall Description([out, retval] BSTR* RHS);
        [propget, helpcontext(0x00010120)]
        HRESULT _stdcall FileFormat([out, retval] long* RHS);
    };

    [
      odl,
      uuid(000244B4-0001-0000-C000-000000000046),
      helpcontext(0x0002014a),
      hidden
    ]
    interface IFileExportConverters : IDispatch {
        [propget, helpcontext(0x00010094)]
        HRESULT _stdcall Application([out, retval] Application** RHS);
        [propget, helpcontext(0x00010095)]
        HRESULT _stdcall Creator([out, retval] XlCreator* RHS);
        [propget, helpcontext(0x00010096)]
        HRESULT _stdcall Parent([out, retval] IDispatch** RHS);
        [propget, helpcontext(0x00010076)]
        HRESULT _stdcall Count([out, retval] long* RHS);
        [propget, helpcontext(0x00010000)]
        HRESULT _stdcall _Default(
                        [in] VARIANT Index, 
                        [out, retval] FileExportConverter** RHS);
        [propget, helpcontext(0x0000fffc)]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** RHS);
        [propget, helpcontext(0x000100aa)]
        HRESULT _stdcall Item(
                        [in] VARIANT Index, 
                        [out, retval] FileExportConverter** RHS);
    };

    [
      uuid(0002084D-0000-0000-C000-000000000046),
      helpcontext(0x0002000d)
    ]
    dispinterface Font {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b4), propget, helpcontext(0x000100b4)]
            VARIANT Background();
            [id(0x000000b4), propput, helpcontext(0x000100b4)]
            void Background([in] VARIANT rhs);
            [id(0x00000060), propget, helpcontext(0x00010060)]
            VARIANT Bold();
            [id(0x00000060), propput, helpcontext(0x00010060)]
            void Bold([in] VARIANT rhs);
            [id(0x00000063), propget, helpcontext(0x00010063)]
            VARIANT Color();
            [id(0x00000063), propput, helpcontext(0x00010063)]
            void Color([in] VARIANT rhs);
            [id(0x00000061), propget, helpcontext(0x00010061)]
            VARIANT ColorIndex();
            [id(0x00000061), propput, helpcontext(0x00010061)]
            void ColorIndex([in] VARIANT rhs);
            [id(0x000000b1), propget, helpcontext(0x000100b1)]
            VARIANT FontStyle();
            [id(0x000000b1), propput, helpcontext(0x000100b1)]
            void FontStyle([in] VARIANT rhs);
            [id(0x00000065), propget, helpcontext(0x00010065)]
            VARIANT Italic();
            [id(0x00000065), propput, helpcontext(0x00010065)]
            void Italic([in] VARIANT rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            VARIANT Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] VARIANT rhs);
            [id(0x000000dd), propget, hidden, helpcontext(0x000100dd)]
            VARIANT OutlineFont();
            [id(0x000000dd), propput, hidden, helpcontext(0x000100dd)]
            void OutlineFont([in] VARIANT rhs);
            [id(0x00000067), propget, hidden, helpcontext(0x00010067)]
            VARIANT Shadow();
            [id(0x00000067), propput, hidden, helpcontext(0x00010067)]
            void Shadow([in] VARIANT rhs);
            [id(0x00000068), propget, helpcontext(0x00010068)]
            VARIANT Size();
            [id(0x00000068), propput, helpcontext(0x00010068)]
            void Size([in] VARIANT rhs);
            [id(0x00000069), propget, helpcontext(0x00010069)]
            VARIANT Strikethrough();
            [id(0x00000069), propput, helpcontext(0x00010069)]
            void Strikethrough([in] VARIANT rhs);
            [id(0x000000b3), propget, helpcontext(0x000100b3)]
            VARIANT Subscript();
            [id(0x000000b3), propput, helpcontext(0x000100b3)]
            void Subscript([in] VARIANT rhs);
            [id(0x000000b2), propget, helpcontext(0x000100b2)]
            VARIANT Superscript();
            [id(0x000000b2), propput, helpcontext(0x000100b2)]
            void Superscript([in] VARIANT rhs);
            [id(0x0000006a), propget, helpcontext(0x0001006a)]
            VARIANT Underline();
            [id(0x0000006a), propput, helpcontext(0x0001006a)]
            void Underline([in] VARIANT rhs);
            [id(0x0000093d), propget, helpcontext(0x0001093d)]
            VARIANT ThemeColor();
            [id(0x0000093d), propput, helpcontext(0x0001093d)]
            void ThemeColor([in] VARIANT rhs);
            [id(0x0000093e), propget, helpcontext(0x0001093e)]
            VARIANT TintAndShade();
            [id(0x0000093e), propput, helpcontext(0x0001093e)]
            void TintAndShade([in] VARIANT rhs);
            [id(0x0000093f), propget, helpcontext(0x0001093f)]
            XlThemeFont ThemeFont();
            [id(0x0000093f), propput, helpcontext(0x0001093f)]
            void ThemeFont([in] XlThemeFont rhs);
    };

    [
      uuid(00020893-0000-0000-C000-000000000046),
      helpcontext(0x00020053)
    ]
    dispinterface Window {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000130), helpcontext(0x00010130)]
            VARIANT Activate();
            [id(0x0000045b), helpcontext(0x0001045b)]
            VARIANT ActivateNext();
            [id(0x0000045c), helpcontext(0x0001045c)]
            VARIANT ActivatePrevious();
            [id(0x00000131), propget, helpcontext(0x00010131)]
            Range* ActiveCell();
            [id(0x000000b7), propget, helpcontext(0x000100b7)]
            Chart* ActiveChart();
            [id(0x00000282), propget, helpcontext(0x00010282)]
            Pane* ActivePane();
            [id(0x00000133), propget, helpcontext(0x00010133)]
            IDispatch* ActiveSheet();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            VARIANT Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] VARIANT rhs);
            [id(0x00000115), helpcontext(0x00010115)]
            VARIANT_BOOL Close(
                            [in, optional] VARIANT SaveChanges, 
                            [in, optional] VARIANT Filename, 
                            [in, optional] VARIANT RouteWorkbook);
            [id(0x00000284), propget, helpcontext(0x00010284)]
            VARIANT_BOOL DisplayFormulas();
            [id(0x00000284), propput, helpcontext(0x00010284)]
            void DisplayFormulas([in] VARIANT_BOOL rhs);
            [id(0x00000285), propget, helpcontext(0x00010285)]
            VARIANT_BOOL DisplayGridlines();
            [id(0x00000285), propput, helpcontext(0x00010285)]
            void DisplayGridlines([in] VARIANT_BOOL rhs);
            [id(0x00000286), propget, helpcontext(0x00010286)]
            VARIANT_BOOL DisplayHeadings();
            [id(0x00000286), propput, helpcontext(0x00010286)]
            void DisplayHeadings([in] VARIANT_BOOL rhs);
            [id(0x00000399), propget, helpcontext(0x00010399)]
            VARIANT_BOOL DisplayHorizontalScrollBar();
            [id(0x00000399), propput, helpcontext(0x00010399)]
            void DisplayHorizontalScrollBar([in] VARIANT_BOOL rhs);
            [id(0x00000287), propget, helpcontext(0x00010287)]
            VARIANT_BOOL DisplayOutline();
            [id(0x00000287), propput, helpcontext(0x00010287)]
            void DisplayOutline([in] VARIANT_BOOL rhs);
            [id(0x00000288), propget, hidden, helpcontext(0x00010288)]
            VARIANT_BOOL _DisplayRightToLeft();
            [id(0x00000288), propput, hidden, helpcontext(0x00010288)]
            void _DisplayRightToLeft([in] VARIANT_BOOL rhs);
            [id(0x0000039a), propget, helpcontext(0x0001039a)]
            VARIANT_BOOL DisplayVerticalScrollBar();
            [id(0x0000039a), propput, helpcontext(0x0001039a)]
            void DisplayVerticalScrollBar([in] VARIANT_BOOL rhs);
            [id(0x0000039b), propget, helpcontext(0x0001039b)]
            VARIANT_BOOL DisplayWorkbookTabs();
            [id(0x0000039b), propput, helpcontext(0x0001039b)]
            void DisplayWorkbookTabs([in] VARIANT_BOOL rhs);
            [id(0x00000289), propget, helpcontext(0x00010289)]
            VARIANT_BOOL DisplayZeros();
            [id(0x00000289), propput, helpcontext(0x00010289)]
            void DisplayZeros([in] VARIANT_BOOL rhs);
            [id(0x000004a8), propget, helpcontext(0x000104a8)]
            VARIANT_BOOL EnableResize();
            [id(0x000004a8), propput, helpcontext(0x000104a8)]
            void EnableResize([in] VARIANT_BOOL rhs);
            [id(0x0000028a), propget, helpcontext(0x0001028a)]
            VARIANT_BOOL FreezePanes();
            [id(0x0000028a), propput, helpcontext(0x0001028a)]
            void FreezePanes([in] VARIANT_BOOL rhs);
            [id(0x0000028b), propget, helpcontext(0x0001028b)]
            long GridlineColor();
            [id(0x0000028b), propput, helpcontext(0x0001028b)]
            void GridlineColor([in] long rhs);
            [id(0x0000028c), propget, helpcontext(0x0001028c)]
            XlColorIndex GridlineColorIndex();
            [id(0x0000028c), propput, helpcontext(0x0001028c)]
            void GridlineColorIndex([in] XlColorIndex rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x00000223), helpcontext(0x00010223)]
            VARIANT LargeScroll(
                            [in, optional] VARIANT Down, 
                            [in, optional] VARIANT Up, 
                            [in, optional] VARIANT ToRight, 
                            [in, optional] VARIANT ToLeft);
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x00000118), helpcontext(0x00010118)]
            Window* NewWindow();
            [id(0x0000026f), propget, helpcontext(0x0001026f)]
            BSTR OnWindow();
            [id(0x0000026f), propput, helpcontext(0x0001026f)]
            void OnWindow([in] BSTR rhs);
            [id(0x0000028d), propget, helpcontext(0x0001028d)]
            Panes* Panes();
            [id(0x000006ec), hidden, helpcontext(0x000106ec)]
            VARIANT _PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate, 
                            [in, optional] VARIANT PrToFileName);
            [id(0x00000119), helpcontext(0x00010119)]
            VARIANT PrintPreview([in, optional] VARIANT EnableChanges);
            [id(0x000004a5), propget, helpcontext(0x000104a5)]
            Range* RangeSelection();
            [id(0x0000028e), propget, helpcontext(0x0001028e)]
            long ScrollColumn();
            [id(0x0000028e), propput, helpcontext(0x0001028e)]
            void ScrollColumn([in] long rhs);
            [id(0x0000028f), propget, helpcontext(0x0001028f)]
            long ScrollRow();
            [id(0x0000028f), propput, helpcontext(0x0001028f)]
            void ScrollRow([in] long rhs);
            [id(0x00000296), helpcontext(0x00010296)]
            VARIANT ScrollWorkbookTabs(
                            [in, optional] VARIANT Sheets, 
                            [in, optional] VARIANT Position);
            [id(0x00000290), propget, helpcontext(0x00010290)]
            Sheets* SelectedSheets();
            [id(0x00000093), propget, helpcontext(0x00010093)]
            IDispatch* Selection();
            [id(0x00000224), helpcontext(0x00010224)]
            VARIANT SmallScroll(
                            [in, optional] VARIANT Down, 
                            [in, optional] VARIANT Up, 
                            [in, optional] VARIANT ToRight, 
                            [in, optional] VARIANT ToLeft);
            [id(0x00000291), propget, helpcontext(0x00010291)]
            VARIANT_BOOL Split();
            [id(0x00000291), propput, helpcontext(0x00010291)]
            void Split([in] VARIANT_BOOL rhs);
            [id(0x00000292), propget, helpcontext(0x00010292)]
            long SplitColumn();
            [id(0x00000292), propput, helpcontext(0x00010292)]
            void SplitColumn([in] long rhs);
            [id(0x00000293), propget, helpcontext(0x00010293)]
            double SplitHorizontal();
            [id(0x00000293), propput, helpcontext(0x00010293)]
            void SplitHorizontal([in] double rhs);
            [id(0x00000294), propget, helpcontext(0x00010294)]
            long SplitRow();
            [id(0x00000294), propput, helpcontext(0x00010294)]
            void SplitRow([in] long rhs);
            [id(0x00000295), propget, helpcontext(0x00010295)]
            double SplitVertical();
            [id(0x00000295), propput, helpcontext(0x00010295)]
            void SplitVertical([in] double rhs);
            [id(0x000002a1), propget, helpcontext(0x000102a1)]
            double TabRatio();
            [id(0x000002a1), propput, helpcontext(0x000102a1)]
            void TabRatio([in] double rhs);
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            XlWindowType Type();
            [id(0x00000185), propget, helpcontext(0x00010185)]
            double UsableHeight();
            [id(0x00000186), propget, helpcontext(0x00010186)]
            double UsableWidth();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000045e), propget, helpcontext(0x0001045e)]
            Range* VisibleRange();
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000045f), propget, helpcontext(0x0001045f)]
            long WindowNumber();
            [id(0x0000018c), propget, helpcontext(0x0001018c)]
            XlWindowState WindowState();
            [id(0x0000018c), propput, helpcontext(0x0001018c)]
            void WindowState([in] XlWindowState rhs);
            [id(0x00000297), propget, helpcontext(0x00010297)]
            VARIANT Zoom();
            [id(0x00000297), propput, helpcontext(0x00010297)]
            void Zoom([in] VARIANT rhs);
            [id(0x000004aa), propget, helpcontext(0x000104aa)]
            XlWindowView View();
            [id(0x000004aa), propput, helpcontext(0x000104aa)]
            void View([in] XlWindowView rhs);
            [id(0x000006ee), propget, helpcontext(0x000106ee)]
            VARIANT_BOOL DisplayRightToLeft();
            [id(0x000006ee), propput, helpcontext(0x000106ee)]
            void DisplayRightToLeft([in] VARIANT_BOOL rhs);
            [id(0x000006f0), helpcontext(0x000106f0)]
            long PointsToScreenPixelsX([in] long Points);
            [id(0x000006f1), helpcontext(0x000106f1)]
            long PointsToScreenPixelsY([in] long Points);
            [id(0x000006f2), helpcontext(0x000106f2)]
            IDispatch* RangeFromPoint(
                            [in] long x, 
                            [in] long y);
            [id(0x000006f5), helpcontext(0x000106f5)]
            void ScrollIntoView(
                            [in] long Left, 
                            [in] long Top, 
                            [in] long Width, 
                            [in] long Height, 
                            [in, optional] VARIANT Start);
            [id(0x00000940), propget, helpcontext(0x00010940)]
            SheetViews* SheetViews();
            [id(0x00000941), propget, helpcontext(0x00010941)]
            IDispatch* ActiveSheetView();
            [id(0x00000939), helpcontext(0x00010939)]
            VARIANT PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate, 
                            [in, optional] VARIANT PrToFileName);
            [id(0x00000942), propget, helpcontext(0x00010942)]
            VARIANT_BOOL DisplayRuler();
            [id(0x00000942), propput, helpcontext(0x00010942)]
            void DisplayRuler([in] VARIANT_BOOL rhs);
            [id(0x00000943), propget, helpcontext(0x00010943)]
            VARIANT_BOOL AutoFilterDateGrouping();
            [id(0x00000943), propput, helpcontext(0x00010943)]
            void AutoFilterDateGrouping([in] VARIANT_BOOL rhs);
            [id(0x00000944), propget, helpcontext(0x00010944)]
            VARIANT_BOOL DisplayWhitespace();
            [id(0x00000944), propput, helpcontext(0x00010944)]
            void DisplayWhitespace([in] VARIANT_BOOL rhs);
    };

    [
      uuid(00020892-0000-0000-C000-000000000046),
      helpcontext(0x00020052)
    ]
    dispinterface Windows {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000027e), helpcontext(0x0001027e)]
            VARIANT Arrange(
                            [in, optional, defaultvalue(1)] XlArrangeStyle ArrangeStyle, 
                            [in, optional] VARIANT ActiveWorkbook, 
                            [in, optional] VARIANT SyncHorizontal, 
                            [in, optional] VARIANT SyncVertical);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            Window* Item([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(00000000), propget, helpcontext(0x00010000)]
            Window* _Default([in] VARIANT Index);
            [id(0x000008c6), helpcontext(0x000108c6)]
            VARIANT_BOOL CompareSideBySideWith([in] VARIANT WindowName);
            [id(0x000008c8), helpcontext(0x000108c8)]
            VARIANT_BOOL BreakSideBySide();
            [id(0x000008c9), propget, helpcontext(0x000108c9)]
            VARIANT_BOOL SyncScrollingSideBySide();
            [id(0x000008c9), propput, helpcontext(0x000108c9)]
            void SyncScrollingSideBySide([in] VARIANT_BOOL rhs);
            [id(0x000008ca), helpcontext(0x000108ca)]
            void ResetPositionsSideBySide();
    };

    [
      uuid(00024413-0000-0000-C000-000000000046),
      helpcontext(0x000200a9),
      hidden
    ]
    dispinterface AppEvents {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x0000061d), helpcontext(0x0001061d)]
            void NewWorkbook([in] Workbook* Wb);
            [id(0x00000616), helpcontext(0x00010616)]
            void SheetSelectionChange(
                            [in] IDispatch* Sh, 
                            [in] Range* Target);
            [id(0x00000617), helpcontext(0x00010617)]
            void SheetBeforeDoubleClick(
                            [in] IDispatch* Sh, 
                            [in] Range* Target, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000618), helpcontext(0x00010618)]
            void SheetBeforeRightClick(
                            [in] IDispatch* Sh, 
                            [in] Range* Target, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000619), helpcontext(0x00010619)]
            void SheetActivate([in] IDispatch* Sh);
            [id(0x0000061a), helpcontext(0x0001061a)]
            void SheetDeactivate([in] IDispatch* Sh);
            [id(0x0000061b), helpcontext(0x0001061b)]
            void SheetCalculate([in] IDispatch* Sh);
            [id(0x0000061c), helpcontext(0x0001061c)]
            void SheetChange(
                            [in] IDispatch* Sh, 
                            [in] Range* Target);
            [id(0x0000061f), helpcontext(0x0001061f)]
            void WorkbookOpen([in] Workbook* Wb);
            [id(0x00000620), helpcontext(0x00010620)]
            void WorkbookActivate([in] Workbook* Wb);
            [id(0x00000621), helpcontext(0x00010621)]
            void WorkbookDeactivate([in] Workbook* Wb);
            [id(0x00000622), helpcontext(0x00010622)]
            void WorkbookBeforeClose(
                            [in] Workbook* Wb, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000623), helpcontext(0x00010623)]
            void WorkbookBeforeSave(
                            [in] Workbook* Wb, 
                            [in] VARIANT_BOOL SaveAsUI, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000624), helpcontext(0x00010624)]
            void WorkbookBeforePrint(
                            [in] Workbook* Wb, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000625), helpcontext(0x00010625)]
            void WorkbookNewSheet(
                            [in] Workbook* Wb, 
                            [in] IDispatch* Sh);
            [id(0x00000626), helpcontext(0x00010626)]
            void WorkbookAddinInstall([in] Workbook* Wb);
            [id(0x00000627), helpcontext(0x00010627)]
            void WorkbookAddinUninstall([in] Workbook* Wb);
            [id(0x00000612), helpcontext(0x00010612)]
            void WindowResize(
                            [in] Workbook* Wb, 
                            [in] Window* Wn);
            [id(0x00000614), helpcontext(0x00010614)]
            void WindowActivate(
                            [in] Workbook* Wb, 
                            [in] Window* Wn);
            [id(0x00000615), helpcontext(0x00010615)]
            void WindowDeactivate(
                            [in] Workbook* Wb, 
                            [in] Window* Wn);
            [id(0x0000073e), helpcontext(0x0001073e)]
            void SheetFollowHyperlink(
                            [in] IDispatch* Sh, 
                            [in] Hyperlink* Target);
            [id(0x0000086d), helpcontext(0x0001086d)]
            void SheetPivotTableUpdate(
                            [in] IDispatch* Sh, 
                            [in] PivotTable* Target);
            [id(0x00000870), helpcontext(0x00010870)]
            void WorkbookPivotTableCloseConnection(
                            [in] Workbook* Wb, 
                            [in] PivotTable* Target);
            [id(0x00000871), helpcontext(0x00010871)]
            void WorkbookPivotTableOpenConnection(
                            [in] Workbook* Wb, 
                            [in] PivotTable* Target);
            [id(0x000008f1), helpcontext(0x000108f1)]
            void WorkbookSync(
                            [in] Workbook* Wb, 
                            [in] MsoSyncEventType SyncEventType);
            [id(0x000008f2), helpcontext(0x000108f2)]
            void WorkbookBeforeXmlImport(
                            [in] Workbook* Wb, 
                            [in] XmlMap* Map, 
                            [in] BSTR Url, 
                            [in] VARIANT_BOOL IsRefresh, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x000008f3), helpcontext(0x000108f3)]
            void WorkbookAfterXmlImport(
                            [in] Workbook* Wb, 
                            [in] XmlMap* Map, 
                            [in] VARIANT_BOOL IsRefresh, 
                            [in] XlXmlImportResult Result);
            [id(0x000008f4), helpcontext(0x000108f4)]
            void WorkbookBeforeXmlExport(
                            [in] Workbook* Wb, 
                            [in] XmlMap* Map, 
                            [in] BSTR Url, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x000008f5), helpcontext(0x000108f5)]
            void WorkbookAfterXmlExport(
                            [in] Workbook* Wb, 
                            [in] XmlMap* Map, 
                            [in] BSTR Url, 
                            [in] XlXmlExportResult Result);
            [id(0x00000a33), helpcontext(0x00010a33)]
            void WorkbookRowsetComplete(
                            [in] Workbook* Wb, 
                            [in] BSTR Description, 
                            [in] BSTR Sheet, 
                            [in] VARIANT_BOOL Success);
            [id(0x00000a34), helpcontext(0x00010a34)]
            void AfterCalculate();
    };

    [
      uuid(00020845-0000-0000-C000-000000000046),
      helpcontext(0x00020005)
    ]
    dispinterface WorksheetFunction {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000a9), hidden, helpcontext(0x000100a9)]
            VARIANT _WSFunction(
                            [in, optional] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x00004000), helpcontext(0x00014000)]
            double Count(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x00004002), helpcontext(0x00014002)]
            VARIANT_BOOL IsNA([in] VARIANT Arg1);
            [id(0x00004003), helpcontext(0x00014003)]
            VARIANT_BOOL IsError([in] VARIANT Arg1);
            [id(0x00004004), helpcontext(0x00014004)]
            double Sum(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x00004005), helpcontext(0x00014005)]
            double Average(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x00004006), helpcontext(0x00014006)]
            double Min(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x00004007), helpcontext(0x00014007)]
            double Max(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x0000400b), helpcontext(0x0001400b)]
            double Npv(
                            [in] double Arg1, 
                            [in] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x0000400c), helpcontext(0x0001400c)]
            double StDev(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x0000400d), helpcontext(0x0001400d)]
            BSTR Dollar(
                            [in] double Arg1, 
                            [in, optional] VARIANT Arg2);
            [id(0x0000400e), helpcontext(0x0001400e)]
            BSTR Fixed(
                            [in] double Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x00004013), helpcontext(0x00014013)]
            double Pi();
            [id(0x00004016), helpcontext(0x00014016)]
            double Ln([in] double Arg1);
            [id(0x00004017), helpcontext(0x00014017)]
            double Log10([in] double Arg1);
            [id(0x0000401b), helpcontext(0x0001401b)]
            double Round(
                            [in] double Arg1, 
                            [in] double Arg2);
            [id(0x0000401c), helpcontext(0x0001401c)]
            VARIANT Lookup(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x0000401d), helpcontext(0x0001401d)]
            VARIANT Index(
                            [in] VARIANT Arg1, 
                            [in] double Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4);
            [id(0x0000401e), helpcontext(0x0001401e)]
            BSTR Rept(
                            [in] BSTR Arg1, 
                            [in] double Arg2);
            [id(0x00004024), helpcontext(0x00014024)]
            VARIANT_BOOL And(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x00004025), helpcontext(0x00014025)]
            VARIANT_BOOL Or(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x00004028), helpcontext(0x00014028)]
            double DCount(
                            [in] Range* Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3);
            [id(0x00004029), helpcontext(0x00014029)]
            double DSum(
                            [in] Range* Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3);
            [id(0x0000402a), helpcontext(0x0001402a)]
            double DAverage(
                            [in] Range* Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3);
            [id(0x0000402b), helpcontext(0x0001402b)]
            double DMin(
                            [in] Range* Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3);
            [id(0x0000402c), helpcontext(0x0001402c)]
            double DMax(
                            [in] Range* Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3);
            [id(0x0000402d), helpcontext(0x0001402d)]
            double DStDev(
                            [in] Range* Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3);
            [id(0x0000402e), helpcontext(0x0001402e)]
            double Var(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x0000402f), helpcontext(0x0001402f)]
            double DVar(
                            [in] Range* Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3);
            [id(0x00004030), helpcontext(0x00014030)]
            BSTR Text(
                            [in] VARIANT Arg1, 
                            [in] BSTR Arg2);
            [id(0x00004031), helpcontext(0x00014031)]
            VARIANT LinEst(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4);
            [id(0x00004032), helpcontext(0x00014032)]
            VARIANT Trend(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4);
            [id(0x00004033), helpcontext(0x00014033)]
            VARIANT LogEst(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4);
            [id(0x00004034), helpcontext(0x00014034)]
            VARIANT Growth(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4);
            [id(0x00004038), helpcontext(0x00014038)]
            double Pv(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5);
            [id(0x00004039), helpcontext(0x00014039)]
            double Fv(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5);
            [id(0x0000403a), helpcontext(0x0001403a)]
            double NPer(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5);
            [id(0x0000403b), helpcontext(0x0001403b)]
            double Pmt(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5);
            [id(0x0000403c), helpcontext(0x0001403c)]
            double Rate(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6);
            [id(0x0000403d), helpcontext(0x0001403d)]
            double MIrr(
                            [in] VARIANT Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3);
            [id(0x0000403e), helpcontext(0x0001403e)]
            double Irr(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2);
            [id(0x00004040), helpcontext(0x00014040)]
            double Match(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x00004046), helpcontext(0x00014046)]
            double Weekday(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2);
            [id(0x00004052), helpcontext(0x00014052)]
            double Search(
                            [in] BSTR Arg1, 
                            [in] BSTR Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x00004053), helpcontext(0x00014053)]
            VARIANT Transpose([in] VARIANT Arg1);
            [id(0x00004061), helpcontext(0x00014061)]
            double Atan2(
                            [in] double Arg1, 
                            [in] double Arg2);
            [id(0x00004062), helpcontext(0x00014062)]
            double Asin([in] double Arg1);
            [id(0x00004063), helpcontext(0x00014063)]
            double Acos([in] double Arg1);
            [id(0x00004064), helpcontext(0x00014064)]
            VARIANT Choose(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x00004065), helpcontext(0x00014065)]
            VARIANT HLookup(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4);
            [id(0x00004066), helpcontext(0x00014066)]
            VARIANT VLookup(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4);
            [id(0x0000406d), helpcontext(0x0001406d)]
            double Log(
                            [in] double Arg1, 
                            [in, optional] VARIANT Arg2);
            [id(0x00004072), helpcontext(0x00014072)]
            BSTR Proper([in] BSTR Arg1);
            [id(0x00004076), helpcontext(0x00014076)]
            BSTR Trim([in] BSTR Arg1);
            [id(0x00004077), helpcontext(0x00014077)]
            BSTR Replace(
                            [in] BSTR Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in] BSTR Arg4);
            [id(0x00004078), helpcontext(0x00014078)]
            BSTR Substitute(
                            [in] BSTR Arg1, 
                            [in] BSTR Arg2, 
                            [in] BSTR Arg3, 
                            [in, optional] VARIANT Arg4);
            [id(0x0000407c), helpcontext(0x0001407c)]
            double Find(
                            [in] BSTR Arg1, 
                            [in] BSTR Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x0000407e), helpcontext(0x0001407e)]
            VARIANT_BOOL IsErr([in] VARIANT Arg1);
            [id(0x0000407f), helpcontext(0x0001407f)]
            VARIANT_BOOL IsText([in] VARIANT Arg1);
            [id(0x00004080), helpcontext(0x00014080)]
            VARIANT_BOOL IsNumber([in] VARIANT Arg1);
            [id(0x0000408e), helpcontext(0x0001408e)]
            double Sln(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3);
            [id(0x0000408f), helpcontext(0x0001408f)]
            double Syd(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in] double Arg4);
            [id(0x00004090), helpcontext(0x00014090)]
            double Ddb(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in] double Arg4, 
                            [in, optional] VARIANT Arg5);
            [id(0x000040a2), helpcontext(0x000140a2)]
            BSTR Clean([in] BSTR Arg1);
            [id(0x000040a3), helpcontext(0x000140a3)]
            double MDeterm([in] VARIANT Arg1);
            [id(0x000040a4), helpcontext(0x000140a4)]
            VARIANT MInverse([in] VARIANT Arg1);
            [id(0x000040a5), helpcontext(0x000140a5)]
            VARIANT MMult(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x000040a7), helpcontext(0x000140a7)]
            double Ipmt(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in] double Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6);
            [id(0x000040a8), helpcontext(0x000140a8)]
            double Ppmt(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in] double Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6);
            [id(0x000040a9), helpcontext(0x000140a9)]
            double CountA(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x000040b7), helpcontext(0x000140b7)]
            double Product(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x000040b8), helpcontext(0x000140b8)]
            double Fact([in] double Arg1);
            [id(0x000040bd), helpcontext(0x000140bd)]
            double DProduct(
                            [in] Range* Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3);
            [id(0x000040be), helpcontext(0x000140be)]
            VARIANT_BOOL IsNonText([in] VARIANT Arg1);
            [id(0x000040c1), helpcontext(0x000140c1)]
            double StDevP(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x000040c2), helpcontext(0x000140c2)]
            double VarP(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x000040c3), helpcontext(0x000140c3)]
            double DStDevP(
                            [in] Range* Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3);
            [id(0x000040c4), helpcontext(0x000140c4)]
            double DVarP(
                            [in] Range* Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3);
            [id(0x000040c6), helpcontext(0x000140c6)]
            VARIANT_BOOL IsLogical([in] VARIANT Arg1);
            [id(0x000040c7), helpcontext(0x000140c7)]
            double DCountA(
                            [in] Range* Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3);
            [id(0x000040cc), helpcontext(0x000140cc)]
            BSTR USDollar(
                            [in] double Arg1, 
                            [in] double Arg2);
            [id(0x000040cd), helpcontext(0x000140cd)]
            double FindB(
                            [in] BSTR Arg1, 
                            [in] BSTR Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x000040ce), helpcontext(0x000140ce)]
            double SearchB(
                            [in] BSTR Arg1, 
                            [in] BSTR Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x000040cf), helpcontext(0x000140cf)]
            BSTR ReplaceB(
                            [in] BSTR Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in] BSTR Arg4);
            [id(0x000040d4), helpcontext(0x000140d4)]
            double RoundUp(
                            [in] double Arg1, 
                            [in] double Arg2);
            [id(0x000040d5), helpcontext(0x000140d5)]
            double RoundDown(
                            [in] double Arg1, 
                            [in] double Arg2);
            [id(0x000040d8), helpcontext(0x000140d8)]
            double Rank(
                            [in] double Arg1, 
                            [in] Range* Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x000040dc), helpcontext(0x000140dc)]
            double Days360(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x000040de), helpcontext(0x000140de)]
            double Vdb(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in] double Arg4, 
                            [in] double Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7);
            [id(0x000040e3), helpcontext(0x000140e3)]
            double Median(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x000040e4), helpcontext(0x000140e4)]
            double SumProduct(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x000040e5), helpcontext(0x000140e5)]
            double Sinh([in] double Arg1);
            [id(0x000040e6), helpcontext(0x000140e6)]
            double Cosh([in] double Arg1);
            [id(0x000040e7), helpcontext(0x000140e7)]
            double Tanh([in] double Arg1);
            [id(0x000040e8), helpcontext(0x000140e8)]
            double Asinh([in] double Arg1);
            [id(0x000040e9), helpcontext(0x000140e9)]
            double Acosh([in] double Arg1);
            [id(0x000040ea), helpcontext(0x000140ea)]
            double Atanh([in] double Arg1);
            [id(0x000040eb), helpcontext(0x000140eb)]
            VARIANT DGet(
                            [in] Range* Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3);
            [id(0x000040f7), helpcontext(0x000140f7)]
            double Db(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in] double Arg4, 
                            [in, optional] VARIANT Arg5);
            [id(0x000040fc), helpcontext(0x000140fc)]
            VARIANT Frequency(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x0000410d), helpcontext(0x0001410d)]
            double AveDev(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x0000410e), helpcontext(0x0001410e)]
            double BetaDist(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5);
            [id(0x0000410f), helpcontext(0x0001410f)]
            double GammaLn([in] double Arg1);
            [id(0x00004110), helpcontext(0x00014110)]
            double BetaInv(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5);
            [id(0x00004111), helpcontext(0x00014111)]
            double BinomDist(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in] VARIANT_BOOL Arg4);
            [id(0x00004112), helpcontext(0x00014112)]
            double ChiDist(
                            [in] double Arg1, 
                            [in] double Arg2);
            [id(0x00004113), helpcontext(0x00014113)]
            double ChiInv(
                            [in] double Arg1, 
                            [in] double Arg2);
            [id(0x00004114), helpcontext(0x00014114)]
            double Combin(
                            [in] double Arg1, 
                            [in] double Arg2);
            [id(0x00004115), helpcontext(0x00014115)]
            double Confidence(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3);
            [id(0x00004116), helpcontext(0x00014116)]
            double CritBinom(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3);
            [id(0x00004117), helpcontext(0x00014117)]
            double Even([in] double Arg1);
            [id(0x00004118), helpcontext(0x00014118)]
            double ExponDist(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] VARIANT_BOOL Arg3);
            [id(0x00004119), helpcontext(0x00014119)]
            double FDist(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3);
            [id(0x0000411a), helpcontext(0x0001411a)]
            double FInv(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3);
            [id(0x0000411b), helpcontext(0x0001411b)]
            double Fisher([in] double Arg1);
            [id(0x0000411c), helpcontext(0x0001411c)]
            double FisherInv([in] double Arg1);
            [id(0x0000411d), helpcontext(0x0001411d)]
            double Floor(
                            [in] double Arg1, 
                            [in] double Arg2);
            [id(0x0000411e), helpcontext(0x0001411e)]
            double GammaDist(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in] VARIANT_BOOL Arg4);
            [id(0x0000411f), helpcontext(0x0001411f)]
            double GammaInv(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3);
            [id(0x00004120), helpcontext(0x00014120)]
            double Ceiling(
                            [in] double Arg1, 
                            [in] double Arg2);
            [id(0x00004121), helpcontext(0x00014121)]
            double HypGeomDist(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in] double Arg4);
            [id(0x00004122), helpcontext(0x00014122)]
            double LogNormDist(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3);
            [id(0x00004123), helpcontext(0x00014123)]
            double LogInv(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3);
            [id(0x00004124), helpcontext(0x00014124)]
            double NegBinomDist(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3);
            [id(0x00004125), helpcontext(0x00014125)]
            double NormDist(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in] VARIANT_BOOL Arg4);
            [id(0x00004126), helpcontext(0x00014126)]
            double NormSDist([in] double Arg1);
            [id(0x00004127), helpcontext(0x00014127)]
            double NormInv(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3);
            [id(0x00004128), helpcontext(0x00014128)]
            double NormSInv([in] double Arg1);
            [id(0x00004129), helpcontext(0x00014129)]
            double Standardize(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3);
            [id(0x0000412a), helpcontext(0x0001412a)]
            double Odd([in] double Arg1);
            [id(0x0000412b), helpcontext(0x0001412b)]
            double Permut(
                            [in] double Arg1, 
                            [in] double Arg2);
            [id(0x0000412c), helpcontext(0x0001412c)]
            double Poisson(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] VARIANT_BOOL Arg3);
            [id(0x0000412d), helpcontext(0x0001412d)]
            double TDist(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3);
            [id(0x0000412e), helpcontext(0x0001412e)]
            double Weibull(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in] VARIANT_BOOL Arg4);
            [id(0x0000412f), helpcontext(0x0001412f)]
            double SumXMY2(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x00004130), helpcontext(0x00014130)]
            double SumX2MY2(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x00004131), helpcontext(0x00014131)]
            double SumX2PY2(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x00004132), helpcontext(0x00014132)]
            double ChiTest(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x00004133), helpcontext(0x00014133)]
            double Correl(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x00004134), helpcontext(0x00014134)]
            double Covar(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x00004135), helpcontext(0x00014135)]
            double Forecast(
                            [in] double Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3);
            [id(0x00004136), helpcontext(0x00014136)]
            double FTest(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x00004137), helpcontext(0x00014137)]
            double Intercept(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x00004138), helpcontext(0x00014138)]
            double Pearson(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x00004139), helpcontext(0x00014139)]
            double RSq(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x0000413a), helpcontext(0x0001413a)]
            double StEyx(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x0000413b), helpcontext(0x0001413b)]
            double Slope(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x0000413c), helpcontext(0x0001413c)]
            double TTest(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] double Arg3, 
                            [in] double Arg4);
            [id(0x0000413d), helpcontext(0x0001413d)]
            double Prob(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] double Arg3, 
                            [in, optional] VARIANT Arg4);
            [id(0x0000413e), helpcontext(0x0001413e)]
            double DevSq(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x0000413f), helpcontext(0x0001413f)]
            double GeoMean(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x00004140), helpcontext(0x00014140)]
            double HarMean(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x00004141), helpcontext(0x00014141)]
            double SumSq(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x00004142), helpcontext(0x00014142)]
            double Kurt(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x00004143), helpcontext(0x00014143)]
            double Skew(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x00004144), helpcontext(0x00014144)]
            double ZTest(
                            [in] VARIANT Arg1, 
                            [in] double Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x00004145), helpcontext(0x00014145)]
            double Large(
                            [in] VARIANT Arg1, 
                            [in] double Arg2);
            [id(0x00004146), helpcontext(0x00014146)]
            double Small(
                            [in] VARIANT Arg1, 
                            [in] double Arg2);
            [id(0x00004147), helpcontext(0x00014147)]
            double Quartile(
                            [in] VARIANT Arg1, 
                            [in] double Arg2);
            [id(0x00004148), helpcontext(0x00014148)]
            double Percentile(
                            [in] VARIANT Arg1, 
                            [in] double Arg2);
            [id(0x00004149), helpcontext(0x00014149)]
            double PercentRank(
                            [in] VARIANT Arg1, 
                            [in] double Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x0000414a), helpcontext(0x0001414a)]
            double Mode(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x0000414b), helpcontext(0x0001414b)]
            double TrimMean(
                            [in] VARIANT Arg1, 
                            [in] double Arg2);
            [id(0x0000414c), helpcontext(0x0001414c)]
            double TInv(
                            [in] double Arg1, 
                            [in] double Arg2);
            [id(0x00004151), helpcontext(0x00014151)]
            double Power(
                            [in] double Arg1, 
                            [in] double Arg2);
            [id(0x00004156), helpcontext(0x00014156)]
            double Radians([in] double Arg1);
            [id(0x00004157), helpcontext(0x00014157)]
            double Degrees([in] double Arg1);
            [id(0x00004158), helpcontext(0x00014158)]
            double Subtotal(
                            [in] double Arg1, 
                            [in] Range* Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x00004159), helpcontext(0x00014159)]
            double SumIf(
                            [in] Range* Arg1, 
                            [in] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x0000415a), helpcontext(0x0001415a)]
            double CountIf(
                            [in] Range* Arg1, 
                            [in] VARIANT Arg2);
            [id(0x0000415b), helpcontext(0x0001415b)]
            double CountBlank([in] Range* Arg1);
            [id(0x0000415e), helpcontext(0x0001415e)]
            double Ispmt(
                            [in] double Arg1, 
                            [in] double Arg2, 
                            [in] double Arg3, 
                            [in] double Arg4);
            [id(0x00004162), helpcontext(0x00014162)]
            BSTR Roman(
                            [in] double Arg1, 
                            [in, optional] VARIANT Arg2);
            [id(0x000040d6), helpcontext(0x000140d6)]
            BSTR Asc([in] BSTR Arg1);
            [id(0x000040d7), helpcontext(0x000140d7)]
            BSTR Dbcs([in] BSTR Arg1);
            [id(0x00004168), helpcontext(0x00014168)]
            BSTR Phonetic([in] Range* Arg1);
            [id(0x00004170), helpcontext(0x00014170)]
            BSTR BahtText([in] double Arg1);
            [id(0x00004171), hidden, helpcontext(0x00014171)]
            BSTR ThaiDayOfWeek([in] double Arg1);
            [id(0x00004172), hidden, helpcontext(0x00014172)]
            BSTR ThaiDigit([in] BSTR Arg1);
            [id(0x00004173), hidden, helpcontext(0x00014173)]
            BSTR ThaiMonthOfYear([in] double Arg1);
            [id(0x00004174), hidden, helpcontext(0x00014174)]
            BSTR ThaiNumSound([in] double Arg1);
            [id(0x00004175), hidden, helpcontext(0x00014175)]
            BSTR ThaiNumString([in] double Arg1);
            [id(0x00004176), hidden, helpcontext(0x00014176)]
            double ThaiStringLength([in] BSTR Arg1);
            [id(0x00004177), hidden, helpcontext(0x00014177)]
            VARIANT_BOOL IsThaiDigit([in] BSTR Arg1);
            [id(0x00004178), hidden, helpcontext(0x00014178)]
            double RoundBahtDown([in] double Arg1);
            [id(0x00004179), hidden, helpcontext(0x00014179)]
            double RoundBahtUp([in] double Arg1);
            [id(0x0000417a), hidden, helpcontext(0x0001417a)]
            double ThaiYear([in] double Arg1);
            [id(0x0000417b), helpcontext(0x0001417b)]
            VARIANT RTD(
                            [in] VARIANT progID, 
                            [in] VARIANT server, 
                            [in] VARIANT topic1, 
                            [in, optional] VARIANT topic2, 
                            [in, optional] VARIANT topic3, 
                            [in, optional] VARIANT topic4, 
                            [in, optional] VARIANT topic5, 
                            [in, optional] VARIANT topic6, 
                            [in, optional] VARIANT topic7, 
                            [in, optional] VARIANT topic8, 
                            [in, optional] VARIANT topic9, 
                            [in, optional] VARIANT topic10, 
                            [in, optional] VARIANT topic11, 
                            [in, optional] VARIANT topic12, 
                            [in, optional] VARIANT topic13, 
                            [in, optional] VARIANT topic14, 
                            [in, optional] VARIANT topic15, 
                            [in, optional] VARIANT topic16, 
                            [in, optional] VARIANT topic17, 
                            [in, optional] VARIANT topic18, 
                            [in, optional] VARIANT topic19, 
                            [in, optional] VARIANT topic20, 
                            [in, optional] VARIANT topic21, 
                            [in, optional] VARIANT topic22, 
                            [in, optional] VARIANT topic23, 
                            [in, optional] VARIANT topic24, 
                            [in, optional] VARIANT topic25, 
                            [in, optional] VARIANT topic26, 
                            [in, optional] VARIANT topic27, 
                            [in, optional] VARIANT topic28);
            [id(0x00004180), helpcontext(0x00014180)]
            BSTR Hex2Bin(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2);
            [id(0x00004181), helpcontext(0x00014181)]
            BSTR Hex2Dec([in] VARIANT Arg1);
            [id(0x00004182), helpcontext(0x00014182)]
            BSTR Hex2Oct(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2);
            [id(0x00004183), helpcontext(0x00014183)]
            BSTR Dec2Bin(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2);
            [id(0x00004184), helpcontext(0x00014184)]
            BSTR Dec2Hex(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2);
            [id(0x00004185), helpcontext(0x00014185)]
            BSTR Dec2Oct(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2);
            [id(0x00004186), helpcontext(0x00014186)]
            BSTR Oct2Bin(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2);
            [id(0x00004187), helpcontext(0x00014187)]
            BSTR Oct2Hex(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2);
            [id(0x00004188), helpcontext(0x00014188)]
            BSTR Oct2Dec([in] VARIANT Arg1);
            [id(0x00004189), helpcontext(0x00014189)]
            BSTR Bin2Dec([in] VARIANT Arg1);
            [id(0x0000418a), helpcontext(0x0001418a)]
            BSTR Bin2Oct(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2);
            [id(0x0000418b), helpcontext(0x0001418b)]
            BSTR Bin2Hex(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2);
            [id(0x0000418c), helpcontext(0x0001418c)]
            BSTR ImSub(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x0000418d), helpcontext(0x0001418d)]
            BSTR ImDiv(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x0000418e), helpcontext(0x0001418e)]
            BSTR ImPower(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x0000418f), helpcontext(0x0001418f)]
            BSTR ImAbs([in] VARIANT Arg1);
            [id(0x00004190), helpcontext(0x00014190)]
            BSTR ImSqrt([in] VARIANT Arg1);
            [id(0x00004191), helpcontext(0x00014191)]
            BSTR ImLn([in] VARIANT Arg1);
            [id(0x00004192), helpcontext(0x00014192)]
            BSTR ImLog2([in] VARIANT Arg1);
            [id(0x00004193), helpcontext(0x00014193)]
            BSTR ImLog10([in] VARIANT Arg1);
            [id(0x00004194), helpcontext(0x00014194)]
            BSTR ImSin([in] VARIANT Arg1);
            [id(0x00004195), helpcontext(0x00014195)]
            BSTR ImCos([in] VARIANT Arg1);
            [id(0x00004196), helpcontext(0x00014196)]
            BSTR ImExp([in] VARIANT Arg1);
            [id(0x00004197), helpcontext(0x00014197)]
            BSTR ImArgument([in] VARIANT Arg1);
            [id(0x00004198), helpcontext(0x00014198)]
            BSTR ImConjugate([in] VARIANT Arg1);
            [id(0x00004199), helpcontext(0x00014199)]
            double Imaginary([in] VARIANT Arg1);
            [id(0x0000419a), helpcontext(0x0001419a)]
            double ImReal([in] VARIANT Arg1);
            [id(0x0000419b), helpcontext(0x0001419b)]
            BSTR Complex(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x0000419c), helpcontext(0x0001419c)]
            BSTR ImSum(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x0000419d), helpcontext(0x0001419d)]
            BSTR ImProduct(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x0000419e), helpcontext(0x0001419e)]
            double SeriesSum(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4);
            [id(0x0000419f), helpcontext(0x0001419f)]
            double FactDouble([in] VARIANT Arg1);
            [id(0x000041a0), helpcontext(0x000141a0)]
            double SqrtPi([in] VARIANT Arg1);
            [id(0x000041a1), helpcontext(0x000141a1)]
            double Quotient(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x000041a2), helpcontext(0x000141a2)]
            double Delta(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2);
            [id(0x000041a3), helpcontext(0x000141a3)]
            double GeStep(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2);
            [id(0x000041a4), helpcontext(0x000141a4)]
            VARIANT_BOOL IsEven([in] VARIANT Arg1);
            [id(0x000041a5), helpcontext(0x000141a5)]
            VARIANT_BOOL IsOdd([in] VARIANT Arg1);
            [id(0x000041a6), helpcontext(0x000141a6)]
            double MRound(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x000041a7), helpcontext(0x000141a7)]
            double Erf(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2);
            [id(0x000041a8), helpcontext(0x000141a8)]
            double ErfC([in] VARIANT Arg1);
            [id(0x000041a9), helpcontext(0x000141a9)]
            double BesselJ(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x000041aa), helpcontext(0x000141aa)]
            double BesselK(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x000041ab), helpcontext(0x000141ab)]
            double BesselY(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x000041ac), helpcontext(0x000141ac)]
            double BesselI(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x000041ad), helpcontext(0x000141ad)]
            double Xirr(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x000041ae), helpcontext(0x000141ae)]
            double Xnpv(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x000041af), helpcontext(0x000141af)]
            double PriceMat(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6);
            [id(0x000041b0), helpcontext(0x000141b0)]
            double YieldMat(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6);
            [id(0x000041b1), helpcontext(0x000141b1)]
            double IntRate(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5);
            [id(0x000041b2), helpcontext(0x000141b2)]
            double Received(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5);
            [id(0x000041b3), helpcontext(0x000141b3)]
            double Disc(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5);
            [id(0x000041b4), helpcontext(0x000141b4)]
            double PriceDisc(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5);
            [id(0x000041b5), helpcontext(0x000141b5)]
            double YieldDisc(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5);
            [id(0x000041b6), helpcontext(0x000141b6)]
            double TBillEq(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x000041b7), helpcontext(0x000141b7)]
            double TBillPrice(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x000041b8), helpcontext(0x000141b8)]
            double TBillYield(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x000041b9), helpcontext(0x000141b9)]
            double Price(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in] VARIANT Arg5, 
                            [in] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7);
            [id(0x000041bb), helpcontext(0x000141bb)]
            double DollarDe(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x000041bc), helpcontext(0x000141bc)]
            double DollarFr(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x000041bd), helpcontext(0x000141bd)]
            double Nominal(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x000041be), helpcontext(0x000141be)]
            double Effect(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x000041bf), helpcontext(0x000141bf)]
            double CumPrinc(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in] VARIANT Arg5, 
                            [in] VARIANT Arg6);
            [id(0x000041c0), helpcontext(0x000141c0)]
            double CumIPmt(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in] VARIANT Arg5, 
                            [in] VARIANT Arg6);
            [id(0x000041c1), helpcontext(0x000141c1)]
            double EDate(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x000041c2), helpcontext(0x000141c2)]
            double EoMonth(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x000041c3), helpcontext(0x000141c3)]
            double YearFrac(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x000041c4), helpcontext(0x000141c4)]
            double CoupDayBs(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4);
            [id(0x000041c5), helpcontext(0x000141c5)]
            double CoupDays(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4);
            [id(0x000041c6), helpcontext(0x000141c6)]
            double CoupDaysNc(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4);
            [id(0x000041c7), helpcontext(0x000141c7)]
            double CoupNcd(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4);
            [id(0x000041c8), helpcontext(0x000141c8)]
            double CoupNum(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4);
            [id(0x000041c9), helpcontext(0x000141c9)]
            double CoupPcd(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4);
            [id(0x000041ca), helpcontext(0x000141ca)]
            double Duration(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6);
            [id(0x000041cb), helpcontext(0x000141cb)]
            double MDuration(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6);
            [id(0x000041cc), helpcontext(0x000141cc)]
            double OddLPrice(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in] VARIANT Arg5, 
                            [in] VARIANT Arg6, 
                            [in] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8);
            [id(0x000041cd), helpcontext(0x000141cd)]
            double OddLYield(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in] VARIANT Arg5, 
                            [in] VARIANT Arg6, 
                            [in] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8);
            [id(0x000041ce), helpcontext(0x000141ce)]
            double OddFPrice(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in] VARIANT Arg5, 
                            [in] VARIANT Arg6, 
                            [in] VARIANT Arg7, 
                            [in] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9);
            [id(0x000041cf), helpcontext(0x000141cf)]
            double OddFYield(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in] VARIANT Arg5, 
                            [in] VARIANT Arg6, 
                            [in] VARIANT Arg7, 
                            [in] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9);
            [id(0x000041d0), helpcontext(0x000141d0)]
            double RandBetween(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x000041d1), helpcontext(0x000141d1)]
            double WeekNum(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2);
            [id(0x000041d2), helpcontext(0x000141d2)]
            double AmorDegrc(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in] VARIANT Arg5, 
                            [in] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7);
            [id(0x000041d3), helpcontext(0x000141d3)]
            double AmorLinc(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in] VARIANT Arg5, 
                            [in] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7);
            [id(0x000041d4), helpcontext(0x000141d4)]
            double Convert(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3);
            [id(0x000041d5), helpcontext(0x000141d5)]
            double AccrInt(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in] VARIANT Arg5, 
                            [in] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7);
            [id(0x000041d6), helpcontext(0x000141d6)]
            double AccrIntM(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in] VARIANT Arg3, 
                            [in] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5);
            [id(0x000041d7), helpcontext(0x000141d7)]
            double WorkDay(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x000041d8), helpcontext(0x000141d8)]
            double NetworkDays(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x000041d9), helpcontext(0x000141d9)]
            double Gcd(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x000041da), helpcontext(0x000141da)]
            double MultiNomial(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x000041db), helpcontext(0x000141db)]
            double Lcm(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x000041dc), helpcontext(0x000141dc)]
            double FVSchedule(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
            [id(0x000041e2), helpcontext(0x000141e2)]
            double SumIfs(
                            [in] Range* Arg1, 
                            [in] Range* Arg2, 
                            [in] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29);
            [id(0x000041e1), helpcontext(0x000141e1)]
            double CountIfs(
                            [in] Range* Arg1, 
                            [in] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x000041e3), helpcontext(0x000141e3)]
            double AverageIf(
                            [in] Range* Arg1, 
                            [in] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3);
            [id(0x000041e4), helpcontext(0x000141e4)]
            double AverageIfs(
                            [in] Range* Arg1, 
                            [in] Range* Arg2, 
                            [in] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29);
            [id(0x000041e0), helpcontext(0x000141e0)]
            VARIANT IfError(
                            [in] VARIANT Arg1, 
                            [in] VARIANT Arg2);
    };

    [
      uuid(00020846-0000-0000-C000-000000000046),
      helpcontext(0x00020006)
    ]
    dispinterface Range {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000130), helpcontext(0x00010130)]
            VARIANT Activate();
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT rhs);
            [id(0x000000ec), propget, helpcontext(0x000100ec)]
            BSTR Address(
                            [in, optional] VARIANT RowAbsolute, 
                            [in, optional] VARIANT ColumnAbsolute, 
                            [in, optional, defaultvalue(1)] XlReferenceStyle ReferenceStyle, 
                            [in, optional] VARIANT External, 
                            [in, optional] VARIANT RelativeTo);
            [id(0x000001b5), propget, helpcontext(0x000101b5)]
            BSTR AddressLocal(
                            [in, optional] VARIANT RowAbsolute, 
                            [in, optional] VARIANT ColumnAbsolute, 
                            [in, optional, defaultvalue(1)] XlReferenceStyle ReferenceStyle, 
                            [in, optional] VARIANT External, 
                            [in, optional] VARIANT RelativeTo);
            [id(0x0000036c), helpcontext(0x0001036c)]
            VARIANT AdvancedFilter(
                            [in] XlFilterAction Action, 
                            [in, optional] VARIANT CriteriaRange, 
                            [in, optional] VARIANT CopyToRange, 
                            [in, optional] VARIANT Unique);
            [id(0x000001b9), helpcontext(0x000101b9)]
            VARIANT ApplyNames(
                            [in, optional] VARIANT Names, 
                            [in, optional] VARIANT IgnoreRelativeAbsolute, 
                            [in, optional] VARIANT UseRowColumnNames, 
                            [in, optional] VARIANT OmitColumn, 
                            [in, optional] VARIANT OmitRow, 
                            [in, optional, defaultvalue(1)] XlApplyNamesOrder Order, 
                            [in, optional] VARIANT AppendLast);
            [id(0x000001c0), helpcontext(0x000101c0)]
            VARIANT ApplyOutlineStyles();
            [id(0x00000238), propget, helpcontext(0x00010238)]
            Areas* Areas();
            [id(0x000004a1), helpcontext(0x000104a1)]
            BSTR AutoComplete([in] BSTR String);
            [id(0x000001c1), helpcontext(0x000101c1)]
            VARIANT AutoFill(
                            [in] Range* Destination, 
                            [in, optional, defaultvalue(0)] XlAutoFillType Type);
            [id(0x00000319), helpcontext(0x00010319)]
            VARIANT AutoFilter(
                            [in, optional] VARIANT Field, 
                            [in, optional] VARIANT Criteria1, 
                            [in, optional, defaultvalue(1)] XlAutoFilterOperator Operator, 
                            [in, optional] VARIANT Criteria2, 
                            [in, optional] VARIANT VisibleDropDown);
            [id(0x000000ed), helpcontext(0x000100ed)]
            VARIANT AutoFit();
            [id(0x00000072), hidden, helpcontext(0x00010072)]
            VARIANT AutoFormat(
                            [in, optional, defaultvalue(1)] XlRangeAutoFormat Format, 
                            [in, optional] VARIANT Number, 
                            [in, optional] VARIANT Font, 
                            [in, optional] VARIANT Alignment, 
                            [in, optional] VARIANT Border, 
                            [in, optional] VARIANT Pattern, 
                            [in, optional] VARIANT Width);
            [id(0x0000040c), helpcontext(0x0001040c)]
            VARIANT AutoOutline();
            [id(0x0000042b), helpcontext(0x0001042b)]
            VARIANT BorderAround(
                            [in, optional] VARIANT LineStyle, 
                            [in, optional, defaultvalue(2)] XlBorderWeight Weight, 
                            [in, optional, defaultvalue(-4105)] XlColorIndex ColorIndex, 
                            [in, optional] VARIANT Color);
            [id(0x000001b3), propget, helpcontext(0x000101b3)]
            Borders* Borders();
            [id(0x00000117), helpcontext(0x00010117)]
            VARIANT Calculate();
            [id(0x000000ee), propget, helpcontext(0x000100ee)]
            Range* Cells();
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x0000006f), helpcontext(0x0001006f)]
            VARIANT Clear();
            [id(0x00000071), helpcontext(0x00010071)]
            VARIANT ClearContents();
            [id(0x00000070), helpcontext(0x00010070)]
            VARIANT ClearFormats();
            [id(0x000000ef), helpcontext(0x000100ef)]
            VARIANT ClearNotes();
            [id(0x0000040d), helpcontext(0x0001040d)]
            VARIANT ClearOutline();
            [id(0x000000f0), propget, helpcontext(0x000100f0)]
            long Column();
            [id(0x000001fe), helpcontext(0x000101fe)]
            Range* ColumnDifferences([in] VARIANT Comparison);
            [id(0x000000f1), propget, helpcontext(0x000100f1)]
            Range* Columns();
            [id(0x000000f2), propget, helpcontext(0x000100f2)]
            VARIANT ColumnWidth();
            [id(0x000000f2), propput, helpcontext(0x000100f2)]
            void ColumnWidth([in] VARIANT rhs);
            [id(0x000001e2), helpcontext(0x000101e2)]
            VARIANT Consolidate(
                            [in, optional] VARIANT Sources, 
                            [in, optional] VARIANT Function, 
                            [in, optional] VARIANT TopRow, 
                            [in, optional] VARIANT LeftColumn, 
                            [in, optional] VARIANT CreateLinks);
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy([in, optional] VARIANT Destination);
            [id(0x00000480), helpcontext(0x00010480)]
            long CopyFromRecordset(
                            [in] IUnknown* Data, 
                            [in, optional] VARIANT MaxRows, 
                            [in, optional] VARIANT MaxColumns);
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(1)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000001c9), helpcontext(0x000101c9)]
            VARIANT CreateNames(
                            [in, optional] VARIANT Top, 
                            [in, optional] VARIANT Left, 
                            [in, optional] VARIANT Bottom, 
                            [in, optional] VARIANT Right);
            [id(0x000001ca), hidden, helpcontext(0x000101ca)]
            VARIANT CreatePublisher(
                            [in, optional] VARIANT Edition, 
                            [in, optional, defaultvalue(1)] XlPictureAppearance Appearance, 
                            [in, optional] VARIANT ContainsPICT, 
                            [in, optional] VARIANT ContainsBIFF, 
                            [in, optional] VARIANT ContainsRTF, 
                            [in, optional] VARIANT ContainsVALU);
            [id(0x000001f5), propget, helpcontext(0x000101f5)]
            Range* CurrentArray();
            [id(0x000000f3), propget, helpcontext(0x000100f3)]
            Range* CurrentRegion();
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut([in, optional] VARIANT Destination);
            [id(0x000001d0), helpcontext(0x000101d0)]
            VARIANT DataSeries(
                            [in, optional] VARIANT Rowcol, 
                            [in, optional, defaultvalue(-4132)] XlDataSeriesType Type, 
                            [in, optional, defaultvalue(1)] XlDataSeriesDate Date, 
                            [in, optional] VARIANT Step, 
                            [in, optional] VARIANT Stop, 
                            [in, optional] VARIANT Trend);
            [id(00000000), propget, helpcontext(0x00010000)]
            VARIANT _Default(
                            [in, optional] VARIANT RowIndex, 
                            [in, optional] VARIANT ColumnIndex);
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default(
                            [in, optional] VARIANT RowIndex, 
                            [in, optional] VARIANT ColumnIndex, 
                            [in] VARIANT rhs);
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete([in, optional] VARIANT Shift);
            [id(0x0000021f), propget, helpcontext(0x0001021f)]
            Range* Dependents();
            [id(0x000000f5), helpcontext(0x000100f5)]
            VARIANT DialogBox();
            [id(0x00000221), propget, helpcontext(0x00010221)]
            Range* DirectDependents();
            [id(0x00000222), propget, helpcontext(0x00010222)]
            Range* DirectPrecedents();
            [id(0x0000046b), helpcontext(0x0001046b)]
            VARIANT EditionOptions(
                            [in] XlEditionType Type, 
                            [in] XlEditionOptionsOption Option, 
                            [in, optional] VARIANT Name, 
                            [in, optional] VARIANT Reference, 
                            [in, optional, defaultvalue(1)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(1)] XlPictureAppearance ChartSize, 
                            [in, optional] VARIANT Format);
            [id(0x000001f4), propget, helpcontext(0x000101f4)]
            Range* End([in] XlDirection Direction);
            [id(0x000000f6), propget, helpcontext(0x000100f6)]
            Range* EntireColumn();
            [id(0x000000f7), propget, helpcontext(0x000100f7)]
            Range* EntireRow();
            [id(0x000000f8), helpcontext(0x000100f8)]
            VARIANT FillDown();
            [id(0x000000f9), helpcontext(0x000100f9)]
            VARIANT FillLeft();
            [id(0x000000fa), helpcontext(0x000100fa)]
            VARIANT FillRight();
            [id(0x000000fb), helpcontext(0x000100fb)]
            VARIANT FillUp();
            [id(0x0000018e), helpcontext(0x0001018e)]
            Range* Find(
                            [in] VARIANT What, 
                            [in, optional] VARIANT After, 
                            [in, optional] VARIANT LookIn, 
                            [in, optional] VARIANT LookAt, 
                            [in, optional] VARIANT SearchOrder, 
                            [in, optional, defaultvalue(1)] XlSearchDirection SearchDirection, 
                            [in, optional] VARIANT MatchCase, 
                            [in, optional] VARIANT MatchByte, 
                            [in, optional] VARIANT SearchFormat);
            [id(0x0000018f), helpcontext(0x0001018f)]
            Range* FindNext([in, optional] VARIANT After);
            [id(0x00000190), helpcontext(0x00010190)]
            Range* FindPrevious([in, optional] VARIANT After);
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000105), propget, helpcontext(0x00010105)]
            VARIANT Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] VARIANT rhs);
            [id(0x0000024a), propget, helpcontext(0x0001024a)]
            VARIANT FormulaArray();
            [id(0x0000024a), propput, helpcontext(0x0001024a)]
            void FormulaArray([in] VARIANT rhs);
            [id(0x00000564), propget, hidden, helpcontext(0x00010564)]
            XlFormulaLabel FormulaLabel();
            [id(0x00000564), propput, hidden, helpcontext(0x00010564)]
            void FormulaLabel([in] XlFormulaLabel rhs);
            [id(0x00000106), propget, helpcontext(0x00010106)]
            VARIANT FormulaHidden();
            [id(0x00000106), propput, helpcontext(0x00010106)]
            void FormulaHidden([in] VARIANT rhs);
            [id(0x00000107), propget, helpcontext(0x00010107)]
            VARIANT FormulaLocal();
            [id(0x00000107), propput, helpcontext(0x00010107)]
            void FormulaLocal([in] VARIANT rhs);
            [id(0x00000108), propget, helpcontext(0x00010108)]
            VARIANT FormulaR1C1();
            [id(0x00000108), propput, helpcontext(0x00010108)]
            void FormulaR1C1([in] VARIANT rhs);
            [id(0x00000109), propget, helpcontext(0x00010109)]
            VARIANT FormulaR1C1Local();
            [id(0x00000109), propput, helpcontext(0x00010109)]
            void FormulaR1C1Local([in] VARIANT rhs);
            [id(0x0000023b), helpcontext(0x0001023b)]
            VARIANT FunctionWizard();
            [id(0x000001d8), hidden, helpcontext(0x000101d8)]
            VARIANT_BOOL GoalSeek(
                            [in] VARIANT Goal, 
                            [in] Range* ChangingCell);
            [id(0x0000002e), helpcontext(0x0001002e)]
            VARIANT Group(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT End, 
                            [in, optional] VARIANT By, 
                            [in, optional] VARIANT Periods);
            [id(0x0000010a), propget, helpcontext(0x0001010a)]
            VARIANT HasArray();
            [id(0x0000010b), propget, helpcontext(0x0001010b)]
            VARIANT HasFormula();
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            VARIANT Height();
            [id(0x0000010c), propget, helpcontext(0x0001010c)]
            VARIANT Hidden();
            [id(0x0000010c), propput, helpcontext(0x0001010c)]
            void Hidden([in] VARIANT rhs);
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x000000c9), propget, helpcontext(0x000100c9)]
            VARIANT IndentLevel();
            [id(0x000000c9), propput, helpcontext(0x000100c9)]
            void IndentLevel([in] VARIANT rhs);
            [id(0x00000565), helpcontext(0x00010565)]
            void InsertIndent([in] long InsertAmount);
            [id(0x000000fc), helpcontext(0x000100fc)]
            VARIANT Insert(
                            [in, optional] VARIANT Shift, 
                            [in, optional] VARIANT CopyOrigin);
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            VARIANT Item(
                            [in] VARIANT RowIndex, 
                            [in, optional] VARIANT ColumnIndex);
            [id(0x000000aa), propput, helpcontext(0x000100aa)]
            void Item(
                            [in] VARIANT RowIndex, 
                            [in, optional] VARIANT ColumnIndex, 
                            [in] VARIANT rhs);
            [id(0x000001ef), helpcontext(0x000101ef)]
            VARIANT Justify();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            VARIANT Left();
            [id(0x000004a3), propget, helpcontext(0x000104a3)]
            long ListHeaderRows();
            [id(0x000000fd), helpcontext(0x000100fd)]
            VARIANT ListNames();
            [id(0x000002b3), propget, helpcontext(0x000102b3)]
            XlLocationInTable LocationInTable();
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT rhs);
            [id(0x00000234), helpcontext(0x00010234)]
            void Merge([in, optional] VARIANT Across);
            [id(0x00000568), helpcontext(0x00010568)]
            void UnMerge();
            [id(0x00000569), propget, helpcontext(0x00010569)]
            Range* MergeArea();
            [id(0x000000d0), propget, helpcontext(0x000100d0)]
            VARIANT MergeCells();
            [id(0x000000d0), propput, helpcontext(0x000100d0)]
            void MergeCells([in] VARIANT rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            VARIANT Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] VARIANT rhs);
            [id(0x00000408), helpcontext(0x00010408)]
            VARIANT NavigateArrow(
                            [in, optional] VARIANT TowardPrecedent, 
                            [in, optional] VARIANT ArrowNumber, 
                            [in, optional] VARIANT LinkNumber);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000001f6), propget, helpcontext(0x000101f6)]
            Range* Next();
            [id(0x00000467), helpcontext(0x00010467)]
            BSTR NoteText(
                            [in, optional] VARIANT Text, 
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000000c1), propget, helpcontext(0x000100c1)]
            VARIANT NumberFormat();
            [id(0x000000c1), propput, helpcontext(0x000100c1)]
            void NumberFormat([in] VARIANT rhs);
            [id(0x00000449), propget, helpcontext(0x00010449)]
            VARIANT NumberFormatLocal();
            [id(0x00000449), propput, helpcontext(0x00010449)]
            void NumberFormatLocal([in] VARIANT rhs);
            [id(0x000000fe), propget, helpcontext(0x000100fe)]
            Range* Offset(
                            [in, optional] VARIANT RowOffset, 
                            [in, optional] VARIANT ColumnOffset);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x0000010f), propget, helpcontext(0x0001010f)]
            VARIANT OutlineLevel();
            [id(0x0000010f), propput, helpcontext(0x0001010f)]
            void OutlineLevel([in] VARIANT rhs);
            [id(0x000000ff), propget, helpcontext(0x000100ff)]
            long PageBreak();
            [id(0x000000ff), propput, helpcontext(0x000100ff)]
            void PageBreak([in] long rhs);
            [id(0x000001dd), helpcontext(0x000101dd)]
            VARIANT Parse(
                            [in, optional] VARIANT ParseLine, 
                            [in, optional] VARIANT Destination);
            [id(0x00000403), hidden, helpcontext(0x00010403)]
            VARIANT _PasteSpecial(
                            [in, optional, defaultvalue(-4104)] XlPasteType Paste, 
                            [in, optional, defaultvalue(-4142)] XlPasteSpecialOperation Operation, 
                            [in, optional] VARIANT SkipBlanks, 
                            [in, optional] VARIANT Transpose);
            [id(0x000002db), propget, helpcontext(0x000102db)]
            PivotField* PivotField();
            [id(0x000002e4), propget, helpcontext(0x000102e4)]
            PivotItem* PivotItem();
            [id(0x000002cc), propget, helpcontext(0x000102cc)]
            PivotTable* PivotTable();
            [id(0x00000220), propget, helpcontext(0x00010220)]
            Range* Precedents();
            [id(0x000001f8), propget, helpcontext(0x000101f8)]
            VARIANT PrefixCharacter();
            [id(0x000001f7), propget, helpcontext(0x000101f7)]
            Range* Previous();
            [id(0x00000389), hidden, helpcontext(0x00010389),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, _PrintOut)]
            VARIANT __PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate);
            [id(0x00000119), helpcontext(0x00010119)]
            VARIANT PrintPreview([in, optional] VARIANT EnableChanges);
            [id(0x0000056a), propget, helpcontext(0x0001056a)]
            QueryTable* QueryTable();
            [id(0x000000c5), propget, helpcontext(0x000100c5)]
            Range* Range(
                            [in] VARIANT Cell1, 
                            [in, optional] VARIANT Cell2);
            [id(0x00000373), helpcontext(0x00010373)]
            VARIANT RemoveSubtotal();
            [id(0x000000e2), helpcontext(0x000100e2)]
            VARIANT_BOOL Replace(
                            [in] VARIANT What, 
                            [in] VARIANT Replacement, 
                            [in, optional] VARIANT LookAt, 
                            [in, optional] VARIANT SearchOrder, 
                            [in, optional] VARIANT MatchCase, 
                            [in, optional] VARIANT MatchByte, 
                            [in, optional] VARIANT SearchFormat, 
                            [in, optional] VARIANT ReplaceFormat);
            [id(0x00000100), propget, helpcontext(0x00010100)]
            Range* Resize(
                            [in, optional] VARIANT RowSize, 
                            [in, optional] VARIANT ColumnSize);
            [id(0x00000101), propget, helpcontext(0x00010101)]
            long Row();
            [id(0x000001ff), helpcontext(0x000101ff)]
            Range* RowDifferences([in] VARIANT Comparison);
            [id(0x00000110), propget, helpcontext(0x00010110)]
            VARIANT RowHeight();
            [id(0x00000110), propput, helpcontext(0x00010110)]
            void RowHeight([in] VARIANT rhs);
            [id(0x00000102), propget, helpcontext(0x00010102)]
            Range* Rows();
            [id(0x00000103), helpcontext(0x00010103)]
            VARIANT Run(
                            [in, optional] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x000001f0), helpcontext(0x000101f0)]
            VARIANT Show();
            [id(0x0000036d), helpcontext(0x0001036d)]
            VARIANT ShowDependents([in, optional] VARIANT Remove);
            [id(0x00000249), propget, helpcontext(0x00010249)]
            VARIANT ShowDetail();
            [id(0x00000249), propput, helpcontext(0x00010249)]
            void ShowDetail([in] VARIANT rhs);
            [id(0x0000036e), helpcontext(0x0001036e)]
            VARIANT ShowErrors();
            [id(0x0000036f), helpcontext(0x0001036f)]
            VARIANT ShowPrecedents([in, optional] VARIANT Remove);
            [id(0x000000d1), propget, helpcontext(0x000100d1)]
            VARIANT ShrinkToFit();
            [id(0x000000d1), propput, helpcontext(0x000100d1)]
            void ShrinkToFit([in] VARIANT rhs);
            [id(0x00000370), helpcontext(0x00010370)]
            VARIANT Sort(
                            [in, optional] VARIANT Key1, 
                            [in, optional, defaultvalue(1)] XlSortOrder Order1, 
                            [in, optional] VARIANT Key2, 
                            [in, optional] VARIANT Type, 
                            [in, optional, defaultvalue(1)] XlSortOrder Order2, 
                            [in, optional] VARIANT Key3, 
                            [in, optional, defaultvalue(1)] XlSortOrder Order3, 
                            [in, optional, defaultvalue(2)] XlYesNoGuess Header, 
                            [in, optional] VARIANT OrderCustom, 
                            [in, optional] VARIANT MatchCase, 
                            [in, optional, defaultvalue(2)] XlSortOrientation Orientation, 
                            [in, optional, defaultvalue(1)] XlSortMethod SortMethod, 
                            [in, optional, defaultvalue(0)] XlSortDataOption DataOption1, 
                            [in, optional, defaultvalue(0)] XlSortDataOption DataOption2, 
                            [in, optional, defaultvalue(0)] XlSortDataOption DataOption3);
            [id(0x00000371), helpcontext(0x00010371)]
            VARIANT SortSpecial(
                            [in, optional, defaultvalue(1)] XlSortMethod SortMethod, 
                            [in, optional] VARIANT Key1, 
                            [in, optional, defaultvalue(1)] XlSortOrder Order1, 
                            [in, optional] VARIANT Type, 
                            [in, optional] VARIANT Key2, 
                            [in, optional, defaultvalue(1)] XlSortOrder Order2, 
                            [in, optional] VARIANT Key3, 
                            [in, optional, defaultvalue(1)] XlSortOrder Order3, 
                            [in, optional, defaultvalue(2)] XlYesNoGuess Header, 
                            [in, optional] VARIANT OrderCustom, 
                            [in, optional] VARIANT MatchCase, 
                            [in, optional, defaultvalue(2)] XlSortOrientation Orientation, 
                            [in, optional, defaultvalue(0)] XlSortDataOption DataOption1, 
                            [in, optional, defaultvalue(0)] XlSortDataOption DataOption2, 
                            [in, optional, defaultvalue(0)] XlSortDataOption DataOption3);
            [id(0x00000394), propget, helpcontext(0x00010394)]
            SoundNote* SoundNote();
            [id(0x0000019a), helpcontext(0x0001019a)]
            Range* SpecialCells(
                            [in] XlCellType Type, 
                            [in, optional] VARIANT Value);
            [id(0x00000104), propget, helpcontext(0x00010104)]
            VARIANT Style();
            [id(0x00000104), propput, helpcontext(0x00010104)]
            void Style([in] VARIANT rhs);
            [id(0x000001e1), helpcontext(0x000101e1)]
            VARIANT SubscribeTo(
                            [in] BSTR Edition, 
                            [in, optional, defaultvalue(-4158)] XlSubscribeToFormat Format);
            [id(0x00000372), helpcontext(0x00010372)]
            VARIANT Subtotal(
                            [in] long GroupBy, 
                            [in] XlConsolidationFunction Function, 
                            [in] VARIANT TotalList, 
                            [in, optional] VARIANT Replace, 
                            [in, optional] VARIANT PageBreaks, 
                            [in, optional, defaultvalue(1)] XlSummaryRow SummaryBelowData);
            [id(0x00000111), propget, helpcontext(0x00010111)]
            VARIANT Summary();
            [id(0x000001f1), helpcontext(0x000101f1)]
            VARIANT Table(
                            [in, optional] VARIANT RowInput, 
                            [in, optional] VARIANT ColumnInput);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            VARIANT Text();
            [id(0x00000410), helpcontext(0x00010410)]
            VARIANT TextToColumns(
                            [in, optional] VARIANT Destination, 
                            [in, optional, defaultvalue(1)] XlTextParsingType DataType, 
                            [in, optional, defaultvalue(1)] XlTextQualifier TextQualifier, 
                            [in, optional] VARIANT ConsecutiveDelimiter, 
                            [in, optional] VARIANT Tab, 
                            [in, optional] VARIANT Semicolon, 
                            [in, optional] VARIANT Comma, 
                            [in, optional] VARIANT Space, 
                            [in, optional] VARIANT Other, 
                            [in, optional] VARIANT OtherChar, 
                            [in, optional] VARIANT FieldInfo, 
                            [in, optional] VARIANT DecimalSeparator, 
                            [in, optional] VARIANT ThousandsSeparator, 
                            [in, optional] VARIANT TrailingMinusNumbers);
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            VARIANT Top();
            [id(0x000000f4), helpcontext(0x000100f4)]
            VARIANT Ungroup();
            [id(0x00000112), propget, helpcontext(0x00010112)]
            VARIANT UseStandardHeight();
            [id(0x00000112), propput, helpcontext(0x00010112)]
            void UseStandardHeight([in] VARIANT rhs);
            [id(0x00000113), propget, helpcontext(0x00010113)]
            VARIANT UseStandardWidth();
            [id(0x00000113), propput, helpcontext(0x00010113)]
            void UseStandardWidth([in] VARIANT rhs);
            [id(0x0000056b), propget, helpcontext(0x0001056b)]
            Validation* Validation();
            [id(0x00000006), propget, helpcontext(0x00010006)]
            VARIANT Value([in, optional] VARIANT RangeValueDataType);
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value(
                            [in, optional] VARIANT RangeValueDataType, 
                            [in] VARIANT rhs);
            [id(0x0000056c), propget, helpcontext(0x0001056c)]
            VARIANT Value2();
            [id(0x0000056c), propput, helpcontext(0x0001056c)]
            void Value2([in] VARIANT rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            VARIANT Width();
            [id(0x0000015c), propget, helpcontext(0x0001015c)]
            Worksheet* Worksheet();
            [id(0x00000114), propget, helpcontext(0x00010114)]
            VARIANT WrapText();
            [id(0x00000114), propput, helpcontext(0x00010114)]
            void WrapText([in] VARIANT rhs);
            [id(0x0000056d), helpcontext(0x0001056d)]
            Comment* AddComment([in, optional] VARIANT Text);
            [id(0x0000038e), propget, helpcontext(0x0001038e)]
            Comment* Comment();
            [id(0x0000056e), helpcontext(0x0001056e)]
            void ClearComments();
            [id(0x0000056f), propget, helpcontext(0x0001056f)]
            Phonetic* Phonetic();
            [id(0x00000570), propget, helpcontext(0x00010570)]
            FormatConditions* FormatConditions();
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x00000571), propget, helpcontext(0x00010571)]
            Hyperlinks* Hyperlinks();
            [id(0x00000713), propget, helpcontext(0x00010713)]
            Phonetics* Phonetics();
            [id(0x00000714), helpcontext(0x00010714)]
            void SetPhonetic();
            [id(0x00000715), propget, helpcontext(0x00010715)]
            BSTR ID();
            [id(0x00000715), propput, helpcontext(0x00010715)]
            void ID([in] BSTR rhs);
            [id(0x000006ec), hidden, helpcontext(0x000106ec),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOut)]
            VARIANT _PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate, 
                            [in, optional] VARIANT PrToFileName);
            [id(0x000007dd), propget, helpcontext(0x000107dd)]
            PivotCell* PivotCell();
            [id(0x000007de), helpcontext(0x000107de)]
            void Dirty();
            [id(0x000007df), propget, helpcontext(0x000107df)]
            Errors* Errors();
            [id(0x000007e0), propget, helpcontext(0x000107e0)]
            SmartTags* SmartTags();
            [id(0x000007e1), helpcontext(0x000107e1)]
            void Speak(
                            [in, optional] VARIANT SpeakDirection, 
                            [in, optional] VARIANT SpeakFormulas);
            [id(0x00000788), helpcontext(0x00010788)]
            VARIANT PasteSpecial(
                            [in, optional, defaultvalue(-4104)] XlPasteType Paste, 
                            [in, optional, defaultvalue(-4142)] XlPasteSpecialOperation Operation, 
                            [in, optional] VARIANT SkipBlanks, 
                            [in, optional] VARIANT Transpose);
            [id(0x000007e4), propget, helpcontext(0x000107e4)]
            VARIANT_BOOL AllowEdit();
            [id(0x000008d1), propget, helpcontext(0x000108d1)]
            ListObject* ListObject();
            [id(0x000008d2), propget, helpcontext(0x000108d2)]
            XPath* XPath();
            [id(0x000009bb), propget, helpcontext(0x000109bb)]
            Actions* ServerActions();
            [id(0x000009bc), helpcontext(0x000109bc)]
            void RemoveDuplicates(
                            [in, optional] VARIANT Columns, 
                            [in, optional, defaultvalue(2)] XlYesNoGuess Header);
            [id(0x00000939), helpcontext(0x00010939),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOutEx)]
            VARIANT PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate, 
                            [in, optional] VARIANT PrToFileName);
            [id(0x0000084b), propget, helpcontext(0x0001084b)]
            BSTR MDX();
            [id(0x000009bd), helpcontext(0x000109bd)]
            void ExportAsFixedFormat(
                            [in] XlFixedFormatType Type, 
                            [in, optional] VARIANT Filename, 
                            [in, optional] VARIANT Quality, 
                            [in, optional] VARIANT IncludeDocProperties, 
                            [in, optional] VARIANT IgnorePrintAreas, 
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT OpenAfterPublish, 
                            [in, optional] VARIANT FixedFormatExtClassPtr);
            [id(0x000009c3), propget, helpcontext(0x000109c3)]
            VARIANT CountLarge();
            [id(0x0000093c), helpcontext(0x0001093c)]
            VARIANT CalculateRowMajorOrder();
    };

    [
      uuid(0002440F-0000-0000-C000-000000000046),
      helpcontext(0x000200a5),
      hidden
    ]
    dispinterface ChartEvents {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000130), helpcontext(0x00010130)]
            void Activate();
            [id(0x000005fa), helpcontext(0x000105fa)]
            void Deactivate();
            [id(0x00000100), helpcontext(0x00010100)]
            void Resize();
            [id(0x000005fb), helpcontext(0x000105fb)]
            void MouseDown(
                            [in] long Button, 
                            [in] long Shift, 
                            [in] long x, 
                            [in] long y);
            [id(0x000005fc), helpcontext(0x000105fc)]
            void MouseUp(
                            [in] long Button, 
                            [in] long Shift, 
                            [in] long x, 
                            [in] long y);
            [id(0x000005fd), helpcontext(0x000105fd)]
            void MouseMove(
                            [in] long Button, 
                            [in] long Shift, 
                            [in] long x, 
                            [in] long y);
            [id(0x000005fe), helpcontext(0x000105fe)]
            void BeforeRightClick([in, out] VARIANT_BOOL* Cancel);
            [id(0x000005ff), hidden, helpcontext(0x000105ff)]
            void DragPlot();
            [id(0x00000600), hidden, helpcontext(0x00010600)]
            void DragOver();
            [id(0x00000601), helpcontext(0x00010601)]
            void BeforeDoubleClick(
                            [in] long ElementID, 
                            [in] long Arg1, 
                            [in] long Arg2, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x000000eb), helpcontext(0x000100eb)]
            void Select(
                            [in] long ElementID, 
                            [in] long Arg1, 
                            [in] long Arg2);
            [id(0x00000602), helpcontext(0x00010602)]
            void SeriesChange(
                            [in] long SeriesIndex, 
                            [in] long PointIndex);
            [id(0x00000117), helpcontext(0x00010117)]
            void Calculate();
    };

    [
      uuid(00024402-0000-0000-C000-000000000046),
      helpcontext(0x00020098)
    ]
    dispinterface VPageBreak {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            Worksheet* Parent();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x0000058c), helpcontext(0x0001058c)]
            void DragOff(
                            [in] XlDirection Direction, 
                            [in] long RegionIndex);
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            XlPageBreak Type();
            [id(0x0000006c), propput, helpcontext(0x0001006c)]
            void Type([in] XlPageBreak rhs);
            [id(0x0000058e), propget, helpcontext(0x0001058e)]
            XlPageBreakExtent Extent();
            [id(0x00000575), propget, helpcontext(0x00010575)]
            Range* Location();
            [id(0x00000575), propputref, helpcontext(0x00010575)]
            void Location([in] Range* rhs);
    };

    [
      uuid(00024401-0000-0000-C000-000000000046),
      helpcontext(0x00020097)
    ]
    dispinterface HPageBreak {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            Worksheet* Parent();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x0000058c), helpcontext(0x0001058c)]
            void DragOff(
                            [in] XlDirection Direction, 
                            [in] long RegionIndex);
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            XlPageBreak Type();
            [id(0x0000006c), propput, helpcontext(0x0001006c)]
            void Type([in] XlPageBreak rhs);
            [id(0x0000058e), propget, helpcontext(0x0001058e)]
            XlPageBreakExtent Extent();
            [id(0x00000575), propget, helpcontext(0x00010575)]
            Range* Location();
            [id(0x00000575), propputref, helpcontext(0x00010575)]
            void Location([in] Range* rhs);
    };

    [
      uuid(00024404-0000-0000-C000-000000000046),
      helpcontext(0x0002009a)
    ]
    dispinterface HPageBreaks {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            HPageBreak* Item([in] long Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            HPageBreak* _Default([in] long Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000b5), helpcontext(0x000100b5)]
            HPageBreak* Add([in] IDispatch* Before);
    };

    [
      uuid(00024405-0000-0000-C000-000000000046),
      helpcontext(0x0002009b)
    ]
    dispinterface VPageBreaks {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            VPageBreak* Item([in] long Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            VPageBreak* _Default([in] long Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000b5), helpcontext(0x000100b5)]
            VPageBreak* Add([in] IDispatch* Before);
    };

    [
      uuid(00024407-0000-0000-C000-000000000046),
      helpcontext(0x0002009d)
    ]
    dispinterface RecentFile {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x00000123), propget, helpcontext(0x00010123)]
            BSTR Path();
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x00000783), helpcontext(0x00010783)]
            Workbook* Open();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
    };

    [
      uuid(00024406-0000-0000-C000-000000000046),
      helpcontext(0x0002009c)
    ]
    dispinterface RecentFiles {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000058f), propget, helpcontext(0x0001058f)]
            long Maximum();
            [id(0x0000058f), propput, helpcontext(0x0001058f)]
            void Maximum([in] long rhs);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            RecentFile* Item([in] long Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            RecentFile* _Default([in] long Index);
            [id(0x000000b5), helpcontext(0x000100b5)]
            RecentFile* Add([in] BSTR Name);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00024411-0000-0000-C000-000000000046),
      helpcontext(0x000200a7),
      hidden
    ]
    dispinterface DocEvents {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000607), helpcontext(0x00010607)]
            void SelectionChange([in] Range* Target);
            [id(0x00000601), helpcontext(0x00010601)]
            void BeforeDoubleClick(
                            [in] Range* Target, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x000005fe), helpcontext(0x000105fe)]
            void BeforeRightClick(
                            [in] Range* Target, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000130), helpcontext(0x00010130)]
            void Activate();
            [id(0x000005fa), helpcontext(0x000105fa)]
            void Deactivate();
            [id(0x00000117), helpcontext(0x00010117)]
            void Calculate();
            [id(0x00000609), helpcontext(0x00010609)]
            void Change([in] Range* Target);
            [id(0x000005be), helpcontext(0x000105be)]
            void FollowHyperlink([in] Hyperlink* Target);
            [id(0x0000086c), helpcontext(0x0001086c)]
            void PivotTableUpdate([in] PivotTable* Target);
    };

    [
      uuid(00020852-0000-0000-C000-000000000046),
      helpcontext(0x00020012)
    ]
    dispinterface Style {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT_BOOL AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT_BOOL rhs);
            [id(0x00000229), propget, helpcontext(0x00010229)]
            VARIANT_BOOL BuiltIn();
            [id(0x000001b3), propget, helpcontext(0x000101b3)]
            Borders* Borders();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000106), propget, helpcontext(0x00010106)]
            VARIANT_BOOL FormulaHidden();
            [id(0x00000106), propput, helpcontext(0x00010106)]
            void FormulaHidden([in] VARIANT_BOOL rhs);
            [id(0x00000088), propget, helpcontext(0x00010088)]
            XlHAlign HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] XlHAlign rhs);
            [id(0x0000019d), propget, helpcontext(0x0001019d)]
            VARIANT_BOOL IncludeAlignment();
            [id(0x0000019d), propput, helpcontext(0x0001019d)]
            void IncludeAlignment([in] VARIANT_BOOL rhs);
            [id(0x0000019e), propget, helpcontext(0x0001019e)]
            VARIANT_BOOL IncludeBorder();
            [id(0x0000019e), propput, helpcontext(0x0001019e)]
            void IncludeBorder([in] VARIANT_BOOL rhs);
            [id(0x0000019f), propget, helpcontext(0x0001019f)]
            VARIANT_BOOL IncludeFont();
            [id(0x0000019f), propput, helpcontext(0x0001019f)]
            void IncludeFont([in] VARIANT_BOOL rhs);
            [id(0x000001a0), propget, helpcontext(0x000101a0)]
            VARIANT_BOOL IncludeNumber();
            [id(0x000001a0), propput, helpcontext(0x000101a0)]
            void IncludeNumber([in] VARIANT_BOOL rhs);
            [id(0x000001a1), propget, helpcontext(0x000101a1)]
            VARIANT_BOOL IncludePatterns();
            [id(0x000001a1), propput, helpcontext(0x000101a1)]
            void IncludePatterns([in] VARIANT_BOOL rhs);
            [id(0x000001a2), propget, helpcontext(0x000101a2)]
            VARIANT_BOOL IncludeProtection();
            [id(0x000001a2), propput, helpcontext(0x000101a2)]
            void IncludeProtection([in] VARIANT_BOOL rhs);
            [id(0x000000c9), propget, helpcontext(0x000100c9)]
            long IndentLevel();
            [id(0x000000c9), propput, helpcontext(0x000100c9)]
            void IndentLevel([in] long rhs);
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x000000d0), propget, helpcontext(0x000100d0)]
            VARIANT MergeCells();
            [id(0x000000d0), propput, helpcontext(0x000100d0)]
            void MergeCells([in] VARIANT rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000003a9), propget, helpcontext(0x000103a9)]
            BSTR NameLocal();
            [id(0x000000c1), propget, helpcontext(0x000100c1)]
            BSTR NumberFormat();
            [id(0x000000c1), propput, helpcontext(0x000100c1)]
            void NumberFormat([in] BSTR rhs);
            [id(0x00000449), propget, helpcontext(0x00010449)]
            BSTR NumberFormatLocal();
            [id(0x00000449), propput, helpcontext(0x00010449)]
            void NumberFormatLocal([in] BSTR rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            XlOrientation Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] XlOrientation rhs);
            [id(0x000000d1), propget, helpcontext(0x000100d1)]
            VARIANT_BOOL ShrinkToFit();
            [id(0x000000d1), propput, helpcontext(0x000100d1)]
            void ShrinkToFit([in] VARIANT_BOOL rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            BSTR Value();
            [id(0x00000089), propget, helpcontext(0x00010089)]
            XlVAlign VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] XlVAlign rhs);
            [id(0x00000114), propget, helpcontext(0x00010114)]
            VARIANT_BOOL WrapText();
            [id(0x00000114), propput, helpcontext(0x00010114)]
            void WrapText([in] VARIANT_BOOL rhs);
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
    };

    [
      uuid(00020853-0000-0000-C000-000000000046),
      helpcontext(0x00020013)
    ]
    dispinterface Styles {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            Style* Add(
                            [in] BSTR Name, 
                            [in, optional] VARIANT BasedOn);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            Style* Item([in] VARIANT Index);
            [id(0x00000234), helpcontext(0x00010234)]
            VARIANT Merge([in] VARIANT Workbook);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(00000000), propget, helpcontext(0x00010000)]
            Style* _Default([in] VARIANT Index);
    };

    [
      uuid(00020855-0000-0000-C000-000000000046),
      helpcontext(0x00020015)
    ]
    dispinterface Borders {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000063), propget, helpcontext(0x00010063)]
            VARIANT Color();
            [id(0x00000063), propput, helpcontext(0x00010063)]
            void Color([in] VARIANT rhs);
            [id(0x00000061), propget, helpcontext(0x00010061)]
            VARIANT ColorIndex();
            [id(0x00000061), propput, helpcontext(0x00010061)]
            void ColorIndex([in] VARIANT rhs);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            Border* Item([in] XlBordersIndex Index);
            [id(0x00000077), propget, helpcontext(0x00010077)]
            VARIANT LineStyle();
            [id(0x00000077), propput, helpcontext(0x00010077)]
            void LineStyle([in] VARIANT rhs);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x00000006), propget, helpcontext(0x00010006)]
            VARIANT Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] VARIANT rhs);
            [id(0x00000078), propget, helpcontext(0x00010078)]
            VARIANT Weight();
            [id(0x00000078), propput, helpcontext(0x00010078)]
            void Weight([in] VARIANT rhs);
            [id(00000000), propget, helpcontext(0x00010000)]
            Border* _Default([in] XlBordersIndex Index);
            [id(0x0000093d), propget, helpcontext(0x0001093d)]
            VARIANT ThemeColor();
            [id(0x0000093d), propput, helpcontext(0x0001093d)]
            void ThemeColor([in] VARIANT rhs);
            [id(0x0000093e), propget, helpcontext(0x0001093e)]
            VARIANT TintAndShade();
            [id(0x0000093e), propput, helpcontext(0x0001093e)]
            void TintAndShade([in] VARIANT rhs);
    };

    [
      uuid(00020857-0000-0000-C000-000000000046),
      helpcontext(0x00020017)
    ]
    dispinterface AddIn {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000023e), propget, hidden, helpcontext(0x0001023e)]
            BSTR Author();
            [id(0x0000023f), propget, hidden, helpcontext(0x0001023f)]
            BSTR Comments();
            [id(0x00000121), propget, helpcontext(0x00010121)]
            BSTR FullName();
            [id(0x00000226), propget, helpcontext(0x00010226)]
            VARIANT_BOOL Installed();
            [id(0x00000226), propput, helpcontext(0x00010226)]
            void Installed([in] VARIANT_BOOL rhs);
            [id(0x00000241), propget, hidden, helpcontext(0x00010241)]
            BSTR Keywords();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x00000123), propget, helpcontext(0x00010123)]
            BSTR Path();
            [id(0x000003b9), propget, hidden, helpcontext(0x000103b9)]
            BSTR Subject();
            [id(0x000000c7), propget, hidden, helpcontext(0x000100c7)]
            BSTR Title();
            [id(0x000005f3), propget, helpcontext(0x000105f3)]
            BSTR progID();
            [id(0x000007fb), propget, helpcontext(0x000107fb)]
            BSTR CLSID();
    };

    [
      uuid(00020858-0000-0000-C000-000000000046),
      helpcontext(0x00020018)
    ]
    dispinterface AddIns {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            AddIn* Add(
                            [in] BSTR Filename, 
                            [in, optional] VARIANT CopyFile);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            AddIn* Item([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(00000000), propget, helpcontext(0x00010000)]
            AddIn* _Default([in] VARIANT Index);
    };

    [
      uuid(0002085C-0000-0000-C000-000000000046),
      helpcontext(0x0002001c),
      hidden
    ]
    dispinterface Toolbar {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000229), propget, helpcontext(0x00010229)]
            VARIANT_BOOL BuiltIn();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            long Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] long rhs);
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            long Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] long rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x00000085), propget, helpcontext(0x00010085)]
            long Position();
            [id(0x00000085), propput, helpcontext(0x00010085)]
            void Position([in] long rhs);
            [id(0x000000b0), propget, helpcontext(0x000100b0)]
            XlToolbarProtection Protection();
            [id(0x000000b0), propput, helpcontext(0x000100b0)]
            void Protection([in] XlToolbarProtection rhs);
            [id(0x0000022b), helpcontext(0x0001022b)]
            void Reset();
            [id(0x000003c4), propget, helpcontext(0x000103c4)]
            ToolbarButtons* ToolbarButtons();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            long Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] long rhs);
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            long Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] long rhs);
    };

    [
      uuid(0002085D-0000-0000-C000-000000000046),
      helpcontext(0x0002001d),
      hidden
    ]
    dispinterface Toolbars {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            Toolbar* Add([in, optional] VARIANT Name);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(00000000), propget, helpcontext(0x00010000)]
            Toolbar* _Default([in] VARIANT Index);
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            Toolbar* Item([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002085E-0000-0000-C000-000000000046),
      helpcontext(0x0002001e),
      hidden
    ]
    dispinterface ToolbarButton {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000229), propget, helpcontext(0x00010229)]
            VARIANT_BOOL BuiltIn();
            [id(0x0000022a), propget, helpcontext(0x0001022a)]
            VARIANT_BOOL BuiltInFace();
            [id(0x0000022a), propput, helpcontext(0x0001022a)]
            void BuiltInFace([in] VARIANT_BOOL rhs);
            [id(0x00000227), helpcontext(0x00010227)]
            void Copy(
                            [in] Toolbar* Toolbar, 
                            [in] long Before);
            [id(0x000003c6), helpcontext(0x000103c6)]
            void CopyFace();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000232), helpcontext(0x00010232)]
            void Edit();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x00000163), propget, helpcontext(0x00010163)]
            long HelpContextID();
            [id(0x00000163), propput, helpcontext(0x00010163)]
            void HelpContextID([in] long rhs);
            [id(0x00000168), propget, helpcontext(0x00010168)]
            BSTR HelpFile();
            [id(0x00000168), propput, helpcontext(0x00010168)]
            void HelpFile([in] BSTR rhs);
            [id(0x0000023a), propget, helpcontext(0x0001023a)]
            long ID();
            [id(0x00000231), propget, helpcontext(0x00010231)]
            VARIANT_BOOL IsGap();
            [id(0x0000027d), helpcontext(0x0001027d)]
            void Move(
                            [in] Toolbar* Toolbar, 
                            [in] long Before);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x000003c7), helpcontext(0x000103c7)]
            void PasteFace();
            [id(0x00000230), propget, helpcontext(0x00010230)]
            VARIANT_BOOL Pushed();
            [id(0x00000230), propput, helpcontext(0x00010230)]
            void Pushed([in] VARIANT_BOOL rhs);
            [id(0x0000022b), helpcontext(0x0001022b)]
            void Reset();
            [id(0x00000182), propget, helpcontext(0x00010182)]
            BSTR StatusBar();
            [id(0x00000182), propput, helpcontext(0x00010182)]
            void StatusBar([in] BSTR rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            long Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] long rhs);
    };

    [
      uuid(0002085F-0000-0000-C000-000000000046),
      helpcontext(0x0002001f),
      hidden
    ]
    dispinterface ToolbarButtons {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            ToolbarButton* Add(
                            [in, optional] VARIANT Button, 
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT OnAction, 
                            [in, optional] VARIANT Pushed, 
                            [in, optional] VARIANT Enabled, 
                            [in, optional] VARIANT StatusBar, 
                            [in, optional] VARIANT HelpFile, 
                            [in, optional] VARIANT HelpContextID);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            ToolbarButton* Item([in] long Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(00000000), propget, helpcontext(0x00010000)]
            ToolbarButton* _Default([in] long Index);
    };

    [
      uuid(00020860-0000-0000-C000-000000000046),
      helpcontext(0x00020020)
    ]
    dispinterface Areas {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            Range* Item([in] long Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(00000000), propget, helpcontext(0x00010000)]
            Range* _Default([in] long Index);
    };

    [
      uuid(00024412-0000-0000-C000-000000000046),
      helpcontext(0x000200a8),
      hidden
    ]
    dispinterface WorkbookEvents {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000783), helpcontext(0x00010783)]
            void Open();
            [id(0x00000130), helpcontext(0x00010130)]
            void Activate();
            [id(0x000005fa), helpcontext(0x000105fa)]
            void Deactivate();
            [id(0x0000060a), helpcontext(0x0001060a)]
            void BeforeClose([in, out] VARIANT_BOOL* Cancel);
            [id(0x0000060b), helpcontext(0x0001060b)]
            void BeforeSave(
                            [in] VARIANT_BOOL SaveAsUI, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x0000060d), helpcontext(0x0001060d)]
            void BeforePrint([in, out] VARIANT_BOOL* Cancel);
            [id(0x0000060e), helpcontext(0x0001060e)]
            void NewSheet([in] IDispatch* Sh);
            [id(0x00000610), helpcontext(0x00010610)]
            void AddinInstall();
            [id(0x00000611), helpcontext(0x00010611)]
            void AddinUninstall();
            [id(0x00000612), helpcontext(0x00010612)]
            void WindowResize([in] Window* Wn);
            [id(0x00000614), helpcontext(0x00010614)]
            void WindowActivate([in] Window* Wn);
            [id(0x00000615), helpcontext(0x00010615)]
            void WindowDeactivate([in] Window* Wn);
            [id(0x00000616), helpcontext(0x00010616)]
            void SheetSelectionChange(
                            [in] IDispatch* Sh, 
                            [in] Range* Target);
            [id(0x00000617), helpcontext(0x00010617)]
            void SheetBeforeDoubleClick(
                            [in] IDispatch* Sh, 
                            [in] Range* Target, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000618), helpcontext(0x00010618)]
            void SheetBeforeRightClick(
                            [in] IDispatch* Sh, 
                            [in] Range* Target, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x00000619), helpcontext(0x00010619)]
            void SheetActivate([in] IDispatch* Sh);
            [id(0x0000061a), helpcontext(0x0001061a)]
            void SheetDeactivate([in] IDispatch* Sh);
            [id(0x0000061b), helpcontext(0x0001061b)]
            void SheetCalculate([in] IDispatch* Sh);
            [id(0x0000061c), helpcontext(0x0001061c)]
            void SheetChange(
                            [in] IDispatch* Sh, 
                            [in] Range* Target);
            [id(0x0000073e), helpcontext(0x0001073e)]
            void SheetFollowHyperlink(
                            [in] IDispatch* Sh, 
                            [in] Hyperlink* Target);
            [id(0x0000086d), helpcontext(0x0001086d)]
            void SheetPivotTableUpdate(
                            [in] IDispatch* Sh, 
                            [in] PivotTable* Target);
            [id(0x0000086e), helpcontext(0x0001086e)]
            void PivotTableCloseConnection([in] PivotTable* Target);
            [id(0x0000086f), helpcontext(0x0001086f)]
            void PivotTableOpenConnection([in] PivotTable* Target);
            [id(0x000008da), helpcontext(0x000108da)]
            void Sync([in] MsoSyncEventType SyncEventType);
            [id(0x000008eb), helpcontext(0x000108eb)]
            void BeforeXmlImport(
                            [in] XmlMap* Map, 
                            [in] BSTR Url, 
                            [in] VARIANT_BOOL IsRefresh, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x000008ed), helpcontext(0x000108ed)]
            void AfterXmlImport(
                            [in] XmlMap* Map, 
                            [in] VARIANT_BOOL IsRefresh, 
                            [in] XlXmlImportResult Result);
            [id(0x000008ef), helpcontext(0x000108ef)]
            void BeforeXmlExport(
                            [in] XmlMap* Map, 
                            [in] BSTR Url, 
                            [in, out] VARIANT_BOOL* Cancel);
            [id(0x000008f0), helpcontext(0x000108f0)]
            void AfterXmlExport(
                            [in] XmlMap* Map, 
                            [in] BSTR Url, 
                            [in] XlXmlExportResult Result);
            [id(0x00000a32), helpcontext(0x00010a32)]
            void RowsetComplete(
                            [in] BSTR Description, 
                            [in] BSTR Sheet, 
                            [in] VARIANT_BOOL Success);
    };

    [
      uuid(00020863-0000-0000-C000-000000000046),
      helpcontext(0x00020023),
      hidden
    ]
    dispinterface MenuBars {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            MenuBar* Add([in, optional] VARIANT Name);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(00000000), propget, helpcontext(0x00010000)]
            MenuBar* _Default([in] VARIANT Index);
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            MenuBar* Item([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00020864-0000-0000-C000-000000000046),
      helpcontext(0x00020024),
      hidden
    ]
    dispinterface MenuBar {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000130), helpcontext(0x00010130)]
            void Activate();
            [id(0x00000229), propget, helpcontext(0x00010229)]
            VARIANT_BOOL BuiltIn();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000024f), propget, helpcontext(0x0001024f)]
            Menus* Menus();
            [id(0x0000022b), helpcontext(0x0001022b)]
            void Reset();
    };

    [
      uuid(00020865-0000-0000-C000-000000000046),
      helpcontext(0x00020025),
      hidden
    ]
    dispinterface Menus {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            Menu* Add(
                            [in] BSTR Caption, 
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT Restore);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(00000000), propget, helpcontext(0x00010000)]
            Menu* _Default([in] VARIANT Index);
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            Menu* Item([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00020866-0000-0000-C000-000000000046),
      helpcontext(0x00020026),
      hidden
    ]
    dispinterface Menu {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x00000251), propget, helpcontext(0x00010251)]
            MenuItems* MenuItems();
    };

    [
      uuid(00020867-0000-0000-C000-000000000046),
      helpcontext(0x00020027),
      hidden
    ]
    dispinterface MenuItems {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            MenuItem* Add(
                            [in] BSTR Caption, 
                            [in, optional] VARIANT OnAction, 
                            [in, optional] VARIANT ShortcutKey, 
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT Restore, 
                            [in, optional] VARIANT StatusBar, 
                            [in, optional] VARIANT HelpFile, 
                            [in, optional] VARIANT HelpContextID);
            [id(0x00000256), helpcontext(0x00010256)]
            Menu* AddMenu(
                            [in] BSTR Caption, 
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT Restore);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(00000000), propget, helpcontext(0x00010000)]
            IDispatch* _Default([in] VARIANT Index);
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00020868-0000-0000-C000-000000000046),
      helpcontext(0x00020028),
      hidden
    ]
    dispinterface MenuItem {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x00000257), propget, helpcontext(0x00010257)]
            VARIANT_BOOL Checked();
            [id(0x00000257), propput, helpcontext(0x00010257)]
            void Checked([in] VARIANT_BOOL rhs);
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x00000163), propget, helpcontext(0x00010163)]
            long HelpContextID();
            [id(0x00000163), propput, helpcontext(0x00010163)]
            void HelpContextID([in] long rhs);
            [id(0x00000168), propget, helpcontext(0x00010168)]
            BSTR HelpFile();
            [id(0x00000168), propput, helpcontext(0x00010168)]
            void HelpFile([in] BSTR rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x00000254), propget, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000182), propget, helpcontext(0x00010182)]
            BSTR StatusBar();
            [id(0x00000182), propput, helpcontext(0x00010182)]
            void StatusBar([in] BSTR rhs);
    };

    [
      uuid(0002086D-0000-0000-C000-000000000046),
      helpcontext(0x0002002d)
    ]
    dispinterface Charts {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            Chart* Add(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After, 
                            [in, optional] VARIANT Count);
            [id(0x00000227), helpcontext(0x00010227)]
            void Copy(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00010007), restricted, hidden]
            void _Dummy7();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0x0000027d), helpcontext(0x0001027d)]
            void Move(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x00000389), hidden, helpcontext(0x00010389),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, _PrintOut)]
            void __PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate);
            [id(0x00000119), helpcontext(0x00010119)]
            void PrintPreview([in, optional] VARIANT EnableChanges);
            [id(0x000000eb), helpcontext(0x000100eb)]
            void Select([in, optional] VARIANT Replace);
            [id(0x0000058a), propget, helpcontext(0x0001058a)]
            HPageBreaks* HPageBreaks();
            [id(0x0000058b), propget, helpcontext(0x0001058b)]
            VPageBreaks* VPageBreaks();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT rhs);
            [id(00000000), propget, helpcontext(0x00010000)]
            IDispatch* _Default([in] VARIANT Index);
            [id(0x000006ec), hidden, helpcontext(0x000106ec),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOut)]
            void _PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate, 
                            [in, optional] VARIANT PrToFileName);
            [id(0x00000939), helpcontext(0x00010939)]
            void PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate, 
                            [in, optional] VARIANT PrToFileName);
    };

    [
      uuid(0002086F-0000-0000-C000-000000000046),
      helpcontext(0x0002002f),
      hidden
    ]
    dispinterface DrawingObjects {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x0000034e), propget, helpcontext(0x0001034e)]
            VARIANT Accelerator();
            [id(0x0000034e), propput, helpcontext(0x0001034e)]
            void Accelerator([in] VARIANT rhs);
            [id(0x0001001c), restricted, hidden]
            void _Dummy28();
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT_BOOL AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT_BOOL rhs);
            [id(0x00000353), helpcontext(0x00010353)]
            VARIANT AddItem(
                            [in] VARIANT Text, 
                            [in, optional] VARIANT Index);
            [id(0x00000263), propget, helpcontext(0x00010263)]
            VARIANT ArrowHeadLength();
            [id(0x00000263), propput, helpcontext(0x00010263)]
            void ArrowHeadLength([in] VARIANT rhs);
            [id(0x00000264), propget, helpcontext(0x00010264)]
            VARIANT ArrowHeadStyle();
            [id(0x00000264), propput, helpcontext(0x00010264)]
            void ArrowHeadStyle([in] VARIANT rhs);
            [id(0x00000265), propget, helpcontext(0x00010265)]
            VARIANT ArrowHeadWidth();
            [id(0x00000265), propput, helpcontext(0x00010265)]
            void ArrowHeadWidth([in] VARIANT rhs);
            [id(0x00000266), propget, helpcontext(0x00010266)]
            VARIANT_BOOL AutoSize();
            [id(0x00000266), propput, helpcontext(0x00010266)]
            void AutoSize([in] VARIANT_BOOL rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x0000035a), propget, helpcontext(0x0001035a)]
            VARIANT_BOOL CancelButton();
            [id(0x0000035a), propput, helpcontext(0x0001035a)]
            void CancelButton([in] VARIANT_BOOL rhs);
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(00000000), propget, helpcontext(0x00010000)]
            long _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] long rhs);
            [id(0x00000359), propget, helpcontext(0x00010359)]
            VARIANT_BOOL DefaultButton();
            [id(0x00000359), propput, helpcontext(0x00010359)]
            void DefaultButton([in] VARIANT_BOOL rhs);
            [id(0x0000035b), propget, helpcontext(0x0001035b)]
            VARIANT_BOOL DismissButton();
            [id(0x0000035b), propput, helpcontext(0x0001035b)]
            void DismissButton([in] VARIANT_BOOL rhs);
            [id(0x00000462), propget, helpcontext(0x00010462)]
            VARIANT_BOOL Display3DShading();
            [id(0x00000462), propput, helpcontext(0x00010462)]
            void Display3DShading([in] VARIANT_BOOL rhs);
            [id(0x0000039a), propget, helpcontext(0x0001039a)]
            VARIANT_BOOL DisplayVerticalScrollBar();
            [id(0x0000039a), propput, helpcontext(0x0001039a)]
            void DisplayVerticalScrollBar([in] VARIANT_BOOL rhs);
            [id(0x00000350), propget, helpcontext(0x00010350)]
            long DropDownLines();
            [id(0x00000350), propput, helpcontext(0x00010350)]
            void DropDownLines([in] long rhs);
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x0001002f), restricted, hidden]
            void _Dummy47();
            [id(0x0000035c), propget, helpcontext(0x0001035c)]
            VARIANT_BOOL HelpButton();
            [id(0x0000035c), propput, helpcontext(0x0001035c)]
            void HelpButton([in] VARIANT_BOOL rhs);
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x00000356), propget, helpcontext(0x00010356)]
            long InputType();
            [id(0x00000356), propput, helpcontext(0x00010356)]
            void InputType([in] long rhs);
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0000034d), propget, helpcontext(0x0001034d)]
            long LargeChange();
            [id(0x0000034d), propput, helpcontext(0x0001034d)]
            void LargeChange([in] long rhs);
            [id(0x00000422), propget, helpcontext(0x00010422)]
            BSTR LinkedCell();
            [id(0x00000422), propput, helpcontext(0x00010422)]
            void LinkedCell([in] BSTR rhs);
            [id(0x00010036), restricted, hidden]
            void _Dummy54();
            [id(0x0000035d), helpcontext(0x0001035d)]
            VARIANT List([in, optional] VARIANT Index);
            [id(0x00010038), restricted, hidden]
            void _Dummy56();
            [id(0x0000034f), propget, helpcontext(0x0001034f)]
            BSTR ListFillRange();
            [id(0x0000034f), propput, helpcontext(0x0001034f)]
            void ListFillRange([in] BSTR rhs);
            [id(0x00000352), propget, helpcontext(0x00010352)]
            long ListIndex();
            [id(0x00000352), propput, helpcontext(0x00010352)]
            void ListIndex([in] long rhs);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x0000034a), propget, helpcontext(0x0001034a)]
            long Max();
            [id(0x0000034a), propput, helpcontext(0x0001034a)]
            void Max([in] long rhs);
            [id(0x0000034b), propget, helpcontext(0x0001034b)]
            long Min();
            [id(0x0000034b), propput, helpcontext(0x0001034b)]
            void Min([in] long rhs);
            [id(0x00000357), propget, helpcontext(0x00010357)]
            VARIANT_BOOL MultiLine();
            [id(0x00000357), propput, helpcontext(0x00010357)]
            void MultiLine([in] VARIANT_BOOL rhs);
            [id(0x00000020), propget, helpcontext(0x00010020)]
            VARIANT_BOOL MultiSelect();
            [id(0x00000020), propput, helpcontext(0x00010020)]
            void MultiSelect([in] VARIANT_BOOL rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x00000461), propget, helpcontext(0x00010461)]
            VARIANT PhoneticAccelerator();
            [id(0x00000461), propput, helpcontext(0x00010461)]
            void PhoneticAccelerator([in] VARIANT rhs);
            [id(0x00000355), helpcontext(0x00010355)]
            VARIANT RemoveAllItems();
            [id(0x00000354), helpcontext(0x00010354)]
            VARIANT RemoveItem(
                            [in] long Index, 
                            [in, optional] VARIANT Count);
            [id(0x0000025c), helpcontext(0x0001025c)]
            VARIANT Reshape(
                            [in] long Vertex, 
                            [in] VARIANT Insert, 
                            [in, optional] VARIANT Left, 
                            [in, optional] VARIANT Top);
            [id(0x0000026b), propget, helpcontext(0x0001026b)]
            VARIANT_BOOL RoundedCorners();
            [id(0x0000026b), propput, helpcontext(0x0001026b)]
            void RoundedCorners([in] VARIANT_BOOL rhs);
            [id(0x00000463), helpcontext(0x00010463)]
            VARIANT Selected([in, optional] VARIANT Index);
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x0000034c), propget, helpcontext(0x0001034c)]
            long SmallChange();
            [id(0x0000034c), propput, helpcontext(0x0001034c)]
            void SmallChange([in] long rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x000000f4), helpcontext(0x000100f4)]
            IDispatch* Ungroup();
            [id(0x00000006), propget, helpcontext(0x00010006)]
            long Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] long rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x0000026d), helpcontext(0x0001026d)]
            VARIANT Vertices(
                            [in, optional] VARIANT Index1, 
                            [in, optional] VARIANT Index2);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x00000358), helpcontext(0x00010358)]
            VARIANT LinkCombo([in, optional] VARIANT Link);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002441C-0000-0000-C000-000000000046),
      helpcontext(0x000200b2)
    ]
    dispinterface PivotCache {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000593), propget, helpcontext(0x00010593)]
            VARIANT_BOOL BackgroundQuery();
            [id(0x00000593), propput, helpcontext(0x00010593)]
            void BackgroundQuery([in] VARIANT_BOOL rhs);
            [id(0x00000598), propget, helpcontext(0x00010598)]
            VARIANT Connection();
            [id(0x00000598), propput, helpcontext(0x00010598)]
            void Connection([in] VARIANT rhs);
            [id(0x000005c5), propget, helpcontext(0x000105c5)]
            VARIANT_BOOL EnableRefresh();
            [id(0x000005c5), propput, helpcontext(0x000105c5)]
            void EnableRefresh([in] VARIANT_BOOL rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x00000174), propget, helpcontext(0x00010174)]
            long MemoryUsed();
            [id(0x00000594), propget, helpcontext(0x00010594)]
            VARIANT_BOOL OptimizeCache();
            [id(0x00000594), propput, helpcontext(0x00010594)]
            void OptimizeCache([in] VARIANT_BOOL rhs);
            [id(0x000005c6), propget, helpcontext(0x000105c6)]
            long RecordCount();
            [id(0x00000589), helpcontext(0x00010589)]
            void Refresh();
            [id(0x000002b8), propget, helpcontext(0x000102b8)]
            DATE RefreshDate();
            [id(0x000002b9), propget, helpcontext(0x000102b9)]
            BSTR RefreshName();
            [id(0x000005c7), propget, helpcontext(0x000105c7)]
            VARIANT_BOOL RefreshOnFileOpen();
            [id(0x000005c7), propput, helpcontext(0x000105c7)]
            void RefreshOnFileOpen([in] VARIANT_BOOL rhs);
            [id(0x000005c8), propget, hidden, helpcontext(0x000105c8)]
            VARIANT Sql();
            [id(0x000005c8), propput, hidden, helpcontext(0x000105c8)]
            void Sql([in] VARIANT rhs);
            [id(0x000005c9), propget, helpcontext(0x000105c9)]
            VARIANT_BOOL SavePassword();
            [id(0x000005c9), propput, helpcontext(0x000105c9)]
            void SavePassword([in] VARIANT_BOOL rhs);
            [id(0x000002ae), propget, helpcontext(0x000102ae)]
            VARIANT SourceData();
            [id(0x000002ae), propput, helpcontext(0x000102ae)]
            void SourceData([in] VARIANT rhs);
            [id(0x00000725), propget, helpcontext(0x00010725)]
            VARIANT CommandText();
            [id(0x00000725), propput, helpcontext(0x00010725)]
            void CommandText([in] VARIANT rhs);
            [id(0x00000726), propget, helpcontext(0x00010726)]
            XlCmdType CommandType();
            [id(0x00000726), propput, helpcontext(0x00010726)]
            void CommandType([in] XlCmdType rhs);
            [id(0x00000727), propget, helpcontext(0x00010727)]
            XlQueryType QueryType();
            [id(0x00000728), propget, helpcontext(0x00010728)]
            VARIANT_BOOL MaintainConnection();
            [id(0x00000728), propput, helpcontext(0x00010728)]
            void MaintainConnection([in] VARIANT_BOOL rhs);
            [id(0x00000729), propget, helpcontext(0x00010729)]
            long RefreshPeriod();
            [id(0x00000729), propput, helpcontext(0x00010729)]
            void RefreshPeriod([in] long rhs);
            [id(0x0000048d), propget, helpcontext(0x0001048d)]
            IDispatch* Recordset();
            [id(0x0000048d), propputref, helpcontext(0x0001048d)]
            void Recordset([in] IDispatch* rhs);
            [id(0x0000072a), helpcontext(0x0001072a)]
            void ResetTimer();
            [id(0x0000072b), propget, helpcontext(0x0001072b)]
            VARIANT LocalConnection();
            [id(0x0000072b), propput, helpcontext(0x0001072b)]
            void LocalConnection([in] VARIANT rhs);
            [id(0x0000072c), helpcontext(0x0001072c)]
            PivotTable* CreatePivotTable(
                            [in] VARIANT TableDestination, 
                            [in, optional] VARIANT TableName, 
                            [in, optional] VARIANT ReadData, 
                            [in, optional] VARIANT DefaultVersion);
            [id(0x0000072d), propget, helpcontext(0x0001072d)]
            VARIANT_BOOL UseLocalConnection();
            [id(0x0000072d), propput, helpcontext(0x0001072d)]
            void UseLocalConnection([in] VARIANT_BOOL rhs);
            [id(0x0000081a), propget, helpcontext(0x0001081a)]
            IDispatch* ADOConnection();
            [id(0x0000081b), propget, helpcontext(0x0001081b)]
            VARIANT_BOOL IsConnected();
            [id(0x0000081c), helpcontext(0x0001081c)]
            void MakeConnection();
            [id(0x0000081d), propget, helpcontext(0x0001081d)]
            VARIANT_BOOL OLAP();
            [id(0x000002ad), propget, helpcontext(0x000102ad)]
            XlPivotTableSourceType SourceType();
            [id(0x0000081e), propget, helpcontext(0x0001081e)]
            XlPivotTableMissingItems MissingItemsLimit();
            [id(0x0000081e), propput, helpcontext(0x0001081e)]
            void MissingItemsLimit([in] XlPivotTableMissingItems rhs);
            [id(0x0000081f), propget, helpcontext(0x0001081f)]
            BSTR SourceConnectionFile();
            [id(0x0000081f), propput, helpcontext(0x0001081f)]
            void SourceConnectionFile([in] BSTR rhs);
            [id(0x00000820), propget, helpcontext(0x00010820)]
            BSTR SourceDataFile();
            [id(0x00000821), propget, helpcontext(0x00010821)]
            XlRobustConnect RobustConnect();
            [id(0x00000821), propput, helpcontext(0x00010821)]
            void RobustConnect([in] XlRobustConnect rhs);
            [id(0x00000822), helpcontext(0x00010822)]
            void SaveAsODC(
                            [in] BSTR ODCFileName, 
                            [in, optional] VARIANT Description, 
                            [in, optional] VARIANT Keywords);
            [id(0x000009f0), propget, helpcontext(0x000109f0)]
            WorkbookConnection* WorkbookConnection();
            [id(0x00000188), propget, helpcontext(0x00010188)]
            XlPivotTableVersionList Version();
            [id(0x000009f1), propget, helpcontext(0x000109f1)]
            VARIANT_BOOL UpgradeOnRefresh();
            [id(0x000009f1), propput, helpcontext(0x000109f1)]
            void UpgradeOnRefresh([in] VARIANT_BOOL rhs);
    };

    [
      uuid(0002441D-0000-0000-C000-000000000046),
      helpcontext(0x000200b3)
    ]
    dispinterface PivotCaches {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            PivotCache* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            PivotCache* _Default([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000b5), hidden, helpcontext(0x000100b5)]
            PivotCache* Add(
                            [in] XlPivotTableSourceType SourceType, 
                            [in, optional] VARIANT SourceData);
            [id(0x00000768), helpcontext(0x00010768)]
            PivotCache* Create(
                            [in] XlPivotTableSourceType SourceType, 
                            [in, optional] VARIANT SourceData, 
                            [in, optional] VARIANT Version);
    };

    [
      uuid(0002441E-0000-0000-C000-000000000046),
      helpcontext(0x000200b4)
    ]
    dispinterface PivotFormula {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] BSTR rhs);
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            BSTR Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] BSTR rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x000001e6), propput, helpcontext(0x000101e6)]
            void Index([in] long rhs);
            [id(0x00000824), propget, helpcontext(0x00010824)]
            BSTR StandardFormula();
            [id(0x00000824), propput, helpcontext(0x00010824)]
            void StandardFormula([in] BSTR rhs);
    };

    [
      uuid(0002441F-0000-0000-C000-000000000046),
      helpcontext(0x000200b5)
    ]
    dispinterface PivotFormulas {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x00000825), hidden, helpcontext(0x00010825)]
            PivotFormula* _Add([in] BSTR Formula);
            [id(0x000000aa), helpcontext(0x000100aa)]
            PivotFormula* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            PivotFormula* _Default([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000b5), helpcontext(0x000100b5)]
            PivotFormula* Add(
                            [in] BSTR Formula, 
                            [in, optional] VARIANT UseStandardFormula);
    };

    [
      uuid(00020872-0000-0000-C000-000000000046),
      helpcontext(0x00020032)
    ]
    dispinterface PivotTable {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000002c4), helpcontext(0x000102c4)]
            VARIANT AddFields(
                            [in, optional] VARIANT RowFields, 
                            [in, optional] VARIANT ColumnFields, 
                            [in, optional] VARIANT PageFields, 
                            [in, optional] VARIANT AddToTable);
            [id(0x000002c9), propget, helpcontext(0x000102c9)]
            IDispatch* ColumnFields([in, optional] VARIANT Index);
            [id(0x000002b6), propget, helpcontext(0x000102b6)]
            VARIANT_BOOL ColumnGrand();
            [id(0x000002b6), propput, helpcontext(0x000102b6)]
            void ColumnGrand([in] VARIANT_BOOL rhs);
            [id(0x000002be), propget, helpcontext(0x000102be)]
            Range* ColumnRange();
            [id(0x000002c2), helpcontext(0x000102c2)]
            VARIANT ShowPages([in, optional] VARIANT PageField);
            [id(0x000002c1), propget, helpcontext(0x000102c1)]
            Range* DataBodyRange();
            [id(0x000002cb), propget, helpcontext(0x000102cb)]
            IDispatch* DataFields([in, optional] VARIANT Index);
            [id(0x000002c0), propget, helpcontext(0x000102c0)]
            Range* DataLabelRange();
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] BSTR rhs);
            [id(0x000002b7), propget, helpcontext(0x000102b7)]
            VARIANT_BOOL HasAutoFormat();
            [id(0x000002b7), propput, helpcontext(0x000102b7)]
            void HasAutoFormat([in] VARIANT_BOOL rhs);
            [id(0x000002c7), propget, helpcontext(0x000102c7)]
            IDispatch* HiddenFields([in, optional] VARIANT Index);
            [id(0x000002ba), propget, helpcontext(0x000102ba)]
            BSTR InnerDetail();
            [id(0x000002ba), propput, helpcontext(0x000102ba)]
            void InnerDetail([in] BSTR rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x000002ca), propget, helpcontext(0x000102ca)]
            IDispatch* PageFields([in, optional] VARIANT Index);
            [id(0x000002bf), propget, helpcontext(0x000102bf)]
            Range* PageRange();
            [id(0x000005ca), propget, helpcontext(0x000105ca)]
            Range* PageRangeCells();
            [id(0x000002ce), helpcontext(0x000102ce)]
            IDispatch* PivotFields([in, optional] VARIANT Index);
            [id(0x000002b8), propget, helpcontext(0x000102b8)]
            DATE RefreshDate();
            [id(0x000002b9), propget, helpcontext(0x000102b9)]
            BSTR RefreshName();
            [id(0x000002cd), helpcontext(0x000102cd)]
            VARIANT_BOOL RefreshTable();
            [id(0x000002c8), propget, helpcontext(0x000102c8)]
            IDispatch* RowFields([in, optional] VARIANT Index);
            [id(0x000002b5), propget, helpcontext(0x000102b5)]
            VARIANT_BOOL RowGrand();
            [id(0x000002b5), propput, helpcontext(0x000102b5)]
            void RowGrand([in] VARIANT_BOOL rhs);
            [id(0x000002bd), propget, helpcontext(0x000102bd)]
            Range* RowRange();
            [id(0x000002b4), propget, helpcontext(0x000102b4)]
            VARIANT_BOOL SaveData();
            [id(0x000002b4), propput, helpcontext(0x000102b4)]
            void SaveData([in] VARIANT_BOOL rhs);
            [id(0x000002ae), propget, helpcontext(0x000102ae)]
            VARIANT SourceData();
            [id(0x000002ae), propput, helpcontext(0x000102ae)]
            void SourceData([in] VARIANT rhs);
            [id(0x000002bb), propget, helpcontext(0x000102bb)]
            Range* TableRange1();
            [id(0x000002bc), propget, helpcontext(0x000102bc)]
            Range* TableRange2();
            [id(0x00000006), propget, helpcontext(0x00010006)]
            BSTR Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] BSTR rhs);
            [id(0x000002c6), propget, helpcontext(0x000102c6)]
            IDispatch* VisibleFields([in, optional] VARIANT Index);
            [id(0x000005cb), propget, helpcontext(0x000105cb)]
            long CacheIndex();
            [id(0x000005cb), propput, helpcontext(0x000105cb)]
            void CacheIndex([in] long rhs);
            [id(0x000005cc), helpcontext(0x000105cc)]
            CalculatedFields* CalculatedFields();
            [id(0x000005cd), propget, helpcontext(0x000105cd)]
            VARIANT_BOOL DisplayErrorString();
            [id(0x000005cd), propput, helpcontext(0x000105cd)]
            void DisplayErrorString([in] VARIANT_BOOL rhs);
            [id(0x000005ce), propget, helpcontext(0x000105ce)]
            VARIANT_BOOL DisplayNullString();
            [id(0x000005ce), propput, helpcontext(0x000105ce)]
            void DisplayNullString([in] VARIANT_BOOL rhs);
            [id(0x000005cf), propget, helpcontext(0x000105cf)]
            VARIANT_BOOL EnableDrilldown();
            [id(0x000005cf), propput, helpcontext(0x000105cf)]
            void EnableDrilldown([in] VARIANT_BOOL rhs);
            [id(0x000005d0), propget, helpcontext(0x000105d0)]
            VARIANT_BOOL EnableFieldDialog();
            [id(0x000005d0), propput, helpcontext(0x000105d0)]
            void EnableFieldDialog([in] VARIANT_BOOL rhs);
            [id(0x000005d1), propget, helpcontext(0x000105d1)]
            VARIANT_BOOL EnableWizard();
            [id(0x000005d1), propput, helpcontext(0x000105d1)]
            void EnableWizard([in] VARIANT_BOOL rhs);
            [id(0x000005d2), propget, helpcontext(0x000105d2)]
            BSTR ErrorString();
            [id(0x000005d2), propput, helpcontext(0x000105d2)]
            void ErrorString([in] BSTR rhs);
            [id(0x000005d3), helpcontext(0x000105d3)]
            double GetData([in] BSTR Name);
            [id(0x000005d4), helpcontext(0x000105d4)]
            void ListFormulas();
            [id(0x000005d5), propget, helpcontext(0x000105d5)]
            VARIANT_BOOL ManualUpdate();
            [id(0x000005d5), propput, helpcontext(0x000105d5)]
            void ManualUpdate([in] VARIANT_BOOL rhs);
            [id(0x000005d6), propget, helpcontext(0x000105d6)]
            VARIANT_BOOL MergeLabels();
            [id(0x000005d6), propput, helpcontext(0x000105d6)]
            void MergeLabels([in] VARIANT_BOOL rhs);
            [id(0x000005d7), propget, helpcontext(0x000105d7)]
            BSTR NullString();
            [id(0x000005d7), propput, helpcontext(0x000105d7)]
            void NullString([in] BSTR rhs);
            [id(0x000005d8), helpcontext(0x000105d8)]
            PivotCache* PivotCache();
            [id(0x000005d9), propget, helpcontext(0x000105d9)]
            PivotFormulas* PivotFormulas();
            [id(0x000002ac), helpcontext(0x000102ac)]
            void PivotTableWizard(
                            [in, optional] VARIANT SourceType, 
                            [in, optional] VARIANT SourceData, 
                            [in, optional] VARIANT TableDestination, 
                            [in, optional] VARIANT TableName, 
                            [in, optional] VARIANT RowGrand, 
                            [in, optional] VARIANT ColumnGrand, 
                            [in, optional] VARIANT SaveData, 
                            [in, optional] VARIANT HasAutoFormat, 
                            [in, optional] VARIANT AutoPage, 
                            [in, optional] VARIANT Reserved, 
                            [in, optional] VARIANT BackgroundQuery, 
                            [in, optional] VARIANT OptimizeCache, 
                            [in, optional] VARIANT PageFieldOrder, 
                            [in, optional] VARIANT PageFieldWrapCount, 
                            [in, optional] VARIANT ReadData, 
                            [in, optional] VARIANT Connection);
            [id(0x000005da), propget, helpcontext(0x000105da)]
            VARIANT_BOOL SubtotalHiddenPageItems();
            [id(0x000005da), propput, helpcontext(0x000105da)]
            void SubtotalHiddenPageItems([in] VARIANT_BOOL rhs);
            [id(0x00000595), propget, helpcontext(0x00010595)]
            long PageFieldOrder();
            [id(0x00000595), propput, helpcontext(0x00010595)]
            void PageFieldOrder([in] long rhs);
            [id(0x000005db), propget, helpcontext(0x000105db)]
            BSTR PageFieldStyle();
            [id(0x000005db), propput, helpcontext(0x000105db)]
            void PageFieldStyle([in] BSTR rhs);
            [id(0x00000596), propget, helpcontext(0x00010596)]
            long PageFieldWrapCount();
            [id(0x00000596), propput, helpcontext(0x00010596)]
            void PageFieldWrapCount([in] long rhs);
            [id(0x000005dc), propget, helpcontext(0x000105dc)]
            VARIANT_BOOL PreserveFormatting();
            [id(0x000005dc), propput, helpcontext(0x000105dc)]
            void PreserveFormatting([in] VARIANT_BOOL rhs);
            [id(0x00000827), hidden, helpcontext(0x00010827)]
            void _PivotSelect(
                            [in] BSTR Name, 
                            [in, optional, defaultvalue(0)] XlPTSelectionMode Mode);
            [id(0x000005de), propget, helpcontext(0x000105de)]
            BSTR PivotSelection();
            [id(0x000005de), propput, helpcontext(0x000105de)]
            void PivotSelection([in] BSTR rhs);
            [id(0x000005df), propget, helpcontext(0x000105df)]
            XlPTSelectionMode SelectionMode();
            [id(0x000005df), propput, helpcontext(0x000105df)]
            void SelectionMode([in] XlPTSelectionMode rhs);
            [id(0x000005e0), propget, hidden, helpcontext(0x000105e0)]
            BSTR TableStyle();
            [id(0x000005e0), propput, hidden, helpcontext(0x000105e0)]
            void TableStyle([in] BSTR rhs);
            [id(0x000005e1), propget, helpcontext(0x000105e1)]
            BSTR Tag();
            [id(0x000005e1), propput, helpcontext(0x000105e1)]
            void Tag([in] BSTR rhs);
            [id(0x000002a8), helpcontext(0x000102a8)]
            void Update();
            [id(0x000005e2), propget, helpcontext(0x000105e2)]
            BSTR VacatedStyle();
            [id(0x000005e2), propput, helpcontext(0x000105e2)]
            void VacatedStyle([in] BSTR rhs);
            [id(0x00000074), hidden, helpcontext(0x00010074)]
            void Format([in] XlPivotFormatType Format);
            [id(0x0000072e), propget, helpcontext(0x0001072e)]
            VARIANT_BOOL PrintTitles();
            [id(0x0000072e), propput, helpcontext(0x0001072e)]
            void PrintTitles([in] VARIANT_BOOL rhs);
            [id(0x0000072f), propget, helpcontext(0x0001072f)]
            CubeFields* CubeFields();
            [id(0x00000730), propget, helpcontext(0x00010730)]
            BSTR GrandTotalName();
            [id(0x00000730), propput, helpcontext(0x00010730)]
            void GrandTotalName([in] BSTR rhs);
            [id(0x00000731), propget, helpcontext(0x00010731)]
            VARIANT_BOOL SmallGrid();
            [id(0x00000731), propput, helpcontext(0x00010731)]
            void SmallGrid([in] VARIANT_BOOL rhs);
            [id(0x00000732), propget, helpcontext(0x00010732)]
            VARIANT_BOOL RepeatItemsOnEachPrintedPage();
            [id(0x00000732), propput, helpcontext(0x00010732)]
            void RepeatItemsOnEachPrintedPage([in] VARIANT_BOOL rhs);
            [id(0x00000733), propget, helpcontext(0x00010733)]
            VARIANT_BOOL TotalsAnnotation();
            [id(0x00000733), propput, helpcontext(0x00010733)]
            void TotalsAnnotation([in] VARIANT_BOOL rhs);
            [id(0x000005dd), helpcontext(0x000105dd)]
            void PivotSelect(
                            [in] BSTR Name, 
                            [in, optional, defaultvalue(0)] XlPTSelectionMode Mode, 
                            [in, optional] VARIANT UseStandardName);
            [id(0x00000829), propget, helpcontext(0x00010829)]
            BSTR PivotSelectionStandard();
            [id(0x00000829), propput, helpcontext(0x00010829)]
            void PivotSelectionStandard([in] BSTR rhs);
            [id(0x0000082a), helpcontext(0x0001082a)]
            Range* GetPivotData(
                            [in, optional] VARIANT DataField, 
                            [in, optional] VARIANT Field1, 
                            [in, optional] VARIANT Item1, 
                            [in, optional] VARIANT Field2, 
                            [in, optional] VARIANT Item2, 
                            [in, optional] VARIANT Field3, 
                            [in, optional] VARIANT Item3, 
                            [in, optional] VARIANT Field4, 
                            [in, optional] VARIANT Item4, 
                            [in, optional] VARIANT Field5, 
                            [in, optional] VARIANT Item5, 
                            [in, optional] VARIANT Field6, 
                            [in, optional] VARIANT Item6, 
                            [in, optional] VARIANT Field7, 
                            [in, optional] VARIANT Item7, 
                            [in, optional] VARIANT Field8, 
                            [in, optional] VARIANT Item8, 
                            [in, optional] VARIANT Field9, 
                            [in, optional] VARIANT Item9, 
                            [in, optional] VARIANT Field10, 
                            [in, optional] VARIANT Item10, 
                            [in, optional] VARIANT Field11, 
                            [in, optional] VARIANT Item11, 
                            [in, optional] VARIANT Field12, 
                            [in, optional] VARIANT Item12, 
                            [in, optional] VARIANT Field13, 
                            [in, optional] VARIANT Item13, 
                            [in, optional] VARIANT Field14, 
                            [in, optional] VARIANT Item14);
            [id(0x00000848), propget, helpcontext(0x00010848)]
            PivotField* DataPivotField();
            [id(0x00000849), propget, helpcontext(0x00010849)]
            VARIANT_BOOL EnableDataValueEditing();
            [id(0x00000849), propput, helpcontext(0x00010849)]
            void EnableDataValueEditing([in] VARIANT_BOOL rhs);
            [id(0x0000084a), helpcontext(0x0001084a)]
            PivotField* AddDataField(
                            [in] IDispatch* Field, 
                            [in, optional] VARIANT Caption, 
                            [in, optional] VARIANT Function);
            [id(0x0000084b), propget, helpcontext(0x0001084b)]
            BSTR MDX();
            [id(0x0000084c), propget, helpcontext(0x0001084c)]
            VARIANT_BOOL ViewCalculatedMembers();
            [id(0x0000084c), propput, helpcontext(0x0001084c)]
            void ViewCalculatedMembers([in] VARIANT_BOOL rhs);
            [id(0x0000084d), propget, helpcontext(0x0001084d)]
            CalculatedMembers* CalculatedMembers();
            [id(0x0000084e), propget, helpcontext(0x0001084e)]
            VARIANT_BOOL DisplayImmediateItems();
            [id(0x0000084e), propput, helpcontext(0x0001084e)]
            void DisplayImmediateItems([in] VARIANT_BOOL rhs);
            [id(0x0000084f), hidden, helpcontext(0x0001084f)]
            VARIANT Dummy15(
                            [in] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
            [id(0x00000850), propget, helpcontext(0x00010850)]
            VARIANT_BOOL EnableFieldList();
            [id(0x00000850), propput, helpcontext(0x00010850)]
            void EnableFieldList([in] VARIANT_BOOL rhs);
            [id(0x00000851), propget, helpcontext(0x00010851)]
            VARIANT_BOOL VisualTotals();
            [id(0x00000851), propput, helpcontext(0x00010851)]
            void VisualTotals([in] VARIANT_BOOL rhs);
            [id(0x00000852), propget, helpcontext(0x00010852)]
            VARIANT_BOOL ShowPageMultipleItemLabel();
            [id(0x00000852), propput, helpcontext(0x00010852)]
            void ShowPageMultipleItemLabel([in] VARIANT_BOOL rhs);
            [id(0x00000188), propget, helpcontext(0x00010188)]
            XlPivotTableVersionList Version();
            [id(0x00000853), helpcontext(0x00010853)]
            BSTR CreateCubeFile(
                            [in] BSTR File, 
                            [in, optional] VARIANT Measures, 
                            [in, optional] VARIANT Levels, 
                            [in, optional] VARIANT Members, 
                            [in, optional] VARIANT Properties);
            [id(0x00000858), propget, helpcontext(0x00010858)]
            VARIANT_BOOL DisplayEmptyRow();
            [id(0x00000858), propput, helpcontext(0x00010858)]
            void DisplayEmptyRow([in] VARIANT_BOOL rhs);
            [id(0x00000859), propget, helpcontext(0x00010859)]
            VARIANT_BOOL DisplayEmptyColumn();
            [id(0x00000859), propput, helpcontext(0x00010859)]
            void DisplayEmptyColumn([in] VARIANT_BOOL rhs);
            [id(0x0000085a), propget, hidden, helpcontext(0x0001085a)]
            VARIANT_BOOL ShowCellBackgroundFromOLAP();
            [id(0x0000085a), propput, hidden, helpcontext(0x0001085a)]
            void ShowCellBackgroundFromOLAP([in] VARIANT_BOOL rhs);
            [id(0x000009f2), propget, helpcontext(0x000109f2)]
            PivotAxis* PivotColumnAxis();
            [id(0x000009f3), propget, helpcontext(0x000109f3)]
            PivotAxis* PivotRowAxis();
            [id(0x000009f4), propget, helpcontext(0x000109f4)]
            VARIANT_BOOL ShowDrillIndicators();
            [id(0x000009f4), propput, helpcontext(0x000109f4)]
            void ShowDrillIndicators([in] VARIANT_BOOL rhs);
            [id(0x000009f5), propget, helpcontext(0x000109f5)]
            VARIANT_BOOL PrintDrillIndicators();
            [id(0x000009f5), propput, helpcontext(0x000109f5)]
            void PrintDrillIndicators([in] VARIANT_BOOL rhs);
            [id(0x000009f6), propget, helpcontext(0x000109f6)]
            VARIANT_BOOL DisplayMemberPropertyTooltips();
            [id(0x000009f6), propput, helpcontext(0x000109f6)]
            void DisplayMemberPropertyTooltips([in] VARIANT_BOOL rhs);
            [id(0x000009f7), propget, helpcontext(0x000109f7)]
            VARIANT_BOOL DisplayContextTooltips();
            [id(0x000009f7), propput, helpcontext(0x000109f7)]
            void DisplayContextTooltips([in] VARIANT_BOOL rhs);
            [id(0x000009f8), helpcontext(0x000109f8)]
            void ClearTable();
            [id(0x000009f9), propget, helpcontext(0x000109f9)]
            long CompactRowIndent();
            [id(0x000009f9), propput, helpcontext(0x000109f9)]
            void CompactRowIndent([in] long rhs);
            [id(0x000009fa), propget, helpcontext(0x000109fa)]
            XlLayoutRowType LayoutRowDefault();
            [id(0x000009fa), propput, helpcontext(0x000109fa)]
            void LayoutRowDefault([in] XlLayoutRowType rhs);
            [id(0x000009fb), propget, helpcontext(0x000109fb)]
            VARIANT_BOOL DisplayFieldCaptions();
            [id(0x000009fb), propput, helpcontext(0x000109fb)]
            void DisplayFieldCaptions([in] VARIANT_BOOL rhs);
            [id(0x000009fc), helpcontext(0x000109fc)]
            void RowAxisLayout([in] XlLayoutRowType RowLayout);
            [id(0x000009fe), helpcontext(0x000109fe)]
            void SubtotalLocation([in] XlSubtototalLocationType Location);
            [id(0x000009ff), propget, helpcontext(0x000109ff)]
            PivotFilters* ActiveFilters();
            [id(0x00000a00), propget, helpcontext(0x00010a00)]
            VARIANT_BOOL InGridDropZones();
            [id(0x00000a00), propput, helpcontext(0x00010a00)]
            void InGridDropZones([in] VARIANT_BOOL rhs);
            [id(0x00000a01), helpcontext(0x00010a01)]
            void ClearAllFilters();
            [id(0x00000a02), propget, helpcontext(0x00010a02)]
            VARIANT TableStyle2();
            [id(0x00000a02), propput, helpcontext(0x00010a02)]
            void TableStyle2([in] VARIANT rhs);
            [id(0x00000a03), propget, helpcontext(0x00010a03)]
            VARIANT_BOOL ShowTableStyleLastColumn();
            [id(0x00000a03), propput, helpcontext(0x00010a03)]
            void ShowTableStyleLastColumn([in] VARIANT_BOOL rhs);
            [id(0x00000a04), propget, helpcontext(0x00010a04)]
            VARIANT_BOOL ShowTableStyleRowStripes();
            [id(0x00000a04), propput, helpcontext(0x00010a04)]
            void ShowTableStyleRowStripes([in] VARIANT_BOOL rhs);
            [id(0x00000a05), propget, helpcontext(0x00010a05)]
            VARIANT_BOOL ShowTableStyleColumnStripes();
            [id(0x00000a05), propput, helpcontext(0x00010a05)]
            void ShowTableStyleColumnStripes([in] VARIANT_BOOL rhs);
            [id(0x00000a06), propget, helpcontext(0x00010a06)]
            VARIANT_BOOL ShowTableStyleRowHeaders();
            [id(0x00000a06), propput, helpcontext(0x00010a06)]
            void ShowTableStyleRowHeaders([in] VARIANT_BOOL rhs);
            [id(0x00000a07), propget, helpcontext(0x00010a07)]
            VARIANT_BOOL ShowTableStyleColumnHeaders();
            [id(0x00000a07), propput, helpcontext(0x00010a07)]
            void ShowTableStyleColumnHeaders([in] VARIANT_BOOL rhs);
            [id(0x00000a08), helpcontext(0x00010a08)]
            void ConvertToFormulas([in] VARIANT_BOOL ConvertFilters);
            [id(0x00000a0a), propget, helpcontext(0x00010a0a)]
            VARIANT_BOOL AllowMultipleFilters();
            [id(0x00000a0a), propput, helpcontext(0x00010a0a)]
            void AllowMultipleFilters([in] VARIANT_BOOL rhs);
            [id(0x00000a0b), propget, helpcontext(0x00010a0b)]
            BSTR CompactLayoutRowHeader();
            [id(0x00000a0b), propput, helpcontext(0x00010a0b)]
            void CompactLayoutRowHeader([in] BSTR rhs);
            [id(0x00000a0c), propget, helpcontext(0x00010a0c)]
            BSTR CompactLayoutColumnHeader();
            [id(0x00000a0c), propput, helpcontext(0x00010a0c)]
            void CompactLayoutColumnHeader([in] BSTR rhs);
            [id(0x00000a0d), propget, helpcontext(0x00010a0d)]
            VARIANT_BOOL FieldListSortAscending();
            [id(0x00000a0d), propput, helpcontext(0x00010a0d)]
            void FieldListSortAscending([in] VARIANT_BOOL rhs);
            [id(0x00000a0e), propget, helpcontext(0x00010a0e)]
            VARIANT_BOOL SortUsingCustomLists();
            [id(0x00000a0e), propput, helpcontext(0x00010a0e)]
            void SortUsingCustomLists([in] VARIANT_BOOL rhs);
            [id(0x00000a0f), helpcontext(0x00010a0f)]
            void ChangeConnection([in] WorkbookConnection* conn);
            [id(0x00000a11), helpcontext(0x00010a11)]
            void ChangePivotCache([in] VARIANT PivotCache);
            [id(0x00000575), propget, helpcontext(0x00010575)]
            BSTR Location();
            [id(0x00000575), propput, helpcontext(0x00010575)]
            void Location([in] BSTR rhs);
    };

    [
      uuid(00020873-0000-0000-C000-000000000046),
      helpcontext(0x00020033)
    ]
    dispinterface PivotTables {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            PivotTable* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000b5), helpcontext(0x000100b5)]
            PivotTable* Add(
                            [in] PivotCache* PivotCache, 
                            [in] VARIANT TableDestination, 
                            [in, optional] VARIANT TableName, 
                            [in, optional] VARIANT ReadData, 
                            [in, optional] VARIANT DefaultVersion);
    };

    [
      uuid(00020874-0000-0000-C000-000000000046),
      helpcontext(0x00020034)
    ]
    dispinterface PivotField {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000013c), propget, helpcontext(0x0001013c)]
            XlPivotFieldCalculation Calculation();
            [id(0x0000013c), propput, helpcontext(0x0001013c)]
            void Calculation([in] XlPivotFieldCalculation rhs);
            [id(0x000002e0), propget, helpcontext(0x000102e0)]
            PivotField* ChildField();
            [id(0x000002da), propget, helpcontext(0x000102da)]
            VARIANT ChildItems([in, optional] VARIANT Index);
            [id(0x000002e2), propget, helpcontext(0x000102e2)]
            VARIANT CurrentPage();
            [id(0x000002e2), propput, helpcontext(0x000102e2)]
            void CurrentPage([in] VARIANT rhs);
            [id(0x000002d0), propget, helpcontext(0x000102d0)]
            Range* DataRange();
            [id(0x000002d2), propget, helpcontext(0x000102d2)]
            XlPivotFieldDataType DataType();
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] BSTR rhs);
            [id(0x00000383), propget, helpcontext(0x00010383)]
            XlConsolidationFunction Function();
            [id(0x00000383), propput, helpcontext(0x00010383)]
            void Function([in] XlConsolidationFunction rhs);
            [id(0x000002d3), propget, helpcontext(0x000102d3)]
            VARIANT GroupLevel();
            [id(0x000002d8), propget, helpcontext(0x000102d8)]
            VARIANT HiddenItems([in, optional] VARIANT Index);
            [id(0x000002cf), propget, helpcontext(0x000102cf)]
            Range* LabelRange();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x000000c1), propget, helpcontext(0x000100c1)]
            BSTR NumberFormat();
            [id(0x000000c1), propput, helpcontext(0x000100c1)]
            void NumberFormat([in] BSTR rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            XlPivotFieldOrientation Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] XlPivotFieldOrientation rhs);
            [id(0x000001c4), propget, helpcontext(0x000101c4)]
            VARIANT_BOOL ShowAllItems();
            [id(0x000001c4), propput, helpcontext(0x000101c4)]
            void ShowAllItems([in] VARIANT_BOOL rhs);
            [id(0x000002dc), propget, helpcontext(0x000102dc)]
            PivotField* ParentField();
            [id(0x000002d9), propget, helpcontext(0x000102d9)]
            VARIANT ParentItems([in, optional] VARIANT Index);
            [id(0x000002e1), helpcontext(0x000102e1)]
            VARIANT PivotItems([in, optional] VARIANT Index);
            [id(0x00000085), propget, helpcontext(0x00010085)]
            VARIANT Position();
            [id(0x00000085), propput, helpcontext(0x00010085)]
            void Position([in] VARIANT rhs);
            [id(0x000002d1), propget, helpcontext(0x000102d1)]
            BSTR SourceName();
            [id(0x000002dd), propget, helpcontext(0x000102dd)]
            VARIANT Subtotals([in, optional] VARIANT Index);
            [id(0x000002dd), propput, helpcontext(0x000102dd)]
            void Subtotals(
                            [in, optional] VARIANT Index, 
                            [in] VARIANT rhs);
            [id(0x000002de), propget, helpcontext(0x000102de)]
            VARIANT BaseField();
            [id(0x000002de), propput, helpcontext(0x000102de)]
            void BaseField([in] VARIANT rhs);
            [id(0x000002df), propget, helpcontext(0x000102df)]
            VARIANT BaseItem();
            [id(0x000002df), propput, helpcontext(0x000102df)]
            void BaseItem([in] VARIANT rhs);
            [id(0x000002d4), propget, helpcontext(0x000102d4)]
            VARIANT TotalLevels();
            [id(0x00000006), propget, helpcontext(0x00010006)]
            BSTR Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] BSTR rhs);
            [id(0x000002d7), propget, helpcontext(0x000102d7)]
            VARIANT VisibleItems([in, optional] VARIANT Index);
            [id(0x000005e3), helpcontext(0x000105e3)]
            CalculatedItems* CalculatedItems();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x000005e4), propget, helpcontext(0x000105e4)]
            VARIANT_BOOL DragToColumn();
            [id(0x000005e4), propput, helpcontext(0x000105e4)]
            void DragToColumn([in] VARIANT_BOOL rhs);
            [id(0x000005e5), propget, helpcontext(0x000105e5)]
            VARIANT_BOOL DragToHide();
            [id(0x000005e5), propput, helpcontext(0x000105e5)]
            void DragToHide([in] VARIANT_BOOL rhs);
            [id(0x000005e6), propget, helpcontext(0x000105e6)]
            VARIANT_BOOL DragToPage();
            [id(0x000005e6), propput, helpcontext(0x000105e6)]
            void DragToPage([in] VARIANT_BOOL rhs);
            [id(0x000005e7), propget, helpcontext(0x000105e7)]
            VARIANT_BOOL DragToRow();
            [id(0x000005e7), propput, helpcontext(0x000105e7)]
            void DragToRow([in] VARIANT_BOOL rhs);
            [id(0x00000734), propget, helpcontext(0x00010734)]
            VARIANT_BOOL DragToData();
            [id(0x00000734), propput, helpcontext(0x00010734)]
            void DragToData([in] VARIANT_BOOL rhs);
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x000005e8), propget, helpcontext(0x000105e8)]
            VARIANT_BOOL IsCalculated();
            [id(0x00000174), propget, helpcontext(0x00010174)]
            long MemoryUsed();
            [id(0x000005e9), propget, helpcontext(0x000105e9)]
            VARIANT_BOOL ServerBased();
            [id(0x000005e9), propput, helpcontext(0x000105e9)]
            void ServerBased([in] VARIANT_BOOL rhs);
            [id(0x00000a13), hidden, helpcontext(0x00010a13),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, AutoSort)]
            void _AutoSort(
                            [in] long Order, 
                            [in] BSTR Field);
            [id(0x000005eb), helpcontext(0x000105eb)]
            void AutoShow(
                            [in] long Type, 
                            [in] long Range, 
                            [in] long Count, 
                            [in] BSTR Field);
            [id(0x000005ec), propget, helpcontext(0x000105ec)]
            long AutoSortOrder();
            [id(0x000005ed), propget, helpcontext(0x000105ed)]
            BSTR AutoSortField();
            [id(0x000005ee), propget, helpcontext(0x000105ee)]
            long AutoShowType();
            [id(0x000005ef), propget, helpcontext(0x000105ef)]
            long AutoShowRange();
            [id(0x000005f0), propget, helpcontext(0x000105f0)]
            long AutoShowCount();
            [id(0x000005f1), propget, helpcontext(0x000105f1)]
            BSTR AutoShowField();
            [id(0x00000735), propget, helpcontext(0x00010735)]
            VARIANT_BOOL LayoutBlankLine();
            [id(0x00000735), propput, helpcontext(0x00010735)]
            void LayoutBlankLine([in] VARIANT_BOOL rhs);
            [id(0x00000736), propget, helpcontext(0x00010736)]
            XlSubtototalLocationType LayoutSubtotalLocation();
            [id(0x00000736), propput, helpcontext(0x00010736)]
            void LayoutSubtotalLocation([in] XlSubtototalLocationType rhs);
            [id(0x00000737), propget, helpcontext(0x00010737)]
            VARIANT_BOOL LayoutPageBreak();
            [id(0x00000737), propput, helpcontext(0x00010737)]
            void LayoutPageBreak([in] VARIANT_BOOL rhs);
            [id(0x00000738), propget, helpcontext(0x00010738)]
            XlLayoutFormType LayoutForm();
            [id(0x00000738), propput, helpcontext(0x00010738)]
            void LayoutForm([in] XlLayoutFormType rhs);
            [id(0x00000739), propget, helpcontext(0x00010739)]
            BSTR SubtotalName();
            [id(0x00000739), propput, helpcontext(0x00010739)]
            void SubtotalName([in] BSTR rhs);
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000073a), propget, helpcontext(0x0001073a)]
            VARIANT_BOOL DrilledDown();
            [id(0x0000073a), propput, helpcontext(0x0001073a)]
            void DrilledDown([in] VARIANT_BOOL rhs);
            [id(0x0000073b), propget, helpcontext(0x0001073b)]
            CubeField* CubeField();
            [id(0x0000073c), propget, helpcontext(0x0001073c)]
            BSTR CurrentPageName();
            [id(0x0000073c), propput, helpcontext(0x0001073c)]
            void CurrentPageName([in] BSTR rhs);
            [id(0x00000824), propget, helpcontext(0x00010824)]
            BSTR StandardFormula();
            [id(0x00000824), propput, helpcontext(0x00010824)]
            void StandardFormula([in] BSTR rhs);
            [id(0x0000085b), propget, helpcontext(0x0001085b)]
            VARIANT HiddenItemsList();
            [id(0x0000085b), propput, helpcontext(0x0001085b)]
            void HiddenItemsList([in] VARIANT rhs);
            [id(0x0000085c), propget, helpcontext(0x0001085c)]
            VARIANT_BOOL DatabaseSort();
            [id(0x0000085c), propput, helpcontext(0x0001085c)]
            void DatabaseSort([in] VARIANT_BOOL rhs);
            [id(0x0000085d), propget, helpcontext(0x0001085d)]
            VARIANT_BOOL IsMemberProperty();
            [id(0x0000085e), propget, helpcontext(0x0001085e)]
            PivotField* PropertyParentField();
            [id(0x0000085f), propget, helpcontext(0x0001085f)]
            long PropertyOrder();
            [id(0x0000085f), propput, helpcontext(0x0001085f)]
            void PropertyOrder([in] long rhs);
            [id(0x00000860), propget, helpcontext(0x00010860)]
            VARIANT_BOOL EnableItemSelection();
            [id(0x00000860), propput, helpcontext(0x00010860)]
            void EnableItemSelection([in] VARIANT_BOOL rhs);
            [id(0x00000861), propget, helpcontext(0x00010861)]
            VARIANT CurrentPageList();
            [id(0x00000861), propput, helpcontext(0x00010861)]
            void CurrentPageList([in] VARIANT rhs);
            [id(0x00000862), helpcontext(0x00010862)]
            void AddPageItem(
                            [in] BSTR Item, 
                            [in, optional] VARIANT ClearList);
            [id(0x0000010c), propget, helpcontext(0x0001010c)]
            VARIANT_BOOL Hidden();
            [id(0x0000010c), propput, helpcontext(0x0001010c)]
            void Hidden([in] VARIANT_BOOL rhs);
            [id(0x00000a14), helpcontext(0x00010a14)]
            void DrillTo([in] BSTR Field);
            [id(0x00000a15), propget, helpcontext(0x00010a15)]
            VARIANT_BOOL UseMemberPropertyAsCaption();
            [id(0x00000a15), propput, helpcontext(0x00010a15)]
            void UseMemberPropertyAsCaption([in] VARIANT_BOOL rhs);
            [id(0x00000a16), propget, helpcontext(0x00010a16)]
            BSTR MemberPropertyCaption();
            [id(0x00000a16), propput, helpcontext(0x00010a16)]
            void MemberPropertyCaption([in] BSTR rhs);
            [id(0x00000a17), propget, helpcontext(0x00010a17)]
            VARIANT_BOOL DisplayAsTooltip();
            [id(0x00000a17), propput, helpcontext(0x00010a17)]
            void DisplayAsTooltip([in] VARIANT_BOOL rhs);
            [id(0x00000a18), propget, helpcontext(0x00010a18)]
            VARIANT_BOOL DisplayInReport();
            [id(0x00000a18), propput, helpcontext(0x00010a18)]
            void DisplayInReport([in] VARIANT_BOOL rhs);
            [id(0x00000a19), propget, helpcontext(0x00010a19)]
            VARIANT_BOOL DisplayAsCaption();
            [id(0x00000a1a), propget, helpcontext(0x00010a1a)]
            VARIANT_BOOL LayoutCompactRow();
            [id(0x00000a1a), propput, helpcontext(0x00010a1a)]
            void LayoutCompactRow([in] VARIANT_BOOL rhs);
            [id(0x00000a1b), propget, helpcontext(0x00010a1b)]
            VARIANT_BOOL IncludeNewItemsInFilter();
            [id(0x00000a1b), propput, helpcontext(0x00010a1b)]
            void IncludeNewItemsInFilter([in] VARIANT_BOOL rhs);
            [id(0x00000a1c), propget, helpcontext(0x00010a1c)]
            VARIANT VisibleItemsList();
            [id(0x00000a1c), propput, helpcontext(0x00010a1c)]
            void VisibleItemsList([in] VARIANT rhs);
            [id(0x00000a1d), propget, helpcontext(0x00010a1d)]
            PivotFilters* PivotFilters();
            [id(0x00000a1e), propget, helpcontext(0x00010a1e)]
            PivotLine* AutoSortPivotLine();
            [id(0x00000a1f), propget, helpcontext(0x00010a1f)]
            long AutoSortCustomSubtotal();
            [id(0x00000a20), propget, helpcontext(0x00010a20)]
            VARIANT_BOOL ShowingInAxis();
            [id(0x00000888), propget, helpcontext(0x00010888)]
            VARIANT_BOOL EnableMultiplePageItems();
            [id(0x00000888), propput, helpcontext(0x00010888)]
            void EnableMultiplePageItems([in] VARIANT_BOOL rhs);
            [id(0x00000a21), propget, helpcontext(0x00010a21)]
            VARIANT_BOOL AllItemsVisible();
            [id(0x00000a22), helpcontext(0x00010a22)]
            void ClearManualFilter();
            [id(0x00000a01), helpcontext(0x00010a01)]
            void ClearAllFilters();
            [id(0x00000a23), helpcontext(0x00010a23)]
            void ClearValueFilters();
            [id(0x00000a24), helpcontext(0x00010a24)]
            void ClearLabelFilters();
            [id(0x000005ea), helpcontext(0x000105ea),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, AutoSortEx)]
            void AutoSort(
                            [in] long Order, 
                            [in] BSTR Field, 
                            [in, optional] VARIANT PivotLine, 
                            [in, optional] VARIANT CustomSubtotal);
            [id(0x00000a27), propget, helpcontext(0x00010a27)]
            BSTR SourceCaption();
            [id(0x00000249), propget, helpcontext(0x00010249)]
            VARIANT_BOOL ShowDetail();
            [id(0x00000249), propput, helpcontext(0x00010249)]
            void ShowDetail([in] VARIANT_BOOL rhs);
    };

    [
      uuid(00020875-0000-0000-C000-000000000046),
      helpcontext(0x00020035)
    ]
    dispinterface PivotFields {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            PivotTable* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00024420-0000-0000-C000-000000000046),
      helpcontext(0x000200b6)
    ]
    dispinterface CalculatedFields {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x00000825), hidden, helpcontext(0x00010825)]
            PivotField* _Add(
                            [in] BSTR Name, 
                            [in] BSTR Formula);
            [id(0x000000aa), helpcontext(0x000100aa)]
            PivotField* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            PivotField* _Default([in] VARIANT Field);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000b5), helpcontext(0x000100b5)]
            PivotField* Add(
                            [in] BSTR Name, 
                            [in] BSTR Formula, 
                            [in, optional] VARIANT UseStandardFormula);
    };

    [
      uuid(00020876-0000-0000-C000-000000000046),
      helpcontext(0x00020036)
    ]
    dispinterface PivotItem {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            PivotField* Parent();
            [id(0x000002da), propget, helpcontext(0x000102da)]
            VARIANT ChildItems([in, optional] VARIANT Index);
            [id(0x000002d0), propget, helpcontext(0x000102d0)]
            Range* DataRange();
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] BSTR rhs);
            [id(0x000002cf), propget, helpcontext(0x000102cf)]
            Range* LabelRange();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x000002e5), propget, helpcontext(0x000102e5)]
            PivotItem* ParentItem();
            [id(0x000002e3), propget, helpcontext(0x000102e3)]
            VARIANT_BOOL ParentShowDetail();
            [id(0x00000085), propget, helpcontext(0x00010085)]
            long Position();
            [id(0x00000085), propput, helpcontext(0x00010085)]
            void Position([in] long rhs);
            [id(0x00000249), propget, helpcontext(0x00010249)]
            VARIANT_BOOL ShowDetail();
            [id(0x00000249), propput, helpcontext(0x00010249)]
            void ShowDetail([in] VARIANT_BOOL rhs);
            [id(0x000002d1), propget, helpcontext(0x000102d1)]
            VARIANT SourceName();
            [id(0x00000006), propget, helpcontext(0x00010006)]
            BSTR Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] BSTR rhs);
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x000005e8), propget, helpcontext(0x000105e8)]
            VARIANT_BOOL IsCalculated();
            [id(0x000005c6), propget, helpcontext(0x000105c6)]
            long RecordCount();
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000073a), propget, helpcontext(0x0001073a)]
            VARIANT_BOOL DrilledDown();
            [id(0x0000073a), propput, helpcontext(0x0001073a)]
            void DrilledDown([in] VARIANT_BOOL rhs);
            [id(0x00000824), propget, helpcontext(0x00010824)]
            BSTR StandardFormula();
            [id(0x00000824), propput, helpcontext(0x00010824)]
            void StandardFormula([in] BSTR rhs);
            [id(0x00000864), propget, helpcontext(0x00010864)]
            BSTR SourceNameStandard();
            [id(0x00000a14), helpcontext(0x00010a14)]
            void DrillTo([in] BSTR Field);
    };

    [
      uuid(00020877-0000-0000-C000-000000000046),
      helpcontext(0x00020037)
    ]
    dispinterface PivotItems {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            PivotField* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            void Add([in] BSTR Name);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00024421-0000-0000-C000-000000000046),
      helpcontext(0x000200b7)
    ]
    dispinterface CalculatedItems {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x00000825), hidden, helpcontext(0x00010825)]
            PivotItem* _Add(
                            [in] BSTR Name, 
                            [in] BSTR Formula);
            [id(0x000000aa), helpcontext(0x000100aa)]
            PivotItem* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            PivotItem* _Default([in] VARIANT Field);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000b5), helpcontext(0x000100b5)]
            PivotItem* Add(
                            [in] BSTR Name, 
                            [in] BSTR Formula, 
                            [in, optional] VARIANT UseStandardFormula);
    };

    [
      uuid(00020878-0000-0000-C000-000000000046),
      helpcontext(0x00020038)
    ]
    dispinterface Characters {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x000000fc), helpcontext(0x000100fc)]
            VARIANT Insert([in] BSTR String);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x000005f2), propget, helpcontext(0x000105f2)]
            BSTR PhoneticCharacters();
            [id(0x000005f2), propput, helpcontext(0x000105f2)]
            void PhoneticCharacters([in] BSTR rhs);
    };

    [
      uuid(00020879-0000-0000-C000-000000000046),
      helpcontext(0x00020039)
    ]
    dispinterface Dialogs {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            Dialog* Item([in] XlBuiltInDialog Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            Dialog* _Default([in] XlBuiltInDialog Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002087A-0000-0000-C000-000000000046),
      helpcontext(0x0002003a)
    ]
    dispinterface Dialog {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000001f0), helpcontext(0x000101f0)]
            VARIANT_BOOL Show(
                            [in, optional] VARIANT Arg1, 
                            [in, optional] VARIANT Arg2, 
                            [in, optional] VARIANT Arg3, 
                            [in, optional] VARIANT Arg4, 
                            [in, optional] VARIANT Arg5, 
                            [in, optional] VARIANT Arg6, 
                            [in, optional] VARIANT Arg7, 
                            [in, optional] VARIANT Arg8, 
                            [in, optional] VARIANT Arg9, 
                            [in, optional] VARIANT Arg10, 
                            [in, optional] VARIANT Arg11, 
                            [in, optional] VARIANT Arg12, 
                            [in, optional] VARIANT Arg13, 
                            [in, optional] VARIANT Arg14, 
                            [in, optional] VARIANT Arg15, 
                            [in, optional] VARIANT Arg16, 
                            [in, optional] VARIANT Arg17, 
                            [in, optional] VARIANT Arg18, 
                            [in, optional] VARIANT Arg19, 
                            [in, optional] VARIANT Arg20, 
                            [in, optional] VARIANT Arg21, 
                            [in, optional] VARIANT Arg22, 
                            [in, optional] VARIANT Arg23, 
                            [in, optional] VARIANT Arg24, 
                            [in, optional] VARIANT Arg25, 
                            [in, optional] VARIANT Arg26, 
                            [in, optional] VARIANT Arg27, 
                            [in, optional] VARIANT Arg28, 
                            [in, optional] VARIANT Arg29, 
                            [in, optional] VARIANT Arg30);
    };

    [
      uuid(0002087B-0000-0000-C000-000000000046),
      helpcontext(0x0002003b)
    ]
    dispinterface SoundNote {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000395), helpcontext(0x00010395)]
            VARIANT Import([in] BSTR Filename);
            [id(0x00000396), helpcontext(0x00010396)]
            VARIANT Play();
            [id(0x00000397), helpcontext(0x00010397)]
            VARIANT Record();
    };

    [
      uuid(0002087D-0000-0000-C000-000000000046),
      helpcontext(0x0002003d),
      hidden
    ]
    dispinterface Button {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT_BOOL AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT_BOOL rhs);
            [id(0x000005f5), propget, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000266), propget, helpcontext(0x00010266)]
            VARIANT_BOOL AutoSize();
            [id(0x00000266), propput, helpcontext(0x00010266)]
            void AutoSize([in] VARIANT_BOOL rhs);
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x0000034e), propget, helpcontext(0x0001034e)]
            VARIANT Accelerator();
            [id(0x0000034e), propput, helpcontext(0x0001034e)]
            void Accelerator([in] VARIANT rhs);
            [id(0x0000035a), propget, helpcontext(0x0001035a)]
            VARIANT_BOOL CancelButton();
            [id(0x0000035a), propput, helpcontext(0x0001035a)]
            void CancelButton([in] VARIANT_BOOL rhs);
            [id(0x00000359), propget, helpcontext(0x00010359)]
            VARIANT_BOOL DefaultButton();
            [id(0x00000359), propput, helpcontext(0x00010359)]
            void DefaultButton([in] VARIANT_BOOL rhs);
            [id(0x0000035b), propget, helpcontext(0x0001035b)]
            VARIANT_BOOL DismissButton();
            [id(0x0000035b), propput, helpcontext(0x0001035b)]
            void DismissButton([in] VARIANT_BOOL rhs);
            [id(0x0000035c), propget, helpcontext(0x0001035c)]
            VARIANT_BOOL HelpButton();
            [id(0x0000035c), propput, helpcontext(0x0001035c)]
            void HelpButton([in] VARIANT_BOOL rhs);
            [id(0x00000461), propget, helpcontext(0x00010461)]
            VARIANT PhoneticAccelerator();
            [id(0x00000461), propput, helpcontext(0x00010461)]
            void PhoneticAccelerator([in] VARIANT rhs);
    };

    [
      uuid(0002087E-0000-0000-C000-000000000046),
      helpcontext(0x0002003e),
      hidden
    ]
    dispinterface Buttons {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT_BOOL AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT_BOOL rhs);
            [id(0x000005f5), propget, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000266), propget, helpcontext(0x00010266)]
            VARIANT_BOOL AutoSize();
            [id(0x00000266), propput, helpcontext(0x00010266)]
            void AutoSize([in] VARIANT_BOOL rhs);
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x0000034e), propget, helpcontext(0x0001034e)]
            VARIANT Accelerator();
            [id(0x0000034e), propput, helpcontext(0x0001034e)]
            void Accelerator([in] VARIANT rhs);
            [id(0x0000035a), propget, helpcontext(0x0001035a)]
            VARIANT_BOOL CancelButton();
            [id(0x0000035a), propput, helpcontext(0x0001035a)]
            void CancelButton([in] VARIANT_BOOL rhs);
            [id(0x00000359), propget, helpcontext(0x00010359)]
            VARIANT_BOOL DefaultButton();
            [id(0x00000359), propput, helpcontext(0x00010359)]
            void DefaultButton([in] VARIANT_BOOL rhs);
            [id(0x0000035b), propget, helpcontext(0x0001035b)]
            VARIANT_BOOL DismissButton();
            [id(0x0000035b), propput, helpcontext(0x0001035b)]
            void DismissButton([in] VARIANT_BOOL rhs);
            [id(0x0000035c), propget, helpcontext(0x0001035c)]
            VARIANT_BOOL HelpButton();
            [id(0x0000035c), propput, helpcontext(0x0001035c)]
            void HelpButton([in] VARIANT_BOOL rhs);
            [id(0x00000461), propget, helpcontext(0x00010461)]
            VARIANT PhoneticAccelerator();
            [id(0x00000461), propput, helpcontext(0x00010461)]
            void PhoneticAccelerator([in] VARIANT rhs);
            [id(0x000000b5), helpcontext(0x000100b5)]
            Button* Add(
                            [in] double Left, 
                            [in] double Top, 
                            [in] double Width, 
                            [in] double Height);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002087F-0000-0000-C000-000000000046),
      helpcontext(0x0002003f),
      hidden
    ]
    dispinterface CheckBox {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x0000034e), propget, helpcontext(0x0001034e)]
            VARIANT Accelerator();
            [id(0x0000034e), propput, helpcontext(0x0001034e)]
            void Accelerator([in] VARIANT rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(00000000), propget, helpcontext(0x00010000)]
            long _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] long rhs);
            [id(0x00000462), propget, helpcontext(0x00010462)]
            VARIANT_BOOL Display3DShading();
            [id(0x00000462), propput, helpcontext(0x00010462)]
            void Display3DShading([in] VARIANT_BOOL rhs);
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00000422), propget, helpcontext(0x00010422)]
            BSTR LinkedCell();
            [id(0x00000422), propput, helpcontext(0x00010422)]
            void LinkedCell([in] BSTR rhs);
            [id(0x00000461), propget, helpcontext(0x00010461)]
            VARIANT PhoneticAccelerator();
            [id(0x00000461), propput, helpcontext(0x00010461)]
            void PhoneticAccelerator([in] VARIANT rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            VARIANT Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] VARIANT rhs);
    };

    [
      uuid(00020880-0000-0000-C000-000000000046),
      helpcontext(0x00020040),
      hidden
    ]
    dispinterface CheckBoxes {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x0000034e), propget, helpcontext(0x0001034e)]
            VARIANT Accelerator();
            [id(0x0000034e), propput, helpcontext(0x0001034e)]
            void Accelerator([in] VARIANT rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(00000000), propget, helpcontext(0x00010000)]
            long _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] long rhs);
            [id(0x00000462), propget, helpcontext(0x00010462)]
            VARIANT_BOOL Display3DShading();
            [id(0x00000462), propput, helpcontext(0x00010462)]
            void Display3DShading([in] VARIANT_BOOL rhs);
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00000422), propget, helpcontext(0x00010422)]
            BSTR LinkedCell();
            [id(0x00000422), propput, helpcontext(0x00010422)]
            void LinkedCell([in] BSTR rhs);
            [id(0x00000461), propget, helpcontext(0x00010461)]
            VARIANT PhoneticAccelerator();
            [id(0x00000461), propput, helpcontext(0x00010461)]
            void PhoneticAccelerator([in] VARIANT rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            VARIANT Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] VARIANT rhs);
            [id(0x000000b5), helpcontext(0x000100b5)]
            CheckBox* Add(
                            [in] double Left, 
                            [in] double Top, 
                            [in] double Width, 
                            [in] double Height);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00020881-0000-0000-C000-000000000046),
      helpcontext(0x00020041),
      hidden
    ]
    dispinterface OptionButton {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x0000034e), propget, helpcontext(0x0001034e)]
            VARIANT Accelerator();
            [id(0x0000034e), propput, helpcontext(0x0001034e)]
            void Accelerator([in] VARIANT rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(00000000), propget, helpcontext(0x00010000)]
            long _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] long rhs);
            [id(0x00000462), propget, helpcontext(0x00010462)]
            VARIANT_BOOL Display3DShading();
            [id(0x00000462), propput, helpcontext(0x00010462)]
            void Display3DShading([in] VARIANT_BOOL rhs);
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00000422), propget, helpcontext(0x00010422)]
            BSTR LinkedCell();
            [id(0x00000422), propput, helpcontext(0x00010422)]
            void LinkedCell([in] BSTR rhs);
            [id(0x00000461), propget, helpcontext(0x00010461)]
            VARIANT PhoneticAccelerator();
            [id(0x00000461), propput, helpcontext(0x00010461)]
            void PhoneticAccelerator([in] VARIANT rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            VARIANT Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] VARIANT rhs);
            [id(0x00000341), propget, helpcontext(0x00010341)]
            GroupBox* GroupBox();
    };

    [
      uuid(00020882-0000-0000-C000-000000000046),
      helpcontext(0x00020042),
      hidden
    ]
    dispinterface OptionButtons {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x0000034e), propget, helpcontext(0x0001034e)]
            VARIANT Accelerator();
            [id(0x0000034e), propput, helpcontext(0x0001034e)]
            void Accelerator([in] VARIANT rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(00000000), propget, helpcontext(0x00010000)]
            long _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] long rhs);
            [id(0x00000462), propget, helpcontext(0x00010462)]
            VARIANT_BOOL Display3DShading();
            [id(0x00000462), propput, helpcontext(0x00010462)]
            void Display3DShading([in] VARIANT_BOOL rhs);
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00000422), propget, helpcontext(0x00010422)]
            BSTR LinkedCell();
            [id(0x00000422), propput, helpcontext(0x00010422)]
            void LinkedCell([in] BSTR rhs);
            [id(0x00000461), propget, helpcontext(0x00010461)]
            VARIANT PhoneticAccelerator();
            [id(0x00000461), propput, helpcontext(0x00010461)]
            void PhoneticAccelerator([in] VARIANT rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            VARIANT Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] VARIANT rhs);
            [id(0x00000341), propget, helpcontext(0x00010341)]
            GroupBox* GroupBox();
            [id(0x000000b5), helpcontext(0x000100b5)]
            OptionButton* Add(
                            [in] double Left, 
                            [in] double Top, 
                            [in] double Width, 
                            [in] double Height);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00020883-0000-0000-C000-000000000046),
      helpcontext(0x00020043),
      hidden
    ]
    dispinterface EditBox {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x0000039a), propget, helpcontext(0x0001039a)]
            VARIANT_BOOL DisplayVerticalScrollBar();
            [id(0x0000039a), propput, helpcontext(0x0001039a)]
            void DisplayVerticalScrollBar([in] VARIANT_BOOL rhs);
            [id(0x00000356), propget, helpcontext(0x00010356)]
            long InputType();
            [id(0x00000356), propput, helpcontext(0x00010356)]
            void InputType([in] long rhs);
            [id(0x0000035e), propget, helpcontext(0x0001035e)]
            BSTR LinkedObject();
            [id(0x00000357), propget, helpcontext(0x00010357)]
            VARIANT_BOOL MultiLine();
            [id(0x00000357), propput, helpcontext(0x00010357)]
            void MultiLine([in] VARIANT_BOOL rhs);
            [id(0x0000048a), propget, helpcontext(0x0001048a)]
            VARIANT_BOOL PasswordEdit();
            [id(0x0000048a), propput, helpcontext(0x0001048a)]
            void PasswordEdit([in] VARIANT_BOOL rhs);
    };

    [
      uuid(00020884-0000-0000-C000-000000000046),
      helpcontext(0x00020044),
      hidden
    ]
    dispinterface EditBoxes {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x0000039a), propget, helpcontext(0x0001039a)]
            VARIANT_BOOL DisplayVerticalScrollBar();
            [id(0x0000039a), propput, helpcontext(0x0001039a)]
            void DisplayVerticalScrollBar([in] VARIANT_BOOL rhs);
            [id(0x00000356), propget, helpcontext(0x00010356)]
            long InputType();
            [id(0x00000356), propput, helpcontext(0x00010356)]
            void InputType([in] long rhs);
            [id(0x00010022), restricted, hidden]
            void _Dummy34();
            [id(0x00000357), propget, helpcontext(0x00010357)]
            VARIANT_BOOL MultiLine();
            [id(0x00000357), propput, helpcontext(0x00010357)]
            void MultiLine([in] VARIANT_BOOL rhs);
            [id(0x0000048a), propget, helpcontext(0x0001048a)]
            VARIANT_BOOL PasswordEdit();
            [id(0x0000048a), propput, helpcontext(0x0001048a)]
            void PasswordEdit([in] VARIANT_BOOL rhs);
            [id(0x000000b5), helpcontext(0x000100b5)]
            EditBox* Add(
                            [in] double Left, 
                            [in] double Top, 
                            [in] double Width, 
                            [in] double Height);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            VARIANT Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00020885-0000-0000-C000-000000000046),
      helpcontext(0x00020045),
      hidden
    ]
    dispinterface ScrollBar {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(00000000), propget, helpcontext(0x00010000)]
            long _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] long rhs);
            [id(0x00000462), propget, helpcontext(0x00010462)]
            VARIANT_BOOL Display3DShading();
            [id(0x00000462), propput, helpcontext(0x00010462)]
            void Display3DShading([in] VARIANT_BOOL rhs);
            [id(0x00000422), propget, helpcontext(0x00010422)]
            BSTR LinkedCell();
            [id(0x00000422), propput, helpcontext(0x00010422)]
            void LinkedCell([in] BSTR rhs);
            [id(0x0000034a), propget, helpcontext(0x0001034a)]
            long Max();
            [id(0x0000034a), propput, helpcontext(0x0001034a)]
            void Max([in] long rhs);
            [id(0x0000034b), propget, helpcontext(0x0001034b)]
            long Min();
            [id(0x0000034b), propput, helpcontext(0x0001034b)]
            void Min([in] long rhs);
            [id(0x0000034c), propget, helpcontext(0x0001034c)]
            long SmallChange();
            [id(0x0000034c), propput, helpcontext(0x0001034c)]
            void SmallChange([in] long rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            long Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] long rhs);
            [id(0x0000034d), propget, helpcontext(0x0001034d)]
            long LargeChange();
            [id(0x0000034d), propput, helpcontext(0x0001034d)]
            void LargeChange([in] long rhs);
    };

    [
      uuid(00020886-0000-0000-C000-000000000046),
      helpcontext(0x00020046),
      hidden
    ]
    dispinterface ScrollBars {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(00000000), propget, helpcontext(0x00010000)]
            long _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] long rhs);
            [id(0x00000462), propget, helpcontext(0x00010462)]
            VARIANT_BOOL Display3DShading();
            [id(0x00000462), propput, helpcontext(0x00010462)]
            void Display3DShading([in] VARIANT_BOOL rhs);
            [id(0x00000422), propget, helpcontext(0x00010422)]
            BSTR LinkedCell();
            [id(0x00000422), propput, helpcontext(0x00010422)]
            void LinkedCell([in] BSTR rhs);
            [id(0x0000034a), propget, helpcontext(0x0001034a)]
            long Max();
            [id(0x0000034a), propput, helpcontext(0x0001034a)]
            void Max([in] long rhs);
            [id(0x0000034b), propget, helpcontext(0x0001034b)]
            long Min();
            [id(0x0000034b), propput, helpcontext(0x0001034b)]
            void Min([in] long rhs);
            [id(0x0000034c), propget, helpcontext(0x0001034c)]
            long SmallChange();
            [id(0x0000034c), propput, helpcontext(0x0001034c)]
            void SmallChange([in] long rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            long Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] long rhs);
            [id(0x0000034d), propget, helpcontext(0x0001034d)]
            long LargeChange();
            [id(0x0000034d), propput, helpcontext(0x0001034d)]
            void LargeChange([in] long rhs);
            [id(0x000000b5), helpcontext(0x000100b5)]
            ScrollBar* Add(
                            [in] double Left, 
                            [in] double Top, 
                            [in] double Width, 
                            [in] double Height);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00020887-0000-0000-C000-000000000046),
      helpcontext(0x00020047),
      hidden
    ]
    dispinterface ListBox {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000353), helpcontext(0x00010353)]
            VARIANT AddItem(
                            [in] VARIANT Text, 
                            [in, optional] VARIANT Index);
            [id(0x00000462), propget, helpcontext(0x00010462)]
            VARIANT_BOOL Display3DShading();
            [id(0x00000462), propput, helpcontext(0x00010462)]
            void Display3DShading([in] VARIANT_BOOL rhs);
            [id(00000000), propget, helpcontext(0x00010000)]
            long _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] long rhs);
            [id(0x00000422), propget, helpcontext(0x00010422)]
            BSTR LinkedCell();
            [id(0x00000422), propput, helpcontext(0x00010422)]
            void LinkedCell([in] BSTR rhs);
            [id(0x0000035e), propget, helpcontext(0x0001035e)]
            VARIANT LinkedObject();
            [id(0x0000035d), propget, helpcontext(0x0001035d)]
            VARIANT List([in, optional] VARIANT Index);
            [id(0x0000035d), propput, helpcontext(0x0001035d)]
            void List(
                            [in, optional] VARIANT Index, 
                            [in] VARIANT rhs);
            [id(0x00000351), propget, helpcontext(0x00010351)]
            long ListCount();
            [id(0x0000034f), propget, helpcontext(0x0001034f)]
            BSTR ListFillRange();
            [id(0x0000034f), propput, helpcontext(0x0001034f)]
            void ListFillRange([in] BSTR rhs);
            [id(0x00000352), propget, helpcontext(0x00010352)]
            long ListIndex();
            [id(0x00000352), propput, helpcontext(0x00010352)]
            void ListIndex([in] long rhs);
            [id(0x00000020), propget, helpcontext(0x00010020)]
            long MultiSelect();
            [id(0x00000020), propput, helpcontext(0x00010020)]
            void MultiSelect([in] long rhs);
            [id(0x00000355), helpcontext(0x00010355)]
            VARIANT RemoveAllItems();
            [id(0x00000354), helpcontext(0x00010354)]
            VARIANT RemoveItem(
                            [in] long Index, 
                            [in, optional] VARIANT Count);
            [id(0x00000463), propget, helpcontext(0x00010463)]
            VARIANT Selected([in, optional] VARIANT Index);
            [id(0x00000463), propput, helpcontext(0x00010463)]
            void Selected(
                            [in, optional] VARIANT Index, 
                            [in] VARIANT rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            long Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] long rhs);
    };

    [
      uuid(00020888-0000-0000-C000-000000000046),
      helpcontext(0x00020048),
      hidden
    ]
    dispinterface ListBoxes {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000353), helpcontext(0x00010353)]
            VARIANT AddItem(
                            [in] VARIANT Text, 
                            [in, optional] VARIANT Index);
            [id(0x00000462), propget, helpcontext(0x00010462)]
            VARIANT_BOOL Display3DShading();
            [id(0x00000462), propput, helpcontext(0x00010462)]
            void Display3DShading([in] VARIANT_BOOL rhs);
            [id(00000000), propget, helpcontext(0x00010000)]
            long _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] long rhs);
            [id(0x00000422), propget, helpcontext(0x00010422)]
            BSTR LinkedCell();
            [id(0x00000422), propput, helpcontext(0x00010422)]
            void LinkedCell([in] BSTR rhs);
            [id(0x0001001f), restricted, hidden]
            void _Dummy31();
            [id(0x0000035d), propget, helpcontext(0x0001035d)]
            VARIANT List([in, optional] VARIANT Index);
            [id(0x0000035d), propput, helpcontext(0x0001035d)]
            void List(
                            [in, optional] VARIANT Index, 
                            [in] VARIANT rhs);
            [id(0x00010021), restricted, hidden]
            void _Dummy33();
            [id(0x0000034f), propget, helpcontext(0x0001034f)]
            BSTR ListFillRange();
            [id(0x0000034f), propput, helpcontext(0x0001034f)]
            void ListFillRange([in] BSTR rhs);
            [id(0x00000352), propget, helpcontext(0x00010352)]
            long ListIndex();
            [id(0x00000352), propput, helpcontext(0x00010352)]
            void ListIndex([in] long rhs);
            [id(0x00000020), propget, helpcontext(0x00010020)]
            long MultiSelect();
            [id(0x00000020), propput, helpcontext(0x00010020)]
            void MultiSelect([in] long rhs);
            [id(0x00000355), helpcontext(0x00010355)]
            VARIANT RemoveAllItems();
            [id(0x00000354), helpcontext(0x00010354)]
            VARIANT RemoveItem(
                            [in] long Index, 
                            [in, optional] VARIANT Count);
            [id(0x00000463), propget, helpcontext(0x00010463)]
            VARIANT Selected([in, optional] VARIANT Index);
            [id(0x00000463), propput, helpcontext(0x00010463)]
            void Selected(
                            [in, optional] VARIANT Index, 
                            [in] VARIANT rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            long Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] long rhs);
            [id(0x000000b5), helpcontext(0x000100b5)]
            ListBox* Add(
                            [in] double Left, 
                            [in] double Top, 
                            [in] double Width, 
                            [in] double Height);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00020889-0000-0000-C000-000000000046),
      helpcontext(0x00020049),
      hidden
    ]
    dispinterface GroupBox {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x0000034e), propget, helpcontext(0x0001034e)]
            VARIANT Accelerator();
            [id(0x0000034e), propput, helpcontext(0x0001034e)]
            void Accelerator([in] VARIANT rhs);
            [id(0x00000462), propget, helpcontext(0x00010462)]
            VARIANT_BOOL Display3DShading();
            [id(0x00000462), propput, helpcontext(0x00010462)]
            void Display3DShading([in] VARIANT_BOOL rhs);
            [id(0x00000461), propget, helpcontext(0x00010461)]
            VARIANT PhoneticAccelerator();
            [id(0x00000461), propput, helpcontext(0x00010461)]
            void PhoneticAccelerator([in] VARIANT rhs);
    };

    [
      uuid(0002088A-0000-0000-C000-000000000046),
      helpcontext(0x0002004a),
      hidden
    ]
    dispinterface GroupBoxes {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x0000034e), propget, helpcontext(0x0001034e)]
            VARIANT Accelerator();
            [id(0x0000034e), propput, helpcontext(0x0001034e)]
            void Accelerator([in] VARIANT rhs);
            [id(0x00000462), propget, helpcontext(0x00010462)]
            VARIANT_BOOL Display3DShading();
            [id(0x00000462), propput, helpcontext(0x00010462)]
            void Display3DShading([in] VARIANT_BOOL rhs);
            [id(0x00000461), propget, helpcontext(0x00010461)]
            VARIANT PhoneticAccelerator();
            [id(0x00000461), propput, helpcontext(0x00010461)]
            void PhoneticAccelerator([in] VARIANT rhs);
            [id(0x000000b5), helpcontext(0x000100b5)]
            GroupBox* Add(
                            [in] double Left, 
                            [in] double Top, 
                            [in] double Width, 
                            [in] double Height);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002088B-0000-0000-C000-000000000046),
      helpcontext(0x0002004b),
      hidden
    ]
    dispinterface DropDown {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000353), helpcontext(0x00010353)]
            VARIANT AddItem(
                            [in] VARIANT Text, 
                            [in, optional] VARIANT Index);
            [id(0x00000462), propget, helpcontext(0x00010462)]
            VARIANT_BOOL Display3DShading();
            [id(0x00000462), propput, helpcontext(0x00010462)]
            void Display3DShading([in] VARIANT_BOOL rhs);
            [id(00000000), propget, helpcontext(0x00010000)]
            long _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] long rhs);
            [id(0x00000422), propget, helpcontext(0x00010422)]
            BSTR LinkedCell();
            [id(0x00000422), propput, helpcontext(0x00010422)]
            void LinkedCell([in] BSTR rhs);
            [id(0x0000035e), propget, helpcontext(0x0001035e)]
            VARIANT LinkedObject();
            [id(0x0000035d), propget, helpcontext(0x0001035d)]
            VARIANT List([in, optional] VARIANT Index);
            [id(0x0000035d), propput, helpcontext(0x0001035d)]
            void List(
                            [in, optional] VARIANT Index, 
                            [in] VARIANT rhs);
            [id(0x00000351), propget, helpcontext(0x00010351)]
            long ListCount();
            [id(0x0000034f), propget, helpcontext(0x0001034f)]
            BSTR ListFillRange();
            [id(0x0000034f), propput, helpcontext(0x0001034f)]
            void ListFillRange([in] BSTR rhs);
            [id(0x00000352), propget, helpcontext(0x00010352)]
            long ListIndex();
            [id(0x00000352), propput, helpcontext(0x00010352)]
            void ListIndex([in] long rhs);
            [id(0x00010024), restricted, hidden]
            void _Dummy36();
            [id(0x00000355), helpcontext(0x00010355)]
            VARIANT RemoveAllItems();
            [id(0x00000354), helpcontext(0x00010354)]
            VARIANT RemoveItem(
                            [in] long Index, 
                            [in, optional] VARIANT Count);
            [id(0x00000463), propget, helpcontext(0x00010463)]
            VARIANT Selected([in, optional] VARIANT Index);
            [id(0x00000463), propput, helpcontext(0x00010463)]
            void Selected(
                            [in, optional] VARIANT Index, 
                            [in] VARIANT rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            long Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] long rhs);
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x00000350), propget, helpcontext(0x00010350)]
            long DropDownLines();
            [id(0x00000350), propput, helpcontext(0x00010350)]
            void DropDownLines([in] long rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
    };

    [
      uuid(0002088C-0000-0000-C000-000000000046),
      helpcontext(0x0002004c),
      hidden
    ]
    dispinterface DropDowns {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000353), helpcontext(0x00010353)]
            VARIANT AddItem(
                            [in] VARIANT Text, 
                            [in, optional] VARIANT Index);
            [id(0x00000462), propget, helpcontext(0x00010462)]
            VARIANT_BOOL Display3DShading();
            [id(0x00000462), propput, helpcontext(0x00010462)]
            void Display3DShading([in] VARIANT_BOOL rhs);
            [id(00000000), propget, helpcontext(0x00010000)]
            long _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] long rhs);
            [id(0x00000422), propget, helpcontext(0x00010422)]
            BSTR LinkedCell();
            [id(0x00000422), propput, helpcontext(0x00010422)]
            void LinkedCell([in] BSTR rhs);
            [id(0x0001001f), restricted, hidden]
            void _Dummy31();
            [id(0x0000035d), propget, helpcontext(0x0001035d)]
            VARIANT List([in, optional] VARIANT Index);
            [id(0x0000035d), propput, helpcontext(0x0001035d)]
            void List(
                            [in, optional] VARIANT Index, 
                            [in] VARIANT rhs);
            [id(0x00010021), restricted, hidden]
            void _Dummy33();
            [id(0x0000034f), propget, helpcontext(0x0001034f)]
            BSTR ListFillRange();
            [id(0x0000034f), propput, helpcontext(0x0001034f)]
            void ListFillRange([in] BSTR rhs);
            [id(0x00000352), propget, helpcontext(0x00010352)]
            long ListIndex();
            [id(0x00000352), propput, helpcontext(0x00010352)]
            void ListIndex([in] long rhs);
            [id(0x00010024), restricted, hidden]
            void _Dummy36();
            [id(0x00000355), helpcontext(0x00010355)]
            VARIANT RemoveAllItems();
            [id(0x00000354), helpcontext(0x00010354)]
            VARIANT RemoveItem(
                            [in] long Index, 
                            [in, optional] VARIANT Count);
            [id(0x00000463), propget, helpcontext(0x00010463)]
            VARIANT Selected([in, optional] VARIANT Index);
            [id(0x00000463), propput, helpcontext(0x00010463)]
            void Selected(
                            [in, optional] VARIANT Index, 
                            [in] VARIANT rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            long Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] long rhs);
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x00000350), propget, helpcontext(0x00010350)]
            long DropDownLines();
            [id(0x00000350), propput, helpcontext(0x00010350)]
            void DropDownLines([in] long rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x000000b5), helpcontext(0x000100b5)]
            DropDown* Add(
                            [in] double Left, 
                            [in] double Top, 
                            [in] double Width, 
                            [in] double Height, 
                            [in, optional] VARIANT Editable);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002088D-0000-0000-C000-000000000046),
      helpcontext(0x0002004d),
      hidden
    ]
    dispinterface Spinner {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(00000000), propget, helpcontext(0x00010000)]
            long _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] long rhs);
            [id(0x00000462), propget, helpcontext(0x00010462)]
            VARIANT_BOOL Display3DShading();
            [id(0x00000462), propput, helpcontext(0x00010462)]
            void Display3DShading([in] VARIANT_BOOL rhs);
            [id(0x00000422), propget, helpcontext(0x00010422)]
            BSTR LinkedCell();
            [id(0x00000422), propput, helpcontext(0x00010422)]
            void LinkedCell([in] BSTR rhs);
            [id(0x0000034a), propget, helpcontext(0x0001034a)]
            long Max();
            [id(0x0000034a), propput, helpcontext(0x0001034a)]
            void Max([in] long rhs);
            [id(0x0000034b), propget, helpcontext(0x0001034b)]
            long Min();
            [id(0x0000034b), propput, helpcontext(0x0001034b)]
            void Min([in] long rhs);
            [id(0x0000034c), propget, helpcontext(0x0001034c)]
            long SmallChange();
            [id(0x0000034c), propput, helpcontext(0x0001034c)]
            void SmallChange([in] long rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            long Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] long rhs);
    };

    [
      uuid(0002088E-0000-0000-C000-000000000046),
      helpcontext(0x0002004e),
      hidden
    ]
    dispinterface Spinners {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(00000000), propget, helpcontext(0x00010000)]
            long _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] long rhs);
            [id(0x00000462), propget, helpcontext(0x00010462)]
            VARIANT_BOOL Display3DShading();
            [id(0x00000462), propput, helpcontext(0x00010462)]
            void Display3DShading([in] VARIANT_BOOL rhs);
            [id(0x00000422), propget, helpcontext(0x00010422)]
            BSTR LinkedCell();
            [id(0x00000422), propput, helpcontext(0x00010422)]
            void LinkedCell([in] BSTR rhs);
            [id(0x0000034a), propget, helpcontext(0x0001034a)]
            long Max();
            [id(0x0000034a), propput, helpcontext(0x0001034a)]
            void Max([in] long rhs);
            [id(0x0000034b), propget, helpcontext(0x0001034b)]
            long Min();
            [id(0x0000034b), propput, helpcontext(0x0001034b)]
            void Min([in] long rhs);
            [id(0x0000034c), propget, helpcontext(0x0001034c)]
            long SmallChange();
            [id(0x0000034c), propput, helpcontext(0x0001034c)]
            void SmallChange([in] long rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            long Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] long rhs);
            [id(0x000000b5), helpcontext(0x000100b5)]
            Spinner* Add(
                            [in] double Left, 
                            [in] double Top, 
                            [in] double Width, 
                            [in] double Height);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002088F-0000-0000-C000-000000000046),
      helpcontext(0x0002004f),
      hidden
    ]
    dispinterface DialogFrame {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x00010004), restricted, hidden]
            void _Dummy4();
            [id(0x00010005), restricted, hidden]
            void _Dummy5();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00010007), restricted, hidden]
            void _Dummy7();
            [id(0x00010008), restricted, hidden]
            void _Dummy8();
            [id(0x00010009), restricted, hidden]
            void _Dummy9();
            [id(0x0001000a), restricted, hidden]
            void _Dummy10();
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00010011), restricted, hidden]
            void _Dummy17();
            [id(0x00010012), restricted, hidden]
            void _Dummy18();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x00010014), restricted, hidden]
            void _Dummy20();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x00010017), restricted, hidden]
            void _Dummy23();
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x00010019), restricted, hidden]
            void _Dummy25();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
    };

    [
      uuid(00020890-0000-0000-C000-000000000046),
      helpcontext(0x00020050),
      hidden
    ]
    dispinterface Label {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x0000034e), propget, helpcontext(0x0001034e)]
            VARIANT Accelerator();
            [id(0x0000034e), propput, helpcontext(0x0001034e)]
            void Accelerator([in] VARIANT rhs);
            [id(0x00010021), restricted, hidden]
            void _Dummy33();
            [id(0x00000461), propget, helpcontext(0x00010461)]
            VARIANT PhoneticAccelerator();
            [id(0x00000461), propput, helpcontext(0x00010461)]
            void PhoneticAccelerator([in] VARIANT rhs);
    };

    [
      uuid(00020891-0000-0000-C000-000000000046),
      helpcontext(0x00020051),
      hidden
    ]
    dispinterface Labels {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x0000034e), propget, helpcontext(0x0001034e)]
            VARIANT Accelerator();
            [id(0x0000034e), propput, helpcontext(0x0001034e)]
            void Accelerator([in] VARIANT rhs);
            [id(0x00010021), restricted, hidden]
            void _Dummy33();
            [id(0x00000461), propget, helpcontext(0x00010461)]
            VARIANT PhoneticAccelerator();
            [id(0x00000461), propput, helpcontext(0x00010461)]
            void PhoneticAccelerator([in] VARIANT rhs);
            [id(0x000000b5), helpcontext(0x000100b5)]
            Label* Add(
                            [in] double Left, 
                            [in] double Top, 
                            [in] double Width, 
                            [in] double Height);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00020894-0000-0000-C000-000000000046),
      helpcontext(0x00020054)
    ]
    dispinterface Panes {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            Pane* Item([in] long Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            Pane* _Default([in] long Index);
    };

    [
      uuid(00020895-0000-0000-C000-000000000046),
      helpcontext(0x00020055)
    ]
    dispinterface Pane {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000130), helpcontext(0x00010130)]
            VARIANT_BOOL Activate();
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x00000223), helpcontext(0x00010223)]
            VARIANT LargeScroll(
                            [in, optional] VARIANT Down, 
                            [in, optional] VARIANT Up, 
                            [in, optional] VARIANT ToRight, 
                            [in, optional] VARIANT ToLeft);
            [id(0x0000028e), propget, helpcontext(0x0001028e)]
            long ScrollColumn();
            [id(0x0000028e), propput, helpcontext(0x0001028e)]
            void ScrollColumn([in] long rhs);
            [id(0x0000028f), propget, helpcontext(0x0001028f)]
            long ScrollRow();
            [id(0x0000028f), propput, helpcontext(0x0001028f)]
            void ScrollRow([in] long rhs);
            [id(0x00000224), helpcontext(0x00010224)]
            VARIANT SmallScroll(
                            [in, optional] VARIANT Down, 
                            [in, optional] VARIANT Up, 
                            [in, optional] VARIANT ToRight, 
                            [in, optional] VARIANT ToLeft);
            [id(0x0000045e), propget, helpcontext(0x0001045e)]
            Range* VisibleRange();
            [id(0x000006f5), helpcontext(0x000106f5)]
            void ScrollIntoView(
                            [in] long Left, 
                            [in] long Top, 
                            [in] long Width, 
                            [in] long Height, 
                            [in, optional] VARIANT Start);
            [id(0x000006f0), helpcontext(0x000106f0)]
            long PointsToScreenPixelsX([in] long Points);
            [id(0x000006f1), helpcontext(0x000106f1)]
            long PointsToScreenPixelsY([in] long Points);
    };

    [
      uuid(00020896-0000-0000-C000-000000000046),
      helpcontext(0x00020056)
    ]
    dispinterface Scenarios {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            Scenario* Add(
                            [in] BSTR Name, 
                            [in] VARIANT ChangingCells, 
                            [in, optional] VARIANT Values, 
                            [in, optional] VARIANT Comment, 
                            [in, optional] VARIANT Locked, 
                            [in, optional] VARIANT Hidden);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x00000391), helpcontext(0x00010391)]
            VARIANT CreateSummary(
                            [in, optional, defaultvalue(1)] XlSummaryReportType ReportType, 
                            [in, optional] VARIANT ResultCells);
            [id(0x000000aa), helpcontext(0x000100aa)]
            Scenario* Item([in] VARIANT Index);
            [id(0x00000234), helpcontext(0x00010234)]
            VARIANT Merge([in] VARIANT Source);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00020897-0000-0000-C000-000000000046),
      helpcontext(0x00020057)
    ]
    dispinterface Scenario {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000390), helpcontext(0x00010390)]
            VARIANT ChangeScenario(
                            [in] VARIANT ChangingCells, 
                            [in, optional] VARIANT Values);
            [id(0x0000038f), propget, helpcontext(0x0001038f)]
            Range* ChangingCells();
            [id(0x0000038e), propget, helpcontext(0x0001038e)]
            BSTR Comment();
            [id(0x0000038e), propput, helpcontext(0x0001038e)]
            void Comment([in] BSTR rhs);
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000010c), propget, helpcontext(0x0001010c)]
            VARIANT_BOOL Hidden();
            [id(0x0000010c), propput, helpcontext(0x0001010c)]
            void Hidden([in] VARIANT_BOOL rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x000001f0), helpcontext(0x000101f0)]
            VARIANT Show();
            [id(0x000000a4), propget, helpcontext(0x000100a4)]
            VARIANT Values([in, optional] VARIANT Index);
    };

    [
      uuid(00020898-0000-0000-C000-000000000046),
      helpcontext(0x00020058),
      hidden
    ]
    dispinterface GroupObject {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x0001001b), restricted, hidden]
            void _Dummy27();
            [id(0x0001001c), restricted, hidden]
            void _Dummy28();
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT_BOOL AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT_BOOL rhs);
            [id(0x0001001e), restricted, hidden]
            void _Dummy30();
            [id(0x00000263), propget, helpcontext(0x00010263)]
            VARIANT ArrowHeadLength();
            [id(0x00000263), propput, helpcontext(0x00010263)]
            void ArrowHeadLength([in] VARIANT rhs);
            [id(0x00000264), propget, helpcontext(0x00010264)]
            VARIANT ArrowHeadStyle();
            [id(0x00000264), propput, helpcontext(0x00010264)]
            void ArrowHeadStyle([in] VARIANT rhs);
            [id(0x00000265), propget, helpcontext(0x00010265)]
            VARIANT ArrowHeadWidth();
            [id(0x00000265), propput, helpcontext(0x00010265)]
            void ArrowHeadWidth([in] VARIANT rhs);
            [id(0x00000266), propget, helpcontext(0x00010266)]
            VARIANT_BOOL AutoSize();
            [id(0x00000266), propput, helpcontext(0x00010266)]
            void AutoSize([in] VARIANT_BOOL rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00010024), restricted, hidden]
            void _Dummy36();
            [id(0x00010025), restricted, hidden]
            void _Dummy37();
            [id(0x00010026), restricted, hidden]
            void _Dummy38();
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(00000000), propget, helpcontext(0x00010000)]
            long _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] long rhs);
            [id(0x00010029), restricted, hidden]
            void _Dummy41();
            [id(0x0001002a), restricted, hidden]
            void _Dummy42();
            [id(0x0001002b), restricted, hidden]
            void _Dummy43();
            [id(0x0001002c), restricted, hidden]
            void _Dummy44();
            [id(0x0001002d), restricted, hidden]
            void _Dummy45();
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x0001002f), restricted, hidden]
            void _Dummy47();
            [id(0x00010030), restricted, hidden]
            void _Dummy48();
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x00010032), restricted, hidden]
            void _Dummy50();
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00010034), restricted, hidden]
            void _Dummy52();
            [id(0x00010035), restricted, hidden]
            void _Dummy53();
            [id(0x00010036), restricted, hidden]
            void _Dummy54();
            [id(0x00010037), restricted, hidden]
            void _Dummy55();
            [id(0x00010038), restricted, hidden]
            void _Dummy56();
            [id(0x00010039), restricted, hidden]
            void _Dummy57();
            [id(0x0001003a), restricted, hidden]
            void _Dummy58();
            [id(0x0001003b), restricted, hidden]
            void _Dummy59();
            [id(0x0001003c), restricted, hidden]
            void _Dummy60();
            [id(0x0001003d), restricted, hidden]
            void _Dummy61();
            [id(0x0001003e), restricted, hidden]
            void _Dummy62();
            [id(0x0001003f), restricted, hidden]
            void _Dummy63();
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x00010041), restricted, hidden]
            void _Dummy65();
            [id(0x00010042), restricted, hidden]
            void _Dummy66();
            [id(0x00010043), restricted, hidden]
            void _Dummy67();
            [id(0x00010044), restricted, hidden]
            void _Dummy68();
            [id(0x0000026b), propget, helpcontext(0x0001026b)]
            VARIANT_BOOL RoundedCorners();
            [id(0x0000026b), propput, helpcontext(0x0001026b)]
            void RoundedCorners([in] VARIANT_BOOL rhs);
            [id(0x00010046), restricted, hidden]
            void _Dummy70();
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x00010048), restricted, hidden]
            void _Dummy72();
            [id(0x00010049), restricted, hidden]
            void _Dummy73();
            [id(0x000000f4), helpcontext(0x000100f4)]
            IDispatch* Ungroup();
            [id(0x0001004b), restricted, hidden]
            void _Dummy75();
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x0001004d), restricted, hidden]
            void _Dummy77();
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
    };

    [
      uuid(00020899-0000-0000-C000-000000000046),
      helpcontext(0x00020059),
      hidden
    ]
    dispinterface GroupObjects {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x0001001b), restricted, hidden]
            void _Dummy27();
            [id(0x0001001c), restricted, hidden]
            void _Dummy28();
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT_BOOL AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT_BOOL rhs);
            [id(0x0001001e), restricted, hidden]
            void _Dummy30();
            [id(0x00000263), propget, helpcontext(0x00010263)]
            VARIANT ArrowHeadLength();
            [id(0x00000263), propput, helpcontext(0x00010263)]
            void ArrowHeadLength([in] VARIANT rhs);
            [id(0x00000264), propget, helpcontext(0x00010264)]
            VARIANT ArrowHeadStyle();
            [id(0x00000264), propput, helpcontext(0x00010264)]
            void ArrowHeadStyle([in] VARIANT rhs);
            [id(0x00000265), propget, helpcontext(0x00010265)]
            VARIANT ArrowHeadWidth();
            [id(0x00000265), propput, helpcontext(0x00010265)]
            void ArrowHeadWidth([in] VARIANT rhs);
            [id(0x00000266), propget, helpcontext(0x00010266)]
            VARIANT_BOOL AutoSize();
            [id(0x00000266), propput, helpcontext(0x00010266)]
            void AutoSize([in] VARIANT_BOOL rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00010024), restricted, hidden]
            void _Dummy36();
            [id(0x00010025), restricted, hidden]
            void _Dummy37();
            [id(0x00010026), restricted, hidden]
            void _Dummy38();
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(00000000), propget, helpcontext(0x00010000)]
            long _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] long rhs);
            [id(0x00010029), restricted, hidden]
            void _Dummy41();
            [id(0x0001002a), restricted, hidden]
            void _Dummy42();
            [id(0x0001002b), restricted, hidden]
            void _Dummy43();
            [id(0x0001002c), restricted, hidden]
            void _Dummy44();
            [id(0x0001002d), restricted, hidden]
            void _Dummy45();
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x0001002f), restricted, hidden]
            void _Dummy47();
            [id(0x00010030), restricted, hidden]
            void _Dummy48();
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x00010032), restricted, hidden]
            void _Dummy50();
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00010034), restricted, hidden]
            void _Dummy52();
            [id(0x00010035), restricted, hidden]
            void _Dummy53();
            [id(0x00010036), restricted, hidden]
            void _Dummy54();
            [id(0x00010037), restricted, hidden]
            void _Dummy55();
            [id(0x00010038), restricted, hidden]
            void _Dummy56();
            [id(0x00010039), restricted, hidden]
            void _Dummy57();
            [id(0x0001003a), restricted, hidden]
            void _Dummy58();
            [id(0x0001003b), restricted, hidden]
            void _Dummy59();
            [id(0x0001003c), restricted, hidden]
            void _Dummy60();
            [id(0x0001003d), restricted, hidden]
            void _Dummy61();
            [id(0x0001003e), restricted, hidden]
            void _Dummy62();
            [id(0x0001003f), restricted, hidden]
            void _Dummy63();
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x00010041), restricted, hidden]
            void _Dummy65();
            [id(0x00010042), restricted, hidden]
            void _Dummy66();
            [id(0x00010043), restricted, hidden]
            void _Dummy67();
            [id(0x00010044), restricted, hidden]
            void _Dummy68();
            [id(0x0000026b), propget, helpcontext(0x0001026b)]
            VARIANT_BOOL RoundedCorners();
            [id(0x0000026b), propput, helpcontext(0x0001026b)]
            void RoundedCorners([in] VARIANT_BOOL rhs);
            [id(0x00010046), restricted, hidden]
            void _Dummy70();
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x00010048), restricted, hidden]
            void _Dummy72();
            [id(0x00010049), restricted, hidden]
            void _Dummy73();
            [id(0x000000f4), helpcontext(0x000100f4)]
            IDispatch* Ungroup();
            [id(0x0001004b), restricted, hidden]
            void _Dummy75();
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x0001004d), restricted, hidden]
            void _Dummy77();
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002089A-0000-0000-C000-000000000046),
      helpcontext(0x0002005a),
      hidden
    ]
    dispinterface Line {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000263), propget, helpcontext(0x00010263)]
            VARIANT ArrowHeadLength();
            [id(0x00000263), propput, helpcontext(0x00010263)]
            void ArrowHeadLength([in] VARIANT rhs);
            [id(0x00000264), propget, helpcontext(0x00010264)]
            VARIANT ArrowHeadStyle();
            [id(0x00000264), propput, helpcontext(0x00010264)]
            void ArrowHeadStyle([in] VARIANT rhs);
            [id(0x00000265), propget, helpcontext(0x00010265)]
            VARIANT ArrowHeadWidth();
            [id(0x00000265), propput, helpcontext(0x00010265)]
            void ArrowHeadWidth([in] VARIANT rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
    };

    [
      uuid(0002089B-0000-0000-C000-000000000046),
      helpcontext(0x0002005b),
      hidden
    ]
    dispinterface Lines {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000263), propget, helpcontext(0x00010263)]
            VARIANT ArrowHeadLength();
            [id(0x00000263), propput, helpcontext(0x00010263)]
            void ArrowHeadLength([in] VARIANT rhs);
            [id(0x00000264), propget, helpcontext(0x00010264)]
            VARIANT ArrowHeadStyle();
            [id(0x00000264), propput, helpcontext(0x00010264)]
            void ArrowHeadStyle([in] VARIANT rhs);
            [id(0x00000265), propget, helpcontext(0x00010265)]
            VARIANT ArrowHeadWidth();
            [id(0x00000265), propput, helpcontext(0x00010265)]
            void ArrowHeadWidth([in] VARIANT rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x000000b5), helpcontext(0x000100b5)]
            Line* Add(
                            [in] double X1, 
                            [in] double Y1, 
                            [in] double X2, 
                            [in] double Y2);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002089C-0000-0000-C000-000000000046),
      helpcontext(0x0002005c),
      hidden
    ]
    dispinterface Rectangle {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT_BOOL AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT_BOOL rhs);
            [id(0x000005f5), propget, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000266), propget, helpcontext(0x00010266)]
            VARIANT_BOOL AutoSize();
            [id(0x00000266), propput, helpcontext(0x00010266)]
            void AutoSize([in] VARIANT_BOOL rhs);
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x0000026b), propget, helpcontext(0x0001026b)]
            VARIANT_BOOL RoundedCorners();
            [id(0x0000026b), propput, helpcontext(0x0001026b)]
            void RoundedCorners([in] VARIANT_BOOL rhs);
    };

    [
      uuid(0002089D-0000-0000-C000-000000000046),
      helpcontext(0x0002005d),
      hidden
    ]
    dispinterface Rectangles {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT_BOOL AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT_BOOL rhs);
            [id(0x000005f5), propget, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000266), propget, helpcontext(0x00010266)]
            VARIANT_BOOL AutoSize();
            [id(0x00000266), propput, helpcontext(0x00010266)]
            void AutoSize([in] VARIANT_BOOL rhs);
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x0000026b), propget, helpcontext(0x0001026b)]
            VARIANT_BOOL RoundedCorners();
            [id(0x0000026b), propput, helpcontext(0x0001026b)]
            void RoundedCorners([in] VARIANT_BOOL rhs);
            [id(0x000000b5), helpcontext(0x000100b5)]
            Rectangle* Add(
                            [in] double Left, 
                            [in] double Top, 
                            [in] double Width, 
                            [in] double Height);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002089E-0000-0000-C000-000000000046),
      helpcontext(0x0002005e),
      hidden
    ]
    dispinterface Oval {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT_BOOL AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT_BOOL rhs);
            [id(0x000005f5), propget, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000266), propget, helpcontext(0x00010266)]
            VARIANT_BOOL AutoSize();
            [id(0x00000266), propput, helpcontext(0x00010266)]
            void AutoSize([in] VARIANT_BOOL rhs);
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
    };

    [
      uuid(0002089F-0000-0000-C000-000000000046),
      helpcontext(0x0002005f),
      hidden
    ]
    dispinterface Ovals {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT_BOOL AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT_BOOL rhs);
            [id(0x000005f5), propget, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000266), propget, helpcontext(0x00010266)]
            VARIANT_BOOL AutoSize();
            [id(0x00000266), propput, helpcontext(0x00010266)]
            void AutoSize([in] VARIANT_BOOL rhs);
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x000000b5), helpcontext(0x000100b5)]
            Oval* Add(
                            [in] double Left, 
                            [in] double Top, 
                            [in] double Width, 
                            [in] double Height);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(000208A0-0000-0000-C000-000000000046),
      helpcontext(0x00020060),
      hidden
    ]
    dispinterface Arc {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT_BOOL AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT_BOOL rhs);
            [id(0x000005f5), propget, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000266), propget, helpcontext(0x00010266)]
            VARIANT_BOOL AutoSize();
            [id(0x00000266), propput, helpcontext(0x00010266)]
            void AutoSize([in] VARIANT_BOOL rhs);
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0001002b), restricted, hidden]
            void _Dummy43();
    };

    [
      uuid(000208A1-0000-0000-C000-000000000046),
      helpcontext(0x00020061),
      hidden
    ]
    dispinterface Arcs {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT_BOOL AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT_BOOL rhs);
            [id(0x000005f5), propget, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000266), propget, helpcontext(0x00010266)]
            VARIANT_BOOL AutoSize();
            [id(0x00000266), propput, helpcontext(0x00010266)]
            void AutoSize([in] VARIANT_BOOL rhs);
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0001002b), restricted, hidden]
            void _Dummy43();
            [id(0x000000b5), helpcontext(0x000100b5)]
            Arc* Add(
                            [in] double X1, 
                            [in] double Y1, 
                            [in] double X2, 
                            [in] double Y2);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00024410-0000-0000-C000-000000000046),
      helpcontext(0x000200a6),
      hidden
    ]
    dispinterface OLEObjectEvents {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000605), helpcontext(0x00010605)]
            void GotFocus();
            [id(0x00000606), helpcontext(0x00010606)]
            void LostFocus();
    };

    [
      uuid(000208A2-0000-0000-C000-000000000046),
      helpcontext(0x00020062)
    ]
    dispinterface _OLEObject {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x80010094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x80010095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x80010096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x80010267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x8001025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x80010227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x800100d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x80010235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x80010075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x8001040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x80010258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x80010258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x8001007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x8001007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x800101e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x8001007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x8001007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x8001010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x8001010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x8001006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x8001006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x80010254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x80010254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x80010269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x80010269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x8001026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x8001026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x800100eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x8001025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x8001007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x8001007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x8001026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x8001022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x8001022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x8001007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x8001007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x8001026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x800105f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x80010080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x80010081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x80010067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x80010067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x80010130), helpcontext(0x00010130)]
            VARIANT Activate();
            [id(0x800104a2), propget, helpcontext(0x000104a2)]
            VARIANT_BOOL AutoLoad();
            [id(0x800104a2), propput, helpcontext(0x000104a2)]
            void AutoLoad([in] VARIANT_BOOL rhs);
            [id(0x80010418), propget, helpcontext(0x00010418)]
            VARIANT_BOOL AutoUpdate();
            [id(0x80010418), propput, helpcontext(0x00010418)]
            void AutoUpdate([in] VARIANT_BOOL rhs);
            [id(0x80010419), propget, helpcontext(0x00010419)]
            IDispatch* Object();
            [id(0x8001041e), propget, helpcontext(0x0001041e)]
            VARIANT OLEType();
            [id(0x800102d1), propget, helpcontext(0x000102d1)]
            BSTR SourceName();
            [id(0x800102d1), propput, helpcontext(0x000102d1)]
            void SourceName([in] BSTR rhs);
            [id(0x800102a8), helpcontext(0x000102a8)]
            VARIANT Update();
            [id(0x8001025e), helpcontext(0x0001025e)]
            VARIANT Verb([in, optional, defaultvalue(1)] XlOLEVerb Verb);
            [id(0x80010422), propget, helpcontext(0x00010422)]
            BSTR LinkedCell();
            [id(0x80010422), propput, helpcontext(0x00010422)]
            void LinkedCell([in] BSTR rhs);
            [id(0x8001034f), propget, helpcontext(0x0001034f)]
            BSTR ListFillRange();
            [id(0x8001034f), propput, helpcontext(0x0001034f)]
            void ListFillRange([in] BSTR rhs);
            [id(0x800105f3), propget, helpcontext(0x000105f3)]
            BSTR progID();
            [id(0x8001073d), propget, hidden, helpcontext(0x0001073d)]
            BSTR AltHTML();
            [id(0x8001073d), propput, hidden, helpcontext(0x0001073d)]
            void AltHTML([in] BSTR rhs);
    };

    [
      uuid(000208A3-0000-0000-C000-000000000046),
      helpcontext(0x00020063)
    ]
    dispinterface OLEObjects {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x0001001e), restricted, hidden]
            void _Dummy30();
            [id(0x000004a2), propget, helpcontext(0x000104a2)]
            VARIANT_BOOL AutoLoad();
            [id(0x000004a2), propput, helpcontext(0x000104a2)]
            void AutoLoad([in] VARIANT_BOOL rhs);
            [id(0x00010020), restricted, hidden]
            void _Dummy32();
            [id(0x00010021), restricted, hidden]
            void _Dummy33();
            [id(0x00010022), restricted, hidden]
            void _Dummy34();
            [id(0x000002d1), propget, helpcontext(0x000102d1)]
            BSTR SourceName();
            [id(0x000002d1), propput, helpcontext(0x000102d1)]
            void SourceName([in] BSTR rhs);
            [id(0x00010024), restricted, hidden]
            void _Dummy36();
            [id(0x00010025), restricted, hidden]
            void _Dummy37();
            [id(0x00010026), restricted, hidden]
            void _Dummy38();
            [id(0x00010027), restricted, hidden]
            void _Dummy39();
            [id(0x00010028), restricted, hidden]
            void _Dummy40();
            [id(0x00010029), restricted, hidden]
            void _Dummy41();
            [id(0x000000b5), helpcontext(0x000100b5)]
            OLEObject* Add(
                            [in, optional] VARIANT ClassType, 
                            [in, optional] VARIANT Filename, 
                            [in, optional] VARIANT Link, 
                            [in, optional] VARIANT DisplayAsIcon, 
                            [in, optional] VARIANT IconFileName, 
                            [in, optional] VARIANT IconIndex, 
                            [in, optional] VARIANT IconLabel, 
                            [in, optional] VARIANT Left, 
                            [in, optional] VARIANT Top, 
                            [in, optional] VARIANT Width, 
                            [in, optional] VARIANT Height);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), hidden, helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(000208A4-0000-0000-C000-000000000046),
      helpcontext(0x00020064),
      hidden
    ]
    dispinterface TextBox {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT_BOOL AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT_BOOL rhs);
            [id(0x000005f5), propget, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000266), propget, helpcontext(0x00010266)]
            VARIANT_BOOL AutoSize();
            [id(0x00000266), propput, helpcontext(0x00010266)]
            void AutoSize([in] VARIANT_BOOL rhs);
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0000026b), propget, helpcontext(0x0001026b)]
            VARIANT_BOOL RoundedCorners();
            [id(0x0000026b), propput, helpcontext(0x0001026b)]
            void RoundedCorners([in] VARIANT_BOOL rhs);
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
    };

    [
      uuid(000208A5-0000-0000-C000-000000000046),
      helpcontext(0x00020065),
      hidden
    ]
    dispinterface TextBoxes {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT_BOOL AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT_BOOL rhs);
            [id(0x000005f5), propget, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000266), propget, helpcontext(0x00010266)]
            VARIANT_BOOL AutoSize();
            [id(0x00000266), propput, helpcontext(0x00010266)]
            void AutoSize([in] VARIANT_BOOL rhs);
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0000026b), propget, helpcontext(0x0001026b)]
            VARIANT_BOOL RoundedCorners();
            [id(0x0000026b), propput, helpcontext(0x0001026b)]
            void RoundedCorners([in] VARIANT_BOOL rhs);
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x000000b5), helpcontext(0x000100b5)]
            TextBox* Add(
                            [in] double Left, 
                            [in] double Top, 
                            [in] double Width, 
                            [in] double Height);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(000208A6-0000-0000-C000-000000000046),
      helpcontext(0x00020066),
      hidden
    ]
    dispinterface Picture {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
    };

    [
      uuid(000208A7-0000-0000-C000-000000000046),
      helpcontext(0x00020067),
      hidden
    ]
    dispinterface Pictures {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x000000b5), helpcontext(0x000100b5)]
            Picture* Add(
                            [in] double Left, 
                            [in] double Top, 
                            [in] double Width, 
                            [in] double Height);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000fc), helpcontext(0x000100fc)]
            Picture* Insert(
                            [in] BSTR Filename, 
                            [in, optional] VARIANT Converter);
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000d3), helpcontext(0x000100d3)]
            Picture* Paste([in, optional] VARIANT Link);
    };

    [
      uuid(000208A8-0000-0000-C000-000000000046),
      helpcontext(0x00020068),
      hidden
    ]
    dispinterface Drawing {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT_BOOL AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT_BOOL rhs);
            [id(0x000005f5), propget, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000266), propget, helpcontext(0x00010266)]
            VARIANT_BOOL AutoSize();
            [id(0x00000266), propput, helpcontext(0x00010266)]
            void AutoSize([in] VARIANT_BOOL rhs);
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x00000259), helpcontext(0x00010259)]
            VARIANT AddVertex(
                            [in] double Left, 
                            [in] double Top);
            [id(0x0000025c), helpcontext(0x0001025c)]
            VARIANT Reshape(
                            [in] long Vertex, 
                            [in] VARIANT_BOOL Insert, 
                            [in, optional] VARIANT Left, 
                            [in, optional] VARIANT Top);
            [id(0x0000026d), propget, helpcontext(0x0001026d)]
            VARIANT Vertices(
                            [in, optional] VARIANT Index1, 
                            [in, optional] VARIANT Index2);
    };

    [
      uuid(000208A9-0000-0000-C000-000000000046),
      helpcontext(0x00020069),
      hidden
    ]
    dispinterface Drawings {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT_BOOL AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT_BOOL rhs);
            [id(0x000005f5), propget, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000266), propget, helpcontext(0x00010266)]
            VARIANT_BOOL AutoSize();
            [id(0x00000266), propput, helpcontext(0x00010266)]
            void AutoSize([in] VARIANT_BOOL rhs);
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x000001f9), helpcontext(0x000101f9)]
            VARIANT CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x0001002c), restricted, hidden]
            void _Dummy44();
            [id(0x0000025c), helpcontext(0x0001025c)]
            VARIANT Reshape(
                            [in] long Vertex, 
                            [in] VARIANT_BOOL Insert, 
                            [in, optional] VARIANT Left, 
                            [in, optional] VARIANT Top);
            [id(0x0001002e), restricted, hidden]
            void _Dummy46();
            [id(0x000000b5), helpcontext(0x000100b5)]
            Drawing* Add(
                            [in] double X1, 
                            [in] double Y1, 
                            [in] double X2, 
                            [in] double Y2, 
                            [in] VARIANT_BOOL Closed);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(000208AA-0000-0000-C000-000000000046),
      helpcontext(0x0002006a)
    ]
    dispinterface RoutingSlip {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000003bb), propget, helpcontext(0x000103bb)]
            XlRoutingSlipDelivery Delivery();
            [id(0x000003bb), propput, helpcontext(0x000103bb)]
            void Delivery([in] XlRoutingSlipDelivery rhs);
            [id(0x000003ba), propget, helpcontext(0x000103ba)]
            VARIANT Message();
            [id(0x000003ba), propput, helpcontext(0x000103ba)]
            void Message([in] VARIANT rhs);
            [id(0x000003b8), propget, helpcontext(0x000103b8)]
            VARIANT Recipients([in, optional] VARIANT Index);
            [id(0x000003b8), propput, helpcontext(0x000103b8)]
            void Recipients(
                            [in, optional] VARIANT Index, 
                            [in] VARIANT rhs);
            [id(0x0000022b), helpcontext(0x0001022b)]
            VARIANT Reset();
            [id(0x000003bc), propget, helpcontext(0x000103bc)]
            VARIANT_BOOL ReturnWhenDone();
            [id(0x000003bc), propput, helpcontext(0x000103bc)]
            void ReturnWhenDone([in] VARIANT_BOOL rhs);
            [id(0x000003be), propget, helpcontext(0x000103be)]
            XlRoutingSlipStatus Status();
            [id(0x000003b9), propget, helpcontext(0x000103b9)]
            VARIANT Subject();
            [id(0x000003b9), propput, helpcontext(0x000103b9)]
            void Subject([in] VARIANT rhs);
            [id(0x000003bd), propget, helpcontext(0x000103bd)]
            VARIANT_BOOL TrackStatus();
            [id(0x000003bd), propput, helpcontext(0x000103bd)]
            void TrackStatus([in] VARIANT_BOOL rhs);
    };

    [
      uuid(000208AB-0000-0000-C000-000000000046),
      helpcontext(0x0002006b)
    ]
    dispinterface Outline {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000003bf), propget, helpcontext(0x000103bf)]
            VARIANT_BOOL AutomaticStyles();
            [id(0x000003bf), propput, helpcontext(0x000103bf)]
            void AutomaticStyles([in] VARIANT_BOOL rhs);
            [id(0x000003c0), helpcontext(0x000103c0)]
            VARIANT ShowLevels(
                            [in, optional] VARIANT RowLevels, 
                            [in, optional] VARIANT ColumnLevels);
            [id(0x000003c1), propget, helpcontext(0x000103c1)]
            XlSummaryColumn SummaryColumn();
            [id(0x000003c1), propput, helpcontext(0x000103c1)]
            void SummaryColumn([in] XlSummaryColumn rhs);
            [id(0x00000386), propget, helpcontext(0x00010386)]
            XlSummaryRow SummaryRow();
            [id(0x00000386), propput, helpcontext(0x00010386)]
            void SummaryRow([in] XlSummaryRow rhs);
    };

    [
      uuid(000208AD-0000-0000-C000-000000000046),
      helpcontext(0x0002006d),
      hidden
    ]
    dispinterface Module {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000130), helpcontext(0x00010130)]
            void Activate();
            [id(0x00000227), helpcontext(0x00010227)]
            void Copy(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After);
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x0000055d), propget, helpcontext(0x0001055d)]
            BSTR CodeName();
            [id(0x80010000), propget, helpcontext(0x80020000)]
            BSTR _CodeName();
            [id(0x80010000), propput, helpcontext(0x80020000)]
            void _CodeName([in] BSTR rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000027d), helpcontext(0x0001027d)]
            void Move(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x000001f6), propget, helpcontext(0x000101f6)]
            IDispatch* Next();
            [id(0x00000274), propget, hidden, helpcontext(0x00010274)]
            BSTR OnDoubleClick();
            [id(0x00000274), propput, hidden, helpcontext(0x00010274)]
            void OnDoubleClick([in] BSTR rhs);
            [id(0x00000407), propget, hidden, helpcontext(0x00010407)]
            BSTR OnSheetActivate();
            [id(0x00000407), propput, hidden, helpcontext(0x00010407)]
            void OnSheetActivate([in] BSTR rhs);
            [id(0x00000439), propget, hidden, helpcontext(0x00010439)]
            BSTR OnSheetDeactivate();
            [id(0x00000439), propput, hidden, helpcontext(0x00010439)]
            void OnSheetDeactivate([in] BSTR rhs);
            [id(0x000003e6), propget, helpcontext(0x000103e6)]
            PageSetup* PageSetup();
            [id(0x000001f7), propget, helpcontext(0x000101f7)]
            IDispatch* Previous();
            [id(0x00000389), hidden, helpcontext(0x00010389),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, _PrintOut)]
            void __PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate);
            [id(0x00010012), restricted, hidden]
            void _Dummy18();
            [id(0x0000011a), hidden, helpcontext(0x0001011a)]
            void _Protect(
                            [in, optional] VARIANT Password, 
                            [in, optional] VARIANT DrawingObjects, 
                            [in, optional] VARIANT Contents, 
                            [in, optional] VARIANT Scenarios, 
                            [in, optional] VARIANT UserInterfaceOnly);
            [id(0x00000124), propget, helpcontext(0x00010124)]
            VARIANT_BOOL ProtectContents();
            [id(0x00010015), restricted, hidden]
            void _Dummy21();
            [id(0x00000487), propget, helpcontext(0x00010487)]
            VARIANT_BOOL ProtectionMode();
            [id(0x00010017), restricted, hidden]
            void _Dummy23();
            [id(0x0000011c), hidden, helpcontext(0x0001011c)]
            void _SaveAs(
                            [in] BSTR Filename, 
                            [in, optional] VARIANT FileFormat, 
                            [in, optional] VARIANT Password, 
                            [in, optional] VARIANT WriteResPassword, 
                            [in, optional] VARIANT ReadOnlyRecommended, 
                            [in, optional] VARIANT CreateBackup, 
                            [in, optional] VARIANT AddToMru, 
                            [in, optional] VARIANT TextCodepage, 
                            [in, optional] VARIANT TextVisualLayout);
            [id(0x000000eb), helpcontext(0x000100eb)]
            void Select([in, optional] VARIANT Replace);
            [id(0x0000011d), helpcontext(0x0001011d)]
            void Unprotect([in, optional] VARIANT Password);
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            XlSheetVisibility Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] XlSheetVisibility rhs);
            [id(0x00000561), propget, helpcontext(0x00010561)]
            Shapes* Shapes();
            [id(0x00000248), helpcontext(0x00010248)]
            VARIANT InsertFile(
                            [in] VARIANT Filename, 
                            [in, optional] VARIANT Merge);
            [id(0x00000785), helpcontext(0x00010785)]
            void SaveAs(
                            [in] BSTR Filename, 
                            [in, optional] VARIANT FileFormat, 
                            [in, optional] VARIANT Password, 
                            [in, optional] VARIANT WriteResPassword, 
                            [in, optional] VARIANT ReadOnlyRecommended, 
                            [in, optional] VARIANT CreateBackup, 
                            [in, optional] VARIANT AddToMru, 
                            [in, optional] VARIANT TextCodepage, 
                            [in, optional] VARIANT TextVisualLayout);
            [id(0x000007ed), helpcontext(0x000107ed)]
            void Protect(
                            [in, optional] VARIANT Password, 
                            [in, optional] VARIANT DrawingObjects, 
                            [in, optional] VARIANT Contents, 
                            [in, optional] VARIANT Scenarios, 
                            [in, optional] VARIANT UserInterfaceOnly);
            [id(0x000006ec), hidden, helpcontext(0x000106ec)]
            void _PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate);
            [id(0x00000939), helpcontext(0x00010939)]
            void PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate);
    };

    [
      uuid(000208AE-0000-0000-C000-000000000046),
      helpcontext(0x0002006e),
      hidden
    ]
    dispinterface Modules {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            Module* Add(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After, 
                            [in, optional] VARIANT Count);
            [id(0x00000227), helpcontext(0x00010227)]
            void Copy(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00010007), restricted, hidden]
            void _Dummy7();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0x0000027d), helpcontext(0x0001027d)]
            void Move(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x00000389), hidden, helpcontext(0x00010389),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, _PrintOut)]
            void __PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x000000eb), helpcontext(0x000100eb)]
            void Select([in, optional] VARIANT Replace);
            [id(0x0000058a), propget, helpcontext(0x0001058a)]
            HPageBreaks* HPageBreaks();
            [id(0x0000058b), propget, helpcontext(0x0001058b)]
            VPageBreaks* VPageBreaks();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT rhs);
            [id(00000000), propget, helpcontext(0x00010000)]
            IDispatch* _Default([in] VARIANT Index);
            [id(0x000006ec), hidden, helpcontext(0x000106ec),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOut)]
            void _PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate, 
                            [in, optional] VARIANT PrToFileName);
            [id(0x00000939), helpcontext(0x00010939),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOutEx)]
            void PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate, 
                            [in, optional] VARIANT PrToFileName, 
                            [in, optional] VARIANT IgnorePrintAreas);
    };

    [
      uuid(000208AF-0000-0000-C000-000000000046),
      helpcontext(0x0002006f),
      hidden
    ]
    dispinterface DialogSheet {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000130), helpcontext(0x00010130)]
            void Activate();
            [id(0x00000227), helpcontext(0x00010227)]
            void Copy(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After);
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x0000055d), propget, helpcontext(0x0001055d)]
            BSTR CodeName();
            [id(0x80010000), propget, helpcontext(0x80020000)]
            BSTR _CodeName();
            [id(0x80010000), propput, helpcontext(0x80020000)]
            void _CodeName([in] BSTR rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000027d), helpcontext(0x0001027d)]
            void Move(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x000001f6), propget, helpcontext(0x000101f6)]
            IDispatch* Next();
            [id(0x00000274), propget, hidden, helpcontext(0x00010274)]
            BSTR OnDoubleClick();
            [id(0x00000274), propput, hidden, helpcontext(0x00010274)]
            void OnDoubleClick([in] BSTR rhs);
            [id(0x00000407), propget, hidden, helpcontext(0x00010407)]
            BSTR OnSheetActivate();
            [id(0x00000407), propput, hidden, helpcontext(0x00010407)]
            void OnSheetActivate([in] BSTR rhs);
            [id(0x00000439), propget, hidden, helpcontext(0x00010439)]
            BSTR OnSheetDeactivate();
            [id(0x00000439), propput, hidden, helpcontext(0x00010439)]
            void OnSheetDeactivate([in] BSTR rhs);
            [id(0x000003e6), propget, helpcontext(0x000103e6)]
            PageSetup* PageSetup();
            [id(0x000001f7), propget, helpcontext(0x000101f7)]
            IDispatch* Previous();
            [id(0x00000389), hidden, helpcontext(0x00010389),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, _PrintOut)]
            void __PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate);
            [id(0x00000119), helpcontext(0x00010119)]
            void PrintPreview([in, optional] VARIANT EnableChanges);
            [id(0x0000011a), hidden, helpcontext(0x0001011a)]
            void _Protect(
                            [in, optional] VARIANT Password, 
                            [in, optional] VARIANT DrawingObjects, 
                            [in, optional] VARIANT Contents, 
                            [in, optional] VARIANT Scenarios, 
                            [in, optional] VARIANT UserInterfaceOnly);
            [id(0x00000124), propget, helpcontext(0x00010124)]
            VARIANT_BOOL ProtectContents();
            [id(0x00000125), propget, helpcontext(0x00010125)]
            VARIANT_BOOL ProtectDrawingObjects();
            [id(0x00000487), propget, helpcontext(0x00010487)]
            VARIANT_BOOL ProtectionMode();
            [id(0x00000126), propget, helpcontext(0x00010126)]
            VARIANT_BOOL ProtectScenarios();
            [id(0x0000011c), hidden, helpcontext(0x0001011c)]
            void _SaveAs(
                            [in] BSTR Filename, 
                            [in, optional] VARIANT FileFormat, 
                            [in, optional] VARIANT Password, 
                            [in, optional] VARIANT WriteResPassword, 
                            [in, optional] VARIANT ReadOnlyRecommended, 
                            [in, optional] VARIANT CreateBackup, 
                            [in, optional] VARIANT AddToMru, 
                            [in, optional] VARIANT TextCodepage, 
                            [in, optional] VARIANT TextVisualLayout);
            [id(0x000000eb), helpcontext(0x000100eb)]
            void Select([in, optional] VARIANT Replace);
            [id(0x0000011d), helpcontext(0x0001011d)]
            void Unprotect([in, optional] VARIANT Password);
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            XlSheetVisibility Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] XlSheetVisibility rhs);
            [id(0x00000561), propget, helpcontext(0x00010561)]
            Shapes* Shapes();
            [id(0x0001001d), restricted, hidden]
            void _Dummy29();
            [id(0x000002f8), hidden, helpcontext(0x000102f8)]
            IDispatch* Arcs([in, optional] VARIANT Index);
            [id(0x0001001f), restricted, hidden]
            void _Dummy31();
            [id(0x00010020), restricted, hidden]
            void _Dummy32();
            [id(0x0000022d), hidden, helpcontext(0x0001022d)]
            IDispatch* Buttons([in, optional] VARIANT Index);
            [id(0x00010022), restricted, hidden]
            void _Dummy34();
            [id(0x00000590), propget, helpcontext(0x00010590)]
            VARIANT_BOOL EnableCalculation();
            [id(0x00000590), propput, helpcontext(0x00010590)]
            void EnableCalculation([in] VARIANT_BOOL rhs);
            [id(0x00010024), restricted, hidden]
            void _Dummy36();
            [id(0x00000424), helpcontext(0x00010424)]
            IDispatch* ChartObjects([in, optional] VARIANT Index);
            [id(0x00000338), hidden, helpcontext(0x00010338)]
            IDispatch* CheckBoxes([in, optional] VARIANT Index);
            [id(0x000001f9), helpcontext(0x000101f9)]
            void CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang);
            [id(0x00010028), restricted, hidden]
            void _Dummy40();
            [id(0x00010029), restricted, hidden]
            void _Dummy41();
            [id(0x0001002a), restricted, hidden]
            void _Dummy42();
            [id(0x0001002b), restricted, hidden]
            void _Dummy43();
            [id(0x0001002c), restricted, hidden]
            void _Dummy44();
            [id(0x0001002d), restricted, hidden]
            void _Dummy45();
            [id(0x00000283), propget, hidden, helpcontext(0x00010283)]
            VARIANT_BOOL DisplayAutomaticPageBreaks();
            [id(0x00000283), propput, hidden, helpcontext(0x00010283)]
            void DisplayAutomaticPageBreaks([in] VARIANT_BOOL rhs);
            [id(0x00000304), hidden, helpcontext(0x00010304)]
            IDispatch* Drawings([in, optional] VARIANT Index);
            [id(0x00000058), hidden, helpcontext(0x00010058)]
            IDispatch* DrawingObjects([in, optional] VARIANT Index);
            [id(0x00000344), hidden, helpcontext(0x00010344)]
            IDispatch* DropDowns([in, optional] VARIANT Index);
            [id(0x00000484), propget, helpcontext(0x00010484)]
            VARIANT_BOOL EnableAutoFilter();
            [id(0x00000484), propput, helpcontext(0x00010484)]
            void EnableAutoFilter([in] VARIANT_BOOL rhs);
            [id(0x00000591), propget, helpcontext(0x00010591)]
            XlEnableSelection EnableSelection();
            [id(0x00000591), propput, helpcontext(0x00010591)]
            void EnableSelection([in] XlEnableSelection rhs);
            [id(0x00000485), propget, helpcontext(0x00010485)]
            VARIANT_BOOL EnableOutlining();
            [id(0x00000485), propput, helpcontext(0x00010485)]
            void EnableOutlining([in] VARIANT_BOOL rhs);
            [id(0x00000486), propget, helpcontext(0x00010486)]
            VARIANT_BOOL EnablePivotTable();
            [id(0x00000486), propput, helpcontext(0x00010486)]
            void EnablePivotTable([in] VARIANT_BOOL rhs);
            [id(0x00000001), helpcontext(0x00010001)]
            VARIANT Evaluate([in] VARIANT Name);
            [id(0xfffffffb), helpcontext(0x0000fffb)]
            VARIANT _Evaluate([in] VARIANT Name);
            [id(0x00010038), restricted, hidden]
            void _Dummy56();
            [id(0x00000592), helpcontext(0x00010592)]
            void ResetAllPageBreaks();
            [id(0x00000342), hidden, helpcontext(0x00010342)]
            IDispatch* GroupBoxes([in, optional] VARIANT Index);
            [id(0x00000459), hidden, helpcontext(0x00010459)]
            IDispatch* GroupObjects([in, optional] VARIANT Index);
            [id(0x00000349), hidden, helpcontext(0x00010349)]
            IDispatch* Labels([in, optional] VARIANT Index);
            [id(0x000002ff), hidden, helpcontext(0x000102ff)]
            IDispatch* Lines([in, optional] VARIANT Index);
            [id(0x00000340), hidden, helpcontext(0x00010340)]
            IDispatch* ListBoxes([in, optional] VARIANT Index);
            [id(0x000001ba), propget, helpcontext(0x000101ba)]
            Names* Names();
            [id(0x0000031f), helpcontext(0x0001031f)]
            IDispatch* OLEObjects([in, optional] VARIANT Index);
            [id(0x00010041), restricted, hidden]
            void _Dummy65();
            [id(0x00010042), restricted, hidden]
            void _Dummy66();
            [id(0x00010043), restricted, hidden]
            void _Dummy67();
            [id(0x0000033a), hidden, helpcontext(0x0001033a)]
            IDispatch* OptionButtons([in, optional] VARIANT Index);
            [id(0x00010045), restricted, hidden]
            void _Dummy69();
            [id(0x00000321), hidden, helpcontext(0x00010321)]
            IDispatch* Ovals([in, optional] VARIANT Index);
            [id(0x000000d3), helpcontext(0x000100d3)]
            void Paste(
                            [in, optional] VARIANT Destination, 
                            [in, optional] VARIANT Link);
            [id(0x00000403), hidden, helpcontext(0x00010403)]
            void _PasteSpecial(
                            [in, optional] VARIANT Format, 
                            [in, optional] VARIANT Link, 
                            [in, optional] VARIANT DisplayAsIcon, 
                            [in, optional] VARIANT IconFileName, 
                            [in, optional] VARIANT IconIndex, 
                            [in, optional] VARIANT IconLabel);
            [id(0x00000303), hidden, helpcontext(0x00010303)]
            IDispatch* Pictures([in, optional] VARIANT Index);
            [id(0x0001004a), restricted, hidden]
            void _Dummy74();
            [id(0x0001004b), restricted, hidden]
            void _Dummy75();
            [id(0x0001004c), restricted, hidden]
            void _Dummy76();
            [id(0x00000306), hidden, helpcontext(0x00010306)]
            IDispatch* Rectangles([in, optional] VARIANT Index);
            [id(0x0001004e), restricted, hidden]
            void _Dummy78();
            [id(0x0001004f), restricted, hidden]
            void _Dummy79();
            [id(0x00000599), propget, helpcontext(0x00010599)]
            BSTR ScrollArea();
            [id(0x00000599), propput, helpcontext(0x00010599)]
            void ScrollArea([in] BSTR rhs);
            [id(0x0000033e), hidden, helpcontext(0x0001033e)]
            IDispatch* ScrollBars([in, optional] VARIANT Index);
            [id(0x00010052), restricted, hidden]
            void _Dummy82();
            [id(0x00010053), restricted, hidden]
            void _Dummy83();
            [id(0x00000346), hidden, helpcontext(0x00010346)]
            IDispatch* Spinners([in, optional] VARIANT Index);
            [id(0x00010055), restricted, hidden]
            void _Dummy85();
            [id(0x00010056), restricted, hidden]
            void _Dummy86();
            [id(0x00000309), hidden, helpcontext(0x00010309)]
            IDispatch* TextBoxes([in, optional] VARIANT Index);
            [id(0x00010058), restricted, hidden]
            void _Dummy88();
            [id(0x00010059), restricted, hidden]
            void _Dummy89();
            [id(0x0001005a), restricted, hidden]
            void _Dummy90();
            [id(0x0000058a), propget, helpcontext(0x0001058a)]
            HPageBreaks* HPageBreaks();
            [id(0x0000058b), propget, helpcontext(0x0001058b)]
            VPageBreaks* VPageBreaks();
            [id(0x0000059a), propget, helpcontext(0x0001059a)]
            QueryTables* QueryTables();
            [id(0x0000059b), propget, helpcontext(0x0001059b)]
            VARIANT_BOOL DisplayPageBreaks();
            [id(0x0000059b), propput, helpcontext(0x0001059b)]
            void DisplayPageBreaks([in] VARIANT_BOOL rhs);
            [id(0x0000023f), propget, helpcontext(0x0001023f)]
            Comments* Comments();
            [id(0x00000571), propget, helpcontext(0x00010571)]
            Hyperlinks* Hyperlinks();
            [id(0x0000059c), helpcontext(0x0001059c)]
            void ClearCircles();
            [id(0x0000059d), helpcontext(0x0001059d)]
            void CircleInvalid();
            [id(0x00000288), propget, hidden, helpcontext(0x00010288)]
            long _DisplayRightToLeft();
            [id(0x00000288), propput, hidden, helpcontext(0x00010288)]
            void _DisplayRightToLeft([in] long rhs);
            [id(0x00000319), propget, helpcontext(0x00010319)]
            AutoFilter* AutoFilter();
            [id(0x000006ee), propget, helpcontext(0x000106ee)]
            VARIANT_BOOL DisplayRightToLeft();
            [id(0x000006ee), propput, helpcontext(0x000106ee)]
            void DisplayRightToLeft([in] VARIANT_BOOL rhs);
            [id(0x00000718), propget, hidden, helpcontext(0x00010718)]
            Scripts* Scripts();
            [id(0x000006ec), hidden, helpcontext(0x000106ec),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOut)]
            void _PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate, 
                            [in, optional] VARIANT PrToFileName);
            [id(0x00000719), hidden, helpcontext(0x00010719)]
            void _CheckSpelling(
                            [in, optional] VARIANT CustomDictionary, 
                            [in, optional] VARIANT IgnoreUppercase, 
                            [in, optional] VARIANT AlwaysSuggest, 
                            [in, optional] VARIANT SpellLang, 
                            [in, optional] VARIANT IgnoreFinalYaa, 
                            [in, optional] VARIANT SpellScript);
            [id(0x00000411), propget, helpcontext(0x00010411)]
            Tab* Tab();
            [id(0x000007e5), propget, helpcontext(0x000107e5)]
            MsoEnvelope* MailEnvelope();
            [id(0x00000785), helpcontext(0x00010785)]
            void SaveAs(
                            [in] BSTR Filename, 
                            [in, optional] VARIANT FileFormat, 
                            [in, optional] VARIANT Password, 
                            [in, optional] VARIANT WriteResPassword, 
                            [in, optional] VARIANT ReadOnlyRecommended, 
                            [in, optional] VARIANT CreateBackup, 
                            [in, optional] VARIANT AddToMru, 
                            [in, optional] VARIANT TextCodepage, 
                            [in, optional] VARIANT TextVisualLayout, 
                            [in, optional] VARIANT Local);
            [id(0x000007ee), propget, helpcontext(0x000107ee)]
            CustomProperties* CustomProperties();
            [id(0x000007e0), propget, helpcontext(0x000107e0)]
            SmartTags* SmartTags();
            [id(0x000000b0), propget, helpcontext(0x000100b0)]
            Protection* Protection();
            [id(0x00000788), helpcontext(0x00010788)]
            void PasteSpecial(
                            [in, optional] VARIANT Format, 
                            [in, optional] VARIANT Link, 
                            [in, optional] VARIANT DisplayAsIcon, 
                            [in, optional] VARIANT IconFileName, 
                            [in, optional] VARIANT IconIndex, 
                            [in, optional] VARIANT IconLabel, 
                            [in, optional] VARIANT NoHTMLFormatting);
            [id(0x000007ed), helpcontext(0x000107ed)]
            void Protect(
                            [in, optional] VARIANT Password, 
                            [in, optional] VARIANT DrawingObjects, 
                            [in, optional] VARIANT Contents, 
                            [in, optional] VARIANT Scenarios, 
                            [in, optional] VARIANT UserInterfaceOnly, 
                            [in, optional] VARIANT AllowFormattingCells, 
                            [in, optional] VARIANT AllowFormattingColumns, 
                            [in, optional] VARIANT AllowFormattingRows, 
                            [in, optional] VARIANT AllowInsertingColumns, 
                            [in, optional] VARIANT AllowInsertingRows, 
                            [in, optional] VARIANT AllowInsertingHyperlinks, 
                            [in, optional] VARIANT AllowDeletingColumns, 
                            [in, optional] VARIANT AllowDeletingRows, 
                            [in, optional] VARIANT AllowSorting, 
                            [in, optional] VARIANT AllowFiltering, 
                            [in, optional] VARIANT AllowUsingPivotTables);
            [id(0x00010071), restricted, hidden]
            void _Dummy113();
            [id(0x00010072), restricted, hidden]
            void _Dummy114();
            [id(0x00010073), restricted, hidden]
            void _Dummy115();
            [id(0x00000939), helpcontext(0x00010939),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOutEx)]
            void PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate, 
                            [in, optional] VARIANT PrToFileName);
            [id(0x000009cf), propget, helpcontext(0x000109cf)]
            VARIANT_BOOL EnableFormatConditionsCalculation();
            [id(0x000009cf), propput, helpcontext(0x000109cf)]
            void EnableFormatConditionsCalculation([in] VARIANT_BOOL rhs);
            [id(0x00000370), propget, helpcontext(0x00010370)]
            Sort* Sort();
            [id(0x000009bd), helpcontext(0x000109bd)]
            void ExportAsFixedFormat(
                            [in] XlFixedFormatType Type, 
                            [in, optional] VARIANT Filename, 
                            [in, optional] VARIANT Quality, 
                            [in, optional] VARIANT IncludeDocProperties, 
                            [in, optional] VARIANT IgnorePrintAreas, 
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT OpenAfterPublish, 
                            [in, optional] VARIANT FixedFormatExtClassPtr);
            [id(0x00000359), propget, helpcontext(0x00010359)]
            VARIANT DefaultButton();
            [id(0x00000359), propput, helpcontext(0x00010359)]
            void DefaultButton([in] VARIANT rhs);
            [id(0x00000347), propget, hidden, helpcontext(0x00010347)]
            DialogFrame* DialogFrame();
            [id(0x0000033c), hidden, helpcontext(0x0001033c)]
            IDispatch* EditBoxes([in, optional] VARIANT Index);
            [id(0x0000032e), propget, helpcontext(0x0001032e)]
            VARIANT Focus();
            [id(0x0000032e), propput, helpcontext(0x0001032e)]
            void Focus([in] VARIANT rhs);
            [id(0x0000032d), helpcontext(0x0001032d)]
            VARIANT_BOOL Hide([in, optional] VARIANT Cancel);
            [id(0x000001f0), helpcontext(0x000101f0)]
            VARIANT_BOOL Show();
    };

    [
      uuid(000208B0-0000-0000-C000-000000000046),
      helpcontext(0x00020070),
      hidden
    ]
    dispinterface DialogSheets {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            DialogSheet* Add(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After, 
                            [in, optional] VARIANT Count);
            [id(0x00000227), helpcontext(0x00010227)]
            void Copy(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00010007), restricted, hidden]
            void _Dummy7();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0x0000027d), helpcontext(0x0001027d)]
            void Move(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x00000389), hidden, helpcontext(0x00010389),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, _PrintOut)]
            void __PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate);
            [id(0x00000119), helpcontext(0x00010119)]
            void PrintPreview([in, optional] VARIANT EnableChanges);
            [id(0x000000eb), helpcontext(0x000100eb)]
            void Select([in, optional] VARIANT Replace);
            [id(0x0000058a), propget, helpcontext(0x0001058a)]
            HPageBreaks* HPageBreaks();
            [id(0x0000058b), propget, helpcontext(0x0001058b)]
            VPageBreaks* VPageBreaks();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT rhs);
            [id(00000000), propget, helpcontext(0x00010000)]
            IDispatch* _Default([in] VARIANT Index);
            [id(0x000006ec), hidden, helpcontext(0x000106ec),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOut)]
            void _PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate, 
                            [in, optional] VARIANT PrToFileName);
            [id(0x00000939), helpcontext(0x00010939),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOutEx)]
            void PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate, 
                            [in, optional] VARIANT PrToFileName);
    };

    [
      uuid(000208B1-0000-0000-C000-000000000046),
      helpcontext(0x00020071)
    ]
    dispinterface Worksheets {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            IDispatch* Add(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After, 
                            [in, optional] VARIANT Count, 
                            [in, optional] VARIANT Type);
            [id(0x00000227), helpcontext(0x00010227)]
            void Copy(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x000001d5), helpcontext(0x000101d5)]
            void FillAcrossSheets(
                            [in] Range* Range, 
                            [in, optional, defaultvalue(-4104)] XlFillWith Type);
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0x0000027d), helpcontext(0x0001027d)]
            void Move(
                            [in, optional] VARIANT Before, 
                            [in, optional] VARIANT After);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x00000389), hidden, helpcontext(0x00010389),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, _PrintOut)]
            void __PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate);
            [id(0x00000119), helpcontext(0x00010119)]
            void PrintPreview([in, optional] VARIANT EnableChanges);
            [id(0x000000eb), helpcontext(0x000100eb)]
            void Select([in, optional] VARIANT Replace);
            [id(0x0000058a), propget, helpcontext(0x0001058a)]
            HPageBreaks* HPageBreaks();
            [id(0x0000058b), propget, helpcontext(0x0001058b)]
            VPageBreaks* VPageBreaks();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT rhs);
            [id(00000000), propget, helpcontext(0x00010000)]
            IDispatch* _Default([in] VARIANT Index);
            [id(0x000006ec), hidden, helpcontext(0x000106ec),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOut)]
            void _PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate, 
                            [in, optional] VARIANT PrToFileName);
            [id(0x00000939), helpcontext(0x00010939),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, PrintOutEx)]
            void PrintOut(
                            [in, optional] VARIANT From, 
                            [in, optional] VARIANT To, 
                            [in, optional] VARIANT Copies, 
                            [in, optional] VARIANT Preview, 
                            [in, optional] VARIANT ActivePrinter, 
                            [in, optional] VARIANT PrintToFile, 
                            [in, optional] VARIANT Collate, 
                            [in, optional] VARIANT PrToFileName, 
                            [in, optional] VARIANT IgnorePrintAreas);
    };

    [
      uuid(000208B4-0000-0000-C000-000000000046),
      helpcontext(0x00020074)
    ]
    dispinterface PageSetup {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000003f1), propget, helpcontext(0x000103f1)]
            VARIANT_BOOL BlackAndWhite();
            [id(0x000003f1), propput, helpcontext(0x000103f1)]
            void BlackAndWhite([in] VARIANT_BOOL rhs);
            [id(0x000003ea), propget, helpcontext(0x000103ea)]
            double BottomMargin();
            [id(0x000003ea), propput, helpcontext(0x000103ea)]
            void BottomMargin([in] double rhs);
            [id(0x000003f2), propget, helpcontext(0x000103f2)]
            BSTR CenterFooter();
            [id(0x000003f2), propput, helpcontext(0x000103f2)]
            void CenterFooter([in] BSTR rhs);
            [id(0x000003f3), propget, helpcontext(0x000103f3)]
            BSTR CenterHeader();
            [id(0x000003f3), propput, helpcontext(0x000103f3)]
            void CenterHeader([in] BSTR rhs);
            [id(0x000003ed), propget, helpcontext(0x000103ed)]
            VARIANT_BOOL CenterHorizontally();
            [id(0x000003ed), propput, helpcontext(0x000103ed)]
            void CenterHorizontally([in] VARIANT_BOOL rhs);
            [id(0x000003ee), propget, helpcontext(0x000103ee)]
            VARIANT_BOOL CenterVertically();
            [id(0x000003ee), propput, helpcontext(0x000103ee)]
            void CenterVertically([in] VARIANT_BOOL rhs);
            [id(0x000003f4), propget, hidden, helpcontext(0x000103f4)]
            XlObjectSize ChartSize();
            [id(0x000003f4), propput, hidden, helpcontext(0x000103f4)]
            void ChartSize([in] XlObjectSize rhs);
            [id(0x000003fc), propget, helpcontext(0x000103fc)]
            VARIANT_BOOL Draft();
            [id(0x000003fc), propput, helpcontext(0x000103fc)]
            void Draft([in] VARIANT_BOOL rhs);
            [id(0x000003f0), propget, helpcontext(0x000103f0)]
            long FirstPageNumber();
            [id(0x000003f0), propput, helpcontext(0x000103f0)]
            void FirstPageNumber([in] long rhs);
            [id(0x000003f5), propget, helpcontext(0x000103f5)]
            VARIANT FitToPagesTall();
            [id(0x000003f5), propput, helpcontext(0x000103f5)]
            void FitToPagesTall([in] VARIANT rhs);
            [id(0x000003f6), propget, helpcontext(0x000103f6)]
            VARIANT FitToPagesWide();
            [id(0x000003f6), propput, helpcontext(0x000103f6)]
            void FitToPagesWide([in] VARIANT rhs);
            [id(0x000003f7), propget, helpcontext(0x000103f7)]
            double FooterMargin();
            [id(0x000003f7), propput, helpcontext(0x000103f7)]
            void FooterMargin([in] double rhs);
            [id(0x000003f8), propget, helpcontext(0x000103f8)]
            double HeaderMargin();
            [id(0x000003f8), propput, helpcontext(0x000103f8)]
            void HeaderMargin([in] double rhs);
            [id(0x000003f9), propget, helpcontext(0x000103f9)]
            BSTR LeftFooter();
            [id(0x000003f9), propput, helpcontext(0x000103f9)]
            void LeftFooter([in] BSTR rhs);
            [id(0x000003fa), propget, helpcontext(0x000103fa)]
            BSTR LeftHeader();
            [id(0x000003fa), propput, helpcontext(0x000103fa)]
            void LeftHeader([in] BSTR rhs);
            [id(0x000003e7), propget, helpcontext(0x000103e7)]
            double LeftMargin();
            [id(0x000003e7), propput, helpcontext(0x000103e7)]
            void LeftMargin([in] double rhs);
            [id(0x000000c0), propget, helpcontext(0x000100c0)]
            XlOrder Order();
            [id(0x000000c0), propput, helpcontext(0x000100c0)]
            void Order([in] XlOrder rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            XlPageOrientation Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] XlPageOrientation rhs);
            [id(0x000003ef), propget, helpcontext(0x000103ef)]
            XlPaperSize PaperSize();
            [id(0x000003ef), propput, helpcontext(0x000103ef)]
            void PaperSize([in] XlPaperSize rhs);
            [id(0x000003fb), propget, helpcontext(0x000103fb)]
            BSTR PrintArea();
            [id(0x000003fb), propput, helpcontext(0x000103fb)]
            void PrintArea([in] BSTR rhs);
            [id(0x000003ec), propget, helpcontext(0x000103ec)]
            VARIANT_BOOL PrintGridlines();
            [id(0x000003ec), propput, helpcontext(0x000103ec)]
            void PrintGridlines([in] VARIANT_BOOL rhs);
            [id(0x000003eb), propget, helpcontext(0x000103eb)]
            VARIANT_BOOL PrintHeadings();
            [id(0x000003eb), propput, helpcontext(0x000103eb)]
            void PrintHeadings([in] VARIANT_BOOL rhs);
            [id(0x000003fd), propget, helpcontext(0x000103fd)]
            VARIANT_BOOL PrintNotes();
            [id(0x000003fd), propput, helpcontext(0x000103fd)]
            void PrintNotes([in] VARIANT_BOOL rhs);
            [id(0x000003fe), propget, helpcontext(0x000103fe)]
            VARIANT PrintQuality([in, optional] VARIANT Index);
            [id(0x000003fe), propput, helpcontext(0x000103fe)]
            void PrintQuality(
                            [in, optional] VARIANT Index, 
                            [in] VARIANT rhs);
            [id(0x000003ff), propget, helpcontext(0x000103ff)]
            BSTR PrintTitleColumns();
            [id(0x000003ff), propput, helpcontext(0x000103ff)]
            void PrintTitleColumns([in] BSTR rhs);
            [id(0x00000400), propget, helpcontext(0x00010400)]
            BSTR PrintTitleRows();
            [id(0x00000400), propput, helpcontext(0x00010400)]
            void PrintTitleRows([in] BSTR rhs);
            [id(0x00000401), propget, helpcontext(0x00010401)]
            BSTR RightFooter();
            [id(0x00000401), propput, helpcontext(0x00010401)]
            void RightFooter([in] BSTR rhs);
            [id(0x00000402), propget, helpcontext(0x00010402)]
            BSTR RightHeader();
            [id(0x00000402), propput, helpcontext(0x00010402)]
            void RightHeader([in] BSTR rhs);
            [id(0x000003e8), propget, helpcontext(0x000103e8)]
            double RightMargin();
            [id(0x000003e8), propput, helpcontext(0x000103e8)]
            void RightMargin([in] double rhs);
            [id(0x000003e9), propget, helpcontext(0x000103e9)]
            double TopMargin();
            [id(0x000003e9), propput, helpcontext(0x000103e9)]
            void TopMargin([in] double rhs);
            [id(0x00000297), propget, helpcontext(0x00010297)]
            VARIANT Zoom();
            [id(0x00000297), propput, helpcontext(0x00010297)]
            void Zoom([in] VARIANT rhs);
            [id(0x000005f4), propget, helpcontext(0x000105f4)]
            XlPrintLocation PrintComments();
            [id(0x000005f4), propput, helpcontext(0x000105f4)]
            void PrintComments([in] XlPrintLocation rhs);
            [id(0x00000865), propget, helpcontext(0x00010865)]
            XlPrintErrors PrintErrors();
            [id(0x00000865), propput, helpcontext(0x00010865)]
            void PrintErrors([in] XlPrintErrors rhs);
            [id(0x00000866), propget, helpcontext(0x00010866)]
            Graphic* CenterHeaderPicture();
            [id(0x00000867), propget, helpcontext(0x00010867)]
            Graphic* CenterFooterPicture();
            [id(0x00000868), propget, helpcontext(0x00010868)]
            Graphic* LeftHeaderPicture();
            [id(0x00000869), propget, helpcontext(0x00010869)]
            Graphic* LeftFooterPicture();
            [id(0x0000086a), propget, helpcontext(0x0001086a)]
            Graphic* RightHeaderPicture();
            [id(0x0000086b), propget, helpcontext(0x0001086b)]
            Graphic* RightFooterPicture();
            [id(0x00000a28), propget, helpcontext(0x00010a28)]
            VARIANT_BOOL OddAndEvenPagesHeaderFooter();
            [id(0x00000a28), propput, helpcontext(0x00010a28)]
            void OddAndEvenPagesHeaderFooter([in] VARIANT_BOOL rhs);
            [id(0x00000a29), propget, helpcontext(0x00010a29)]
            VARIANT_BOOL DifferentFirstPageHeaderFooter();
            [id(0x00000a29), propput, helpcontext(0x00010a29)]
            void DifferentFirstPageHeaderFooter([in] VARIANT_BOOL rhs);
            [id(0x00000a2a), propget, helpcontext(0x00010a2a)]
            VARIANT_BOOL ScaleWithDocHeaderFooter();
            [id(0x00000a2a), propput, helpcontext(0x00010a2a)]
            void ScaleWithDocHeaderFooter([in] VARIANT_BOOL rhs);
            [id(0x00000a2b), propget, helpcontext(0x00010a2b)]
            VARIANT_BOOL AlignMarginsHeaderFooter();
            [id(0x00000a2b), propput, helpcontext(0x00010a2b)]
            void AlignMarginsHeaderFooter([in] VARIANT_BOOL rhs);
            [id(0x00000a2c), propget, helpcontext(0x00010a2c)]
            Pages* Pages();
            [id(0x00000a2d), propget, helpcontext(0x00010a2d)]
            Page* EvenPage();
            [id(0x00000a2e), propget, helpcontext(0x00010a2e)]
            Page* FirstPage();
    };

    [
      uuid(000208B8-0000-0000-C000-000000000046),
      helpcontext(0x00020078)
    ]
    dispinterface Names {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            Name* Add(
                            [in, optional] VARIANT Name, 
                            [in, optional] VARIANT RefersTo, 
                            [in, optional] VARIANT Visible, 
                            [in, optional] VARIANT MacroType, 
                            [in, optional] VARIANT ShortcutKey, 
                            [in, optional] VARIANT Category, 
                            [in, optional] VARIANT NameLocal, 
                            [in, optional] VARIANT RefersToLocal, 
                            [in, optional] VARIANT CategoryLocal, 
                            [in, optional] VARIANT RefersToR1C1, 
                            [in, optional] VARIANT RefersToR1C1Local);
            [id(0x000000aa), helpcontext(0x000100aa)]
            Name* Item(
                            [in, optional] VARIANT Index, 
                            [in, optional] VARIANT IndexLocal, 
                            [in, optional] VARIANT RefersTo);
            [id(00000000), helpcontext(0x00010000)]
            Name* _Default(
                            [in, optional] VARIANT Index, 
                            [in, optional] VARIANT IndexLocal, 
                            [in, optional] VARIANT RefersTo);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(000208B9-0000-0000-C000-000000000046),
      helpcontext(0x00020079)
    ]
    dispinterface Name {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x000003a6), propget, helpcontext(0x000103a6)]
            BSTR Category();
            [id(0x000003a6), propput, helpcontext(0x000103a6)]
            void Category([in] BSTR rhs);
            [id(0x000003a7), propget, helpcontext(0x000103a7)]
            BSTR CategoryLocal();
            [id(0x000003a7), propput, helpcontext(0x000103a7)]
            void CategoryLocal([in] BSTR rhs);
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x000003a8), propget, helpcontext(0x000103a8)]
            XlXLMMacroType MacroType();
            [id(0x000003a8), propput, helpcontext(0x000103a8)]
            void MacroType([in] XlXLMMacroType rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x000003aa), propget, helpcontext(0x000103aa)]
            VARIANT RefersTo();
            [id(0x000003aa), propput, helpcontext(0x000103aa)]
            void RefersTo([in] VARIANT rhs);
            [id(0x00000255), propget, helpcontext(0x00010255)]
            BSTR ShortcutKey();
            [id(0x00000255), propput, helpcontext(0x00010255)]
            void ShortcutKey([in] BSTR rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            BSTR Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] BSTR rhs);
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x000003a9), propget, helpcontext(0x000103a9)]
            BSTR NameLocal();
            [id(0x000003a9), propput, helpcontext(0x000103a9)]
            void NameLocal([in] BSTR rhs);
            [id(0x000003ab), propget, helpcontext(0x000103ab)]
            VARIANT RefersToLocal();
            [id(0x000003ab), propput, helpcontext(0x000103ab)]
            void RefersToLocal([in] VARIANT rhs);
            [id(0x000003ac), propget, helpcontext(0x000103ac)]
            VARIANT RefersToR1C1();
            [id(0x000003ac), propput, helpcontext(0x000103ac)]
            void RefersToR1C1([in] VARIANT rhs);
            [id(0x000003ad), propget, helpcontext(0x000103ad)]
            VARIANT RefersToR1C1Local();
            [id(0x000003ad), propput, helpcontext(0x000103ad)]
            void RefersToR1C1Local([in] VARIANT rhs);
            [id(0x00000488), propget, helpcontext(0x00010488)]
            Range* RefersToRange();
            [id(0x0000038e), propget, helpcontext(0x0001038e)]
            BSTR Comment();
            [id(0x0000038e), propput, helpcontext(0x0001038e)]
            void Comment([in] BSTR rhs);
            [id(0x00000a2f), propget, helpcontext(0x00010a2f)]
            VARIANT_BOOL WorkbookParameter();
            [id(0x00000a2f), propput, helpcontext(0x00010a2f)]
            void WorkbookParameter([in] VARIANT_BOOL rhs);
            [id(0x00000a30), propget, helpcontext(0x00010a30)]
            VARIANT_BOOL ValidWorkbookParameter();
    };

    [
      uuid(000208CF-0000-0000-C000-000000000046),
      helpcontext(0x0002008e)
    ]
    dispinterface ChartObject {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x0000025a), helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000a31), hidden, helpcontext(0x00010a31)]
            VARIANT _Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, hidden, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, hidden, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x0000026e), propget, helpcontext(0x0001026e)]
            long ZOrder();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x00000130), helpcontext(0x00010130)]
            VARIANT Activate();
            [id(0x00000007), propget, helpcontext(0x00010007)]
            Chart* Chart();
            [id(0x000005f9), propget, helpcontext(0x000105f9)]
            VARIANT_BOOL ProtectChartObject();
            [id(0x000005f9), propput, helpcontext(0x000105f9)]
            void ProtectChartObject([in] VARIANT_BOOL rhs);
            [id(0x0000026b), propget, helpcontext(0x0001026b)]
            VARIANT_BOOL RoundedCorners();
            [id(0x0000026b), propput, helpcontext(0x0001026b)]
            void RoundedCorners([in] VARIANT_BOOL rhs);
            [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
    };

    [
      uuid(000208D0-0000-0000-C000-000000000046),
      helpcontext(0x0002008f)
    ]
    dispinterface ChartObjects {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00010003), restricted, hidden]
            void _Dummy3();
            [id(0x0000025a), hidden, helpcontext(0x0001025a)]
            VARIANT BringToFront();
            [id(0x00000a31), hidden, helpcontext(0x00010a31)]
            VARIANT _Copy();
            [id(0x000000d5), helpcontext(0x000100d5)]
            VARIANT CopyPicture(
                            [in, optional, defaultvalue(2)] XlPictureAppearance Appearance, 
                            [in, optional, defaultvalue(-4147)] XlCopyPictureFormat Format);
            [id(0x00000235), helpcontext(0x00010235)]
            VARIANT Cut();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            IDispatch* Duplicate();
            [id(0x00000258), propget, hidden, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, hidden, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x0001000c), restricted, hidden]
            void _Dummy12();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0001000f), restricted, hidden]
            void _Dummy15();
            [id(0x00000254), propget, hidden, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, hidden, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x00000269), propget, helpcontext(0x00010269)]
            VARIANT Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] VARIANT rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select([in, optional] VARIANT Replace);
            [id(0x0000025d), hidden, helpcontext(0x0001025d)]
            VARIANT SendToBack();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00010016), restricted, hidden]
            void _Dummy22();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x00010019), restricted, hidden]
            void _Dummy25();
            [id(0x000005f8), propget, helpcontext(0x000105f8)]
            ShapeRange* ShapeRange();
            [id(0x0001001b), restricted, hidden]
            void _Dummy27();
            [id(0x0001001c), restricted, hidden]
            void _Dummy28();
            [id(0x000005f9), propget, helpcontext(0x000105f9)]
            VARIANT_BOOL ProtectChartObject();
            [id(0x000005f9), propput, helpcontext(0x000105f9)]
            void ProtectChartObject([in] VARIANT_BOOL rhs);
            [id(0x0000026b), propget, hidden, helpcontext(0x0001026b)]
            VARIANT_BOOL RoundedCorners();
            [id(0x0000026b), propput, hidden, helpcontext(0x0001026b)]
            void RoundedCorners([in] VARIANT_BOOL rhs);
            [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00000067), propget, hidden, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, hidden, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x000000b5), helpcontext(0x000100b5)]
            ChartObject* Add(
                            [in] double Left, 
                            [in] double Top, 
                            [in] double Width, 
                            [in] double Height);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000002e), hidden, helpcontext(0x0001002e)]
            GroupObject* Group();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(00000000), helpcontext(0x00010000)]
            IDispatch* _Default([in] VARIANT Index);
    };

    [
      uuid(000208D1-0000-0000-C000-000000000046),
      helpcontext(0x00020090)
    ]
    dispinterface Mailer {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000003d7), propget, helpcontext(0x000103d7)]
            VARIANT BCCRecipients();
            [id(0x000003d7), propput, helpcontext(0x000103d7)]
            void BCCRecipients([in] VARIANT rhs);
            [id(0x000003d6), propget, helpcontext(0x000103d6)]
            VARIANT CCRecipients();
            [id(0x000003d6), propput, helpcontext(0x000103d6)]
            void CCRecipients([in] VARIANT rhs);
            [id(0x000003d8), propget, helpcontext(0x000103d8)]
            VARIANT Enclosures();
            [id(0x000003d8), propput, helpcontext(0x000103d8)]
            void Enclosures([in] VARIANT rhs);
            [id(0x000003da), propget, helpcontext(0x000103da)]
            VARIANT_BOOL Received();
            [id(0x000003db), propget, helpcontext(0x000103db)]
            DATE SendDateTime();
            [id(0x000003dc), propget, helpcontext(0x000103dc)]
            BSTR Sender();
            [id(0x000003b9), propget, helpcontext(0x000103b9)]
            BSTR Subject();
            [id(0x000003b9), propput, helpcontext(0x000103b9)]
            void Subject([in] BSTR rhs);
            [id(0x000003d5), propget, helpcontext(0x000103d5)]
            VARIANT ToRecipients();
            [id(0x000003d5), propput, helpcontext(0x000103d5)]
            void ToRecipients([in] VARIANT rhs);
            [id(0x000003ce), propget, helpcontext(0x000103ce)]
            VARIANT WhichAddress();
            [id(0x000003ce), propput, helpcontext(0x000103ce)]
            void WhichAddress([in] VARIANT rhs);
    };

    [
      uuid(00024422-0000-0000-C000-000000000046),
      helpcontext(0x000200b8)
    ]
    dispinterface CustomViews {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            CustomView* Item([in] VARIANT ViewName);
            [id(0x000000b5), helpcontext(0x000100b5)]
            CustomView* Add(
                            [in] BSTR ViewName, 
                            [in, optional] VARIANT PrintSettings, 
                            [in, optional] VARIANT RowColSettings);
            [id(00000000), propget, helpcontext(0x00010000)]
            CustomView* _Default([in] VARIANT ViewName);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00024423-0000-0000-C000-000000000046),
      helpcontext(0x000200b9)
    ]
    dispinterface CustomView {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x00000629), propget, helpcontext(0x00010629)]
            VARIANT_BOOL PrintSettings();
            [id(0x0000062a), propget, helpcontext(0x0001062a)]
            VARIANT_BOOL RowColSettings();
            [id(0x000001f0), helpcontext(0x000101f0)]
            void Show();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
    };

    [
      uuid(00024424-0000-0000-C000-000000000046),
      helpcontext(0x000200ba)
    ]
    dispinterface FormatConditions {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(0x000000b5), helpcontext(0x000100b5)]
            IDispatch* Add(
                            [in] XlFormatConditionType Type, 
                            [in, optional] VARIANT Operator, 
                            [in, optional] VARIANT Formula1, 
                            [in, optional] VARIANT Formula2, 
                            [in, optional] VARIANT String, 
                            [in, optional] VARIANT TextOperator, 
                            [in, optional] VARIANT DateOperator, 
                            [in, optional] VARIANT ScopeType);
            [id(00000000), propget, helpcontext(0x00010000)]
            IDispatch* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000a38), helpcontext(0x00010a38)]
            IDispatch* AddColorScale([in] long ColorScaleType);
            [id(0x00000a3a), helpcontext(0x00010a3a)]
            IDispatch* AddDatabar();
            [id(0x00000a3b), helpcontext(0x00010a3b)]
            IDispatch* AddIconSetCondition();
            [id(0x00000a3c), helpcontext(0x00010a3c)]
            IDispatch* AddTop10();
            [id(0x00000a3d), helpcontext(0x00010a3d)]
            IDispatch* AddAboveAverage();
            [id(0x00000a3e), helpcontext(0x00010a3e)]
            IDispatch* AddUniqueValues();
    };

    [
      uuid(00024425-0000-0000-C000-000000000046),
      helpcontext(0x000200bb)
    ]
    dispinterface FormatCondition {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000a3f), hidden, helpcontext(0x00010a3f),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, Modify)]
            void _Modify(
                            [in] XlFormatConditionType Type, 
                            [in, optional] VARIANT Operator, 
                            [in, optional] VARIANT Formula1, 
                            [in, optional] VARIANT Formula2);
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            long Type();
            [id(0x0000031d), propget, helpcontext(0x0001031d)]
            long Operator();
            [id(0x0000062b), propget, helpcontext(0x0001062b)]
            BSTR Formula1();
            [id(0x0000062c), propget, helpcontext(0x0001062c)]
            BSTR Formula2();
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x000001b3), propget, helpcontext(0x000101b3)]
            Borders* Borders();
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x0000062d), helpcontext(0x0001062d),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, ModifyEx)]
            void Modify(
                            [in] XlFormatConditionType Type, 
                            [in, optional] VARIANT Operator, 
                            [in, optional] VARIANT Formula1, 
                            [in, optional] VARIANT Formula2, 
                            [in, optional] VARIANT String, 
                            [in, optional] VARIANT Operator2);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x00000a35), propget, helpcontext(0x00010a35)]
            XlContainsOperator TextOperator();
            [id(0x00000a35), propput, helpcontext(0x00010a35)]
            void TextOperator([in] XlContainsOperator rhs);
            [id(0x00000a36), propget, helpcontext(0x00010a36)]
            XlTimePeriods DateOperator();
            [id(0x00000a36), propput, helpcontext(0x00010a36)]
            void DateOperator([in] XlTimePeriods rhs);
            [id(0x000000c1), propget, helpcontext(0x000100c1)]
            VARIANT NumberFormat();
            [id(0x000000c1), propput, helpcontext(0x000100c1)]
            void NumberFormat([in] VARIANT rhs);
            [id(0x000003d9), propget, helpcontext(0x000103d9)]
            long Priority();
            [id(0x000003d9), propput, helpcontext(0x000103d9)]
            void Priority([in] long rhs);
            [id(0x00000a41), propget, helpcontext(0x00010a41)]
            VARIANT_BOOL StopIfTrue();
            [id(0x00000a41), propput, helpcontext(0x00010a41)]
            void StopIfTrue([in] VARIANT_BOOL rhs);
            [id(0x00000a42), propget, helpcontext(0x00010a42)]
            Range* AppliesTo();
            [id(0x00000a43), helpcontext(0x00010a43)]
            void ModifyAppliesToRange([in] Range* Range);
            [id(0x00000a45), helpcontext(0x00010a45)]
            void SetFirstPriority();
            [id(0x00000a46), helpcontext(0x00010a46)]
            void SetLastPriority();
            [id(0x00000a47), propget, helpcontext(0x00010a47)]
            VARIANT_BOOL PTCondition();
            [id(0x00000a37), propget, helpcontext(0x00010a37)]
            XlPivotConditionScope ScopeType();
            [id(0x00000a37), propput, helpcontext(0x00010a37)]
            void ScopeType([in] XlPivotConditionScope rhs);
    };

    [
      uuid(00024426-0000-0000-C000-000000000046),
      helpcontext(0x000200bc)
    ]
    dispinterface Comments {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            Comment* Item([in] long Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            Comment* _Default([in] long Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00024427-0000-0000-C000-000000000046),
      helpcontext(0x000200bd)
    ]
    dispinterface Comment {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000023e), propget, helpcontext(0x0001023e)]
            BSTR Author();
            [id(0x0000062e), propget, helpcontext(0x0001062e)]
            Shape* Shape();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000008a), helpcontext(0x0001008a)]
            BSTR Text(
                            [in, optional] VARIANT Text, 
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Overwrite);
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x000001f6), helpcontext(0x000101f6)]
            Comment* Next();
            [id(0x000001f7), helpcontext(0x000101f7)]
            Comment* Previous();
    };

    [
      uuid(0002441B-0000-0000-C000-000000000046),
      helpcontext(0x000200b1),
      hidden
    ]
    dispinterface RefreshEvents {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x0000063c), helpcontext(0x0001063c)]
            void BeforeRefresh([in, out] VARIANT_BOOL* Cancel);
            [id(0x0000063d), helpcontext(0x0001063d)]
            void AfterRefresh([in] VARIANT_BOOL Success);
    };

    [
      uuid(00024428-0000-0000-C000-000000000046),
      helpcontext(0x000200be)
    ]
    dispinterface _QueryTable {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000630), propget, helpcontext(0x00010630)]
            VARIANT_BOOL FieldNames();
            [id(0x00000630), propput, helpcontext(0x00010630)]
            void FieldNames([in] VARIANT_BOOL rhs);
            [id(0x00000631), propget, helpcontext(0x00010631)]
            VARIANT_BOOL RowNumbers();
            [id(0x00000631), propput, helpcontext(0x00010631)]
            void RowNumbers([in] VARIANT_BOOL rhs);
            [id(0x00000632), propget, helpcontext(0x00010632)]
            VARIANT_BOOL FillAdjacentFormulas();
            [id(0x00000632), propput, helpcontext(0x00010632)]
            void FillAdjacentFormulas([in] VARIANT_BOOL rhs);
            [id(0x000002b7), propget, hidden, helpcontext(0x000102b7)]
            VARIANT_BOOL HasAutoFormat();
            [id(0x000002b7), propput, hidden, helpcontext(0x000102b7)]
            void HasAutoFormat([in] VARIANT_BOOL rhs);
            [id(0x000005c7), propget, helpcontext(0x000105c7)]
            VARIANT_BOOL RefreshOnFileOpen();
            [id(0x000005c7), propput, helpcontext(0x000105c7)]
            void RefreshOnFileOpen([in] VARIANT_BOOL rhs);
            [id(0x00000633), propget, helpcontext(0x00010633)]
            VARIANT_BOOL Refreshing();
            [id(0x00000634), propget, helpcontext(0x00010634)]
            VARIANT_BOOL FetchedRowOverflow();
            [id(0x00000593), propget, helpcontext(0x00010593)]
            VARIANT_BOOL BackgroundQuery();
            [id(0x00000593), propput, helpcontext(0x00010593)]
            void BackgroundQuery([in] VARIANT_BOOL rhs);
            [id(0x00000635), helpcontext(0x00010635)]
            void CancelRefresh();
            [id(0x00000636), propget, helpcontext(0x00010636)]
            XlCellInsertionMode RefreshStyle();
            [id(0x00000636), propput, helpcontext(0x00010636)]
            void RefreshStyle([in] XlCellInsertionMode rhs);
            [id(0x000005c5), propget, helpcontext(0x000105c5)]
            VARIANT_BOOL EnableRefresh();
            [id(0x000005c5), propput, helpcontext(0x000105c5)]
            void EnableRefresh([in] VARIANT_BOOL rhs);
            [id(0x000005c9), propget, helpcontext(0x000105c9)]
            VARIANT_BOOL SavePassword();
            [id(0x000005c9), propput, helpcontext(0x000105c9)]
            void SavePassword([in] VARIANT_BOOL rhs);
            [id(0x000002a9), propget, helpcontext(0x000102a9)]
            Range* Destination();
            [id(0x00000598), propget, helpcontext(0x00010598)]
            VARIANT Connection();
            [id(0x00000598), propput, helpcontext(0x00010598)]
            void Connection([in] VARIANT rhs);
            [id(0x000005c8), propget, hidden, helpcontext(0x000105c8)]
            VARIANT Sql();
            [id(0x000005c8), propput, hidden, helpcontext(0x000105c8)]
            void Sql([in] VARIANT rhs);
            [id(0x00000637), propget, helpcontext(0x00010637)]
            BSTR PostText();
            [id(0x00000637), propput, helpcontext(0x00010637)]
            void PostText([in] BSTR rhs);
            [id(0x00000638), propget, helpcontext(0x00010638)]
            Range* ResultRange();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000589), helpcontext(0x00010589)]
            VARIANT_BOOL Refresh([in, optional] VARIANT BackgroundQuery);
            [id(0x00000639), propget, helpcontext(0x00010639)]
            Parameters* Parameters();
            [id(0x0000048d), propget, helpcontext(0x0001048d)]
            IDispatch* Recordset();
            [id(0x0000048d), propputref, helpcontext(0x0001048d)]
            void Recordset([in] IDispatch* rhs);
            [id(0x000002b4), propget, helpcontext(0x000102b4)]
            VARIANT_BOOL SaveData();
            [id(0x000002b4), propput, helpcontext(0x000102b4)]
            void SaveData([in] VARIANT_BOOL rhs);
            [id(0x0000063a), propget, hidden, helpcontext(0x0001063a)]
            VARIANT_BOOL TablesOnlyFromHTML();
            [id(0x0000063a), propput, hidden, helpcontext(0x0001063a)]
            void TablesOnlyFromHTML([in] VARIANT_BOOL rhs);
            [id(0x0000063b), propget, helpcontext(0x0001063b)]
            VARIANT_BOOL EnableEditing();
            [id(0x0000063b), propput, helpcontext(0x0001063b)]
            void EnableEditing([in] VARIANT_BOOL rhs);
            [id(0x0000073f), propget, helpcontext(0x0001073f)]
            long TextFilePlatform();
            [id(0x0000073f), propput, helpcontext(0x0001073f)]
            void TextFilePlatform([in] long rhs);
            [id(0x00000740), propget, helpcontext(0x00010740)]
            long TextFileStartRow();
            [id(0x00000740), propput, helpcontext(0x00010740)]
            void TextFileStartRow([in] long rhs);
            [id(0x00000741), propget, helpcontext(0x00010741)]
            XlTextParsingType TextFileParseType();
            [id(0x00000741), propput, helpcontext(0x00010741)]
            void TextFileParseType([in] XlTextParsingType rhs);
            [id(0x00000742), propget, helpcontext(0x00010742)]
            XlTextQualifier TextFileTextQualifier();
            [id(0x00000742), propput, helpcontext(0x00010742)]
            void TextFileTextQualifier([in] XlTextQualifier rhs);
            [id(0x00000743), propget, helpcontext(0x00010743)]
            VARIANT_BOOL TextFileConsecutiveDelimiter();
            [id(0x00000743), propput, helpcontext(0x00010743)]
            void TextFileConsecutiveDelimiter([in] VARIANT_BOOL rhs);
            [id(0x00000744), propget, helpcontext(0x00010744)]
            VARIANT_BOOL TextFileTabDelimiter();
            [id(0x00000744), propput, helpcontext(0x00010744)]
            void TextFileTabDelimiter([in] VARIANT_BOOL rhs);
            [id(0x00000745), propget, helpcontext(0x00010745)]
            VARIANT_BOOL TextFileSemicolonDelimiter();
            [id(0x00000745), propput, helpcontext(0x00010745)]
            void TextFileSemicolonDelimiter([in] VARIANT_BOOL rhs);
            [id(0x00000746), propget, helpcontext(0x00010746)]
            VARIANT_BOOL TextFileCommaDelimiter();
            [id(0x00000746), propput, helpcontext(0x00010746)]
            void TextFileCommaDelimiter([in] VARIANT_BOOL rhs);
            [id(0x00000747), propget, helpcontext(0x00010747)]
            VARIANT_BOOL TextFileSpaceDelimiter();
            [id(0x00000747), propput, helpcontext(0x00010747)]
            void TextFileSpaceDelimiter([in] VARIANT_BOOL rhs);
            [id(0x00000748), propget, helpcontext(0x00010748)]
            BSTR TextFileOtherDelimiter();
            [id(0x00000748), propput, helpcontext(0x00010748)]
            void TextFileOtherDelimiter([in] BSTR rhs);
            [id(0x00000749), propget, helpcontext(0x00010749)]
            VARIANT TextFileColumnDataTypes();
            [id(0x00000749), propput, helpcontext(0x00010749)]
            void TextFileColumnDataTypes([in] VARIANT rhs);
            [id(0x0000074a), propget, helpcontext(0x0001074a)]
            VARIANT TextFileFixedColumnWidths();
            [id(0x0000074a), propput, helpcontext(0x0001074a)]
            void TextFileFixedColumnWidths([in] VARIANT rhs);
            [id(0x0000074b), propget, helpcontext(0x0001074b)]
            VARIANT_BOOL PreserveColumnInfo();
            [id(0x0000074b), propput, helpcontext(0x0001074b)]
            void PreserveColumnInfo([in] VARIANT_BOOL rhs);
            [id(0x000005dc), propget, helpcontext(0x000105dc)]
            VARIANT_BOOL PreserveFormatting();
            [id(0x000005dc), propput, helpcontext(0x000105dc)]
            void PreserveFormatting([in] VARIANT_BOOL rhs);
            [id(0x0000074c), propget, helpcontext(0x0001074c)]
            VARIANT_BOOL AdjustColumnWidth();
            [id(0x0000074c), propput, helpcontext(0x0001074c)]
            void AdjustColumnWidth([in] VARIANT_BOOL rhs);
            [id(0x00000725), propget, helpcontext(0x00010725)]
            VARIANT CommandText();
            [id(0x00000725), propput, helpcontext(0x00010725)]
            void CommandText([in] VARIANT rhs);
            [id(0x00000726), propget, helpcontext(0x00010726)]
            XlCmdType CommandType();
            [id(0x00000726), propput, helpcontext(0x00010726)]
            void CommandType([in] XlCmdType rhs);
            [id(0x0000074d), propget, helpcontext(0x0001074d)]
            VARIANT_BOOL TextFilePromptOnRefresh();
            [id(0x0000074d), propput, helpcontext(0x0001074d)]
            void TextFilePromptOnRefresh([in] VARIANT_BOOL rhs);
            [id(0x00000727), propget, helpcontext(0x00010727)]
            XlQueryType QueryType();
            [id(0x00000728), propget, helpcontext(0x00010728)]
            VARIANT_BOOL MaintainConnection();
            [id(0x00000728), propput, helpcontext(0x00010728)]
            void MaintainConnection([in] VARIANT_BOOL rhs);
            [id(0x0000074e), propget, helpcontext(0x0001074e)]
            BSTR TextFileDecimalSeparator();
            [id(0x0000074e), propput, helpcontext(0x0001074e)]
            void TextFileDecimalSeparator([in] BSTR rhs);
            [id(0x0000074f), propget, helpcontext(0x0001074f)]
            BSTR TextFileThousandsSeparator();
            [id(0x0000074f), propput, helpcontext(0x0001074f)]
            void TextFileThousandsSeparator([in] BSTR rhs);
            [id(0x00000729), propget, helpcontext(0x00010729)]
            long RefreshPeriod();
            [id(0x00000729), propput, helpcontext(0x00010729)]
            void RefreshPeriod([in] long rhs);
            [id(0x0000072a), helpcontext(0x0001072a)]
            void ResetTimer();
            [id(0x00000750), propget, helpcontext(0x00010750)]
            XlWebSelectionType WebSelectionType();
            [id(0x00000750), propput, helpcontext(0x00010750)]
            void WebSelectionType([in] XlWebSelectionType rhs);
            [id(0x00000751), propget, helpcontext(0x00010751)]
            XlWebFormatting WebFormatting();
            [id(0x00000751), propput, helpcontext(0x00010751)]
            void WebFormatting([in] XlWebFormatting rhs);
            [id(0x00000752), propget, helpcontext(0x00010752)]
            BSTR WebTables();
            [id(0x00000752), propput, helpcontext(0x00010752)]
            void WebTables([in] BSTR rhs);
            [id(0x00000753), propget, helpcontext(0x00010753)]
            VARIANT_BOOL WebPreFormattedTextToColumns();
            [id(0x00000753), propput, helpcontext(0x00010753)]
            void WebPreFormattedTextToColumns([in] VARIANT_BOOL rhs);
            [id(0x00000754), propget, helpcontext(0x00010754)]
            VARIANT_BOOL WebSingleBlockTextImport();
            [id(0x00000754), propput, helpcontext(0x00010754)]
            void WebSingleBlockTextImport([in] VARIANT_BOOL rhs);
            [id(0x00000755), propget, helpcontext(0x00010755)]
            VARIANT_BOOL WebDisableDateRecognition();
            [id(0x00000755), propput, helpcontext(0x00010755)]
            void WebDisableDateRecognition([in] VARIANT_BOOL rhs);
            [id(0x00000756), propget, helpcontext(0x00010756)]
            VARIANT_BOOL WebConsecutiveDelimitersAsOne();
            [id(0x00000756), propput, helpcontext(0x00010756)]
            void WebConsecutiveDelimitersAsOne([in] VARIANT_BOOL rhs);
            [id(0x00000872), propget, helpcontext(0x00010872)]
            VARIANT_BOOL WebDisableRedirections();
            [id(0x00000872), propput, helpcontext(0x00010872)]
            void WebDisableRedirections([in] VARIANT_BOOL rhs);
            [id(0x00000873), propget, helpcontext(0x00010873)]
            VARIANT EditWebPage();
            [id(0x00000873), propput, helpcontext(0x00010873)]
            void EditWebPage([in] VARIANT rhs);
            [id(0x0000081f), propget, helpcontext(0x0001081f)]
            BSTR SourceConnectionFile();
            [id(0x0000081f), propput, helpcontext(0x0001081f)]
            void SourceConnectionFile([in] BSTR rhs);
            [id(0x00000820), propget, helpcontext(0x00010820)]
            BSTR SourceDataFile();
            [id(0x00000820), propput, helpcontext(0x00010820)]
            void SourceDataFile([in] BSTR rhs);
            [id(0x00000821), propget, helpcontext(0x00010821)]
            XlRobustConnect RobustConnect();
            [id(0x00000821), propput, helpcontext(0x00010821)]
            void RobustConnect([in] XlRobustConnect rhs);
            [id(0x00000874), propget, helpcontext(0x00010874)]
            VARIANT_BOOL TextFileTrailingMinusNumbers();
            [id(0x00000874), propput, helpcontext(0x00010874)]
            void TextFileTrailingMinusNumbers([in] VARIANT_BOOL rhs);
            [id(0x00000822), helpcontext(0x00010822)]
            void SaveAsODC(
                            [in] BSTR ODCFileName, 
                            [in, optional] VARIANT Description, 
                            [in, optional] VARIANT Keywords);
            [id(0x000008d1), propget, helpcontext(0x000108d1)]
            ListObject* ListObject();
            [id(0x000008c5), propget, helpcontext(0x000108c5)]
            XlTextVisualLayoutType TextFileVisualLayout();
            [id(0x000008c5), propput, helpcontext(0x000108c5)]
            void TextFileVisualLayout([in] XlTextVisualLayoutType rhs);
            [id(0x000009f0), propget, helpcontext(0x000109f0)]
            WorkbookConnection* WorkbookConnection();
            [id(0x00000370), propget, helpcontext(0x00010370)]
            Sort* Sort();
    };

    [
      uuid(00024429-0000-0000-C000-000000000046),
      helpcontext(0x000200bf)
    ]
    dispinterface QueryTables {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000b5), helpcontext(0x000100b5)]
            QueryTable* Add(
                            [in] VARIANT Connection, 
                            [in] Range* Destination, 
                            [in, optional] VARIANT Sql);
            [id(0x000000aa), helpcontext(0x000100aa)]
            QueryTable* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            QueryTable* _Default([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002442A-0000-0000-C000-000000000046),
      helpcontext(0x000200c0)
    ]
    dispinterface Parameter {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000002d2), propget, helpcontext(0x000102d2)]
            XlParameterDataType DataType();
            [id(0x000002d2), propput, helpcontext(0x000102d2)]
            void DataType([in] XlParameterDataType rhs);
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            XlParameterType Type();
            [id(0x0000063f), propget, helpcontext(0x0001063f)]
            BSTR PromptString();
            [id(0x00000006), propget, helpcontext(0x00010006)]
            VARIANT Value();
            [id(0x00000640), propget, helpcontext(0x00010640)]
            Range* SourceRange();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000641), helpcontext(0x00010641)]
            void SetParam(
                            [in] XlParameterType Type, 
                            [in] VARIANT Value);
            [id(0x00000757), propget, helpcontext(0x00010757)]
            VARIANT_BOOL RefreshOnChange();
            [id(0x00000757), propput, helpcontext(0x00010757)]
            void RefreshOnChange([in] VARIANT_BOOL rhs);
    };

    [
      uuid(0002442B-0000-0000-C000-000000000046),
      helpcontext(0x000200c1)
    ]
    dispinterface Parameters {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            Parameter* Add(
                            [in] BSTR Name, 
                            [in, optional] VARIANT iDataType);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            Parameter* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            Parameter* _Default([in] VARIANT Index);
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002442C-0000-0000-C000-000000000046),
      helpcontext(0x000200c2)
    ]
    dispinterface ODBCError {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000643), propget, helpcontext(0x00010643)]
            BSTR SqlState();
            [id(0x000005d2), propget, helpcontext(0x000105d2)]
            BSTR ErrorString();
    };

    [
      uuid(0002442D-0000-0000-C000-000000000046),
      helpcontext(0x000200c3)
    ]
    dispinterface ODBCErrors {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            ODBCError* Item([in] long Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            ODBCError* _Default([in] long Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002442F-0000-0000-C000-000000000046),
      helpcontext(0x000200c5)
    ]
    dispinterface Validation {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            void Add(
                            [in] XlDVType Type, 
                            [in, optional] VARIANT AlertStyle, 
                            [in, optional] VARIANT Operator, 
                            [in, optional] VARIANT Formula1, 
                            [in, optional] VARIANT Formula2);
            [id(0x00000645), propget, helpcontext(0x00010645)]
            long AlertStyle();
            [id(0x00000646), propget, helpcontext(0x00010646)]
            VARIANT_BOOL IgnoreBlank();
            [id(0x00000646), propput, helpcontext(0x00010646)]
            void IgnoreBlank([in] VARIANT_BOOL rhs);
            [id(0x00000647), propget, helpcontext(0x00010647)]
            long IMEMode();
            [id(0x00000647), propput, helpcontext(0x00010647)]
            void IMEMode([in] long rhs);
            [id(0x00000648), propget, helpcontext(0x00010648)]
            VARIANT_BOOL InCellDropdown();
            [id(0x00000648), propput, helpcontext(0x00010648)]
            void InCellDropdown([in] VARIANT_BOOL rhs);
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000649), propget, helpcontext(0x00010649)]
            BSTR ErrorMessage();
            [id(0x00000649), propput, helpcontext(0x00010649)]
            void ErrorMessage([in] BSTR rhs);
            [id(0x0000064a), propget, helpcontext(0x0001064a)]
            BSTR ErrorTitle();
            [id(0x0000064a), propput, helpcontext(0x0001064a)]
            void ErrorTitle([in] BSTR rhs);
            [id(0x0000064b), propget, helpcontext(0x0001064b)]
            BSTR InputMessage();
            [id(0x0000064b), propput, helpcontext(0x0001064b)]
            void InputMessage([in] BSTR rhs);
            [id(0x0000064c), propget, helpcontext(0x0001064c)]
            BSTR InputTitle();
            [id(0x0000064c), propput, helpcontext(0x0001064c)]
            void InputTitle([in] BSTR rhs);
            [id(0x0000062b), propget, helpcontext(0x0001062b)]
            BSTR Formula1();
            [id(0x0000062c), propget, helpcontext(0x0001062c)]
            BSTR Formula2();
            [id(0x0000062d), helpcontext(0x0001062d)]
            void Modify(
                            [in, optional] VARIANT Type, 
                            [in, optional] VARIANT AlertStyle, 
                            [in, optional] VARIANT Operator, 
                            [in, optional] VARIANT Formula1, 
                            [in, optional] VARIANT Formula2);
            [id(0x0000031d), propget, helpcontext(0x0001031d)]
            long Operator();
            [id(0x0000064d), propget, helpcontext(0x0001064d)]
            VARIANT_BOOL ShowError();
            [id(0x0000064d), propput, helpcontext(0x0001064d)]
            void ShowError([in] VARIANT_BOOL rhs);
            [id(0x0000064e), propget, helpcontext(0x0001064e)]
            VARIANT_BOOL ShowInput();
            [id(0x0000064e), propput, helpcontext(0x0001064e)]
            void ShowInput([in] VARIANT_BOOL rhs);
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            long Type();
            [id(0x00000006), propget, helpcontext(0x00010006)]
            VARIANT_BOOL Value();
    };

    [
      uuid(00024430-0000-0000-C000-000000000046),
      helpcontext(0x000200c6)
    ]
    dispinterface Hyperlinks {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            IDispatch* Add(
                            [in] IDispatch* Anchor, 
                            [in] BSTR Address, 
                            [in, optional] VARIANT SubAddress, 
                            [in, optional] VARIANT ScreenTip, 
                            [in, optional] VARIANT TextToDisplay);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            Hyperlink* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            Hyperlink* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
    };

    [
      uuid(00024431-0000-0000-C000-000000000046),
      helpcontext(0x000200c7)
    ]
    dispinterface Hyperlink {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000c5), propget, helpcontext(0x000100c5)]
            Range* Range();
            [id(0x0000062e), propget, helpcontext(0x0001062e)]
            Shape* Shape();
            [id(0x000005bf), propget, helpcontext(0x000105bf)]
            BSTR SubAddress();
            [id(0x000005bf), propput, helpcontext(0x000105bf)]
            void SubAddress([in] BSTR rhs);
            [id(0x000000ec), propget, helpcontext(0x000100ec)]
            BSTR Address();
            [id(0x000000ec), propput, helpcontext(0x000100ec)]
            void Address([in] BSTR rhs);
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            long Type();
            [id(0x000005c4), helpcontext(0x000105c4)]
            void AddToFavorites();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000650), helpcontext(0x00010650)]
            void Follow(
                            [in, optional] VARIANT NewWindow, 
                            [in, optional] VARIANT AddHistory, 
                            [in, optional] VARIANT ExtraInfo, 
                            [in, optional] VARIANT Method, 
                            [in, optional] VARIANT HeaderInfo);
            [id(0x0000075b), propget, helpcontext(0x0001075b)]
            BSTR EmailSubject();
            [id(0x0000075b), propput, helpcontext(0x0001075b)]
            void EmailSubject([in] BSTR rhs);
            [id(0x00000759), propget, helpcontext(0x00010759)]
            BSTR ScreenTip();
            [id(0x00000759), propput, helpcontext(0x00010759)]
            void ScreenTip([in] BSTR rhs);
            [id(0x0000075a), propget, helpcontext(0x0001075a)]
            BSTR TextToDisplay();
            [id(0x0000075a), propput, helpcontext(0x0001075a)]
            void TextToDisplay([in] BSTR rhs);
            [id(0x0000075c), helpcontext(0x0001075c)]
            void CreateNewDocument(
                            [in] BSTR Filename, 
                            [in] VARIANT_BOOL EditNow, 
                            [in] VARIANT_BOOL Overwrite);
    };

    [
      uuid(00024432-0000-0000-C000-000000000046),
      helpcontext(0x000200c8)
    ]
    dispinterface AutoFilter {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000c5), propget, helpcontext(0x000100c5)]
            Range* Range();
            [id(0x00000651), propget, helpcontext(0x00010651)]
            Filters* Filters();
            [id(0x00000320), propget, helpcontext(0x00010320)]
            VARIANT_BOOL FilterMode();
            [id(0x00000370), propget, helpcontext(0x00010370)]
            Sort* Sort();
            [id(0x00000a50), helpcontext(0x00010a50)]
            void ApplyFilter();
            [id(0x0000031a), helpcontext(0x0001031a)]
            void ShowAllData();
    };

    [
      uuid(00024433-0000-0000-C000-000000000046),
      helpcontext(0x000200c9)
    ]
    dispinterface Filters {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(00000000), propget, helpcontext(0x00010000)]
            Filter* _Default([in] long Index);
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            Filter* Item([in] long Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00024434-0000-0000-C000-000000000046),
      helpcontext(0x000200ca)
    ]
    dispinterface Filter {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000652), propget, helpcontext(0x00010652)]
            VARIANT_BOOL On();
            [id(0x0000031c), propget, helpcontext(0x0001031c)]
            VARIANT Criteria1();
            [id(0x00000a51), propget, hidden, helpcontext(0x00010a51)]
            XlAutoFilterOperator _Operator();
            [id(0x0000031e), propget, helpcontext(0x0001031e)]
            VARIANT Criteria2();
            [id(0x0000031d), propget, helpcontext(0x0001031d)]
            XlAutoFilterOperator Operator();
            [id(0x0000031d), propput, helpcontext(0x0001031d)]
            void Operator([in] XlAutoFilterOperator rhs);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
    };

    [
      uuid(000208D4-0000-0000-C000-000000000046),
      helpcontext(0x00020093)
    ]
    dispinterface AutoCorrect {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000047a), helpcontext(0x0001047a)]
            VARIANT AddReplacement(
                            [in] BSTR What, 
                            [in] BSTR Replacement);
            [id(0x0000047e), propget, helpcontext(0x0001047e)]
            VARIANT_BOOL CapitalizeNamesOfDays();
            [id(0x0000047e), propput, helpcontext(0x0001047e)]
            void CapitalizeNamesOfDays([in] VARIANT_BOOL rhs);
            [id(0x0000047b), helpcontext(0x0001047b)]
            VARIANT DeleteReplacement([in] BSTR What);
            [id(0x0000047f), propget, helpcontext(0x0001047f)]
            VARIANT ReplacementList([in, optional] VARIANT Index);
            [id(0x0000047f), propput, helpcontext(0x0001047f)]
            void ReplacementList(
                            [in, optional] VARIANT Index, 
                            [in] VARIANT rhs);
            [id(0x0000047c), propget, helpcontext(0x0001047c)]
            VARIANT_BOOL ReplaceText();
            [id(0x0000047c), propput, helpcontext(0x0001047c)]
            void ReplaceText([in] VARIANT_BOOL rhs);
            [id(0x0000047d), propget, helpcontext(0x0001047d)]
            VARIANT_BOOL TwoInitialCapitals();
            [id(0x0000047d), propput, helpcontext(0x0001047d)]
            void TwoInitialCapitals([in] VARIANT_BOOL rhs);
            [id(0x00000653), propget, helpcontext(0x00010653)]
            VARIANT_BOOL CorrectSentenceCap();
            [id(0x00000653), propput, helpcontext(0x00010653)]
            void CorrectSentenceCap([in] VARIANT_BOOL rhs);
            [id(0x00000654), propget, helpcontext(0x00010654)]
            VARIANT_BOOL CorrectCapsLock();
            [id(0x00000654), propput, helpcontext(0x00010654)]
            void CorrectCapsLock([in] VARIANT_BOOL rhs);
            [id(0x00000786), propget, helpcontext(0x00010786)]
            VARIANT_BOOL DisplayAutoCorrectOptions();
            [id(0x00000786), propput, helpcontext(0x00010786)]
            void DisplayAutoCorrectOptions([in] VARIANT_BOOL rhs);
            [id(0x000008f6), propget, helpcontext(0x000108f6)]
            VARIANT_BOOL AutoExpandListRange();
            [id(0x000008f6), propput, helpcontext(0x000108f6)]
            void AutoExpandListRange([in] VARIANT_BOOL rhs);
            [id(0x00000a52), propget, helpcontext(0x00010a52)]
            VARIANT_BOOL AutoFillFormulasInLists();
            [id(0x00000a52), propput, helpcontext(0x00010a52)]
            void AutoFillFormulasInLists([in] VARIANT_BOOL rhs);
    };

    [
      uuid(00020854-0000-0000-C000-000000000046),
      helpcontext(0x00020014)
    ]
    dispinterface Border {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000063), propget, helpcontext(0x00010063)]
            VARIANT Color();
            [id(0x00000063), propput, helpcontext(0x00010063)]
            void Color([in] VARIANT rhs);
            [id(0x00000061), propget, helpcontext(0x00010061)]
            VARIANT ColorIndex();
            [id(0x00000061), propput, helpcontext(0x00010061)]
            void ColorIndex([in] VARIANT rhs);
            [id(0x00000077), propget, helpcontext(0x00010077)]
            VARIANT LineStyle();
            [id(0x00000077), propput, helpcontext(0x00010077)]
            void LineStyle([in] VARIANT rhs);
            [id(0x00000078), propget, helpcontext(0x00010078)]
            VARIANT Weight();
            [id(0x00000078), propput, helpcontext(0x00010078)]
            void Weight([in] VARIANT rhs);
            [id(0x0000093d), propget, helpcontext(0x0001093d)]
            VARIANT ThemeColor();
            [id(0x0000093d), propput, helpcontext(0x0001093d)]
            void ThemeColor([in] VARIANT rhs);
            [id(0x0000093e), propget, helpcontext(0x0001093e)]
            VARIANT TintAndShade();
            [id(0x0000093e), propput, helpcontext(0x0001093e)]
            void TintAndShade([in] VARIANT rhs);
    };

    [
      uuid(00020870-0000-0000-C000-000000000046),
      helpcontext(0x00020030)
    ]
    dispinterface Interior {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000063), propget, helpcontext(0x00010063)]
            VARIANT Color();
            [id(0x00000063), propput, helpcontext(0x00010063)]
            void Color([in] VARIANT rhs);
            [id(0x00000061), propget, helpcontext(0x00010061)]
            VARIANT ColorIndex();
            [id(0x00000061), propput, helpcontext(0x00010061)]
            void ColorIndex([in] VARIANT rhs);
            [id(0x00000084), propget, helpcontext(0x00010084)]
            VARIANT InvertIfNegative();
            [id(0x00000084), propput, helpcontext(0x00010084)]
            void InvertIfNegative([in] VARIANT rhs);
            [id(0x0000005f), propget, helpcontext(0x0001005f)]
            VARIANT Pattern();
            [id(0x0000005f), propput, helpcontext(0x0001005f)]
            void Pattern([in] VARIANT rhs);
            [id(0x00000064), propget, helpcontext(0x00010064)]
            VARIANT PatternColor();
            [id(0x00000064), propput, helpcontext(0x00010064)]
            void PatternColor([in] VARIANT rhs);
            [id(0x00000062), propget, helpcontext(0x00010062)]
            VARIANT PatternColorIndex();
            [id(0x00000062), propput, helpcontext(0x00010062)]
            void PatternColorIndex([in] VARIANT rhs);
            [id(0x0000093d), propget, helpcontext(0x0001093d)]
            VARIANT ThemeColor();
            [id(0x0000093d), propput, helpcontext(0x0001093d)]
            void ThemeColor([in] VARIANT rhs);
            [id(0x0000093e), propget, helpcontext(0x0001093e)]
            VARIANT TintAndShade();
            [id(0x0000093e), propput, helpcontext(0x0001093e)]
            void TintAndShade([in] VARIANT rhs);
            [id(0x00000a53), propget, helpcontext(0x00010a53)]
            VARIANT PatternThemeColor();
            [id(0x00000a53), propput, helpcontext(0x00010a53)]
            void PatternThemeColor([in] VARIANT rhs);
            [id(0x00000a54), propget, helpcontext(0x00010a54)]
            VARIANT PatternTintAndShade();
            [id(0x00000a54), propput, helpcontext(0x00010a54)]
            void PatternTintAndShade([in] VARIANT rhs);
            [id(0x00000a55), propget, helpcontext(0x00010a55)]
            IDispatch* Gradient();
    };

    [
      uuid(00024435-0000-0000-C000-000000000046),
      helpcontext(0x000200cb),
      hidden
    ]
    dispinterface ChartFillFormat {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000655), helpcontext(0x00010655)]
            void OneColorGradient(
                            [in] MsoGradientStyle Style, 
                            [in] long Variant, 
                            [in] single Degree);
            [id(0x00000658), helpcontext(0x00010658)]
            void TwoColorGradient(
                            [in] MsoGradientStyle Style, 
                            [in] long Variant);
            [id(0x00000659), helpcontext(0x00010659)]
            void PresetTextured([in] MsoPresetTexture PresetTexture);
            [id(0x0000065b), helpcontext(0x0001065b)]
            void Solid();
            [id(0x0000065c), helpcontext(0x0001065c)]
            void Patterned([in] MsoPatternType Pattern);
            [id(0x0000065d), helpcontext(0x0001065d)]
            void UserPicture(
                            [in, optional] VARIANT PictureFile, 
                            [in, optional] VARIANT PictureFormat, 
                            [in, optional] VARIANT PictureStackUnit, 
                            [in, optional] VARIANT PicturePlacement);
            [id(0x00000662), helpcontext(0x00010662)]
            void UserTextured([in] BSTR TextureFile);
            [id(0x00000664), helpcontext(0x00010664)]
            void PresetGradient(
                            [in] MsoGradientStyle Style, 
                            [in] long Variant, 
                            [in] MsoPresetGradientType PresetGradientType);
            [id(0x00000666), propget, helpcontext(0x00010666)]
            ChartColorFormat* BackColor();
            [id(0x00000667), propget, helpcontext(0x00010667)]
            ChartColorFormat* ForeColor();
            [id(0x00000668), propget, helpcontext(0x00010668)]
            MsoGradientColorType GradientColorType();
            [id(0x00000669), propget, helpcontext(0x00010669)]
            single GradientDegree();
            [id(0x0000066a), propget, helpcontext(0x0001066a)]
            MsoGradientStyle GradientStyle();
            [id(0x0000066b), propget, helpcontext(0x0001066b)]
            long GradientVariant();
            [id(0x0000005f), propget, helpcontext(0x0001005f)]
            MsoPatternType Pattern();
            [id(0x00000665), propget, helpcontext(0x00010665)]
            MsoPresetGradientType PresetGradientType();
            [id(0x0000065a), propget, helpcontext(0x0001065a)]
            MsoPresetTexture PresetTexture();
            [id(0x0000066c), propget, helpcontext(0x0001066c)]
            BSTR TextureName();
            [id(0x0000066d), propget, helpcontext(0x0001066d)]
            MsoTextureType TextureType();
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            MsoFillType Type();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            MsoTriState Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] MsoTriState rhs);
    };

    [
      uuid(00024436-0000-0000-C000-000000000046),
      helpcontext(0x000200cc),
      hidden
    ]
    dispinterface ChartColorFormat {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000066e), propget, helpcontext(0x0001066e)]
            long SchemeColor();
            [id(0x0000066e), propput, helpcontext(0x0001066e)]
            void SchemeColor([in] long rhs);
            [id(0x0000041f), propget, helpcontext(0x0001041f)]
            long RGB();
            [id(00000000), propget, helpcontext(0x00010000)]
            long _Default();
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            long Type();
    };

    [
      uuid(00020848-0000-0000-C000-000000000046),
      helpcontext(0x00020008)
    ]
    dispinterface Axis {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000002d), propget, helpcontext(0x0001002d)]
            VARIANT_BOOL AxisBetweenCategories();
            [id(0x0000002d), propput, helpcontext(0x0001002d)]
            void AxisBetweenCategories([in] VARIANT_BOOL rhs);
            [id(0x0000002f), propget, helpcontext(0x0001002f)]
            XlAxisGroup AxisGroup();
            [id(0x00000052), propget, helpcontext(0x00010052)]
            AxisTitle* AxisTitle();
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x0000009c), propget, helpcontext(0x0001009c)]
            VARIANT CategoryNames();
            [id(0x0000009c), propput, helpcontext(0x0001009c)]
            void CategoryNames([in] VARIANT rhs);
            [id(0x0000002a), propget, helpcontext(0x0001002a)]
            XlAxisCrosses Crosses();
            [id(0x0000002a), propput, helpcontext(0x0001002a)]
            void Crosses([in] XlAxisCrosses rhs);
            [id(0x0000002b), propget, helpcontext(0x0001002b)]
            double CrossesAt();
            [id(0x0000002b), propput, helpcontext(0x0001002b)]
            void CrossesAt([in] double rhs);
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000018), propget, helpcontext(0x00010018)]
            VARIANT_BOOL HasMajorGridlines();
            [id(0x00000018), propput, helpcontext(0x00010018)]
            void HasMajorGridlines([in] VARIANT_BOOL rhs);
            [id(0x00000019), propget, helpcontext(0x00010019)]
            VARIANT_BOOL HasMinorGridlines();
            [id(0x00000019), propput, helpcontext(0x00010019)]
            void HasMinorGridlines([in] VARIANT_BOOL rhs);
            [id(0x00000036), propget, helpcontext(0x00010036)]
            VARIANT_BOOL HasTitle();
            [id(0x00000036), propput, helpcontext(0x00010036)]
            void HasTitle([in] VARIANT_BOOL rhs);
            [id(0x00000059), propget, helpcontext(0x00010059)]
            Gridlines* MajorGridlines();
            [id(0x0000001a), propget, helpcontext(0x0001001a)]
            XlTickMark MajorTickMark();
            [id(0x0000001a), propput, helpcontext(0x0001001a)]
            void MajorTickMark([in] XlTickMark rhs);
            [id(0x00000025), propget, helpcontext(0x00010025)]
            double MajorUnit();
            [id(0x00000025), propput, helpcontext(0x00010025)]
            void MajorUnit([in] double rhs);
            [id(0x00000026), propget, helpcontext(0x00010026)]
            VARIANT_BOOL MajorUnitIsAuto();
            [id(0x00000026), propput, helpcontext(0x00010026)]
            void MajorUnitIsAuto([in] VARIANT_BOOL rhs);
            [id(0x00000023), propget, helpcontext(0x00010023)]
            double MaximumScale();
            [id(0x00000023), propput, helpcontext(0x00010023)]
            void MaximumScale([in] double rhs);
            [id(0x00000024), propget, helpcontext(0x00010024)]
            VARIANT_BOOL MaximumScaleIsAuto();
            [id(0x00000024), propput, helpcontext(0x00010024)]
            void MaximumScaleIsAuto([in] VARIANT_BOOL rhs);
            [id(0x00000021), propget, helpcontext(0x00010021)]
            double MinimumScale();
            [id(0x00000021), propput, helpcontext(0x00010021)]
            void MinimumScale([in] double rhs);
            [id(0x00000022), propget, helpcontext(0x00010022)]
            VARIANT_BOOL MinimumScaleIsAuto();
            [id(0x00000022), propput, helpcontext(0x00010022)]
            void MinimumScaleIsAuto([in] VARIANT_BOOL rhs);
            [id(0x0000005a), propget, helpcontext(0x0001005a)]
            Gridlines* MinorGridlines();
            [id(0x0000001b), propget, helpcontext(0x0001001b)]
            XlTickMark MinorTickMark();
            [id(0x0000001b), propput, helpcontext(0x0001001b)]
            void MinorTickMark([in] XlTickMark rhs);
            [id(0x00000027), propget, helpcontext(0x00010027)]
            double MinorUnit();
            [id(0x00000027), propput, helpcontext(0x00010027)]
            void MinorUnit([in] double rhs);
            [id(0x00000028), propget, helpcontext(0x00010028)]
            VARIANT_BOOL MinorUnitIsAuto();
            [id(0x00000028), propput, helpcontext(0x00010028)]
            void MinorUnitIsAuto([in] VARIANT_BOOL rhs);
            [id(0x0000002c), propget, helpcontext(0x0001002c)]
            VARIANT_BOOL ReversePlotOrder();
            [id(0x0000002c), propput, helpcontext(0x0001002c)]
            void ReversePlotOrder([in] VARIANT_BOOL rhs);
            [id(0x00000029), propget, helpcontext(0x00010029)]
            XlScaleType ScaleType();
            [id(0x00000029), propput, helpcontext(0x00010029)]
            void ScaleType([in] XlScaleType rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x0000001c), propget, helpcontext(0x0001001c)]
            XlTickLabelPosition TickLabelPosition();
            [id(0x0000001c), propput, helpcontext(0x0001001c)]
            void TickLabelPosition([in] XlTickLabelPosition rhs);
            [id(0x0000005b), propget, helpcontext(0x0001005b)]
            TickLabels* TickLabels();
            [id(0x0000001d), propget, helpcontext(0x0001001d)]
            long TickLabelSpacing();
            [id(0x0000001d), propput, helpcontext(0x0001001d)]
            void TickLabelSpacing([in] long rhs);
            [id(0x0000001f), propget, helpcontext(0x0001001f)]
            long TickMarkSpacing();
            [id(0x0000001f), propput, helpcontext(0x0001001f)]
            void TickMarkSpacing([in] long rhs);
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            XlAxisType Type();
            [id(0x0000006c), propput, helpcontext(0x0001006c)]
            void Type([in] XlAxisType rhs);
            [id(0x0000066f), propget, helpcontext(0x0001066f)]
            XlTimeUnit BaseUnit();
            [id(0x0000066f), propput, helpcontext(0x0001066f)]
            void BaseUnit([in] XlTimeUnit rhs);
            [id(0x00000670), propget, helpcontext(0x00010670)]
            VARIANT_BOOL BaseUnitIsAuto();
            [id(0x00000670), propput, helpcontext(0x00010670)]
            void BaseUnitIsAuto([in] VARIANT_BOOL rhs);
            [id(0x00000671), propget, helpcontext(0x00010671)]
            XlTimeUnit MajorUnitScale();
            [id(0x00000671), propput, helpcontext(0x00010671)]
            void MajorUnitScale([in] XlTimeUnit rhs);
            [id(0x00000672), propget, helpcontext(0x00010672)]
            XlTimeUnit MinorUnitScale();
            [id(0x00000672), propput, helpcontext(0x00010672)]
            void MinorUnitScale([in] XlTimeUnit rhs);
            [id(0x00000673), propget, helpcontext(0x00010673)]
            XlCategoryType CategoryType();
            [id(0x00000673), propput, helpcontext(0x00010673)]
            void CategoryType([in] XlCategoryType rhs);
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000075e), propget, helpcontext(0x0001075e)]
            XlDisplayUnit DisplayUnit();
            [id(0x0000075e), propput, helpcontext(0x0001075e)]
            void DisplayUnit([in] XlDisplayUnit rhs);
            [id(0x0000075f), propget, helpcontext(0x0001075f)]
            double DisplayUnitCustom();
            [id(0x0000075f), propput, helpcontext(0x0001075f)]
            void DisplayUnitCustom([in] double rhs);
            [id(0x00000760), propget, helpcontext(0x00010760)]
            VARIANT_BOOL HasDisplayUnitLabel();
            [id(0x00000760), propput, helpcontext(0x00010760)]
            void HasDisplayUnitLabel([in] VARIANT_BOOL rhs);
            [id(0x00000761), propget, helpcontext(0x00010761)]
            DisplayUnitLabel* DisplayUnitLabel();
            [id(0x00000a56), propget, helpcontext(0x00010a56)]
            double LogBase();
            [id(0x00000a56), propput, helpcontext(0x00010a56)]
            void LogBase([in] double rhs);
            [id(0x00000a57), propget, helpcontext(0x00010a57)]
            VARIANT_BOOL TickLabelSpacingIsAuto();
            [id(0x00000a57), propput, helpcontext(0x00010a57)]
            void TickLabelSpacingIsAuto([in] VARIANT_BOOL rhs);
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(00020849-0000-0000-C000-000000000046),
      helpcontext(0x00020009)
    ]
    dispinterface ChartTitle {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
            ChartFillFormat* Fill();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x00000092), propget, hidden, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x000005f5), propget, hidden, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, hidden, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000a58), propget, helpcontext(0x00010a58)]
            VARIANT_BOOL IncludeInLayout();
            [id(0x00000a58), propput, helpcontext(0x00010a58)]
            void IncludeInLayout([in] VARIANT_BOOL rhs);
            [id(0x00000085), propget, helpcontext(0x00010085)]
            XlChartElementPosition Position();
            [id(0x00000085), propput, helpcontext(0x00010085)]
            void Position([in] XlChartElementPosition rhs);
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(0002084A-0000-0000-C000-000000000046),
      helpcontext(0x0002000a)
    ]
    dispinterface AxisTitle {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
            ChartFillFormat* Fill();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x00000092), propget, hidden, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x000005f5), propget, hidden, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, hidden, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000a58), propget, helpcontext(0x00010a58)]
            VARIANT_BOOL IncludeInLayout();
            [id(0x00000a58), propput, helpcontext(0x00010a58)]
            void IncludeInLayout([in] VARIANT_BOOL rhs);
            [id(0x00000085), propget, helpcontext(0x00010085)]
            XlChartElementPosition Position();
            [id(0x00000085), propput, helpcontext(0x00010085)]
            void Position([in] XlChartElementPosition rhs);
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(00020859-0000-0000-C000-000000000046),
      helpcontext(0x00020019)
    ]
    dispinterface ChartGroup {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000002f), propget, helpcontext(0x0001002f)]
            XlAxisGroup AxisGroup();
            [id(0x0000002f), propput, helpcontext(0x0001002f)]
            void AxisGroup([in] XlAxisGroup rhs);
            [id(0x00000466), propget, helpcontext(0x00010466)]
            long DoughnutHoleSize();
            [id(0x00000466), propput, helpcontext(0x00010466)]
            void DoughnutHoleSize([in] long rhs);
            [id(0x0000008d), propget, helpcontext(0x0001008d)]
            DownBars* DownBars();
            [id(0x0000008e), propget, helpcontext(0x0001008e)]
            DropLines* DropLines();
            [id(0x0000003f), propget, helpcontext(0x0001003f)]
            long FirstSliceAngle();
            [id(0x0000003f), propput, helpcontext(0x0001003f)]
            void FirstSliceAngle([in] long rhs);
            [id(0x00000033), propget, helpcontext(0x00010033)]
            long GapWidth();
            [id(0x00000033), propput, helpcontext(0x00010033)]
            void GapWidth([in] long rhs);
            [id(0x0000003d), propget, helpcontext(0x0001003d)]
            VARIANT_BOOL HasDropLines();
            [id(0x0000003d), propput, helpcontext(0x0001003d)]
            void HasDropLines([in] VARIANT_BOOL rhs);
            [id(0x0000003e), propget, helpcontext(0x0001003e)]
            VARIANT_BOOL HasHiLoLines();
            [id(0x0000003e), propput, helpcontext(0x0001003e)]
            void HasHiLoLines([in] VARIANT_BOOL rhs);
            [id(0x00000040), propget, helpcontext(0x00010040)]
            VARIANT_BOOL HasRadarAxisLabels();
            [id(0x00000040), propput, helpcontext(0x00010040)]
            void HasRadarAxisLabels([in] VARIANT_BOOL rhs);
            [id(0x00000041), propget, helpcontext(0x00010041)]
            VARIANT_BOOL HasSeriesLines();
            [id(0x00000041), propput, helpcontext(0x00010041)]
            void HasSeriesLines([in] VARIANT_BOOL rhs);
            [id(0x00000042), propget, helpcontext(0x00010042)]
            VARIANT_BOOL HasUpDownBars();
            [id(0x00000042), propput, helpcontext(0x00010042)]
            void HasUpDownBars([in] VARIANT_BOOL rhs);
            [id(0x0000008f), propget, helpcontext(0x0001008f)]
            HiLoLines* HiLoLines();
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x00000038), propget, helpcontext(0x00010038)]
            long Overlap();
            [id(0x00000038), propput, helpcontext(0x00010038)]
            void Overlap([in] long rhs);
            [id(0x00000090), propget, helpcontext(0x00010090)]
            TickLabels* RadarAxisLabels();
            [id(0x00000044), helpcontext(0x00010044)]
            IDispatch* SeriesCollection([in, optional] VARIANT Index);
            [id(0x00000091), propget, helpcontext(0x00010091)]
            SeriesLines* SeriesLines();
            [id(0x0000006d), propget, hidden, helpcontext(0x0001006d)]
            long SubType();
            [id(0x0000006d), propput, hidden, helpcontext(0x0001006d)]
            void SubType([in] long rhs);
            [id(0x0000006c), propget, hidden, helpcontext(0x0001006c)]
            long Type();
            [id(0x0000006c), propput, hidden, helpcontext(0x0001006c)]
            void Type([in] long rhs);
            [id(0x0000008c), propget, helpcontext(0x0001008c)]
            UpBars* UpBars();
            [id(0x0000003c), propget, helpcontext(0x0001003c)]
            VARIANT_BOOL VaryByCategories();
            [id(0x0000003c), propput, helpcontext(0x0001003c)]
            void VaryByCategories([in] VARIANT_BOOL rhs);
            [id(0x00000674), propget, helpcontext(0x00010674)]
            XlSizeRepresents SizeRepresents();
            [id(0x00000674), propput, helpcontext(0x00010674)]
            void SizeRepresents([in] XlSizeRepresents rhs);
            [id(0x00000675), propget, helpcontext(0x00010675)]
            long BubbleScale();
            [id(0x00000675), propput, helpcontext(0x00010675)]
            void BubbleScale([in] long rhs);
            [id(0x00000676), propget, helpcontext(0x00010676)]
            VARIANT_BOOL ShowNegativeBubbles();
            [id(0x00000676), propput, helpcontext(0x00010676)]
            void ShowNegativeBubbles([in] VARIANT_BOOL rhs);
            [id(0x00000677), propget, helpcontext(0x00010677)]
            XlChartSplitType SplitType();
            [id(0x00000677), propput, helpcontext(0x00010677)]
            void SplitType([in] XlChartSplitType rhs);
            [id(0x00000678), propget, helpcontext(0x00010678)]
            VARIANT SplitValue();
            [id(0x00000678), propput, helpcontext(0x00010678)]
            void SplitValue([in] VARIANT rhs);
            [id(0x00000679), propget, helpcontext(0x00010679)]
            long SecondPlotSize();
            [id(0x00000679), propput, helpcontext(0x00010679)]
            void SecondPlotSize([in] long rhs);
            [id(0x0000067a), propget, helpcontext(0x0001067a)]
            VARIANT_BOOL Has3DShading();
            [id(0x0000067a), propput, helpcontext(0x0001067a)]
            void Has3DShading([in] VARIANT_BOOL rhs);
    };

    [
      uuid(0002085A-0000-0000-C000-000000000046),
      helpcontext(0x0002001a)
    ]
    dispinterface ChartGroups {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            ChartGroup* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002085B-0000-0000-C000-000000000046),
      helpcontext(0x0002001b)
    ]
    dispinterface Axes {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            Axis* Item(
                            [in] XlAxisType Type, 
                            [in, optional, defaultvalue(1)] XlAxisGroup AxisGroup);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(00000000), helpcontext(0x00010000)]
            Axis* _Default(
                            [in] XlAxisType Type, 
                            [in, optional, defaultvalue(1)] XlAxisGroup AxisGroup);
    };

    [
      uuid(00020869-0000-0000-C000-000000000046),
      helpcontext(0x00020029)
    ]
    dispinterface Points {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            Point* Item([in] long Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(00000000), helpcontext(0x00010000)]
            Point* _Default([in] long Index);
    };

    [
      uuid(0002086A-0000-0000-C000-000000000046),
      helpcontext(0x0002002a)
    ]
    dispinterface Point {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000097), hidden, helpcontext(0x00010097)]
            VARIANT _ApplyDataLabels(
                            [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                            [in, optional] VARIANT LegendKey, 
                            [in, optional] VARIANT AutoText, 
                            [in, optional] VARIANT HasLeaderLines);
            [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000070), helpcontext(0x00010070)]
            VARIANT ClearFormats();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x0000009e), propget, helpcontext(0x0001009e)]
            DataLabel* DataLabel();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x000000b6), propget, helpcontext(0x000100b6)]
            long Explosion();
            [id(0x000000b6), propput, helpcontext(0x000100b6)]
            void Explosion([in] long rhs);
            [id(0x0000004d), propget, helpcontext(0x0001004d)]
            VARIANT_BOOL HasDataLabel();
            [id(0x0000004d), propput, helpcontext(0x0001004d)]
            void HasDataLabel([in] VARIANT_BOOL rhs);
            [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00000084), propget, helpcontext(0x00010084)]
            VARIANT_BOOL InvertIfNegative();
            [id(0x00000084), propput, helpcontext(0x00010084)]
            void InvertIfNegative([in] VARIANT_BOOL rhs);
            [id(0x00000049), propget, helpcontext(0x00010049)]
            long MarkerBackgroundColor();
            [id(0x00000049), propput, helpcontext(0x00010049)]
            void MarkerBackgroundColor([in] long rhs);
            [id(0x0000004a), propget, helpcontext(0x0001004a)]
            XlColorIndex MarkerBackgroundColorIndex();
            [id(0x0000004a), propput, helpcontext(0x0001004a)]
            void MarkerBackgroundColorIndex([in] XlColorIndex rhs);
            [id(0x0000004b), propget, helpcontext(0x0001004b)]
            long MarkerForegroundColor();
            [id(0x0000004b), propput, helpcontext(0x0001004b)]
            void MarkerForegroundColor([in] long rhs);
            [id(0x0000004c), propget, helpcontext(0x0001004c)]
            XlColorIndex MarkerForegroundColorIndex();
            [id(0x0000004c), propput, helpcontext(0x0001004c)]
            void MarkerForegroundColorIndex([in] XlColorIndex rhs);
            [id(0x000000e7), propget, helpcontext(0x000100e7)]
            long MarkerSize();
            [id(0x000000e7), propput, helpcontext(0x000100e7)]
            void MarkerSize([in] long rhs);
            [id(0x00000048), propget, helpcontext(0x00010048)]
            XlMarkerStyle MarkerStyle();
            [id(0x00000048), propput, helpcontext(0x00010048)]
            void MarkerStyle([in] XlMarkerStyle rhs);
            [id(0x000000d3), helpcontext(0x000100d3)]
            VARIANT Paste();
            [id(0x000000a1), propget, helpcontext(0x000100a1)]
            XlChartPictureType PictureType();
            [id(0x000000a1), propput, helpcontext(0x000100a1)]
            void PictureType([in] XlChartPictureType rhs);
            [id(0x000000a2), propget, hidden, helpcontext(0x000100a2)]
            long PictureUnit();
            [id(0x000000a2), propput, hidden, helpcontext(0x000100a2)]
            void PictureUnit([in] long rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x0000067b), propget, helpcontext(0x0001067b)]
            VARIANT_BOOL ApplyPictToSides();
            [id(0x0000067b), propput, helpcontext(0x0001067b)]
            void ApplyPictToSides([in] VARIANT_BOOL rhs);
            [id(0x0000067c), propget, helpcontext(0x0001067c)]
            VARIANT_BOOL ApplyPictToFront();
            [id(0x0000067c), propput, helpcontext(0x0001067c)]
            void ApplyPictToFront([in] VARIANT_BOOL rhs);
            [id(0x0000067d), propget, helpcontext(0x0001067d)]
            VARIANT_BOOL ApplyPictToEnd();
            [id(0x0000067d), propput, helpcontext(0x0001067d)]
            void ApplyPictToEnd([in] VARIANT_BOOL rhs);
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x0000067e), propget, helpcontext(0x0001067e)]
            VARIANT_BOOL SecondaryPlot();
            [id(0x0000067e), propput, helpcontext(0x0001067e)]
            void SecondaryPlot([in] VARIANT_BOOL rhs);
            [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
            ChartFillFormat* Fill();
            [id(0x00000782), helpcontext(0x00010782)]
            VARIANT ApplyDataLabels(
                            [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                            [in, optional] VARIANT LegendKey, 
                            [in, optional] VARIANT AutoText, 
                            [in, optional] VARIANT HasLeaderLines, 
                            [in, optional] VARIANT ShowSeriesName, 
                            [in, optional] VARIANT ShowCategoryName, 
                            [in, optional] VARIANT ShowValue, 
                            [in, optional] VARIANT ShowPercentage, 
                            [in, optional] VARIANT ShowBubbleSize, 
                            [in, optional] VARIANT Separator);
            [id(0x00000681), propget, helpcontext(0x00010681)]
            VARIANT_BOOL Has3DEffect();
            [id(0x00000681), propput, helpcontext(0x00010681)]
            void Has3DEffect([in] VARIANT_BOOL rhs);
            [id(0x00000a59), propget, helpcontext(0x00010a59)]
            double PictureUnit2();
            [id(0x00000a59), propput, helpcontext(0x00010a59)]
            void PictureUnit2([in] double rhs);
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(0002086B-0000-0000-C000-000000000046),
      helpcontext(0x0002002b)
    ]
    dispinterface Series {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000097), hidden, helpcontext(0x00010097)]
            VARIANT _ApplyDataLabels(
                            [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                            [in, optional] VARIANT LegendKey, 
                            [in, optional] VARIANT AutoText, 
                            [in, optional] VARIANT HasLeaderLines);
            [id(0x0000002f), propget, helpcontext(0x0001002f)]
            XlAxisGroup AxisGroup();
            [id(0x0000002f), propput, helpcontext(0x0001002f)]
            void AxisGroup([in] XlAxisGroup rhs);
            [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000070), helpcontext(0x00010070)]
            VARIANT ClearFormats();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x0000009d), helpcontext(0x0001009d)]
            IDispatch* DataLabels([in, optional] VARIANT Index);
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000098), helpcontext(0x00010098)]
            VARIANT ErrorBar(
                            [in] XlErrorBarDirection Direction, 
                            [in] XlErrorBarInclude Include, 
                            [in] XlErrorBarType Type, 
                            [in, optional] VARIANT Amount, 
                            [in, optional] VARIANT MinusValues);
            [id(0x0000009f), propget, helpcontext(0x0001009f)]
            ErrorBars* ErrorBars();
            [id(0x000000b6), propget, helpcontext(0x000100b6)]
            long Explosion();
            [id(0x000000b6), propput, helpcontext(0x000100b6)]
            void Explosion([in] long rhs);
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x00000107), propget, helpcontext(0x00010107)]
            BSTR FormulaLocal();
            [id(0x00000107), propput, helpcontext(0x00010107)]
            void FormulaLocal([in] BSTR rhs);
            [id(0x00000108), propget, helpcontext(0x00010108)]
            BSTR FormulaR1C1();
            [id(0x00000108), propput, helpcontext(0x00010108)]
            void FormulaR1C1([in] BSTR rhs);
            [id(0x00000109), propget, helpcontext(0x00010109)]
            BSTR FormulaR1C1Local();
            [id(0x00000109), propput, helpcontext(0x00010109)]
            void FormulaR1C1Local([in] BSTR rhs);
            [id(0x0000004e), propget, helpcontext(0x0001004e)]
            VARIANT_BOOL HasDataLabels();
            [id(0x0000004e), propput, helpcontext(0x0001004e)]
            void HasDataLabels([in] VARIANT_BOOL rhs);
            [id(0x000000a0), propget, helpcontext(0x000100a0)]
            VARIANT_BOOL HasErrorBars();
            [id(0x000000a0), propput, helpcontext(0x000100a0)]
            void HasErrorBars([in] VARIANT_BOOL rhs);
            [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
            ChartFillFormat* Fill();
            [id(0x00000084), propget, helpcontext(0x00010084)]
            VARIANT_BOOL InvertIfNegative();
            [id(0x00000084), propput, helpcontext(0x00010084)]
            void InvertIfNegative([in] VARIANT_BOOL rhs);
            [id(0x00000049), propget, helpcontext(0x00010049)]
            long MarkerBackgroundColor();
            [id(0x00000049), propput, helpcontext(0x00010049)]
            void MarkerBackgroundColor([in] long rhs);
            [id(0x0000004a), propget, helpcontext(0x0001004a)]
            XlColorIndex MarkerBackgroundColorIndex();
            [id(0x0000004a), propput, helpcontext(0x0001004a)]
            void MarkerBackgroundColorIndex([in] XlColorIndex rhs);
            [id(0x0000004b), propget, helpcontext(0x0001004b)]
            long MarkerForegroundColor();
            [id(0x0000004b), propput, helpcontext(0x0001004b)]
            void MarkerForegroundColor([in] long rhs);
            [id(0x0000004c), propget, helpcontext(0x0001004c)]
            XlColorIndex MarkerForegroundColorIndex();
            [id(0x0000004c), propput, helpcontext(0x0001004c)]
            void MarkerForegroundColorIndex([in] XlColorIndex rhs);
            [id(0x000000e7), propget, helpcontext(0x000100e7)]
            long MarkerSize();
            [id(0x000000e7), propput, helpcontext(0x000100e7)]
            void MarkerSize([in] long rhs);
            [id(0x00000048), propget, helpcontext(0x00010048)]
            XlMarkerStyle MarkerStyle();
            [id(0x00000048), propput, helpcontext(0x00010048)]
            void MarkerStyle([in] XlMarkerStyle rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x000000d3), helpcontext(0x000100d3)]
            VARIANT Paste();
            [id(0x000000a1), propget, helpcontext(0x000100a1)]
            XlChartPictureType PictureType();
            [id(0x000000a1), propput, helpcontext(0x000100a1)]
            void PictureType([in] XlChartPictureType rhs);
            [id(0x000000a2), propget, hidden, helpcontext(0x000100a2)]
            long PictureUnit();
            [id(0x000000a2), propput, hidden, helpcontext(0x000100a2)]
            void PictureUnit([in] long rhs);
            [id(0x000000e4), propget, helpcontext(0x000100e4)]
            long PlotOrder();
            [id(0x000000e4), propput, helpcontext(0x000100e4)]
            void PlotOrder([in] long rhs);
            [id(0x00000046), helpcontext(0x00010046)]
            IDispatch* Points([in, optional] VARIANT Index);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x000000a3), propget, helpcontext(0x000100a3)]
            VARIANT_BOOL Smooth();
            [id(0x000000a3), propput, helpcontext(0x000100a3)]
            void Smooth([in] VARIANT_BOOL rhs);
            [id(0x0000009a), helpcontext(0x0001009a)]
            IDispatch* Trendlines([in, optional] VARIANT Index);
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            long Type();
            [id(0x0000006c), propput, helpcontext(0x0001006c)]
            void Type([in] long rhs);
            [id(0x00000578), propget, helpcontext(0x00010578)]
            XlChartType ChartType();
            [id(0x00000578), propput, helpcontext(0x00010578)]
            void ChartType([in] XlChartType rhs);
            [id(0x00000579), hidden, helpcontext(0x00010579)]
            void ApplyCustomType([in] XlChartType ChartType);
            [id(0x000000a4), propget, helpcontext(0x000100a4)]
            VARIANT Values();
            [id(0x000000a4), propput, helpcontext(0x000100a4)]
            void Values([in] VARIANT rhs);
            [id(0x00000457), propget, helpcontext(0x00010457)]
            VARIANT XValues();
            [id(0x00000457), propput, helpcontext(0x00010457)]
            void XValues([in] VARIANT rhs);
            [id(0x00000680), propget, helpcontext(0x00010680)]
            VARIANT BubbleSizes();
            [id(0x00000680), propput, helpcontext(0x00010680)]
            void BubbleSizes([in] VARIANT rhs);
            [id(0x0000057b), propget, helpcontext(0x0001057b)]
            XlBarShape BarShape();
            [id(0x0000057b), propput, helpcontext(0x0001057b)]
            void BarShape([in] XlBarShape rhs);
            [id(0x0000067b), propget, helpcontext(0x0001067b)]
            VARIANT_BOOL ApplyPictToSides();
            [id(0x0000067b), propput, helpcontext(0x0001067b)]
            void ApplyPictToSides([in] VARIANT_BOOL rhs);
            [id(0x0000067c), propget, helpcontext(0x0001067c)]
            VARIANT_BOOL ApplyPictToFront();
            [id(0x0000067c), propput, helpcontext(0x0001067c)]
            void ApplyPictToFront([in] VARIANT_BOOL rhs);
            [id(0x0000067d), propget, helpcontext(0x0001067d)]
            VARIANT_BOOL ApplyPictToEnd();
            [id(0x0000067d), propput, helpcontext(0x0001067d)]
            void ApplyPictToEnd([in] VARIANT_BOOL rhs);
            [id(0x00000681), propget, helpcontext(0x00010681)]
            VARIANT_BOOL Has3DEffect();
            [id(0x00000681), propput, helpcontext(0x00010681)]
            void Has3DEffect([in] VARIANT_BOOL rhs);
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x00000572), propget, helpcontext(0x00010572)]
            VARIANT_BOOL HasLeaderLines();
            [id(0x00000572), propput, helpcontext(0x00010572)]
            void HasLeaderLines([in] VARIANT_BOOL rhs);
            [id(0x00000682), propget, helpcontext(0x00010682)]
            LeaderLines* LeaderLines();
            [id(0x00000782), helpcontext(0x00010782)]
            VARIANT ApplyDataLabels(
                            [in, optional, defaultvalue(2)] XlDataLabelsType Type, 
                            [in, optional] VARIANT LegendKey, 
                            [in, optional] VARIANT AutoText, 
                            [in, optional] VARIANT HasLeaderLines, 
                            [in, optional] VARIANT ShowSeriesName, 
                            [in, optional] VARIANT ShowCategoryName, 
                            [in, optional] VARIANT ShowValue, 
                            [in, optional] VARIANT ShowPercentage, 
                            [in, optional] VARIANT ShowBubbleSize, 
                            [in, optional] VARIANT Separator);
            [id(0x00000a59), propget, helpcontext(0x00010a59)]
            double PictureUnit2();
            [id(0x00000a59), propput, helpcontext(0x00010a59)]
            void PictureUnit2([in] double rhs);
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(0002086C-0000-0000-C000-000000000046),
      helpcontext(0x0002002c)
    ]
    dispinterface SeriesCollection {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            Series* Add(
                            [in] VARIANT Source, 
                            [in, optional, defaultvalue(-4105)] XlRowCol Rowcol, 
                            [in, optional] VARIANT SeriesLabels, 
                            [in, optional] VARIANT CategoryLabels, 
                            [in, optional] VARIANT Replace);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000e3), helpcontext(0x000100e3)]
            VARIANT Extend(
                            [in] VARIANT Source, 
                            [in, optional] VARIANT Rowcol, 
                            [in, optional] VARIANT CategoryLabels);
            [id(0x000000aa), helpcontext(0x000100aa)]
            Series* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000d3), helpcontext(0x000100d3)]
            VARIANT Paste(
                            [in, optional, defaultvalue(-4105)] XlRowCol Rowcol, 
                            [in, optional] VARIANT SeriesLabels, 
                            [in, optional] VARIANT CategoryLabels, 
                            [in, optional] VARIANT Replace, 
                            [in, optional] VARIANT NewSeries);
            [id(0x0000045d), helpcontext(0x0001045d)]
            Series* NewSeries();
            [id(00000000), helpcontext(0x00010000)]
            Series* _Default([in] VARIANT Index);
    };

    [
      uuid(000208B2-0000-0000-C000-000000000046),
      helpcontext(0x00020072)
    ]
    dispinterface DataLabel {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
            ChartFillFormat* Fill();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x00000092), propget, hidden, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x000005f5), propget, hidden, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, hidden, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000087), propget, helpcontext(0x00010087)]
            VARIANT_BOOL AutoText();
            [id(0x00000087), propput, helpcontext(0x00010087)]
            void AutoText([in] VARIANT_BOOL rhs);
            [id(0x000000c1), propget, helpcontext(0x000100c1)]
            BSTR NumberFormat();
            [id(0x000000c1), propput, helpcontext(0x000100c1)]
            void NumberFormat([in] BSTR rhs);
            [id(0x000000c2), propget, helpcontext(0x000100c2)]
            VARIANT_BOOL NumberFormatLinked();
            [id(0x000000c2), propput, helpcontext(0x000100c2)]
            void NumberFormatLinked([in] VARIANT_BOOL rhs);
            [id(0x00000449), propget, helpcontext(0x00010449)]
            VARIANT NumberFormatLocal();
            [id(0x00000449), propput, helpcontext(0x00010449)]
            void NumberFormatLocal([in] VARIANT rhs);
            [id(0x000000ab), propget, helpcontext(0x000100ab)]
            VARIANT_BOOL ShowLegendKey();
            [id(0x000000ab), propput, helpcontext(0x000100ab)]
            void ShowLegendKey([in] VARIANT_BOOL rhs);
            [id(0x0000006c), propget, hidden, helpcontext(0x0001006c)]
            VARIANT Type();
            [id(0x0000006c), propput, hidden, helpcontext(0x0001006c)]
            void Type([in] VARIANT rhs);
            [id(0x00000085), propget, helpcontext(0x00010085)]
            XlDataLabelPosition Position();
            [id(0x00000085), propput, helpcontext(0x00010085)]
            void Position([in] XlDataLabelPosition rhs);
            [id(0x000007e6), propget, helpcontext(0x000107e6)]
            VARIANT_BOOL ShowSeriesName();
            [id(0x000007e6), propput, helpcontext(0x000107e6)]
            void ShowSeriesName([in] VARIANT_BOOL rhs);
            [id(0x000007e7), propget, helpcontext(0x000107e7)]
            VARIANT_BOOL ShowCategoryName();
            [id(0x000007e7), propput, helpcontext(0x000107e7)]
            void ShowCategoryName([in] VARIANT_BOOL rhs);
            [id(0x000007e8), propget, helpcontext(0x000107e8)]
            VARIANT_BOOL ShowValue();
            [id(0x000007e8), propput, helpcontext(0x000107e8)]
            void ShowValue([in] VARIANT_BOOL rhs);
            [id(0x000007e9), propget, helpcontext(0x000107e9)]
            VARIANT_BOOL ShowPercentage();
            [id(0x000007e9), propput, helpcontext(0x000107e9)]
            void ShowPercentage([in] VARIANT_BOOL rhs);
            [id(0x000007ea), propget, helpcontext(0x000107ea)]
            VARIANT_BOOL ShowBubbleSize();
            [id(0x000007ea), propput, helpcontext(0x000107ea)]
            void ShowBubbleSize([in] VARIANT_BOOL rhs);
            [id(0x000007eb), propget, helpcontext(0x000107eb)]
            VARIANT Separator();
            [id(0x000007eb), propput, helpcontext(0x000107eb)]
            void Separator([in] VARIANT rhs);
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(000208B3-0000-0000-C000-000000000046),
      helpcontext(0x00020073)
    ]
    dispinterface DataLabels {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
            ChartFillFormat* Fill();
            [id(0x00010009), restricted, hidden]
            void _Dummy9();
            [id(0x0001000a), restricted, hidden]
            void _Dummy10();
            [id(0x00000092), propget, hidden, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x0001000d), restricted, hidden]
            void _Dummy13();
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x00010010), restricted, hidden]
            void _Dummy16();
            [id(0x00010011), restricted, hidden]
            void _Dummy17();
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x000005f5), propget, hidden, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, hidden, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000087), propget, helpcontext(0x00010087)]
            VARIANT_BOOL AutoText();
            [id(0x00000087), propput, helpcontext(0x00010087)]
            void AutoText([in] VARIANT_BOOL rhs);
            [id(0x000000c1), propget, helpcontext(0x000100c1)]
            BSTR NumberFormat();
            [id(0x000000c1), propput, helpcontext(0x000100c1)]
            void NumberFormat([in] BSTR rhs);
            [id(0x000000c2), propget, helpcontext(0x000100c2)]
            VARIANT_BOOL NumberFormatLinked();
            [id(0x000000c2), propput, helpcontext(0x000100c2)]
            void NumberFormatLinked([in] VARIANT_BOOL rhs);
            [id(0x00000449), propget, helpcontext(0x00010449)]
            VARIANT NumberFormatLocal();
            [id(0x00000449), propput, helpcontext(0x00010449)]
            void NumberFormatLocal([in] VARIANT rhs);
            [id(0x000000ab), propget, helpcontext(0x000100ab)]
            VARIANT_BOOL ShowLegendKey();
            [id(0x000000ab), propput, helpcontext(0x000100ab)]
            void ShowLegendKey([in] VARIANT_BOOL rhs);
            [id(0x0000006c), propget, hidden, helpcontext(0x0001006c)]
            VARIANT Type();
            [id(0x0000006c), propput, hidden, helpcontext(0x0001006c)]
            void Type([in] VARIANT rhs);
            [id(0x00000085), propget, helpcontext(0x00010085)]
            XlDataLabelPosition Position();
            [id(0x00000085), propput, helpcontext(0x00010085)]
            void Position([in] XlDataLabelPosition rhs);
            [id(0x000007e6), propget, helpcontext(0x000107e6)]
            VARIANT_BOOL ShowSeriesName();
            [id(0x000007e6), propput, helpcontext(0x000107e6)]
            void ShowSeriesName([in] VARIANT_BOOL rhs);
            [id(0x000007e7), propget, helpcontext(0x000107e7)]
            VARIANT_BOOL ShowCategoryName();
            [id(0x000007e7), propput, helpcontext(0x000107e7)]
            void ShowCategoryName([in] VARIANT_BOOL rhs);
            [id(0x000007e8), propget, helpcontext(0x000107e8)]
            VARIANT_BOOL ShowValue();
            [id(0x000007e8), propput, helpcontext(0x000107e8)]
            void ShowValue([in] VARIANT_BOOL rhs);
            [id(0x000007e9), propget, helpcontext(0x000107e9)]
            VARIANT_BOOL ShowPercentage();
            [id(0x000007e9), propput, helpcontext(0x000107e9)]
            void ShowPercentage([in] VARIANT_BOOL rhs);
            [id(0x000007ea), propget, helpcontext(0x000107ea)]
            VARIANT_BOOL ShowBubbleSize();
            [id(0x000007ea), propput, helpcontext(0x000107ea)]
            void ShowBubbleSize([in] VARIANT_BOOL rhs);
            [id(0x000007eb), propget, helpcontext(0x000107eb)]
            VARIANT Separator();
            [id(0x000007eb), propput, helpcontext(0x000107eb)]
            void Separator([in] VARIANT rhs);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            DataLabel* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(00000000), helpcontext(0x00010000)]
            DataLabel* _Default([in] VARIANT Index);
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(000208BA-0000-0000-C000-000000000046),
      helpcontext(0x0002007a)
    ]
    dispinterface LegendEntry {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x000000ae), propget, helpcontext(0x000100ae)]
            LegendKey* LegendKey();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x000005f5), propget, hidden, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, hidden, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(000208BB-0000-0000-C000-000000000046),
      helpcontext(0x0002007b)
    ]
    dispinterface LegendEntries {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            LegendEntry* Item([in] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(00000000), helpcontext(0x00010000)]
            LegendEntry* _Default([in] VARIANT Index);
    };

    [
      uuid(000208BC-0000-0000-C000-000000000046),
      helpcontext(0x0002007c)
    ]
    dispinterface LegendKey {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000070), helpcontext(0x00010070)]
            VARIANT ClearFormats();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
            ChartFillFormat* Fill();
            [id(0x00000084), propget, helpcontext(0x00010084)]
            VARIANT_BOOL InvertIfNegative();
            [id(0x00000084), propput, helpcontext(0x00010084)]
            void InvertIfNegative([in] VARIANT_BOOL rhs);
            [id(0x00000049), propget, helpcontext(0x00010049)]
            long MarkerBackgroundColor();
            [id(0x00000049), propput, helpcontext(0x00010049)]
            void MarkerBackgroundColor([in] long rhs);
            [id(0x0000004a), propget, helpcontext(0x0001004a)]
            XlColorIndex MarkerBackgroundColorIndex();
            [id(0x0000004a), propput, helpcontext(0x0001004a)]
            void MarkerBackgroundColorIndex([in] XlColorIndex rhs);
            [id(0x0000004b), propget, helpcontext(0x0001004b)]
            long MarkerForegroundColor();
            [id(0x0000004b), propput, helpcontext(0x0001004b)]
            void MarkerForegroundColor([in] long rhs);
            [id(0x0000004c), propget, helpcontext(0x0001004c)]
            XlColorIndex MarkerForegroundColorIndex();
            [id(0x0000004c), propput, helpcontext(0x0001004c)]
            void MarkerForegroundColorIndex([in] XlColorIndex rhs);
            [id(0x000000e7), propget, helpcontext(0x000100e7)]
            long MarkerSize();
            [id(0x000000e7), propput, helpcontext(0x000100e7)]
            void MarkerSize([in] long rhs);
            [id(0x00000048), propget, helpcontext(0x00010048)]
            XlMarkerStyle MarkerStyle();
            [id(0x00000048), propput, helpcontext(0x00010048)]
            void MarkerStyle([in] XlMarkerStyle rhs);
            [id(0x000000a1), propget, helpcontext(0x000100a1)]
            long PictureType();
            [id(0x000000a1), propput, helpcontext(0x000100a1)]
            void PictureType([in] long rhs);
            [id(0x000000a2), propget, hidden, helpcontext(0x000100a2)]
            long PictureUnit();
            [id(0x000000a2), propput, hidden, helpcontext(0x000100a2)]
            void PictureUnit([in] long rhs);
            [id(0x000000eb), hidden, helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x000000a3), propget, helpcontext(0x000100a3)]
            VARIANT_BOOL Smooth();
            [id(0x000000a3), propput, helpcontext(0x000100a3)]
            void Smooth([in] VARIANT_BOOL rhs);
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x00000a59), propget, helpcontext(0x00010a59)]
            double PictureUnit2();
            [id(0x00000a59), propput, helpcontext(0x00010a59)]
            void PictureUnit2([in] double rhs);
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(000208BD-0000-0000-C000-000000000046),
      helpcontext(0x0002007d)
    ]
    dispinterface Trendlines {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            Trendline* Add(
                            [in, optional, defaultvalue(-4132)] XlTrendlineType Type, 
                            [in, optional] VARIANT Order, 
                            [in, optional] VARIANT Period, 
                            [in, optional] VARIANT Forward, 
                            [in, optional] VARIANT Backward, 
                            [in, optional] VARIANT Intercept, 
                            [in, optional] VARIANT DisplayEquation, 
                            [in, optional] VARIANT DisplayRSquared, 
                            [in, optional] VARIANT Name);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            Trendline* Item([in, optional] VARIANT Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(00000000), helpcontext(0x00010000)]
            Trendline* _Default([in, optional] VARIANT Index);
    };

    [
      uuid(000208BE-0000-0000-C000-000000000046),
      helpcontext(0x0002007e)
    ]
    dispinterface Trendline {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b9), propget, hidden, helpcontext(0x000100b9)]
            long Backward();
            [id(0x000000b9), propput, hidden, helpcontext(0x000100b9)]
            void Backward([in] long rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000070), helpcontext(0x00010070)]
            VARIANT ClearFormats();
            [id(0x0000009e), propget, helpcontext(0x0001009e)]
            DataLabel* DataLabel();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x000000be), propget, helpcontext(0x000100be)]
            VARIANT_BOOL DisplayEquation();
            [id(0x000000be), propput, helpcontext(0x000100be)]
            void DisplayEquation([in] VARIANT_BOOL rhs);
            [id(0x000000bd), propget, helpcontext(0x000100bd)]
            VARIANT_BOOL DisplayRSquared();
            [id(0x000000bd), propput, helpcontext(0x000100bd)]
            void DisplayRSquared([in] VARIANT_BOOL rhs);
            [id(0x000000bf), propget, hidden, helpcontext(0x000100bf)]
            long Forward();
            [id(0x000000bf), propput, hidden, helpcontext(0x000100bf)]
            void Forward([in] long rhs);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x000000ba), propget, helpcontext(0x000100ba)]
            double Intercept();
            [id(0x000000ba), propput, helpcontext(0x000100ba)]
            void Intercept([in] double rhs);
            [id(0x000000bb), propget, helpcontext(0x000100bb)]
            VARIANT_BOOL InterceptIsAuto();
            [id(0x000000bb), propput, helpcontext(0x000100bb)]
            void InterceptIsAuto([in] VARIANT_BOOL rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x000000bc), propget, helpcontext(0x000100bc)]
            VARIANT_BOOL NameIsAuto();
            [id(0x000000bc), propput, helpcontext(0x000100bc)]
            void NameIsAuto([in] VARIANT_BOOL rhs);
            [id(0x000000c0), propget, helpcontext(0x000100c0)]
            long Order();
            [id(0x000000c0), propput, helpcontext(0x000100c0)]
            void Order([in] long rhs);
            [id(0x000000b8), propget, helpcontext(0x000100b8)]
            long Period();
            [id(0x000000b8), propput, helpcontext(0x000100b8)]
            void Period([in] long rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            XlTrendlineType Type();
            [id(0x0000006c), propput, helpcontext(0x0001006c)]
            void Type([in] XlTrendlineType rhs);
            [id(0x00000a5a), propget, helpcontext(0x00010a5a)]
            double Backward2();
            [id(0x00000a5a), propput, helpcontext(0x00010a5a)]
            void Backward2([in] double rhs);
            [id(0x00000a5b), propget, helpcontext(0x00010a5b)]
            double Forward2();
            [id(0x00000a5b), propput, helpcontext(0x00010a5b)]
            void Forward2([in] double rhs);
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(000208C0-0000-0000-C000-000000000046),
      helpcontext(0x00020080),
      hidden
    ]
    dispinterface Corners {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, hidden, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, hidden, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000eb), hidden, helpcontext(0x000100eb)]
            VARIANT Select();
    };

    [
      uuid(000208C1-0000-0000-C000-000000000046),
      helpcontext(0x00020081)
    ]
    dispinterface SeriesLines {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(000208C2-0000-0000-C000-000000000046),
      helpcontext(0x00020082)
    ]
    dispinterface HiLoLines {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(000208C3-0000-0000-C000-000000000046),
      helpcontext(0x00020083)
    ]
    dispinterface Gridlines {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(000208C4-0000-0000-C000-000000000046),
      helpcontext(0x00020084)
    ]
    dispinterface DropLines {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(00024437-0000-0000-C000-000000000046),
      helpcontext(0x000200cd)
    ]
    dispinterface LeaderLines {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x000000eb), helpcontext(0x000100eb)]
            void Select();
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(000208C5-0000-0000-C000-000000000046),
      helpcontext(0x00020085)
    ]
    dispinterface UpBars {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
            ChartFillFormat* Fill();
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(000208C6-0000-0000-C000-000000000046),
      helpcontext(0x00020086)
    ]
    dispinterface DownBars {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
            ChartFillFormat* Fill();
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(000208C7-0000-0000-C000-000000000046),
      helpcontext(0x00020087)
    ]
    dispinterface Floor {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000070), helpcontext(0x00010070)]
            VARIANT ClearFormats();
            [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
            ChartFillFormat* Fill();
            [id(0x000000a1), propget, helpcontext(0x000100a1)]
            VARIANT PictureType();
            [id(0x000000a1), propput, helpcontext(0x000100a1)]
            void PictureType([in] VARIANT rhs);
            [id(0x000000d3), helpcontext(0x000100d3)]
            void Paste();
            [id(0x00000a5c), propget, helpcontext(0x00010a5c)]
            long Thickness();
            [id(0x00000a5c), propput, helpcontext(0x00010a5c)]
            void Thickness([in] long rhs);
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(000208C8-0000-0000-C000-000000000046),
      helpcontext(0x00020088)
    ]
    dispinterface Walls {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000070), helpcontext(0x00010070)]
            VARIANT ClearFormats();
            [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
            ChartFillFormat* Fill();
            [id(0x000000a1), propget, helpcontext(0x000100a1)]
            VARIANT PictureType();
            [id(0x000000a1), propput, helpcontext(0x000100a1)]
            void PictureType([in] VARIANT rhs);
            [id(0x000000d3), helpcontext(0x000100d3)]
            void Paste();
            [id(0x000000a2), propget, helpcontext(0x000100a2)]
            VARIANT PictureUnit();
            [id(0x000000a2), propput, helpcontext(0x000100a2)]
            void PictureUnit([in] VARIANT rhs);
            [id(0x00000a5c), propget, helpcontext(0x00010a5c)]
            long Thickness();
            [id(0x00000a5c), propput, helpcontext(0x00010a5c)]
            void Thickness([in] long rhs);
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(000208C9-0000-0000-C000-000000000046),
      helpcontext(0x00020089)
    ]
    dispinterface TickLabels {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000c1), propget, helpcontext(0x000100c1)]
            BSTR NumberFormat();
            [id(0x000000c1), propput, helpcontext(0x000100c1)]
            void NumberFormat([in] BSTR rhs);
            [id(0x000000c2), propget, helpcontext(0x000100c2)]
            VARIANT_BOOL NumberFormatLinked();
            [id(0x000000c2), propput, helpcontext(0x000100c2)]
            void NumberFormatLinked([in] VARIANT_BOOL rhs);
            [id(0x00000449), propget, helpcontext(0x00010449)]
            VARIANT NumberFormatLocal();
            [id(0x00000449), propput, helpcontext(0x00010449)]
            void NumberFormatLocal([in] VARIANT rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            XlTickLabelOrientation Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] XlTickLabelOrientation rhs);
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x000005f5), propget, hidden, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, hidden, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000762), propget, helpcontext(0x00010762)]
            long Depth();
            [id(0x000000fe), propget, helpcontext(0x000100fe)]
            long Offset();
            [id(0x000000fe), propput, helpcontext(0x000100fe)]
            void Offset([in] long rhs);
            [id(0x000001c5), propget, helpcontext(0x000101c5)]
            long Alignment();
            [id(0x000001c5), propput, helpcontext(0x000101c5)]
            void Alignment([in] long rhs);
            [id(0x00000a5d), propget, helpcontext(0x00010a5d)]
            VARIANT_BOOL MultiLevel();
            [id(0x00000a5d), propput, helpcontext(0x00010a5d)]
            void MultiLevel([in] VARIANT_BOOL rhs);
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(000208CB-0000-0000-C000-000000000046),
      helpcontext(0x0002008a)
    ]
    dispinterface PlotArea {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000070), helpcontext(0x00010070)]
            VARIANT ClearFormats();
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
            ChartFillFormat* Fill();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x00000a5e), propget, hidden, helpcontext(0x00010a5e)]
            double _InsideLeft();
            [id(0x00000a5f), propget, hidden, helpcontext(0x00010a5f)]
            double _InsideTop();
            [id(0x00000a60), propget, hidden, helpcontext(0x00010a60)]
            double _InsideWidth();
            [id(0x00000a61), propget, hidden, helpcontext(0x00010a61)]
            double _InsideHeight();
            [id(0x00000683), propget, helpcontext(0x00010683)]
            double InsideLeft();
            [id(0x00000683), propput, helpcontext(0x00010683)]
            void InsideLeft([in] double rhs);
            [id(0x00000684), propget, helpcontext(0x00010684)]
            double InsideTop();
            [id(0x00000684), propput, helpcontext(0x00010684)]
            void InsideTop([in] double rhs);
            [id(0x00000685), propget, helpcontext(0x00010685)]
            double InsideWidth();
            [id(0x00000685), propput, helpcontext(0x00010685)]
            void InsideWidth([in] double rhs);
            [id(0x00000686), propget, helpcontext(0x00010686)]
            double InsideHeight();
            [id(0x00000686), propput, helpcontext(0x00010686)]
            void InsideHeight([in] double rhs);
            [id(0x00000085), propget, helpcontext(0x00010085)]
            XlChartElementPosition Position();
            [id(0x00000085), propput, helpcontext(0x00010085)]
            void Position([in] XlChartElementPosition rhs);
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(000208CC-0000-0000-C000-000000000046),
      helpcontext(0x0002008b)
    ]
    dispinterface ChartArea {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
            Border* Border();
            [id(0x0000006f), helpcontext(0x0001006f)]
            VARIANT Clear();
            [id(0x00000071), helpcontext(0x00010071)]
            VARIANT ClearContents();
            [id(0x00000227), helpcontext(0x00010227)]
            VARIANT Copy();
            [id(0x00000092), propget, hidden, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x00000070), helpcontext(0x00010070)]
            VARIANT ClearFormats();
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
            ChartFillFormat* Fill();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x000005f5), propget, hidden, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, hidden, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
            [id(0x0000026b), propget, helpcontext(0x0001026b)]
            VARIANT_BOOL RoundedCorners();
            [id(0x0000026b), propput, helpcontext(0x0001026b)]
            void RoundedCorners([in] VARIANT_BOOL rhs);
    };

    [
      uuid(000208CD-0000-0000-C000-000000000046),
      helpcontext(0x0002008c)
    ]
    dispinterface Legend {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000092), propget, hidden, helpcontext(0x00010092)]
            Font* Font();
            [id(0x000000ad), helpcontext(0x000100ad)]
            IDispatch* LegendEntries([in, optional] VARIANT Index);
            [id(0x00000085), propget, helpcontext(0x00010085)]
            XlLegendPosition Position();
            [id(0x00000085), propput, helpcontext(0x00010085)]
            void Position([in] XlLegendPosition rhs);
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x0000006f), helpcontext(0x0001006f)]
            VARIANT Clear();
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            double Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] double rhs);
            [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
            ChartFillFormat* Fill();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            double Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] double rhs);
            [id(0x000005f5), propget, hidden, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, hidden, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000a58), propget, helpcontext(0x00010a58)]
            VARIANT_BOOL IncludeInLayout();
            [id(0x00000a58), propput, helpcontext(0x00010a58)]
            void IncludeInLayout([in] VARIANT_BOOL rhs);
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(000208CE-0000-0000-C000-000000000046),
      helpcontext(0x0002008d)
    ]
    dispinterface ErrorBars {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000070), helpcontext(0x00010070)]
            VARIANT ClearFormats();
            [id(0x00000464), propget, helpcontext(0x00010464)]
            XlEndStyleCap EndStyle();
            [id(0x00000464), propput, helpcontext(0x00010464)]
            void EndStyle([in] XlEndStyleCap rhs);
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(00020843-0000-0000-C000-000000000046),
      helpcontext(0x00020003)
    ]
    dispinterface DataTable {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000ab), propget, helpcontext(0x000100ab)]
            VARIANT_BOOL ShowLegendKey();
            [id(0x000000ab), propput, helpcontext(0x000100ab)]
            void ShowLegendKey([in] VARIANT_BOOL rhs);
            [id(0x00000687), propget, helpcontext(0x00010687)]
            VARIANT_BOOL HasBorderHorizontal();
            [id(0x00000687), propput, helpcontext(0x00010687)]
            void HasBorderHorizontal([in] VARIANT_BOOL rhs);
            [id(0x00000688), propget, helpcontext(0x00010688)]
            VARIANT_BOOL HasBorderVertical();
            [id(0x00000688), propput, helpcontext(0x00010688)]
            void HasBorderVertical([in] VARIANT_BOOL rhs);
            [id(0x00000689), propget, helpcontext(0x00010689)]
            VARIANT_BOOL HasBorderOutline();
            [id(0x00000689), propput, helpcontext(0x00010689)]
            void HasBorderOutline([in] VARIANT_BOOL rhs);
            [id(0x00000080), propget, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x000000eb), helpcontext(0x000100eb)]
            void Select();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x000005f5), propget, hidden, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, hidden, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(00024438-0000-0000-C000-000000000046),
      helpcontext(0x000200ce)
    ]
    dispinterface Phonetic {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000068a), propget, helpcontext(0x0001068a)]
            long CharacterType();
            [id(0x0000068a), propput, helpcontext(0x0001068a)]
            void CharacterType([in] long rhs);
            [id(0x000001c5), propget, helpcontext(0x000101c5)]
            long Alignment();
            [id(0x000001c5), propput, helpcontext(0x000101c5)]
            void Alignment([in] long rhs);
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
    };

    [
      uuid(00024439-0000-0000-C000-000000000046),
      helpcontext(0x000200cf)
    ]
    dispinterface Shape {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000068b), helpcontext(0x0001068b)]
            void Apply();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            Shape* Duplicate();
            [id(0x0000068c), helpcontext(0x0001068c)]
            void Flip([in] MsoFlipCmd FlipCmd);
            [id(0x0000068e), helpcontext(0x0001068e)]
            void IncrementLeft([in] single Increment);
            [id(0x00000690), helpcontext(0x00010690)]
            void IncrementRotation([in] single Increment);
            [id(0x00000691), helpcontext(0x00010691)]
            void IncrementTop([in] single Increment);
            [id(0x00000692), helpcontext(0x00010692)]
            void PickUp();
            [id(0x00000693), helpcontext(0x00010693)]
            void RerouteConnections();
            [id(0x00000694), helpcontext(0x00010694)]
            void ScaleHeight(
                            [in] single Factor, 
                            [in] MsoTriState RelativeToOriginalSize, 
                            [in, optional] VARIANT Scale);
            [id(0x00000698), helpcontext(0x00010698)]
            void ScaleWidth(
                            [in] single Factor, 
                            [in] MsoTriState RelativeToOriginalSize, 
                            [in, optional] VARIANT Scale);
            [id(0x000000eb), helpcontext(0x000100eb)]
            void Select([in, optional] VARIANT Replace);
            [id(0x00000699), helpcontext(0x00010699)]
            void SetShapesDefaultProperties();
            [id(0x000000f4), helpcontext(0x000100f4)]
            ShapeRange* Ungroup();
            [id(0x0000026e), helpcontext(0x0001026e)]
            void ZOrder([in] MsoZOrderCmd ZOrderCmd);
            [id(0x0000069b), propget, helpcontext(0x0001069b)]
            Adjustments* Adjustments();
            [id(0x0000069c), propget, helpcontext(0x0001069c)]
            TextFrame* TextFrame();
            [id(0x0000069d), propget, helpcontext(0x0001069d)]
            MsoAutoShapeType AutoShapeType();
            [id(0x0000069d), propput, helpcontext(0x0001069d)]
            void AutoShapeType([in] MsoAutoShapeType rhs);
            [id(0x0000069e), propget, helpcontext(0x0001069e)]
            CalloutFormat* Callout();
            [id(0x0000069f), propget, helpcontext(0x0001069f)]
            long ConnectionSiteCount();
            [id(0x000006a0), propget, helpcontext(0x000106a0)]
            MsoTriState Connector();
            [id(0x000006a1), propget, helpcontext(0x000106a1)]
            ConnectorFormat* ConnectorFormat();
            [id(0x0000067f), propget, helpcontext(0x0001067f)]
            FillFormat* Fill();
            [id(0x000006a2), propget, helpcontext(0x000106a2)]
            GroupShapes* GroupItems();
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            single Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] single rhs);
            [id(0x000006a3), propget, helpcontext(0x000106a3)]
            MsoTriState HorizontalFlip();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            single Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] single rhs);
            [id(0x00000331), propget, helpcontext(0x00010331)]
            LineFormat* Line();
            [id(0x000006a4), propget, helpcontext(0x000106a4)]
            MsoTriState LockAspectRatio();
            [id(0x000006a4), propput, helpcontext(0x000106a4)]
            void LockAspectRatio([in] MsoTriState rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x000006a5), propget, helpcontext(0x000106a5)]
            ShapeNodes* Nodes();
            [id(0x0000003b), propget, helpcontext(0x0001003b)]
            single Rotation();
            [id(0x0000003b), propput, helpcontext(0x0001003b)]
            void Rotation([in] single rhs);
            [id(0x0000065f), propget, helpcontext(0x0001065f)]
            PictureFormat* PictureFormat();
            [id(0x00000067), propget, helpcontext(0x00010067)]
            ShadowFormat* Shadow();
            [id(0x000006a6), propget, helpcontext(0x000106a6)]
            TextEffectFormat* TextEffect();
            [id(0x000006a7), propget, helpcontext(0x000106a7)]
            ThreeDFormat* ThreeD();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            single Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] single rhs);
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            MsoShapeType Type();
            [id(0x000006a8), propget, helpcontext(0x000106a8)]
            MsoTriState VerticalFlip();
            [id(0x0000026d), propget, helpcontext(0x0001026d)]
            VARIANT Vertices();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            MsoTriState Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] MsoTriState rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            single Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] single rhs);
            [id(0x000006a9), propget, helpcontext(0x000106a9)]
            long ZOrderPosition();
            [id(0x000006aa), propget, helpcontext(0x000106aa)]
            Hyperlink* Hyperlink();
            [id(0x000006ab), propget, helpcontext(0x000106ab)]
            MsoBlackWhiteMode BlackWhiteMode();
            [id(0x000006ab), propput, helpcontext(0x000106ab)]
            void BlackWhiteMode([in] MsoBlackWhiteMode rhs);
            [id(0x000006ac), propget, hidden, helpcontext(0x000106ac)]
            IDispatch* DrawingObject();
            [id(0x00000254), propget, helpcontext(0x00010254)]
            BSTR OnAction();
            [id(0x00000254), propput, helpcontext(0x00010254)]
            void OnAction([in] BSTR rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x0000026c), propget, helpcontext(0x0001026c)]
            Range* TopLeftCell();
            [id(0x00000267), propget, helpcontext(0x00010267)]
            Range* BottomRightCell();
            [id(0x00000269), propget, helpcontext(0x00010269)]
            XlPlacement Placement();
            [id(0x00000269), propput, helpcontext(0x00010269)]
            void Placement([in] XlPlacement rhs);
            [id(0x00000227), helpcontext(0x00010227)]
            void Copy();
            [id(0x00000235), helpcontext(0x00010235)]
            void Cut();
            [id(0x000000d5), helpcontext(0x000100d5)]
            void CopyPicture(
                            [in, optional] VARIANT Appearance, 
                            [in, optional] VARIANT Format);
            [id(0x000006ad), propget, helpcontext(0x000106ad)]
            ControlFormat* ControlFormat();
            [id(0x000006ae), propget, helpcontext(0x000106ae)]
            LinkFormat* LinkFormat();
            [id(0x000006af), propget, helpcontext(0x000106af)]
            OLEFormat* OLEFormat();
            [id(0x000006b0), propget, helpcontext(0x000106b0)]
            XlFormControl FormControlType();
            [id(0x00000763), propget, helpcontext(0x00010763)]
            BSTR AlternativeText();
            [id(0x00000763), propput, helpcontext(0x00010763)]
            void AlternativeText([in] BSTR rhs);
            [id(0x00000764), propget, hidden, helpcontext(0x00010764)]
            Script* Script();
            [id(0x00000875), propget, hidden, helpcontext(0x00010875)]
            DiagramNode* DiagramNode();
            [id(0x00000876), propget, hidden, helpcontext(0x00010876)]
            MsoTriState HasDiagramNode();
            [id(0x00000877), propget, hidden, helpcontext(0x00010877)]
            Diagram* Diagram();
            [id(0x00000878), propget, hidden, helpcontext(0x00010878)]
            MsoTriState HasDiagram();
            [id(0x00000879), propget, helpcontext(0x00010879)]
            MsoTriState Child();
            [id(0x0000087a), propget, helpcontext(0x0001087a)]
            Shape* ParentGroup();
            [id(0x0000087b), propget, hidden, helpcontext(0x0001087b)]
            CanvasShapes* CanvasItems();
            [id(0x0000023a), propget, helpcontext(0x0001023a)]
            long ID();
            [id(0x0000087c), hidden, helpcontext(0x0001087c)]
            void CanvasCropLeft([in] single Increment);
            [id(0x0000087d), hidden, helpcontext(0x0001087d)]
            void CanvasCropTop([in] single Increment);
            [id(0x0000087e), hidden, helpcontext(0x0001087e)]
            void CanvasCropRight([in] single Increment);
            [id(0x0000087f), hidden, helpcontext(0x0001087f)]
            void CanvasCropBottom([in] single Increment);
            [id(0x00000007), propget, helpcontext(0x00010007)]
            Chart* Chart();
            [id(0x00000a62), propget, helpcontext(0x00010a62)]
            MsoTriState HasChart();
            [id(0x00000a63), propget, helpcontext(0x00010a63)]
            TextFrame2* TextFrame2();
            [id(0x00000a64), propget, helpcontext(0x00010a64)]
            MsoShapeStyleIndex ShapeStyle();
            [id(0x00000a64), propput, helpcontext(0x00010a64)]
            void ShapeStyle([in] MsoShapeStyleIndex rhs);
            [id(0x00000a65), propget, helpcontext(0x00010a65)]
            MsoBackgroundStyleIndex BackgroundStyle();
            [id(0x00000a65), propput, helpcontext(0x00010a65)]
            void BackgroundStyle([in] MsoBackgroundStyleIndex rhs);
            [id(0x00000a66), propget, helpcontext(0x00010a66)]
            SoftEdgeFormat* SoftEdge();
            [id(0x00000a67), propget, helpcontext(0x00010a67)]
            GlowFormat* Glow();
            [id(0x00000a68), propget, helpcontext(0x00010a68)]
            ReflectionFormat* Reflection();
    };

    [
      uuid(0002443A-0000-0000-C000-000000000046),
      helpcontext(0x000200d0)
    ]
    dispinterface Shapes {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            Shape* Item([in] VARIANT Index);
            [id(00000000), helpcontext(0x00010000)]
            Shape* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000006b1), helpcontext(0x000106b1)]
            Shape* AddCallout(
                            [in] MsoCalloutType Type, 
                            [in] single Left, 
                            [in] single Top, 
                            [in] single Width, 
                            [in] single Height);
            [id(0x000006b2), helpcontext(0x000106b2)]
            Shape* AddConnector(
                            [in] MsoConnectorType Type, 
                            [in] single BeginX, 
                            [in] single BeginY, 
                            [in] single EndX, 
                            [in] single EndY);
            [id(0x000006b7), helpcontext(0x000106b7)]
            Shape* AddCurve([in] VARIANT SafeArrayOfPoints);
            [id(0x000006b9), helpcontext(0x000106b9)]
            Shape* AddLabel(
                            [in] MsoTextOrientation Orientation, 
                            [in] single Left, 
                            [in] single Top, 
                            [in] single Width, 
                            [in] single Height);
            [id(0x000006ba), helpcontext(0x000106ba)]
            Shape* AddLine(
                            [in] single BeginX, 
                            [in] single BeginY, 
                            [in] single EndX, 
                            [in] single EndY);
            [id(0x000006bb), helpcontext(0x000106bb)]
            Shape* AddPicture(
                            [in] BSTR Filename, 
                            [in] MsoTriState LinkToFile, 
                            [in] MsoTriState SaveWithDocument, 
                            [in] single Left, 
                            [in] single Top, 
                            [in] single Width, 
                            [in] single Height);
            [id(0x000006be), helpcontext(0x000106be)]
            Shape* AddPolyline([in] VARIANT SafeArrayOfPoints);
            [id(0x000006bf), helpcontext(0x000106bf)]
            Shape* AddShape(
                            [in] MsoAutoShapeType Type, 
                            [in] single Left, 
                            [in] single Top, 
                            [in] single Width, 
                            [in] single Height);
            [id(0x000006c0), helpcontext(0x000106c0)]
            Shape* AddTextEffect(
                            [in] MsoPresetTextEffect PresetTextEffect, 
                            [in] BSTR Text, 
                            [in] BSTR FontName, 
                            [in] single FontSize, 
                            [in] MsoTriState FontBold, 
                            [in] MsoTriState FontItalic, 
                            [in] single Left, 
                            [in] single Top);
            [id(0x000006c6), helpcontext(0x000106c6)]
            Shape* AddTextbox(
                            [in] MsoTextOrientation Orientation, 
                            [in] single Left, 
                            [in] single Top, 
                            [in] single Width, 
                            [in] single Height);
            [id(0x000006c7), helpcontext(0x000106c7)]
            FreeformBuilder* BuildFreeform(
                            [in] MsoEditingType EditingType, 
                            [in] single X1, 
                            [in] single Y1);
            [id(0x000000c5), propget, helpcontext(0x000100c5)]
            ShapeRange* Range([in] VARIANT Index);
            [id(0x000006c9), helpcontext(0x000106c9)]
            void SelectAll();
            [id(0x000006ca), helpcontext(0x000106ca)]
            Shape* AddFormControl(
                            [in] XlFormControl Type, 
                            [in] long Left, 
                            [in] long Top, 
                            [in] long Width, 
                            [in] long Height);
            [id(0x000006cb), helpcontext(0x000106cb)]
            Shape* AddOLEObject(
                            [in, optional] VARIANT ClassType, 
                            [in, optional] VARIANT Filename, 
                            [in, optional] VARIANT Link, 
                            [in, optional] VARIANT DisplayAsIcon, 
                            [in, optional] VARIANT IconFileName, 
                            [in, optional] VARIANT IconIndex, 
                            [in, optional] VARIANT IconLabel, 
                            [in, optional] VARIANT Left, 
                            [in, optional] VARIANT Top, 
                            [in, optional] VARIANT Width, 
                            [in, optional] VARIANT Height);
            [id(0x00000880), hidden, helpcontext(0x00010880)]
            Shape* AddDiagram(
                            [in] MsoDiagramType Type, 
                            [in] single Left, 
                            [in] single Top, 
                            [in] single Width, 
                            [in] single Height);
            [id(0x00000881), hidden, helpcontext(0x00010881)]
            Shape* AddCanvas(
                            [in] single Left, 
                            [in] single Top, 
                            [in] single Width, 
                            [in] single Height);
            [id(0x00000a69), helpcontext(0x00010a69)]
            Shape* AddChart(
                            [in, optional] VARIANT XlChartType, 
                            [in, optional] VARIANT Left, 
                            [in, optional] VARIANT Top, 
                            [in, optional] VARIANT Width, 
                            [in, optional] VARIANT Height);
    };

    [
      uuid(0002443B-0000-0000-C000-000000000046),
      helpcontext(0x000200d1)
    ]
    dispinterface ShapeRange {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            Shape* Item([in] VARIANT Index);
            [id(00000000), helpcontext(0x00010000)]
            Shape* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000006cc), helpcontext(0x000106cc)]
            void Align(
                            [in] MsoAlignCmd AlignCmd, 
                            [in] MsoTriState RelativeTo);
            [id(0x0000068b), helpcontext(0x0001068b)]
            void Apply();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x000006ce), helpcontext(0x000106ce)]
            void Distribute(
                            [in] MsoDistributeCmd DistributeCmd, 
                            [in] MsoTriState RelativeTo);
            [id(0x0000040f), helpcontext(0x0001040f)]
            ShapeRange* Duplicate();
            [id(0x0000068c), helpcontext(0x0001068c)]
            void Flip([in] MsoFlipCmd FlipCmd);
            [id(0x0000068e), helpcontext(0x0001068e)]
            void IncrementLeft([in] single Increment);
            [id(0x00000690), helpcontext(0x00010690)]
            void IncrementRotation([in] single Increment);
            [id(0x00000691), helpcontext(0x00010691)]
            void IncrementTop([in] single Increment);
            [id(0x0000002e), helpcontext(0x0001002e)]
            Shape* Group();
            [id(0x00000692), helpcontext(0x00010692)]
            void PickUp();
            [id(0x00000693), helpcontext(0x00010693)]
            void RerouteConnections();
            [id(0x000006d0), helpcontext(0x000106d0)]
            Shape* Regroup();
            [id(0x00000694), helpcontext(0x00010694)]
            void ScaleHeight(
                            [in] single Factor, 
                            [in] MsoTriState RelativeToOriginalSize, 
                            [in, optional] VARIANT Scale);
            [id(0x00000698), helpcontext(0x00010698)]
            void ScaleWidth(
                            [in] single Factor, 
                            [in] MsoTriState RelativeToOriginalSize, 
                            [in, optional] VARIANT Scale);
            [id(0x000000eb), helpcontext(0x000100eb)]
            void Select([in, optional] VARIANT Replace);
            [id(0x00000699), helpcontext(0x00010699)]
            void SetShapesDefaultProperties();
            [id(0x000000f4), helpcontext(0x000100f4)]
            ShapeRange* Ungroup();
            [id(0x0000026e), helpcontext(0x0001026e)]
            void ZOrder([in] MsoZOrderCmd ZOrderCmd);
            [id(0x0000069b), propget, helpcontext(0x0001069b)]
            Adjustments* Adjustments();
            [id(0x0000069c), propget, helpcontext(0x0001069c)]
            TextFrame* TextFrame();
            [id(0x0000069d), propget, helpcontext(0x0001069d)]
            MsoAutoShapeType AutoShapeType();
            [id(0x0000069d), propput, helpcontext(0x0001069d)]
            void AutoShapeType([in] MsoAutoShapeType rhs);
            [id(0x0000069e), propget, helpcontext(0x0001069e)]
            CalloutFormat* Callout();
            [id(0x0000069f), propget, helpcontext(0x0001069f)]
            long ConnectionSiteCount();
            [id(0x000006a0), propget, helpcontext(0x000106a0)]
            MsoTriState Connector();
            [id(0x000006a1), propget, helpcontext(0x000106a1)]
            ConnectorFormat* ConnectorFormat();
            [id(0x0000067f), propget, helpcontext(0x0001067f)]
            FillFormat* Fill();
            [id(0x000006a2), propget, helpcontext(0x000106a2)]
            GroupShapes* GroupItems();
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            single Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] single rhs);
            [id(0x000006a3), propget, helpcontext(0x000106a3)]
            MsoTriState HorizontalFlip();
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            single Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] single rhs);
            [id(0x00000331), propget, helpcontext(0x00010331)]
            LineFormat* Line();
            [id(0x000006a4), propget, helpcontext(0x000106a4)]
            MsoTriState LockAspectRatio();
            [id(0x000006a4), propput, helpcontext(0x000106a4)]
            void LockAspectRatio([in] MsoTriState rhs);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x000006a5), propget, helpcontext(0x000106a5)]
            ShapeNodes* Nodes();
            [id(0x0000003b), propget, helpcontext(0x0001003b)]
            single Rotation();
            [id(0x0000003b), propput, helpcontext(0x0001003b)]
            void Rotation([in] single rhs);
            [id(0x0000065f), propget, helpcontext(0x0001065f)]
            PictureFormat* PictureFormat();
            [id(0x00000067), propget, helpcontext(0x00010067)]
            ShadowFormat* Shadow();
            [id(0x000006a6), propget, helpcontext(0x000106a6)]
            TextEffectFormat* TextEffect();
            [id(0x000006a7), propget, helpcontext(0x000106a7)]
            ThreeDFormat* ThreeD();
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            single Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] single rhs);
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            MsoShapeType Type();
            [id(0x000006a8), propget, helpcontext(0x000106a8)]
            MsoTriState VerticalFlip();
            [id(0x0000026d), propget, helpcontext(0x0001026d)]
            VARIANT Vertices();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            MsoTriState Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] MsoTriState rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            single Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] single rhs);
            [id(0x000006a9), propget, helpcontext(0x000106a9)]
            long ZOrderPosition();
            [id(0x000006ab), propget, helpcontext(0x000106ab)]
            MsoBlackWhiteMode BlackWhiteMode();
            [id(0x000006ab), propput, helpcontext(0x000106ab)]
            void BlackWhiteMode([in] MsoBlackWhiteMode rhs);
            [id(0x00000763), propget, helpcontext(0x00010763)]
            BSTR AlternativeText();
            [id(0x00000763), propput, helpcontext(0x00010763)]
            void AlternativeText([in] BSTR rhs);
            [id(0x00000875), propget, hidden, helpcontext(0x00010875)]
            DiagramNode* DiagramNode();
            [id(0x00000876), propget, hidden, helpcontext(0x00010876)]
            MsoTriState HasDiagramNode();
            [id(0x00000877), propget, hidden, helpcontext(0x00010877)]
            Diagram* Diagram();
            [id(0x00000878), propget, hidden, helpcontext(0x00010878)]
            MsoTriState HasDiagram();
            [id(0x00000879), propget, helpcontext(0x00010879)]
            MsoTriState Child();
            [id(0x0000087a), propget, helpcontext(0x0001087a)]
            Shape* ParentGroup();
            [id(0x0000087b), propget, hidden, helpcontext(0x0001087b)]
            CanvasShapes* CanvasItems();
            [id(0x0000023a), propget, helpcontext(0x0001023a)]
            long ID();
            [id(0x0000087c), hidden, helpcontext(0x0001087c)]
            void CanvasCropLeft([in] single Increment);
            [id(0x0000087d), hidden, helpcontext(0x0001087d)]
            void CanvasCropTop([in] single Increment);
            [id(0x0000087e), hidden, helpcontext(0x0001087e)]
            void CanvasCropRight([in] single Increment);
            [id(0x0000087f), hidden, helpcontext(0x0001087f)]
            void CanvasCropBottom([in] single Increment);
            [id(0x00000007), propget, helpcontext(0x00010007)]
            Chart* Chart();
            [id(0x00000a62), propget, helpcontext(0x00010a62)]
            MsoTriState HasChart();
            [id(0x00000a63), propget, helpcontext(0x00010a63)]
            TextFrame2* TextFrame2();
            [id(0x00000a64), propget, helpcontext(0x00010a64)]
            MsoShapeStyleIndex ShapeStyle();
            [id(0x00000a64), propput, helpcontext(0x00010a64)]
            void ShapeStyle([in] MsoShapeStyleIndex rhs);
            [id(0x00000a65), propget, helpcontext(0x00010a65)]
            MsoBackgroundStyleIndex BackgroundStyle();
            [id(0x00000a65), propput, helpcontext(0x00010a65)]
            void BackgroundStyle([in] MsoBackgroundStyleIndex rhs);
            [id(0x00000a66), propget, helpcontext(0x00010a66)]
            SoftEdgeFormat* SoftEdge();
            [id(0x00000a67), propget, helpcontext(0x00010a67)]
            GlowFormat* Glow();
            [id(0x00000a68), propget, helpcontext(0x00010a68)]
            ReflectionFormat* Reflection();
    };

    [
      uuid(0002443C-0000-0000-C000-000000000046),
      helpcontext(0x000200d2)
    ]
    dispinterface GroupShapes {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            Shape* Item([in] VARIANT Index);
            [id(00000000), helpcontext(0x00010000)]
            Shape* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000c5), propget, helpcontext(0x000100c5)]
            ShapeRange* Range([in] VARIANT Index);
    };

    [
      uuid(0002443D-0000-0000-C000-000000000046),
      helpcontext(0x000200d3)
    ]
    dispinterface TextFrame {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000006d1), propget, helpcontext(0x000106d1)]
            single MarginBottom();
            [id(0x000006d1), propput, helpcontext(0x000106d1)]
            void MarginBottom([in] single rhs);
            [id(0x000006d2), propget, helpcontext(0x000106d2)]
            single MarginLeft();
            [id(0x000006d2), propput, helpcontext(0x000106d2)]
            void MarginLeft([in] single rhs);
            [id(0x000006d3), propget, helpcontext(0x000106d3)]
            single MarginRight();
            [id(0x000006d3), propput, helpcontext(0x000106d3)]
            void MarginRight([in] single rhs);
            [id(0x000006d4), propget, helpcontext(0x000106d4)]
            single MarginTop();
            [id(0x000006d4), propput, helpcontext(0x000106d4)]
            void MarginTop([in] single rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            MsoTextOrientation Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] MsoTextOrientation rhs);
            [id(0x0000025b), helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x00000088), propget, helpcontext(0x00010088)]
            XlHAlign HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] XlHAlign rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            XlVAlign VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] XlVAlign rhs);
            [id(0x00000266), propget, helpcontext(0x00010266)]
            VARIANT_BOOL AutoSize();
            [id(0x00000266), propput, helpcontext(0x00010266)]
            void AutoSize([in] VARIANT_BOOL rhs);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x000006d5), propget, helpcontext(0x000106d5)]
            VARIANT_BOOL AutoMargins();
            [id(0x000006d5), propput, helpcontext(0x000106d5)]
            void AutoMargins([in] VARIANT_BOOL rhs);
    };

    [
      uuid(0002443E-0000-0000-C000-000000000046),
      helpcontext(0x000200d4)
    ]
    dispinterface ConnectorFormat {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000006d6), helpcontext(0x000106d6)]
            void BeginConnect(
                            [in] Shape* ConnectedShape, 
                            [in] long ConnectionSite);
            [id(0x000006d9), helpcontext(0x000106d9)]
            void BeginDisconnect();
            [id(0x000006da), helpcontext(0x000106da)]
            void EndConnect(
                            [in] Shape* ConnectedShape, 
                            [in] long ConnectionSite);
            [id(0x000006db), helpcontext(0x000106db)]
            void EndDisconnect();
            [id(0x000006dc), propget, helpcontext(0x000106dc)]
            MsoTriState BeginConnected();
            [id(0x000006dd), propget, helpcontext(0x000106dd)]
            Shape* BeginConnectedShape();
            [id(0x000006de), propget, helpcontext(0x000106de)]
            long BeginConnectionSite();
            [id(0x000006df), propget, helpcontext(0x000106df)]
            MsoTriState EndConnected();
            [id(0x000006e0), propget, helpcontext(0x000106e0)]
            Shape* EndConnectedShape();
            [id(0x000006e1), propget, helpcontext(0x000106e1)]
            long EndConnectionSite();
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            MsoConnectorType Type();
            [id(0x0000006c), propput, helpcontext(0x0001006c)]
            void Type([in] MsoConnectorType rhs);
    };

    [
      uuid(0002443F-0000-0000-C000-000000000046),
      helpcontext(0x000200d5)
    ]
    dispinterface FreeformBuilder {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000006e2), helpcontext(0x000106e2)]
            void AddNodes(
                            [in] MsoSegmentType SegmentType, 
                            [in] MsoEditingType EditingType, 
                            [in] single X1, 
                            [in] single Y1, 
                            [in, optional] VARIANT X2, 
                            [in, optional] VARIANT Y2, 
                            [in, optional] VARIANT X3, 
                            [in, optional] VARIANT Y3);
            [id(0x000006e6), helpcontext(0x000106e6)]
            Shape* ConvertToShape();
    };

    [
      uuid(00024440-0000-0000-C000-000000000046),
      helpcontext(0x000200d6)
    ]
    dispinterface ControlFormat {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000353), helpcontext(0x00010353)]
            void AddItem(
                            [in] BSTR Text, 
                            [in, optional] VARIANT Index);
            [id(0x00000355), helpcontext(0x00010355)]
            void RemoveAllItems();
            [id(0x00000354), helpcontext(0x00010354)]
            void RemoveItem(
                            [in] long Index, 
                            [in, optional] VARIANT Count);
            [id(0x00000350), propget, helpcontext(0x00010350)]
            long DropDownLines();
            [id(0x00000350), propput, helpcontext(0x00010350)]
            void DropDownLines([in] long rhs);
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000034d), propget, helpcontext(0x0001034d)]
            long LargeChange();
            [id(0x0000034d), propput, helpcontext(0x0001034d)]
            void LargeChange([in] long rhs);
            [id(0x00000422), propget, helpcontext(0x00010422)]
            BSTR LinkedCell();
            [id(0x00000422), propput, helpcontext(0x00010422)]
            void LinkedCell([in] BSTR rhs);
            [id(0x0000035d), helpcontext(0x0001035d),
              custom(2941FF83-88D8-4F73-B6A9-BDF8712D000D, propget)]
            VARIANT List([in, optional] VARIANT Index);
            [id(0x00000351), propget, helpcontext(0x00010351)]
            long ListCount();
            [id(0x00000351), propput, helpcontext(0x00010351)]
            void ListCount([in] long rhs);
            [id(0x0000034f), propget, helpcontext(0x0001034f)]
            BSTR ListFillRange();
            [id(0x0000034f), propput, helpcontext(0x0001034f)]
            void ListFillRange([in] BSTR rhs);
            [id(0x00000352), propget, helpcontext(0x00010352)]
            long ListIndex();
            [id(0x00000352), propput, helpcontext(0x00010352)]
            void ListIndex([in] long rhs);
            [id(0x00000268), propget, helpcontext(0x00010268)]
            VARIANT_BOOL LockedText();
            [id(0x00000268), propput, helpcontext(0x00010268)]
            void LockedText([in] VARIANT_BOOL rhs);
            [id(0x0000034a), propget, helpcontext(0x0001034a)]
            long Max();
            [id(0x0000034a), propput, helpcontext(0x0001034a)]
            void Max([in] long rhs);
            [id(0x0000034b), propget, helpcontext(0x0001034b)]
            long Min();
            [id(0x0000034b), propput, helpcontext(0x0001034b)]
            void Min([in] long rhs);
            [id(0x00000020), propget, helpcontext(0x00010020)]
            long MultiSelect();
            [id(0x00000020), propput, helpcontext(0x00010020)]
            void MultiSelect([in] long rhs);
            [id(0x0000026a), propget, helpcontext(0x0001026a)]
            VARIANT_BOOL PrintObject();
            [id(0x0000026a), propput, helpcontext(0x0001026a)]
            void PrintObject([in] VARIANT_BOOL rhs);
            [id(0x0000034c), propget, helpcontext(0x0001034c)]
            long SmallChange();
            [id(0x0000034c), propput, helpcontext(0x0001034c)]
            void SmallChange([in] long rhs);
            [id(00000000), propget, helpcontext(0x00010000)]
            long _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] long rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            long Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] long rhs);
    };

    [
      uuid(00024441-0000-0000-C000-000000000046),
      helpcontext(0x000200d7)
    ]
    dispinterface OLEFormat {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000130), helpcontext(0x00010130)]
            void Activate();
            [id(0x00000419), propget, helpcontext(0x00010419)]
            IDispatch* Object();
            [id(0x000005f3), propget, helpcontext(0x000105f3)]
            BSTR progID();
            [id(0x0000025e), helpcontext(0x0001025e)]
            void Verb([in, optional] VARIANT Verb);
    };

    [
      uuid(00024442-0000-0000-C000-000000000046),
      helpcontext(0x000200d8)
    ]
    dispinterface LinkFormat {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000418), propget, helpcontext(0x00010418)]
            VARIANT_BOOL AutoUpdate();
            [id(0x00000418), propput, helpcontext(0x00010418)]
            void AutoUpdate([in] VARIANT_BOOL rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT_BOOL Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT_BOOL rhs);
            [id(0x000002a8), helpcontext(0x000102a8)]
            void Update();
    };

    [
      uuid(00024443-0000-0000-C000-000000000046),
      helpcontext(0x000200d9)
    ]
    dispinterface PublishObjects {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            PublishObject* Add(
                            [in] XlSourceType SourceType, 
                            [in] BSTR Filename, 
                            [in, optional] VARIANT Sheet, 
                            [in, optional] VARIANT Source, 
                            [in, optional] VARIANT HtmlType, 
                            [in, optional] VARIANT DivID, 
                            [in, optional] VARIANT Title);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            PublishObject* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            PublishObject* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000767), helpcontext(0x00010767)]
            void Publish();
    };

    [
      uuid(00024445-0000-0000-C000-000000000046),
      helpcontext(0x000200db)
    ]
    dispinterface OLEDBError {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000643), propget, helpcontext(0x00010643)]
            BSTR SqlState();
            [id(0x000005d2), propget, helpcontext(0x000105d2)]
            BSTR ErrorString();
            [id(0x00000769), propget, helpcontext(0x00010769)]
            long Native();
            [id(0x000001c3), propget, helpcontext(0x000101c3)]
            long Number();
            [id(0x0000076a), propget, helpcontext(0x0001076a)]
            long Stage();
    };

    [
      uuid(00024446-0000-0000-C000-000000000046),
      helpcontext(0x000200dc)
    ]
    dispinterface OLEDBErrors {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            OLEDBError* Item([in] long Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            OLEDBError* _Default([in] long Index);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00024447-0000-0000-C000-000000000046),
      helpcontext(0x000200dd)
    ]
    dispinterface Phonetics {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x00000260), propget, helpcontext(0x00010260)]
            long Start();
            [id(0x00000261), propget, helpcontext(0x00010261)]
            long Length();
            [id(0x0000022e), propget, helpcontext(0x0001022e)]
            VARIANT_BOOL Visible();
            [id(0x0000022e), propput, helpcontext(0x0001022e)]
            void Visible([in] VARIANT_BOOL rhs);
            [id(0x0000068a), propget, helpcontext(0x0001068a)]
            long CharacterType();
            [id(0x0000068a), propput, helpcontext(0x0001068a)]
            void CharacterType([in] long rhs);
            [id(0x000001c5), propget, helpcontext(0x000101c5)]
            long Alignment();
            [id(0x000001c5), propput, helpcontext(0x000101c5)]
            void Alignment([in] long rhs);
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            IDispatch* Item([in] long Index);
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x000000b5), helpcontext(0x000100b5)]
            void Add(
                            [in] long Start, 
                            [in] long Length, 
                            [in] BSTR Text);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(00000000), propget, helpcontext(0x00010000)]
            IDispatch* _Default([in] long Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002444A-0000-0000-C000-000000000046),
      helpcontext(0x000200e0)
    ]
    dispinterface PivotLayout {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000002c9), propget, hidden, helpcontext(0x000102c9)]
            IDispatch* ColumnFields([in, optional] VARIANT Index);
            [id(0x000002cb), propget, hidden, helpcontext(0x000102cb)]
            IDispatch* DataFields([in, optional] VARIANT Index);
            [id(0x000002ca), propget, hidden, helpcontext(0x000102ca)]
            IDispatch* PageFields([in, optional] VARIANT Index);
            [id(0x000002c8), propget, hidden, helpcontext(0x000102c8)]
            IDispatch* RowFields([in, optional] VARIANT Index);
            [id(0x000002c7), propget, hidden, helpcontext(0x000102c7)]
            IDispatch* HiddenFields([in, optional] VARIANT Index);
            [id(0x000002c6), propget, hidden, helpcontext(0x000102c6)]
            IDispatch* VisibleFields([in, optional] VARIANT Index);
            [id(0x000002ce), propget, hidden, helpcontext(0x000102ce)]
            IDispatch* PivotFields([in, optional] VARIANT Index);
            [id(0x0000072f), propget, hidden, helpcontext(0x0001072f)]
            CubeFields* CubeFields();
            [id(0x000005d8), propget, hidden, helpcontext(0x000105d8)]
            PivotCache* PivotCache();
            [id(0x000002cc), propget, helpcontext(0x000102cc)]
            PivotTable* PivotTable();
            [id(0x000002ba), propget, hidden, helpcontext(0x000102ba)]
            BSTR InnerDetail();
            [id(0x000002ba), propput, hidden, helpcontext(0x000102ba)]
            void InnerDetail([in] BSTR rhs);
            [id(0x000002c4), hidden, helpcontext(0x000102c4)]
            void AddFields(
                            [in, optional] VARIANT RowFields, 
                            [in, optional] VARIANT ColumnFields, 
                            [in, optional] VARIANT PageFields, 
                            [in, optional] VARIANT AppendField);
    };

    [
      uuid(0002084C-0000-0000-C000-000000000046),
      helpcontext(0x0002000f)
    ]
    dispinterface DisplayUnitLabel {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000eb), helpcontext(0x000100eb)]
            VARIANT Select();
            [id(0x00000080), propget, hidden, helpcontext(0x00010080)]
            Border* Border();
            [id(0x00000075), helpcontext(0x00010075)]
            VARIANT Delete();
            [id(0x00000081), propget, hidden, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x0000067f), propget, hidden, helpcontext(0x0001067f)]
            ChartFillFormat* Fill();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000008b), propput, helpcontext(0x0001008b)]
            void Caption([in] BSTR rhs);
            [id(0x0000025b), propget, helpcontext(0x0001025b)]
            Characters* Characters(
                            [in, optional] VARIANT Start, 
                            [in, optional] VARIANT Length);
            [id(0x00000092), propget, hidden, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x0000007f), propget, helpcontext(0x0001007f)]
            double Left();
            [id(0x0000007f), propput, helpcontext(0x0001007f)]
            void Left([in] double rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x00000067), propget, helpcontext(0x00010067)]
            VARIANT_BOOL Shadow();
            [id(0x00000067), propput, helpcontext(0x00010067)]
            void Shadow([in] VARIANT_BOOL rhs);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x0000007e), propget, helpcontext(0x0001007e)]
            double Top();
            [id(0x0000007e), propput, helpcontext(0x0001007e)]
            void Top([in] double rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x000003cf), propget, helpcontext(0x000103cf)]
            long ReadingOrder();
            [id(0x000003cf), propput, helpcontext(0x000103cf)]
            void ReadingOrder([in] long rhs);
            [id(0x000005f5), propget, hidden, helpcontext(0x000105f5)]
            VARIANT AutoScaleFont();
            [id(0x000005f5), propput, hidden, helpcontext(0x000105f5)]
            void AutoScaleFont([in] VARIANT rhs);
            [id(0x00010015), restricted, hidden]
            void _Dummy21();
            [id(0x00000085), propget, helpcontext(0x00010085)]
            XlChartElementPosition Position();
            [id(0x00000085), propput, helpcontext(0x00010085)]
            void Position([in] XlChartElementPosition rhs);
            [id(0x00000074), propget, helpcontext(0x00010074)]
            ChartFormat* Format();
    };

    [
      uuid(00024450-0000-0000-C000-000000000046),
      helpcontext(0x000200e6)
    ]
    dispinterface CellFormat {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000001b3), propget, helpcontext(0x000101b3)]
            Borders* Borders();
            [id(0x000001b3), propputref, helpcontext(0x000101b3)]
            void Borders([in] Borders* rhs);
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000092), propputref, helpcontext(0x00010092)]
            void Font([in] Font* rhs);
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x00000081), propputref, helpcontext(0x00010081)]
            void Interior([in] Interior* rhs);
            [id(0x000000c1), propget, helpcontext(0x000100c1)]
            VARIANT NumberFormat();
            [id(0x000000c1), propput, helpcontext(0x000100c1)]
            void NumberFormat([in] VARIANT rhs);
            [id(0x00000449), propget, helpcontext(0x00010449)]
            VARIANT NumberFormatLocal();
            [id(0x00000449), propput, helpcontext(0x00010449)]
            void NumberFormatLocal([in] VARIANT rhs);
            [id(0x00000427), propget, helpcontext(0x00010427)]
            VARIANT AddIndent();
            [id(0x00000427), propput, helpcontext(0x00010427)]
            void AddIndent([in] VARIANT rhs);
            [id(0x000000c9), propget, helpcontext(0x000100c9)]
            VARIANT IndentLevel();
            [id(0x000000c9), propput, helpcontext(0x000100c9)]
            void IndentLevel([in] VARIANT rhs);
            [id(0x00000088), propget, helpcontext(0x00010088)]
            VARIANT HorizontalAlignment();
            [id(0x00000088), propput, helpcontext(0x00010088)]
            void HorizontalAlignment([in] VARIANT rhs);
            [id(0x00000089), propget, helpcontext(0x00010089)]
            VARIANT VerticalAlignment();
            [id(0x00000089), propput, helpcontext(0x00010089)]
            void VerticalAlignment([in] VARIANT rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            VARIANT Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] VARIANT rhs);
            [id(0x000000d1), propget, helpcontext(0x000100d1)]
            VARIANT ShrinkToFit();
            [id(0x000000d1), propput, helpcontext(0x000100d1)]
            void ShrinkToFit([in] VARIANT rhs);
            [id(0x00000114), propget, helpcontext(0x00010114)]
            VARIANT WrapText();
            [id(0x00000114), propput, helpcontext(0x00010114)]
            void WrapText([in] VARIANT rhs);
            [id(0x0000010d), propget, helpcontext(0x0001010d)]
            VARIANT Locked();
            [id(0x0000010d), propput, helpcontext(0x0001010d)]
            void Locked([in] VARIANT rhs);
            [id(0x00000106), propget, helpcontext(0x00010106)]
            VARIANT FormulaHidden();
            [id(0x00000106), propput, helpcontext(0x00010106)]
            void FormulaHidden([in] VARIANT rhs);
            [id(0x000000d0), propget, helpcontext(0x000100d0)]
            VARIANT MergeCells();
            [id(0x000000d0), propput, helpcontext(0x000100d0)]
            void MergeCells([in] VARIANT rhs);
            [id(0x0000006f), helpcontext(0x0001006f)]
            void Clear();
    };

    [
      uuid(00024451-0000-0000-C000-000000000046),
      helpcontext(0x000200e7)
    ]
    dispinterface UsedObjects {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(00000000), propget, helpcontext(0x00010000)]
            IDispatch* _Default([in] VARIANT Index);
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
    };

    [
      uuid(00024452-0000-0000-C000-000000000046),
      helpcontext(0x000200e8)
    ]
    dispinterface CustomProperties {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            CustomProperty* Add(
                            [in] BSTR Name, 
                            [in] VARIANT Value);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(00000000), propget, helpcontext(0x00010000)]
            CustomProperty* _Default([in] VARIANT Index);
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            CustomProperty* Item([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00024453-0000-0000-C000-000000000046),
      helpcontext(0x000200e9)
    ]
    dispinterface CustomProperty {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            VARIANT Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] VARIANT rhs);
            [id(00000000), propget, helpcontext(0x00010000)]
            VARIANT _Default();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
    };

    [
      uuid(00024454-0000-0000-C000-000000000046),
      helpcontext(0x000200ea)
    ]
    dispinterface CalculatedMembers {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            CalculatedMember* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            CalculatedMember* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000b5), helpcontext(0x000100b5)]
            CalculatedMember* Add(
                            [in] BSTR Name, 
                            [in] BSTR Formula, 
                            [in, optional] VARIANT SolveOrder, 
                            [in, optional] VARIANT Type);
    };

    [
      uuid(00024455-0000-0000-C000-000000000046),
      helpcontext(0x000200eb)
    ]
    dispinterface CalculatedMember {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x000002d1), propget, helpcontext(0x000102d1)]
            BSTR SourceName();
            [id(0x0000088b), propget, helpcontext(0x0001088b)]
            long SolveOrder();
            [id(0x0000088c), propget, helpcontext(0x0001088c)]
            VARIANT_BOOL IsValid();
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            XlCalculatedMemberType Type();
    };

    [
      uuid(00024456-0000-0000-C000-000000000046),
      helpcontext(0x000200ec)
    ]
    dispinterface Watches {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            Watch* Add([in] VARIANT Source);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(00000000), propget, helpcontext(0x00010000)]
            Watch* _Default([in] VARIANT Index);
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            Watch* Item([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
    };

    [
      uuid(00024457-0000-0000-C000-000000000046),
      helpcontext(0x000200ed)
    ]
    dispinterface Watch {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x000000de), propget, helpcontext(0x000100de)]
            VARIANT Source();
    };

    [
      uuid(00024458-0000-0000-C000-000000000046),
      helpcontext(0x000200ee)
    ]
    dispinterface PivotCell {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000088d), propget, helpcontext(0x0001088d)]
            XlPivotCellType PivotCellType();
            [id(0x000002cc), propget, helpcontext(0x000102cc)]
            PivotTable* PivotTable();
            [id(0x0000082b), propget, helpcontext(0x0001082b)]
            PivotField* DataField();
            [id(0x000002db), propget, helpcontext(0x000102db)]
            PivotField* PivotField();
            [id(0x000002e4), propget, helpcontext(0x000102e4)]
            PivotItem* PivotItem();
            [id(0x0000088e), propget, helpcontext(0x0001088e)]
            PivotItemList* RowItems();
            [id(0x0000088f), propget, helpcontext(0x0001088f)]
            PivotItemList* ColumnItems();
            [id(0x000000c5), propget, helpcontext(0x000100c5)]
            Range* Range();
            [id(0x000008f7), propget, hidden, helpcontext(0x000108f7)]
            BSTR Dummy18();
            [id(0x00000891), propget, helpcontext(0x00010891)]
            XlConsolidationFunction CustomSubtotalFunction();
            [id(0x00000a71), propget, helpcontext(0x00010a71)]
            PivotLine* PivotRowLine();
            [id(0x00000a72), propget, helpcontext(0x00010a72)]
            PivotLine* PivotColumnLine();
    };

    [
      uuid(00024459-0000-0000-C000-000000000046),
      helpcontext(0x000200ef)
    ]
    dispinterface Graphic {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000892), propget, helpcontext(0x00010892)]
            single Brightness();
            [id(0x00000892), propput, helpcontext(0x00010892)]
            void Brightness([in] single rhs);
            [id(0x00000893), propget, helpcontext(0x00010893)]
            MsoPictureColorType ColorType();
            [id(0x00000893), propput, helpcontext(0x00010893)]
            void ColorType([in] MsoPictureColorType rhs);
            [id(0x00000894), propget, helpcontext(0x00010894)]
            single Contrast();
            [id(0x00000894), propput, helpcontext(0x00010894)]
            void Contrast([in] single rhs);
            [id(0x00000895), propget, helpcontext(0x00010895)]
            single CropBottom();
            [id(0x00000895), propput, helpcontext(0x00010895)]
            void CropBottom([in] single rhs);
            [id(0x00000896), propget, helpcontext(0x00010896)]
            single CropLeft();
            [id(0x00000896), propput, helpcontext(0x00010896)]
            void CropLeft([in] single rhs);
            [id(0x00000897), propget, helpcontext(0x00010897)]
            single CropRight();
            [id(0x00000897), propput, helpcontext(0x00010897)]
            void CropRight([in] single rhs);
            [id(0x00000898), propget, helpcontext(0x00010898)]
            single CropTop();
            [id(0x00000898), propput, helpcontext(0x00010898)]
            void CropTop([in] single rhs);
            [id(0x00000587), propget, helpcontext(0x00010587)]
            BSTR Filename();
            [id(0x00000587), propput, helpcontext(0x00010587)]
            void Filename([in] BSTR rhs);
            [id(0x0000007b), propget, helpcontext(0x0001007b)]
            single Height();
            [id(0x0000007b), propput, helpcontext(0x0001007b)]
            void Height([in] single rhs);
            [id(0x000006a4), propget, helpcontext(0x000106a4)]
            MsoTriState LockAspectRatio();
            [id(0x000006a4), propput, helpcontext(0x000106a4)]
            void LockAspectRatio([in] MsoTriState rhs);
            [id(0x0000007a), propget, helpcontext(0x0001007a)]
            single Width();
            [id(0x0000007a), propput, helpcontext(0x0001007a)]
            void Width([in] single rhs);
    };

    [
      uuid(0002445A-0000-0000-C000-000000000046),
      helpcontext(0x000200f0)
    ]
    dispinterface AutoRecover {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x0000018a), propget, helpcontext(0x0001018a)]
            long Time();
            [id(0x0000018a), propput, helpcontext(0x0001018a)]
            void Time([in] long rhs);
            [id(0x00000123), propget, helpcontext(0x00010123)]
            BSTR Path();
            [id(0x00000123), propput, helpcontext(0x00010123)]
            void Path([in] BSTR rhs);
    };

    [
      uuid(0002445B-0000-0000-C000-000000000046),
      helpcontext(0x000200f1)
    ]
    dispinterface ErrorCheckingOptions {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000899), propget, helpcontext(0x00010899)]
            VARIANT_BOOL BackgroundChecking();
            [id(0x00000899), propput, helpcontext(0x00010899)]
            void BackgroundChecking([in] VARIANT_BOOL rhs);
            [id(0x0000089a), propget, helpcontext(0x0001089a)]
            XlColorIndex IndicatorColorIndex();
            [id(0x0000089a), propput, helpcontext(0x0001089a)]
            void IndicatorColorIndex([in] XlColorIndex rhs);
            [id(0x0000089b), propget, helpcontext(0x0001089b)]
            VARIANT_BOOL EvaluateToError();
            [id(0x0000089b), propput, helpcontext(0x0001089b)]
            void EvaluateToError([in] VARIANT_BOOL rhs);
            [id(0x0000089c), propget, helpcontext(0x0001089c)]
            VARIANT_BOOL TextDate();
            [id(0x0000089c), propput, helpcontext(0x0001089c)]
            void TextDate([in] VARIANT_BOOL rhs);
            [id(0x0000089d), propget, helpcontext(0x0001089d)]
            VARIANT_BOOL NumberAsText();
            [id(0x0000089d), propput, helpcontext(0x0001089d)]
            void NumberAsText([in] VARIANT_BOOL rhs);
            [id(0x0000089e), propget, helpcontext(0x0001089e)]
            VARIANT_BOOL InconsistentFormula();
            [id(0x0000089e), propput, helpcontext(0x0001089e)]
            void InconsistentFormula([in] VARIANT_BOOL rhs);
            [id(0x0000089f), propget, helpcontext(0x0001089f)]
            VARIANT_BOOL OmittedCells();
            [id(0x0000089f), propput, helpcontext(0x0001089f)]
            void OmittedCells([in] VARIANT_BOOL rhs);
            [id(0x000008a0), propget, helpcontext(0x000108a0)]
            VARIANT_BOOL UnlockedFormulaCells();
            [id(0x000008a0), propput, helpcontext(0x000108a0)]
            void UnlockedFormulaCells([in] VARIANT_BOOL rhs);
            [id(0x000008a1), propget, helpcontext(0x000108a1)]
            VARIANT_BOOL EmptyCellReferences();
            [id(0x000008a1), propput, helpcontext(0x000108a1)]
            void EmptyCellReferences([in] VARIANT_BOOL rhs);
            [id(0x000008f8), propget, helpcontext(0x000108f8)]
            VARIANT_BOOL ListDataValidation();
            [id(0x000008f8), propput, helpcontext(0x000108f8)]
            void ListDataValidation([in] VARIANT_BOOL rhs);
            [id(0x00000a73), propget, helpcontext(0x00010a73)]
            VARIANT_BOOL InconsistentTableFormula();
            [id(0x00000a73), propput, helpcontext(0x00010a73)]
            void InconsistentTableFormula([in] VARIANT_BOOL rhs);
    };

    [
      uuid(0002445C-0000-0000-C000-000000000046),
      helpcontext(0x000200f2)
    ]
    dispinterface Errors {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            Error* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            Error* _Default([in] VARIANT Index);
    };

    [
      uuid(0002445D-0000-0000-C000-000000000046),
      helpcontext(0x000200f3)
    ]
    dispinterface Error {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000006), propget, helpcontext(0x00010006)]
            VARIANT_BOOL Value();
            [id(0x000008a2), propget, helpcontext(0x000108a2)]
            VARIANT_BOOL Ignore();
            [id(0x000008a2), propput, helpcontext(0x000108a2)]
            void Ignore([in] VARIANT_BOOL rhs);
    };

    [
      uuid(0002445E-0000-0000-C000-000000000046),
      helpcontext(0x000200f4)
    ]
    dispinterface SmartTagAction {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000008a3), helpcontext(0x000108a3)]
            void Execute();
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            XlSmartTagControlType Type();
            [id(0x000008f9), propget, helpcontext(0x000108f9)]
            VARIANT_BOOL PresentInPane();
            [id(0x000008fa), propget, helpcontext(0x000108fa)]
            VARIANT_BOOL ExpandHelp();
            [id(0x000008fa), propput, helpcontext(0x000108fa)]
            void ExpandHelp([in] VARIANT_BOOL rhs);
            [id(0x000008fb), propget, helpcontext(0x000108fb)]
            VARIANT_BOOL CheckboxState();
            [id(0x000008fb), propput, helpcontext(0x000108fb)]
            void CheckboxState([in] VARIANT_BOOL rhs);
            [id(0x000008fc), propget, helpcontext(0x000108fc)]
            BSTR TextboxText();
            [id(0x000008fc), propput, helpcontext(0x000108fc)]
            void TextboxText([in] BSTR rhs);
            [id(0x000008fd), propget, helpcontext(0x000108fd)]
            long ListSelection();
            [id(0x000008fd), propput, helpcontext(0x000108fd)]
            void ListSelection([in] long rhs);
            [id(0x000008fe), propget, helpcontext(0x000108fe)]
            long RadioGroupSelection();
            [id(0x000008fe), propput, helpcontext(0x000108fe)]
            void RadioGroupSelection([in] long rhs);
            [id(0x000008ff), propget, helpcontext(0x000108ff)]
            IDispatch* ActiveXControl();
    };

    [
      uuid(0002445F-0000-0000-C000-000000000046),
      helpcontext(0x000200f5)
    ]
    dispinterface SmartTagActions {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(00000000), propget, helpcontext(0x00010000)]
            SmartTagAction* _Default([in] VARIANT Index);
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            SmartTagAction* Item([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00024460-0000-0000-C000-000000000046),
      helpcontext(0x000200f6)
    ]
    dispinterface SmartTag {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000008a4), propget, helpcontext(0x000108a4)]
            BSTR DownloadURL();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(0x000008a5), propget, helpcontext(0x000108a5)]
            BSTR XML();
            [id(0x000000c5), propget, helpcontext(0x000100c5)]
            Range* Range();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x000008a6), propget, helpcontext(0x000108a6)]
            SmartTagActions* SmartTagActions();
            [id(0x00000857), propget, helpcontext(0x00010857)]
            CustomProperties* Properties();
    };

    [
      uuid(00024461-0000-0000-C000-000000000046),
      helpcontext(0x000200f7)
    ]
    dispinterface SmartTags {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            SmartTag* Add([in] BSTR SmartTagType);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(00000000), propget, helpcontext(0x00010000)]
            SmartTag* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00024462-0000-0000-C000-000000000046),
      helpcontext(0x000200f8)
    ]
    dispinterface SmartTagRecognizer {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x000008a8), propget, helpcontext(0x000108a8)]
            BSTR progID();
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(0x00000121), propget, helpcontext(0x00010121)]
            BSTR FullName();
    };

    [
      uuid(00024463-0000-0000-C000-000000000046),
      helpcontext(0x000200f9)
    ]
    dispinterface SmartTagRecognizers {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            SmartTagRecognizer* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            SmartTagRecognizer* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000008a9), propget, helpcontext(0x000108a9)]
            VARIANT_BOOL Recognize();
            [id(0x000008a9), propput, helpcontext(0x000108a9)]
            void Recognize([in] VARIANT_BOOL rhs);
    };

    [
      uuid(00024464-0000-0000-C000-000000000046),
      helpcontext(0x000200fa)
    ]
    dispinterface SmartTagOptions {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000008aa), propget, helpcontext(0x000108aa)]
            XlSmartTagDisplayMode DisplaySmartTags();
            [id(0x000008aa), propput, helpcontext(0x000108aa)]
            void DisplaySmartTags([in] XlSmartTagDisplayMode rhs);
            [id(0x000008ab), propget, helpcontext(0x000108ab)]
            VARIANT_BOOL EmbedSmartTags();
            [id(0x000008ab), propput, helpcontext(0x000108ab)]
            void EmbedSmartTags([in] VARIANT_BOOL rhs);
    };

    [
      uuid(00024465-0000-0000-C000-000000000046),
      helpcontext(0x000200fb)
    ]
    dispinterface SpellingOptions {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x000008ac), propget, helpcontext(0x000108ac)]
            long DictLang();
            [id(0x000008ac), propput, helpcontext(0x000108ac)]
            void DictLang([in] long rhs);
            [id(0x000008ad), propget, helpcontext(0x000108ad)]
            BSTR UserDict();
            [id(0x000008ad), propput, helpcontext(0x000108ad)]
            void UserDict([in] BSTR rhs);
            [id(0x000008ae), propget, helpcontext(0x000108ae)]
            VARIANT_BOOL IgnoreCaps();
            [id(0x000008ae), propput, helpcontext(0x000108ae)]
            void IgnoreCaps([in] VARIANT_BOOL rhs);
            [id(0x000008af), propget, helpcontext(0x000108af)]
            VARIANT_BOOL SuggestMainOnly();
            [id(0x000008af), propput, helpcontext(0x000108af)]
            void SuggestMainOnly([in] VARIANT_BOOL rhs);
            [id(0x000008b0), propget, helpcontext(0x000108b0)]
            VARIANT_BOOL IgnoreMixedDigits();
            [id(0x000008b0), propput, helpcontext(0x000108b0)]
            void IgnoreMixedDigits([in] VARIANT_BOOL rhs);
            [id(0x000008b1), propget, helpcontext(0x000108b1)]
            VARIANT_BOOL IgnoreFileNames();
            [id(0x000008b1), propput, helpcontext(0x000108b1)]
            void IgnoreFileNames([in] VARIANT_BOOL rhs);
            [id(0x000008b2), propget, helpcontext(0x000108b2)]
            VARIANT_BOOL GermanPostReform();
            [id(0x000008b2), propput, helpcontext(0x000108b2)]
            void GermanPostReform([in] VARIANT_BOOL rhs);
            [id(0x000008b3), propget, helpcontext(0x000108b3)]
            VARIANT_BOOL KoreanCombineAux();
            [id(0x000008b3), propput, helpcontext(0x000108b3)]
            void KoreanCombineAux([in] VARIANT_BOOL rhs);
            [id(0x000008b4), propget, helpcontext(0x000108b4)]
            VARIANT_BOOL KoreanUseAutoChangeList();
            [id(0x000008b4), propput, helpcontext(0x000108b4)]
            void KoreanUseAutoChangeList([in] VARIANT_BOOL rhs);
            [id(0x000008b5), propget, helpcontext(0x000108b5)]
            VARIANT_BOOL KoreanProcessCompound();
            [id(0x000008b5), propput, helpcontext(0x000108b5)]
            void KoreanProcessCompound([in] VARIANT_BOOL rhs);
            [id(0x000008b6), propget, helpcontext(0x000108b6)]
            XlHebrewModes HebrewModes();
            [id(0x000008b6), propput, helpcontext(0x000108b6)]
            void HebrewModes([in] XlHebrewModes rhs);
            [id(0x000008b7), propget, helpcontext(0x000108b7)]
            XlArabicModes ArabicModes();
            [id(0x000008b7), propput, helpcontext(0x000108b7)]
            void ArabicModes([in] XlArabicModes rhs);
    };

    [
      uuid(00024466-0000-0000-C000-000000000046),
      helpcontext(0x000200fc)
    ]
    dispinterface Speech {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x000007e1), helpcontext(0x000107e1)]
            void Speak(
                            [in] BSTR Text, 
                            [in, optional] VARIANT SpeakAsync, 
                            [in, optional] VARIANT SpeakXML, 
                            [in, optional] VARIANT Purge);
            [id(0x000000a8), propget, helpcontext(0x000100a8)]
            XlSpeakDirection Direction();
            [id(0x000000a8), propput, helpcontext(0x000100a8)]
            void Direction([in] XlSpeakDirection rhs);
            [id(0x000008bb), propget, helpcontext(0x000108bb)]
            VARIANT_BOOL SpeakCellOnEnter();
            [id(0x000008bb), propput, helpcontext(0x000108bb)]
            void SpeakCellOnEnter([in] VARIANT_BOOL rhs);
    };

    [
      uuid(00024467-0000-0000-C000-000000000046),
      helpcontext(0x000200fd)
    ]
    dispinterface Protection {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x000007f0), propget, helpcontext(0x000107f0)]
            VARIANT_BOOL AllowFormattingCells();
            [id(0x000007f1), propget, helpcontext(0x000107f1)]
            VARIANT_BOOL AllowFormattingColumns();
            [id(0x000007f2), propget, helpcontext(0x000107f2)]
            VARIANT_BOOL AllowFormattingRows();
            [id(0x000007f3), propget, helpcontext(0x000107f3)]
            VARIANT_BOOL AllowInsertingColumns();
            [id(0x000007f4), propget, helpcontext(0x000107f4)]
            VARIANT_BOOL AllowInsertingRows();
            [id(0x000007f5), propget, helpcontext(0x000107f5)]
            VARIANT_BOOL AllowInsertingHyperlinks();
            [id(0x000007f6), propget, helpcontext(0x000107f6)]
            VARIANT_BOOL AllowDeletingColumns();
            [id(0x000007f7), propget, helpcontext(0x000107f7)]
            VARIANT_BOOL AllowDeletingRows();
            [id(0x000007f8), propget, helpcontext(0x000107f8)]
            VARIANT_BOOL AllowSorting();
            [id(0x000007f9), propget, helpcontext(0x000107f9)]
            VARIANT_BOOL AllowFiltering();
            [id(0x000007fa), propget, helpcontext(0x000107fa)]
            VARIANT_BOOL AllowUsingPivotTables();
            [id(0x000008bc), propget, helpcontext(0x000108bc)]
            AllowEditRanges* AllowEditRanges();
    };

    [
      uuid(00024468-0000-0000-C000-000000000046),
      helpcontext(0x000200fe)
    ]
    dispinterface PivotItemList {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            PivotItem* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            PivotItem* _Default([in] VARIANT Field);
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00024469-0000-0000-C000-000000000046),
      helpcontext(0x000200ff)
    ]
    dispinterface Tab {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000063), propget, helpcontext(0x00010063)]
            VARIANT Color();
            [id(0x00000063), propput, helpcontext(0x00010063)]
            void Color([in] VARIANT rhs);
            [id(0x00000061), propget, helpcontext(0x00010061)]
            XlColorIndex ColorIndex();
            [id(0x00000061), propput, helpcontext(0x00010061)]
            void ColorIndex([in] XlColorIndex rhs);
            [id(0x0000093d), propget, helpcontext(0x0001093d)]
            XlThemeColor ThemeColor();
            [id(0x0000093d), propput, helpcontext(0x0001093d)]
            void ThemeColor([in] XlThemeColor rhs);
            [id(0x0000093e), propget, helpcontext(0x0001093e)]
            VARIANT TintAndShade();
            [id(0x0000093e), propput, helpcontext(0x0001093e)]
            void TintAndShade([in] VARIANT rhs);
    };

    [
      uuid(0002446A-0000-0000-C000-000000000046),
      helpcontext(0x00020100)
    ]
    dispinterface AllowEditRanges {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            AllowEditRange* Item([in] VARIANT Index);
            [id(0x000000b5), helpcontext(0x000100b5)]
            AllowEditRange* Add(
                            [in] BSTR Title, 
                            [in] Range* Range, 
                            [in, optional] VARIANT Password);
            [id(00000000), propget, helpcontext(0x00010000)]
            AllowEditRange* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002446B-0000-0000-C000-000000000046),
      helpcontext(0x00020101)
    ]
    dispinterface AllowEditRange {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x000000c7), propget, helpcontext(0x000100c7)]
            BSTR Title();
            [id(0x000000c7), propput, helpcontext(0x000100c7)]
            void Title([in] BSTR rhs);
            [id(0x000000c5), propget, helpcontext(0x000100c5)]
            Range* Range();
            [id(0x000000c5), propputref, helpcontext(0x000100c5)]
            void Range([in] Range* rhs);
            [id(0x000008bd), helpcontext(0x000108bd)]
            void ChangePassword([in] BSTR Password);
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x0000011d), helpcontext(0x0001011d)]
            void Unprotect([in, optional] VARIANT Password);
            [id(0x000008be), propget, helpcontext(0x000108be)]
            UserAccessList* Users();
    };

    [
      uuid(0002446C-0000-0000-C000-000000000046),
      helpcontext(0x00020102)
    ]
    dispinterface UserAccessList {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            UserAccess* Item([in] VARIANT Index);
            [id(0x000000b5), helpcontext(0x000100b5)]
            UserAccess* Add(
                            [in] BSTR Name, 
                            [in] VARIANT_BOOL AllowEdit);
            [id(0x000008bf), helpcontext(0x000108bf)]
            void DeleteAll();
            [id(00000000), propget, helpcontext(0x00010000)]
            UserAccess* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002446D-0000-0000-C000-000000000046),
      helpcontext(0x00020103)
    ]
    dispinterface UserAccess {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000007e4), propget, helpcontext(0x000107e4)]
            VARIANT_BOOL AllowEdit();
            [id(0x000007e4), propput, helpcontext(0x000107e4)]
            void AllowEdit([in] VARIANT_BOOL rhs);
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
    };

    [
      uuid(0002446E-0000-0000-C000-000000000046),
      helpcontext(0x00020104)
    ]
    dispinterface RTD {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x000008c0), propget, helpcontext(0x000108c0)]
            long ThrottleInterval();
            [id(0x000008c0), propput, helpcontext(0x000108c0)]
            void ThrottleInterval([in] long rhs);
            [id(0x000008c1), helpcontext(0x000108c1)]
            void RefreshData();
            [id(0x000008c2), helpcontext(0x000108c2)]
            void RestartServers();
    };

    [
      uuid(0002446F-0000-0000-C000-000000000046),
      helpcontext(0x00020105),
      hidden
    ]
    dispinterface Diagram {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000006a5), propget, helpcontext(0x000106a5)]
            DiagramNodes* Nodes();
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            MsoDiagramType Type();
            [id(0x000008c3), propget, helpcontext(0x000108c3)]
            MsoTriState AutoLayout();
            [id(0x000008c3), propput, helpcontext(0x000108c3)]
            void AutoLayout([in] MsoTriState rhs);
            [id(0x000008c4), propget, helpcontext(0x000108c4)]
            MsoTriState Reverse();
            [id(0x000008c4), propput, helpcontext(0x000108c4)]
            void Reverse([in] MsoTriState rhs);
            [id(0x00000072), propget, helpcontext(0x00010072)]
            MsoTriState AutoFormat();
            [id(0x00000072), propput, helpcontext(0x00010072)]
            void AutoFormat([in] MsoTriState rhs);
            [id(0x00000416), helpcontext(0x00010416)]
            void Convert([in] MsoDiagramType Type);
            [id(0x00000900), helpcontext(0x00010900)]
            void FitText();
    };

    [
      uuid(00024470-0000-0000-C000-000000000046),
      helpcontext(0x00020106)
    ]
    dispinterface ListObjects {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000825), hidden, helpcontext(0x00010825),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, Add)]
            ListObject* _Add(
                            [in, optional, defaultvalue(1)] XlListObjectSourceType SourceType, 
                            [in, optional] VARIANT Source, 
                            [in, optional] VARIANT LinkSource, 
                            [in, optional, defaultvalue(0)] XlYesNoGuess XlListObjectHasHeaders, 
                            [in, optional] VARIANT Destination);
            [id(00000000), propget, helpcontext(0x00010000)]
            ListObject* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            ListObject* Item([in] VARIANT Index);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000b5), helpcontext(0x000100b5),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, AddEx)]
            ListObject* Add(
                            [in, optional, defaultvalue(1)] XlListObjectSourceType SourceType, 
                            [in, optional] VARIANT Source, 
                            [in, optional] VARIANT LinkSource, 
                            [in, optional, defaultvalue(0)] XlYesNoGuess XlListObjectHasHeaders, 
                            [in, optional] VARIANT Destination, 
                            [in, optional] VARIANT TableStyleName);
    };

    [
      uuid(00024471-0000-0000-C000-000000000046),
      helpcontext(0x00020107)
    ]
    dispinterface ListObject {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000767), helpcontext(0x00010767)]
            BSTR Publish(
                            [in] VARIANT Target, 
                            [in] VARIANT_BOOL LinkSource);
            [id(0x00000589), helpcontext(0x00010589)]
            void Refresh();
            [id(0x00000904), helpcontext(0x00010904)]
            void Unlink();
            [id(0x00000905), helpcontext(0x00010905)]
            void Unlist();
            [id(0x00000906), hidden, helpcontext(0x00010906)]
            void UpdateChanges([in, optional, defaultvalue(0)] XlListConflict iConflictType);
            [id(0x00000100), helpcontext(0x00010100)]
            void Resize([in] Range* Range);
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(0x00000908), propget, helpcontext(0x00010908)]
            VARIANT_BOOL Active();
            [id(0x000002c1), propget, helpcontext(0x000102c1)]
            Range* DataBodyRange();
            [id(0x000006ee), propget, helpcontext(0x000106ee)]
            VARIANT_BOOL DisplayRightToLeft();
            [id(0x00000909), propget, helpcontext(0x00010909)]
            Range* HeaderRowRange();
            [id(0x0000090a), propget, helpcontext(0x0001090a)]
            Range* InsertRowRange();
            [id(0x0000090b), propget, helpcontext(0x0001090b)]
            ListColumns* ListColumns();
            [id(0x0000090c), propget, helpcontext(0x0001090c)]
            ListRows* ListRows();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x0000056a), propget, helpcontext(0x0001056a)]
            QueryTable* QueryTable();
            [id(0x000000c5), propget, helpcontext(0x000100c5)]
            Range* Range();
            [id(0x0000090d), propget, helpcontext(0x0001090d)]
            VARIANT_BOOL ShowAutoFilter();
            [id(0x0000090d), propput, helpcontext(0x0001090d)]
            void ShowAutoFilter([in] VARIANT_BOOL rhs);
            [id(0x0000090e), propget, helpcontext(0x0001090e)]
            VARIANT_BOOL ShowTotals();
            [id(0x0000090e), propput, helpcontext(0x0001090e)]
            void ShowTotals([in] VARIANT_BOOL rhs);
            [id(0x000002ad), propget, helpcontext(0x000102ad)]
            XlListObjectSourceType SourceType();
            [id(0x0000090f), propget, helpcontext(0x0001090f)]
            Range* TotalsRowRange();
            [id(0x00000910), propget, helpcontext(0x00010910)]
            BSTR SharePointURL();
            [id(0x000008cd), propget, helpcontext(0x000108cd)]
            XmlMap* XmlMap();
            [id(0x00000a75), propget, helpcontext(0x00010a75)]
            BSTR DisplayName();
            [id(0x00000a75), propput, helpcontext(0x00010a75)]
            void DisplayName([in] BSTR rhs);
            [id(0x00000a76), propget, helpcontext(0x00010a76)]
            VARIANT_BOOL ShowHeaders();
            [id(0x00000a76), propput, helpcontext(0x00010a76)]
            void ShowHeaders([in] VARIANT_BOOL rhs);
            [id(0x00000319), propget, helpcontext(0x00010319)]
            AutoFilter* AutoFilter();
            [id(0x000005e0), propget, helpcontext(0x000105e0)]
            VARIANT TableStyle();
            [id(0x000005e0), propput, helpcontext(0x000105e0)]
            void TableStyle([in] VARIANT rhs);
            [id(0x00000a77), propget, helpcontext(0x00010a77)]
            VARIANT_BOOL ShowTableStyleFirstColumn();
            [id(0x00000a77), propput, helpcontext(0x00010a77)]
            void ShowTableStyleFirstColumn([in] VARIANT_BOOL rhs);
            [id(0x00000a03), propget, helpcontext(0x00010a03)]
            VARIANT_BOOL ShowTableStyleLastColumn();
            [id(0x00000a03), propput, helpcontext(0x00010a03)]
            void ShowTableStyleLastColumn([in] VARIANT_BOOL rhs);
            [id(0x00000a04), propget, helpcontext(0x00010a04)]
            VARIANT_BOOL ShowTableStyleRowStripes();
            [id(0x00000a04), propput, helpcontext(0x00010a04)]
            void ShowTableStyleRowStripes([in] VARIANT_BOOL rhs);
            [id(0x00000a05), propget, helpcontext(0x00010a05)]
            VARIANT_BOOL ShowTableStyleColumnStripes();
            [id(0x00000a05), propput, helpcontext(0x00010a05)]
            void ShowTableStyleColumnStripes([in] VARIANT_BOOL rhs);
            [id(0x00000370), propget, helpcontext(0x00010370)]
            Sort* Sort();
            [id(0x0000038e), propget, helpcontext(0x0001038e)]
            BSTR Comment();
            [id(0x0000038e), propput, helpcontext(0x0001038e)]
            void Comment([in] BSTR rhs);
            [id(0x00000a78), helpcontext(0x00010a78)]
            void ExportToVisio();
    };

    [
      uuid(00024472-0000-0000-C000-000000000046),
      helpcontext(0x00020108)
    ]
    dispinterface ListColumns {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            ListColumn* Add([in, optional] VARIANT Position);
            [id(00000000), propget, helpcontext(0x00010000)]
            ListColumn* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            ListColumn* Item([in] VARIANT Index);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
    };

    [
      uuid(00024473-0000-0000-C000-000000000046),
      helpcontext(0x00020109)
    ]
    dispinterface ListColumn {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(0x00000911), propget, hidden, helpcontext(0x00010911)]
            ListDataFormat* ListDataFormat();
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x000000c5), propget, helpcontext(0x000100c5)]
            Range* Range();
            [id(0x00000912), propget, helpcontext(0x00010912)]
            XlTotalsCalculation TotalsCalculation();
            [id(0x00000912), propput, helpcontext(0x00010912)]
            void TotalsCalculation([in] XlTotalsCalculation rhs);
            [id(0x000008d2), propget, helpcontext(0x000108d2)]
            XPath* XPath();
            [id(0x00000913), propget, hidden, helpcontext(0x00010913)]
            BSTR SharePointFormula();
            [id(0x000002c1), propget, helpcontext(0x000102c1)]
            Range* DataBodyRange();
            [id(0x00000a79), propget, helpcontext(0x00010a79)]
            Range* Total();
    };

    [
      uuid(00024474-0000-0000-C000-000000000046),
      helpcontext(0x0002010a)
    ]
    dispinterface ListRows {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000825), hidden, helpcontext(0x00010825),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, Add)]
            ListRow* _Add([in, optional] VARIANT Position);
            [id(00000000), propget, helpcontext(0x00010000)]
            ListRow* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            ListRow* Item([in] VARIANT Index);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000b5), helpcontext(0x000100b5),
              custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, AddEx)]
            ListRow* Add(
                            [in, optional] VARIANT Position, 
                            [in, optional] VARIANT AlwaysInsert);
    };

    [
      uuid(00024475-0000-0000-C000-000000000046),
      helpcontext(0x0002010b)
    ]
    dispinterface ListRow {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x00000914), propget, hidden, helpcontext(0x00010914)]
            VARIANT_BOOL InvalidData();
            [id(0x000000c5), propget, helpcontext(0x000100c5)]
            Range* Range();
    };

    [
      uuid(00024476-0000-0000-C000-000000000046),
      helpcontext(0x0002010c)
    ]
    dispinterface XmlNamespace {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(0x00000915), propget, helpcontext(0x00010915)]
            BSTR Uri();
            [id(0x00000916), propget, helpcontext(0x00010916)]
            BSTR Prefix();
    };

    [
      uuid(00024477-0000-0000-C000-000000000046),
      helpcontext(0x0002010d)
    ]
    dispinterface XmlNamespaces {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(00000000), propget, helpcontext(0x00010000)]
            XmlNamespace* _Default([in] VARIANT Index);
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            XmlNamespace* Item([in] VARIANT Index);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x00000006), propget, helpcontext(0x00010006)]
            BSTR Value();
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x00000917), helpcontext(0x00010917)]
            void InstallManifest(
                            [in] BSTR Path, 
                            [in, optional] VARIANT InstallForAllUsers);
    };

    [
      uuid(00024478-0000-0000-C000-000000000046),
      helpcontext(0x0002010e)
    ]
    dispinterface XmlDataBinding {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(0x00000589), helpcontext(0x00010589)]
            XlXmlImportResult Refresh();
            [id(0x00000919), helpcontext(0x00010919)]
            void LoadSettings([in] BSTR Url);
            [id(0x0000091a), helpcontext(0x0001091a)]
            void ClearSettings();
            [id(0x0000091b), propget, helpcontext(0x0001091b)]
            BSTR SourceUrl();
    };

    [
      uuid(00024479-0000-0000-C000-000000000046),
      helpcontext(0x0002010f)
    ]
    dispinterface XmlSchema {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000091c), propget, helpcontext(0x0001091c)]
            XmlNamespace* Namespace();
            [id(0x0000091d), propget, helpcontext(0x0001091d)]
            BSTR XML();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
    };

    [
      uuid(0002447A-0000-0000-C000-000000000046),
      helpcontext(0x00020110)
    ]
    dispinterface XmlSchemas {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(00000000), propget, helpcontext(0x00010000)]
            XmlSchema* _Default([in] VARIANT Index);
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            XmlSchema* Item([in] VARIANT Index);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002447B-0000-0000-C000-000000000046),
      helpcontext(0x00020111)
    ]
    dispinterface XmlMap {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x0000091e), propget, helpcontext(0x0001091e)]
            VARIANT_BOOL IsExportable();
            [id(0x0000091f), propget, helpcontext(0x0001091f)]
            VARIANT_BOOL ShowImportExportValidationErrors();
            [id(0x0000091f), propput, helpcontext(0x0001091f)]
            void ShowImportExportValidationErrors([in] VARIANT_BOOL rhs);
            [id(0x00000920), propget, helpcontext(0x00010920)]
            VARIANT_BOOL SaveDataSourceDefinition();
            [id(0x00000920), propput, helpcontext(0x00010920)]
            void SaveDataSourceDefinition([in] VARIANT_BOOL rhs);
            [id(0x0000074c), propget, helpcontext(0x0001074c)]
            VARIANT_BOOL AdjustColumnWidth();
            [id(0x0000074c), propput, helpcontext(0x0001074c)]
            void AdjustColumnWidth([in] VARIANT_BOOL rhs);
            [id(0x00000921), propget, helpcontext(0x00010921)]
            VARIANT_BOOL PreserveColumnFilter();
            [id(0x00000921), propput, helpcontext(0x00010921)]
            void PreserveColumnFilter([in] VARIANT_BOOL rhs);
            [id(0x00000922), propget, helpcontext(0x00010922)]
            VARIANT_BOOL PreserveNumberFormatting();
            [id(0x00000922), propput, helpcontext(0x00010922)]
            void PreserveNumberFormatting([in] VARIANT_BOOL rhs);
            [id(0x00000923), propget, helpcontext(0x00010923)]
            VARIANT_BOOL AppendOnImport();
            [id(0x00000923), propput, helpcontext(0x00010923)]
            void AppendOnImport([in] VARIANT_BOOL rhs);
            [id(0x00000924), propget, helpcontext(0x00010924)]
            BSTR RootElementName();
            [id(0x00000925), propget, helpcontext(0x00010925)]
            XmlNamespace* RootElementNamespace();
            [id(0x00000926), propget, helpcontext(0x00010926)]
            XmlSchemas* Schemas();
            [id(0x00000927), propget, helpcontext(0x00010927)]
            XmlDataBinding* DataBinding();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000395), helpcontext(0x00010395)]
            XlXmlImportResult Import(
                            [in] BSTR Url, 
                            [in, optional] VARIANT Overwrite);
            [id(0x00000928), helpcontext(0x00010928)]
            XlXmlImportResult ImportXml(
                            [in] BSTR XmlData, 
                            [in, optional] VARIANT Overwrite);
            [id(0x00000586), helpcontext(0x00010586)]
            XlXmlExportResult Export(
                            [in] BSTR Url, 
                            [in, optional] VARIANT Overwrite);
            [id(0x0000092a), helpcontext(0x0001092a)]
            XlXmlExportResult ExportXml([out] BSTR* Data);
            [id(0x000009f0), propget, helpcontext(0x000109f0)]
            WorkbookConnection* WorkbookConnection();
    };

    [
      uuid(0002447C-0000-0000-C000-000000000046),
      helpcontext(0x00020112)
    ]
    dispinterface XmlMaps {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            XmlMap* Add(
                            [in] BSTR Schema, 
                            [in, optional] VARIANT RootElementName);
            [id(00000000), propget, helpcontext(0x00010000)]
            XmlMap* _Default([in] VARIANT Index);
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            XmlMap* Item([in] VARIANT Index);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(0002447D-0000-0000-C000-000000000046),
      helpcontext(0x00020113)
    ]
    dispinterface ListDataFormat {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(00000000), propget, helpcontext(0x00010000)]
            XlListDataType _Default();
            [id(0x0000092c), propget, helpcontext(0x0001092c)]
            VARIANT Choices();
            [id(0x0000092d), propget, helpcontext(0x0001092d)]
            long DecimalPlaces();
            [id(0x0000092e), propget, helpcontext(0x0001092e)]
            VARIANT DefaultValue();
            [id(0x0000092f), propget, helpcontext(0x0001092f)]
            VARIANT_BOOL IsPercent();
            [id(0x00000930), propget, helpcontext(0x00010930)]
            long lcid();
            [id(0x00000931), propget, helpcontext(0x00010931)]
            long MaxCharacters();
            [id(0x00000932), propget, helpcontext(0x00010932)]
            VARIANT MaxNumber();
            [id(0x00000933), propget, helpcontext(0x00010933)]
            VARIANT MinNumber();
            [id(0x00000934), propget, helpcontext(0x00010934)]
            VARIANT_BOOL Required();
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            XlListDataType Type();
            [id(0x00000128), propget, helpcontext(0x00010128)]
            VARIANT_BOOL ReadOnly();
            [id(0x00000935), propget, helpcontext(0x00010935)]
            VARIANT_BOOL AllowFillIn();
    };

    [
      uuid(0002447E-0000-0000-C000-000000000046),
      helpcontext(0x00020114)
    ]
    dispinterface XPath {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(0x00000006), propget, helpcontext(0x00010006)]
            BSTR Value();
            [id(0x000008d6), propget, helpcontext(0x000108d6)]
            XmlMap* Map();
            [id(0x00000936), helpcontext(0x00010936)]
            void SetValue(
                            [in] XmlMap* Map, 
                            [in] BSTR XPath, 
                            [in, optional] VARIANT SelectionNamespace, 
                            [in, optional] VARIANT Repeating);
            [id(0x0000006f), helpcontext(0x0001006f)]
            void Clear();
            [id(0x00000938), propget, helpcontext(0x00010938)]
            VARIANT_BOOL Repeating();
    };

    [
      uuid(0002447F-0000-0000-C000-000000000046),
      helpcontext(0x00020115)
    ]
    dispinterface PivotLineCells {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(00000000), propget, helpcontext(0x00010000)]
            PivotCell* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            PivotCell* Item([in] VARIANT Index);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
    };

    [
      uuid(00024480-0000-0000-C000-000000000046),
      helpcontext(0x00020116)
    ]
    dispinterface PivotLine {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000a7b), propget, helpcontext(0x00010a7b)]
            XlPivotLineType LineType();
            [id(0x00000085), propget, helpcontext(0x00010085)]
            long Position();
            [id(0x00000a7c), propget, helpcontext(0x00010a7c)]
            PivotLineCells* PivotLineCells();
    };

    [
      uuid(00024481-0000-0000-C000-000000000046),
      helpcontext(0x00020117)
    ]
    dispinterface PivotLines {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(00000000), propget, helpcontext(0x00010000)]
            PivotLine* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            PivotLine* Item([in] VARIANT Index);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
    };

    [
      uuid(00024482-0000-0000-C000-000000000046),
      helpcontext(0x00020118)
    ]
    dispinterface PivotAxis {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000a7d), propget, helpcontext(0x00010a7d)]
            PivotLines* PivotLines();
    };

    [
      uuid(00024483-0000-0000-C000-000000000046),
      helpcontext(0x00020119)
    ]
    dispinterface PivotFilter {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000c0), propget, helpcontext(0x000100c0)]
            long Order();
            [id(0x000000c0), propput, helpcontext(0x000100c0)]
            void Order([in] long rhs);
            [id(0x00000a7e), propget, helpcontext(0x00010a7e)]
            XlPivotFilterType FilterType();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000000da), propget, helpcontext(0x000100da)]
            BSTR Description();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000908), propget, helpcontext(0x00010908)]
            VARIANT_BOOL Active();
            [id(0x000002db), propget, helpcontext(0x000102db)]
            PivotField* PivotField();
            [id(0x0000082b), propget, helpcontext(0x0001082b)]
            PivotField* DataField();
            [id(0x00000a7f), propget, helpcontext(0x00010a7f)]
            CubeField* DataCubeField();
            [id(0x00000a80), propget, helpcontext(0x00010a80)]
            VARIANT Value1();
            [id(0x0000056c), propget, helpcontext(0x0001056c)]
            VARIANT Value2();
            [id(0x00000a81), propget, helpcontext(0x00010a81)]
            PivotField* MemberPropertyField();
            [id(0x00000a82), propget, helpcontext(0x00010a82)]
            VARIANT_BOOL IsMemberPropertyFilter();
    };

    [
      uuid(00024484-0000-0000-C000-000000000046),
      helpcontext(0x0002011a)
    ]
    dispinterface PivotFilters {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(00000000), propget, helpcontext(0x00010000)]
            PivotFilter* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            PivotFilter* Item([in] VARIANT Index);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000b5), helpcontext(0x000100b5)]
            PivotFilter* Add(
                            [in] XlPivotFilterType Type, 
                            [in, optional] VARIANT DataField, 
                            [in, optional] VARIANT Value1, 
                            [in, optional] VARIANT Value2, 
                            [in, optional] VARIANT Order, 
                            [in, optional] VARIANT Name, 
                            [in, optional] VARIANT Description, 
                            [in, optional] VARIANT MemberPropertyField);
    };

    [
      uuid(00024485-0000-0000-C000-000000000046),
      helpcontext(0x0002011b)
    ]
    dispinterface WorkbookConnection {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000006e), propput, helpcontext(0x0001006e)]
            void Name([in] BSTR rhs);
            [id(0x000000da), propget, helpcontext(0x000100da)]
            BSTR Description();
            [id(0x000000da), propput, helpcontext(0x000100da)]
            void Description([in] BSTR rhs);
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(00000000), propput, helpcontext(0x00010000)]
            void _Default([in] BSTR rhs);
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            XlConnectionType Type();
            [id(0x00000a89), propget, helpcontext(0x00010a89)]
            OLEDBConnection* OLEDBConnection();
            [id(0x00000a8a), propget, helpcontext(0x00010a8a)]
            ODBCConnection* ODBCConnection();
            [id(0x00000a8b), propget, helpcontext(0x00010a8b)]
            Ranges* Ranges();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000589), helpcontext(0x00010589)]
            void Refresh();
    };

    [
      uuid(00024486-0000-0000-C000-000000000046),
      helpcontext(0x0002011c)
    ]
    dispinterface Connections {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x00000a8c), helpcontext(0x00010a8c)]
            WorkbookConnection* AddFromFile([in] BSTR Filename);
            [id(0x000000b5), helpcontext(0x000100b5)]
            WorkbookConnection* Add(
                            [in] BSTR Name, 
                            [in] BSTR Description, 
                            [in] VARIANT ConnectionString, 
                            [in] VARIANT CommandText, 
                            [in, optional] VARIANT lCmdtype);
            [id(0x000000aa), helpcontext(0x000100aa)]
            WorkbookConnection* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            WorkbookConnection* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(00024487-0000-0000-C000-000000000046),
      helpcontext(0x0002011d)
    ]
    dispinterface WorksheetView {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000002ef), propget, helpcontext(0x000102ef)]
            IDispatch* Sheet();
            [id(0x00000285), propget, helpcontext(0x00010285)]
            VARIANT_BOOL DisplayGridlines();
            [id(0x00000285), propput, helpcontext(0x00010285)]
            void DisplayGridlines([in] VARIANT_BOOL rhs);
            [id(0x00000284), propget, helpcontext(0x00010284)]
            VARIANT_BOOL DisplayFormulas();
            [id(0x00000284), propput, helpcontext(0x00010284)]
            void DisplayFormulas([in] VARIANT_BOOL rhs);
            [id(0x00000286), propget, helpcontext(0x00010286)]
            VARIANT_BOOL DisplayHeadings();
            [id(0x00000286), propput, helpcontext(0x00010286)]
            void DisplayHeadings([in] VARIANT_BOOL rhs);
            [id(0x00000287), propget, helpcontext(0x00010287)]
            VARIANT_BOOL DisplayOutline();
            [id(0x00000287), propput, helpcontext(0x00010287)]
            void DisplayOutline([in] VARIANT_BOOL rhs);
            [id(0x00000289), propget, helpcontext(0x00010289)]
            VARIANT_BOOL DisplayZeros();
            [id(0x00000289), propput, helpcontext(0x00010289)]
            void DisplayZeros([in] VARIANT_BOOL rhs);
    };

    [
      uuid(00024488-0000-0000-C000-000000000046),
      helpcontext(0x0002011e)
    ]
    dispinterface ChartView {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000002ef), propget, helpcontext(0x000102ef)]
            IDispatch* Sheet();
    };

    [
      uuid(00024489-0000-0000-C000-000000000046),
      helpcontext(0x0002011f)
    ]
    dispinterface ModuleView {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000002ef), propget, helpcontext(0x000102ef)]
            IDispatch* Sheet();
    };

    [
      uuid(0002448A-0000-0000-C000-000000000046),
      helpcontext(0x00020120)
    ]
    dispinterface DialogSheetView {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000002ef), propget, helpcontext(0x000102ef)]
            IDispatch* Sheet();
    };

    [
      uuid(0002448C-0000-0000-C000-000000000046),
      helpcontext(0x00020122)
    ]
    dispinterface SheetViews {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0xfffffffc), helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            IDispatch* _Default([in] VARIANT Index);
    };

    [
      uuid(0002448D-0000-0000-C000-000000000046),
      helpcontext(0x00020123)
    ]
    dispinterface OLEDBConnection {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000081a), propget, helpcontext(0x0001081a)]
            IDispatch* ADOConnection();
            [id(0x00000593), propget, helpcontext(0x00010593)]
            VARIANT_BOOL BackgroundQuery();
            [id(0x00000593), propput, helpcontext(0x00010593)]
            void BackgroundQuery([in] VARIANT_BOOL rhs);
            [id(0x00000635), helpcontext(0x00010635)]
            void CancelRefresh();
            [id(0x00000725), propget, helpcontext(0x00010725)]
            VARIANT CommandText();
            [id(0x00000725), propput, helpcontext(0x00010725)]
            void CommandText([in] VARIANT rhs);
            [id(0x00000726), propget, helpcontext(0x00010726)]
            XlCmdType CommandType();
            [id(0x00000726), propput, helpcontext(0x00010726)]
            void CommandType([in] XlCmdType rhs);
            [id(0x00000598), propget, helpcontext(0x00010598)]
            VARIANT Connection();
            [id(0x00000598), propput, helpcontext(0x00010598)]
            void Connection([in] VARIANT rhs);
            [id(0x000005c5), propget, helpcontext(0x000105c5)]
            VARIANT_BOOL EnableRefresh();
            [id(0x000005c5), propput, helpcontext(0x000105c5)]
            void EnableRefresh([in] VARIANT_BOOL rhs);
            [id(0x0000072b), propget, helpcontext(0x0001072b)]
            VARIANT LocalConnection();
            [id(0x0000072b), propput, helpcontext(0x0001072b)]
            void LocalConnection([in] VARIANT rhs);
            [id(0x00000728), propget, helpcontext(0x00010728)]
            VARIANT_BOOL MaintainConnection();
            [id(0x00000728), propput, helpcontext(0x00010728)]
            void MaintainConnection([in] VARIANT_BOOL rhs);
            [id(0x0000081c), helpcontext(0x0001081c)]
            void MakeConnection();
            [id(0x00000589), helpcontext(0x00010589)]
            void Refresh();
            [id(0x000002b8), propget, helpcontext(0x000102b8)]
            DATE RefreshDate();
            [id(0x00000633), propget, helpcontext(0x00010633)]
            VARIANT_BOOL Refreshing();
            [id(0x000005c7), propget, helpcontext(0x000105c7)]
            VARIANT_BOOL RefreshOnFileOpen();
            [id(0x000005c7), propput, helpcontext(0x000105c7)]
            void RefreshOnFileOpen([in] VARIANT_BOOL rhs);
            [id(0x00000729), propget, helpcontext(0x00010729)]
            long RefreshPeriod();
            [id(0x00000729), propput, helpcontext(0x00010729)]
            void RefreshPeriod([in] long rhs);
            [id(0x00000821), propget, helpcontext(0x00010821)]
            XlRobustConnect RobustConnect();
            [id(0x00000821), propput, helpcontext(0x00010821)]
            void RobustConnect([in] XlRobustConnect rhs);
            [id(0x00000822), helpcontext(0x00010822)]
            void SaveAsODC(
                            [in] BSTR ODCFileName, 
                            [in, optional] VARIANT Description, 
                            [in, optional] VARIANT Keywords);
            [id(0x000005c9), propget, helpcontext(0x000105c9)]
            VARIANT_BOOL SavePassword();
            [id(0x000005c9), propput, helpcontext(0x000105c9)]
            void SavePassword([in] VARIANT_BOOL rhs);
            [id(0x0000081f), propget, helpcontext(0x0001081f)]
            BSTR SourceConnectionFile();
            [id(0x0000081f), propput, helpcontext(0x0001081f)]
            void SourceConnectionFile([in] BSTR rhs);
            [id(0x00000820), propget, helpcontext(0x00010820)]
            BSTR SourceDataFile();
            [id(0x00000820), propput, helpcontext(0x00010820)]
            void SourceDataFile([in] BSTR rhs);
            [id(0x0000081d), propget, helpcontext(0x0001081d)]
            VARIANT_BOOL OLAP();
            [id(0x0000072d), propget, helpcontext(0x0001072d)]
            VARIANT_BOOL UseLocalConnection();
            [id(0x0000072d), propput, helpcontext(0x0001072d)]
            void UseLocalConnection([in] VARIANT_BOOL rhs);
            [id(0x00000a8f), propget, helpcontext(0x00010a8f)]
            long MaxDrillthroughRecords();
            [id(0x00000a8f), propput, helpcontext(0x00010a8f)]
            void MaxDrillthroughRecords([in] long rhs);
            [id(0x0000081b), propget, helpcontext(0x0001081b)]
            VARIANT_BOOL IsConnected();
            [id(0x00000a90), propget, helpcontext(0x00010a90)]
            XlCredentialsMethod ServerCredentialsMethod();
            [id(0x00000a90), propput, helpcontext(0x00010a90)]
            void ServerCredentialsMethod([in] XlCredentialsMethod rhs);
            [id(0x00000a91), propget, helpcontext(0x00010a91)]
            BSTR ServerSSOApplicationID();
            [id(0x00000a91), propput, helpcontext(0x00010a91)]
            void ServerSSOApplicationID([in] BSTR rhs);
            [id(0x00000a92), propget, helpcontext(0x00010a92)]
            VARIANT_BOOL AlwaysUseConnectionFile();
            [id(0x00000a92), propput, helpcontext(0x00010a92)]
            void AlwaysUseConnectionFile([in] VARIANT_BOOL rhs);
            [id(0x00000a93), propget, helpcontext(0x00010a93)]
            VARIANT_BOOL ServerFillColor();
            [id(0x00000a93), propput, helpcontext(0x00010a93)]
            void ServerFillColor([in] VARIANT_BOOL rhs);
            [id(0x00000a94), propget, helpcontext(0x00010a94)]
            VARIANT_BOOL ServerFontStyle();
            [id(0x00000a94), propput, helpcontext(0x00010a94)]
            void ServerFontStyle([in] VARIANT_BOOL rhs);
            [id(0x00000a95), propget, helpcontext(0x00010a95)]
            VARIANT_BOOL ServerNumberFormat();
            [id(0x00000a95), propput, helpcontext(0x00010a95)]
            void ServerNumberFormat([in] VARIANT_BOOL rhs);
            [id(0x00000a96), propget, helpcontext(0x00010a96)]
            VARIANT_BOOL ServerTextColor();
            [id(0x00000a96), propput, helpcontext(0x00010a96)]
            void ServerTextColor([in] VARIANT_BOOL rhs);
            [id(0x00000a97), propget, helpcontext(0x00010a97)]
            VARIANT_BOOL RetrieveInOfficeUILang();
            [id(0x00000a97), propput, helpcontext(0x00010a97)]
            void RetrieveInOfficeUILang([in] VARIANT_BOOL rhs);
    };

    [
      uuid(0002448E-0000-0000-C000-000000000046),
      helpcontext(0x00020124)
    ]
    dispinterface ODBCConnection {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000593), propget, helpcontext(0x00010593)]
            VARIANT_BOOL BackgroundQuery();
            [id(0x00000593), propput, helpcontext(0x00010593)]
            void BackgroundQuery([in] VARIANT_BOOL rhs);
            [id(0x00000635), helpcontext(0x00010635)]
            void CancelRefresh();
            [id(0x00000725), propget, helpcontext(0x00010725)]
            VARIANT CommandText();
            [id(0x00000725), propput, helpcontext(0x00010725)]
            void CommandText([in] VARIANT rhs);
            [id(0x00000726), propget, helpcontext(0x00010726)]
            XlCmdType CommandType();
            [id(0x00000726), propput, helpcontext(0x00010726)]
            void CommandType([in] XlCmdType rhs);
            [id(0x00000598), propget, helpcontext(0x00010598)]
            VARIANT Connection();
            [id(0x00000598), propput, helpcontext(0x00010598)]
            void Connection([in] VARIANT rhs);
            [id(0x000005c5), propget, helpcontext(0x000105c5)]
            VARIANT_BOOL EnableRefresh();
            [id(0x000005c5), propput, helpcontext(0x000105c5)]
            void EnableRefresh([in] VARIANT_BOOL rhs);
            [id(0x00000589), helpcontext(0x00010589)]
            void Refresh();
            [id(0x000002b8), propget, helpcontext(0x000102b8)]
            DATE RefreshDate();
            [id(0x00000633), propget, helpcontext(0x00010633)]
            VARIANT_BOOL Refreshing();
            [id(0x000005c7), propget, helpcontext(0x000105c7)]
            VARIANT_BOOL RefreshOnFileOpen();
            [id(0x000005c7), propput, helpcontext(0x000105c7)]
            void RefreshOnFileOpen([in] VARIANT_BOOL rhs);
            [id(0x00000729), propget, helpcontext(0x00010729)]
            long RefreshPeriod();
            [id(0x00000729), propput, helpcontext(0x00010729)]
            void RefreshPeriod([in] long rhs);
            [id(0x00000821), propget, helpcontext(0x00010821)]
            XlRobustConnect RobustConnect();
            [id(0x00000821), propput, helpcontext(0x00010821)]
            void RobustConnect([in] XlRobustConnect rhs);
            [id(0x00000822), helpcontext(0x00010822)]
            void SaveAsODC(
                            [in] BSTR ODCFileName, 
                            [in, optional] VARIANT Description, 
                            [in, optional] VARIANT Keywords);
            [id(0x000005c9), propget, helpcontext(0x000105c9)]
            VARIANT_BOOL SavePassword();
            [id(0x000005c9), propput, helpcontext(0x000105c9)]
            void SavePassword([in] VARIANT_BOOL rhs);
            [id(0x0000081f), propget, helpcontext(0x0001081f)]
            BSTR SourceConnectionFile();
            [id(0x0000081f), propput, helpcontext(0x0001081f)]
            void SourceConnectionFile([in] BSTR rhs);
            [id(0x000002ae), propget, helpcontext(0x000102ae)]
            VARIANT SourceData();
            [id(0x000002ae), propput, helpcontext(0x000102ae)]
            void SourceData([in] VARIANT rhs);
            [id(0x00000820), propget, helpcontext(0x00010820)]
            BSTR SourceDataFile();
            [id(0x00000820), propput, helpcontext(0x00010820)]
            void SourceDataFile([in] BSTR rhs);
            [id(0x00000a90), propget, helpcontext(0x00010a90)]
            XlCredentialsMethod ServerCredentialsMethod();
            [id(0x00000a90), propput, helpcontext(0x00010a90)]
            void ServerCredentialsMethod([in] XlCredentialsMethod rhs);
            [id(0x00000a91), propget, helpcontext(0x00010a91)]
            BSTR ServerSSOApplicationID();
            [id(0x00000a91), propput, helpcontext(0x00010a91)]
            void ServerSSOApplicationID([in] BSTR rhs);
            [id(0x00000a92), propget, helpcontext(0x00010a92)]
            VARIANT_BOOL AlwaysUseConnectionFile();
            [id(0x00000a92), propput, helpcontext(0x00010a92)]
            void AlwaysUseConnectionFile([in] VARIANT_BOOL rhs);
    };

    [
      uuid(0002448F-0000-0000-C000-000000000046),
      helpcontext(0x00020125)
    ]
    dispinterface Action {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x0000008b), propget, helpcontext(0x0001008b)]
            BSTR Caption();
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            XlActionType Type();
            [id(0x00000a98), propget, helpcontext(0x00010a98)]
            BSTR Coordinate();
            [id(0x00000a99), propget, helpcontext(0x00010a99)]
            BSTR Content();
            [id(0x000008a3), helpcontext(0x000108a3)]
            void Execute();
    };

    [
      uuid(00024490-0000-0000-C000-000000000046),
      helpcontext(0x00020126)
    ]
    dispinterface Actions {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(00000000), propget, helpcontext(0x00010000)]
            Action* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            Action* Item([in] VARIANT Index);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
    };

    [
      uuid(00024491-0000-0000-C000-000000000046),
      helpcontext(0x00020127)
    ]
    dispinterface FormatColor {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000063), propget, helpcontext(0x00010063)]
            VARIANT Color();
            [id(0x00000063), propput, helpcontext(0x00010063)]
            void Color([in] VARIANT rhs);
            [id(0x00000061), propget, helpcontext(0x00010061)]
            XlColorIndex ColorIndex();
            [id(0x00000061), propput, helpcontext(0x00010061)]
            void ColorIndex([in] XlColorIndex rhs);
            [id(0x0000093d), propget, helpcontext(0x0001093d)]
            VARIANT ThemeColor();
            [id(0x0000093d), propput, helpcontext(0x0001093d)]
            void ThemeColor([in] VARIANT rhs);
            [id(0x0000093e), propget, helpcontext(0x0001093e)]
            VARIANT TintAndShade();
            [id(0x0000093e), propput, helpcontext(0x0001093e)]
            void TintAndShade([in] VARIANT rhs);
    };

    [
      uuid(00024492-0000-0000-C000-000000000046),
      helpcontext(0x00020128)
    ]
    dispinterface ConditionValue {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000062d), helpcontext(0x0001062d)]
            void Modify(
                            [in] XlConditionValueTypes newtype, 
                            [in, optional] VARIANT newvalue);
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            XlConditionValueTypes Type();
            [id(0x00000006), propget, helpcontext(0x00010006)]
            VARIANT Value();
    };

    [
      uuid(00024493-0000-0000-C000-000000000046),
      helpcontext(0x00020129)
    ]
    dispinterface ColorScale {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000003d9), propget, helpcontext(0x000103d9)]
            long Priority();
            [id(0x000003d9), propput, helpcontext(0x000103d9)]
            void Priority([in] long rhs);
            [id(0x00000a41), propget, helpcontext(0x00010a41)]
            VARIANT_BOOL StopIfTrue();
            [id(0x00000a42), propget, helpcontext(0x00010a42)]
            Range* AppliesTo();
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            long Type();
            [id(0x00000a45), helpcontext(0x00010a45)]
            void SetFirstPriority();
            [id(0x00000a46), helpcontext(0x00010a46)]
            void SetLastPriority();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000a43), helpcontext(0x00010a43)]
            void ModifyAppliesToRange([in] Range* Range);
            [id(0x00000a47), propget, helpcontext(0x00010a47)]
            VARIANT_BOOL PTCondition();
            [id(0x00000a37), propget, helpcontext(0x00010a37)]
            XlPivotConditionScope ScopeType();
            [id(0x00000a37), propput, helpcontext(0x00010a37)]
            void ScopeType([in] XlPivotConditionScope rhs);
            [id(0x00000a9c), propget, helpcontext(0x00010a9c)]
            ColorScaleCriteria* ColorScaleCriteria();
    };

    [
      uuid(00024494-0000-0000-C000-000000000046),
      helpcontext(0x0002012a)
    ]
    dispinterface ColorScaleCriteria {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(00000000), propget, helpcontext(0x00010000)]
            ColorScaleCriterion* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            ColorScaleCriterion* Item([in] VARIANT Index);
    };

    [
      uuid(00024495-0000-0000-C000-000000000046),
      helpcontext(0x0002012b)
    ]
    dispinterface ColorScaleCriterion {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            XlConditionValueTypes Type();
            [id(0x0000006c), propput, helpcontext(0x0001006c)]
            void Type([in] XlConditionValueTypes rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            VARIANT Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] VARIANT rhs);
            [id(0x00000a9d), propget, helpcontext(0x00010a9d)]
            FormatColor* FormatColor();
    };

    [
      uuid(00024496-0000-0000-C000-000000000046),
      helpcontext(0x0002012c)
    ]
    dispinterface Databar {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000003d9), propget, helpcontext(0x000103d9)]
            long Priority();
            [id(0x000003d9), propput, helpcontext(0x000103d9)]
            void Priority([in] long rhs);
            [id(0x00000a41), propget, helpcontext(0x00010a41)]
            VARIANT_BOOL StopIfTrue();
            [id(0x00000a42), propget, helpcontext(0x00010a42)]
            Range* AppliesTo();
            [id(0x00000a9e), propget, helpcontext(0x00010a9e)]
            ConditionValue* MinPoint();
            [id(0x00000a9f), propget, helpcontext(0x00010a9f)]
            ConditionValue* MaxPoint();
            [id(0x00000aa0), propget, helpcontext(0x00010aa0)]
            long PercentMin();
            [id(0x00000aa0), propput, helpcontext(0x00010aa0)]
            void PercentMin([in] long rhs);
            [id(0x00000aa1), propget, helpcontext(0x00010aa1)]
            long PercentMax();
            [id(0x00000aa1), propput, helpcontext(0x00010aa1)]
            void PercentMax([in] long rhs);
            [id(0x00000aa2), propget, helpcontext(0x00010aa2)]
            IDispatch* BarColor();
            [id(0x000007e8), propget, helpcontext(0x000107e8)]
            VARIANT_BOOL ShowValue();
            [id(0x000007e8), propput, helpcontext(0x000107e8)]
            void ShowValue([in] VARIANT_BOOL rhs);
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            long Type();
            [id(0x00000a45), helpcontext(0x00010a45)]
            void SetFirstPriority();
            [id(0x00000a46), helpcontext(0x00010a46)]
            void SetLastPriority();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000a43), helpcontext(0x00010a43)]
            void ModifyAppliesToRange([in] Range* Range);
            [id(0x00000a47), propget, helpcontext(0x00010a47)]
            VARIANT_BOOL PTCondition();
            [id(0x00000a37), propget, helpcontext(0x00010a37)]
            XlPivotConditionScope ScopeType();
            [id(0x00000a37), propput, helpcontext(0x00010a37)]
            void ScopeType([in] XlPivotConditionScope rhs);
    };

    [
      uuid(00024497-0000-0000-C000-000000000046),
      helpcontext(0x0002012d)
    ]
    dispinterface IconSetCondition {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000003d9), propget, helpcontext(0x000103d9)]
            long Priority();
            [id(0x000003d9), propput, helpcontext(0x000103d9)]
            void Priority([in] long rhs);
            [id(0x00000a41), propget, helpcontext(0x00010a41)]
            VARIANT_BOOL StopIfTrue();
            [id(0x00000a42), propget, helpcontext(0x00010a42)]
            Range* AppliesTo();
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            long Type();
            [id(0x00000a43), helpcontext(0x00010a43)]
            void ModifyAppliesToRange([in] Range* Range);
            [id(0x00000a47), propget, helpcontext(0x00010a47)]
            VARIANT_BOOL PTCondition();
            [id(0x00000a37), propget, helpcontext(0x00010a37)]
            XlPivotConditionScope ScopeType();
            [id(0x00000a37), propput, helpcontext(0x00010a37)]
            void ScopeType([in] XlPivotConditionScope rhs);
            [id(0x00000a45), helpcontext(0x00010a45)]
            void SetFirstPriority();
            [id(0x00000a46), helpcontext(0x00010a46)]
            void SetLastPriority();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000aa3), propget, helpcontext(0x00010aa3)]
            VARIANT_BOOL ReverseOrder();
            [id(0x00000aa3), propput, helpcontext(0x00010aa3)]
            void ReverseOrder([in] VARIANT_BOOL rhs);
            [id(0x00000aa4), propget, helpcontext(0x00010aa4)]
            VARIANT_BOOL PercentileValues();
            [id(0x00000aa4), propput, helpcontext(0x00010aa4)]
            void PercentileValues([in] VARIANT_BOOL rhs);
            [id(0x00000aa5), propget, helpcontext(0x00010aa5)]
            VARIANT_BOOL ShowIconOnly();
            [id(0x00000aa5), propput, helpcontext(0x00010aa5)]
            void ShowIconOnly([in] VARIANT_BOOL rhs);
            [id(0x00000105), propget, helpcontext(0x00010105)]
            BSTR Formula();
            [id(0x00000105), propput, helpcontext(0x00010105)]
            void Formula([in] BSTR rhs);
            [id(0x00000aa6), propget, helpcontext(0x00010aa6)]
            VARIANT IconSet();
            [id(0x00000aa6), propput, helpcontext(0x00010aa6)]
            void IconSet([in] VARIANT rhs);
            [id(0x00000aa7), propget, helpcontext(0x00010aa7)]
            IconCriteria* IconCriteria();
    };

    [
      uuid(00024498-0000-0000-C000-000000000046),
      helpcontext(0x0002012e)
    ]
    dispinterface IconCriteria {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(00000000), propget, helpcontext(0x00010000)]
            IconCriterion* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            IconCriterion* Item([in] VARIANT Index);
    };

    [
      uuid(00024499-0000-0000-C000-000000000046),
      helpcontext(0x0002012f)
    ]
    dispinterface IconCriterion {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            XlConditionValueTypes Type();
            [id(0x0000006c), propput, helpcontext(0x0001006c)]
            void Type([in] XlConditionValueTypes rhs);
            [id(0x00000006), propget, helpcontext(0x00010006)]
            VARIANT Value();
            [id(0x00000006), propput, helpcontext(0x00010006)]
            void Value([in] VARIANT rhs);
            [id(0x0000031d), propget, helpcontext(0x0001031d)]
            long Operator();
            [id(0x0000031d), propput, helpcontext(0x0001031d)]
            void Operator([in] long rhs);
    };

    [
      uuid(0002449A-0000-0000-C000-000000000046),
      helpcontext(0x00020130)
    ]
    dispinterface Icon {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IconSet* Parent();
            [id(0x000001e6), propget, helpcontext(0x000101e6)]
            long Index();
    };

    [
      uuid(0002449B-0000-0000-C000-000000000046),
      helpcontext(0x00020131)
    ]
    dispinterface IconSet {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000023a), propget, helpcontext(0x0001023a)]
            XlIconSet ID();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(00000000), propget, helpcontext(0x00010000)]
            Icon* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            Icon* Item([in] VARIANT Index);
    };

    [
      uuid(0002449C-0000-0000-C000-000000000046),
      helpcontext(0x00020132)
    ]
    dispinterface IconSets {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(00000000), propget, helpcontext(0x00010000)]
            IDispatch* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
    };

    [
      uuid(0002449D-0000-0000-C000-000000000046),
      helpcontext(0x00020133)
    ]
    dispinterface Top10 {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000003d9), propget, helpcontext(0x000103d9)]
            long Priority();
            [id(0x000003d9), propput, helpcontext(0x000103d9)]
            void Priority([in] long rhs);
            [id(0x00000a41), propget, helpcontext(0x00010a41)]
            VARIANT_BOOL StopIfTrue();
            [id(0x00000a41), propput, helpcontext(0x00010a41)]
            void StopIfTrue([in] VARIANT_BOOL rhs);
            [id(0x00000a42), propget, helpcontext(0x00010a42)]
            Range* AppliesTo();
            [id(0x00000aa8), propget, helpcontext(0x00010aa8)]
            XlTopBottom TopBottom();
            [id(0x00000aa8), propput, helpcontext(0x00010aa8)]
            void TopBottom([in] XlTopBottom rhs);
            [id(0x0000050a), propget, helpcontext(0x0001050a)]
            long Rank();
            [id(0x0000050a), propput, helpcontext(0x0001050a)]
            void Rank([in] long rhs);
            [id(0x00000aa9), propget, helpcontext(0x00010aa9)]
            VARIANT_BOOL Percent();
            [id(0x00000aa9), propput, helpcontext(0x00010aa9)]
            void Percent([in] VARIANT_BOOL rhs);
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x000001b3), propget, helpcontext(0x000101b3)]
            Borders* Borders();
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            long Type();
            [id(0x000000c1), propget, helpcontext(0x000100c1)]
            VARIANT NumberFormat();
            [id(0x000000c1), propput, helpcontext(0x000100c1)]
            void NumberFormat([in] VARIANT rhs);
            [id(0x00000a45), helpcontext(0x00010a45)]
            void SetFirstPriority();
            [id(0x00000a46), helpcontext(0x00010a46)]
            void SetLastPriority();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000a43), helpcontext(0x00010a43)]
            void ModifyAppliesToRange([in] Range* Range);
            [id(0x00000a47), propget, helpcontext(0x00010a47)]
            VARIANT_BOOL PTCondition();
            [id(0x00000a37), propget, helpcontext(0x00010a37)]
            XlPivotConditionScope ScopeType();
            [id(0x00000a37), propput, helpcontext(0x00010a37)]
            void ScopeType([in] XlPivotConditionScope rhs);
            [id(0x00000aaa), propget, helpcontext(0x00010aaa)]
            XlCalcFor CalcFor();
            [id(0x00000aaa), propput, helpcontext(0x00010aaa)]
            void CalcFor([in] XlCalcFor rhs);
    };

    [
      uuid(0002449E-0000-0000-C000-000000000046),
      helpcontext(0x00020134)
    ]
    dispinterface AboveAverage {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000003d9), propget, helpcontext(0x000103d9)]
            long Priority();
            [id(0x000003d9), propput, helpcontext(0x000103d9)]
            void Priority([in] long rhs);
            [id(0x00000a41), propget, helpcontext(0x00010a41)]
            VARIANT_BOOL StopIfTrue();
            [id(0x00000a41), propput, helpcontext(0x00010a41)]
            void StopIfTrue([in] VARIANT_BOOL rhs);
            [id(0x00000a42), propget, helpcontext(0x00010a42)]
            Range* AppliesTo();
            [id(0x00000aab), propget, helpcontext(0x00010aab)]
            XlAboveBelow AboveBelow();
            [id(0x00000aab), propput, helpcontext(0x00010aab)]
            void AboveBelow([in] XlAboveBelow rhs);
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x000001b3), propget, helpcontext(0x000101b3)]
            Borders* Borders();
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            long Type();
            [id(0x000000c1), propget, helpcontext(0x000100c1)]
            VARIANT NumberFormat();
            [id(0x000000c1), propput, helpcontext(0x000100c1)]
            void NumberFormat([in] VARIANT rhs);
            [id(0x00000a45), helpcontext(0x00010a45)]
            void SetFirstPriority();
            [id(0x00000a46), helpcontext(0x00010a46)]
            void SetLastPriority();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000a43), helpcontext(0x00010a43)]
            void ModifyAppliesToRange([in] Range* Range);
            [id(0x00000a47), propget, helpcontext(0x00010a47)]
            VARIANT_BOOL PTCondition();
            [id(0x00000a37), propget, helpcontext(0x00010a37)]
            XlPivotConditionScope ScopeType();
            [id(0x00000a37), propput, helpcontext(0x00010a37)]
            void ScopeType([in] XlPivotConditionScope rhs);
            [id(0x00000aaa), propget, helpcontext(0x00010aaa)]
            XlCalcFor CalcFor();
            [id(0x00000aaa), propput, helpcontext(0x00010aaa)]
            void CalcFor([in] XlCalcFor rhs);
            [id(0x00000aac), propget, helpcontext(0x00010aac)]
            long NumStdDev();
            [id(0x00000aac), propput, helpcontext(0x00010aac)]
            void NumStdDev([in] long rhs);
    };

    [
      uuid(0002449F-0000-0000-C000-000000000046),
      helpcontext(0x00020135)
    ]
    dispinterface UniqueValues {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000003d9), propget, helpcontext(0x000103d9)]
            long Priority();
            [id(0x000003d9), propput, helpcontext(0x000103d9)]
            void Priority([in] long rhs);
            [id(0x00000a41), propget, helpcontext(0x00010a41)]
            VARIANT_BOOL StopIfTrue();
            [id(0x00000a41), propput, helpcontext(0x00010a41)]
            void StopIfTrue([in] VARIANT_BOOL rhs);
            [id(0x00000a42), propget, helpcontext(0x00010a42)]
            Range* AppliesTo();
            [id(0x00000aad), propget, helpcontext(0x00010aad)]
            XlDupeUnique DupeUnique();
            [id(0x00000aad), propput, helpcontext(0x00010aad)]
            void DupeUnique([in] XlDupeUnique rhs);
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x000001b3), propget, helpcontext(0x000101b3)]
            Borders* Borders();
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x0000006c), propget, helpcontext(0x0001006c)]
            long Type();
            [id(0x000000c1), propget, helpcontext(0x000100c1)]
            VARIANT NumberFormat();
            [id(0x000000c1), propput, helpcontext(0x000100c1)]
            void NumberFormat([in] VARIANT rhs);
            [id(0x00000a45), helpcontext(0x00010a45)]
            void SetFirstPriority();
            [id(0x00000a46), helpcontext(0x00010a46)]
            void SetLastPriority();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000a43), helpcontext(0x00010a43)]
            void ModifyAppliesToRange([in] Range* Range);
            [id(0x00000a47), propget, helpcontext(0x00010a47)]
            VARIANT_BOOL PTCondition();
            [id(0x00000a37), propget, helpcontext(0x00010a37)]
            XlPivotConditionScope ScopeType();
            [id(0x00000a37), propput, helpcontext(0x00010a37)]
            void ScopeType([in] XlPivotConditionScope rhs);
    };

    [
      uuid(000244A0-0000-0000-C000-000000000046),
      helpcontext(0x00020136)
    ]
    dispinterface Ranges {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(00000000), propget, helpcontext(0x00010000)]
            Range* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            Range* Item([in] VARIANT Index);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
    };

    [
      uuid(000244A1-0000-0000-C000-000000000046),
      helpcontext(0x00020137)
    ]
    dispinterface HeaderFooter {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x0000008a), propget, helpcontext(0x0001008a)]
            BSTR Text();
            [id(0x0000008a), propput, helpcontext(0x0001008a)]
            void Text([in] BSTR rhs);
            [id(0x000001df), propget, helpcontext(0x000101df)]
            Graphic* Picture();
    };

    [
      uuid(000244A2-0000-0000-C000-000000000046),
      helpcontext(0x00020138)
    ]
    dispinterface Page {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x000003fa), propget, helpcontext(0x000103fa)]
            HeaderFooter* LeftHeader();
            [id(0x000003f3), propget, helpcontext(0x000103f3)]
            HeaderFooter* CenterHeader();
            [id(0x00000402), propget, helpcontext(0x00010402)]
            HeaderFooter* RightHeader();
            [id(0x000003f9), propget, helpcontext(0x000103f9)]
            HeaderFooter* LeftFooter();
            [id(0x000003f2), propget, helpcontext(0x000103f2)]
            HeaderFooter* CenterFooter();
            [id(0x00000401), propget, helpcontext(0x00010401)]
            HeaderFooter* RightFooter();
    };

    [
      uuid(000244A3-0000-0000-C000-000000000046),
      helpcontext(0x00020139)
    ]
    dispinterface Pages {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            Page* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            Page* _Default([in] VARIANT Index);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(000244A4-0000-0000-C000-000000000046),
      helpcontext(0x0002013a)
    ]
    dispinterface ServerViewableItems {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000b5), helpcontext(0x000100b5)]
            IDispatch* Add([in] VARIANT Obj);
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete([in] VARIANT Index);
            [id(0x000008bf), helpcontext(0x000108bf)]
            void DeleteAll();
            [id(0x000000aa), helpcontext(0x000100aa)]
            IDispatch* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            IDispatch* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(000244A5-0000-0000-C000-000000000046),
      helpcontext(0x0002013b)
    ]
    dispinterface TableStyleElement {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000aaf), propget, helpcontext(0x00010aaf)]
            VARIANT_BOOL HasFormat();
            [id(0x00000081), propget, helpcontext(0x00010081)]
            Interior* Interior();
            [id(0x000001b3), propget, helpcontext(0x000101b3)]
            Borders* Borders();
            [id(0x00000092), propget, helpcontext(0x00010092)]
            Font* Font();
            [id(0x00000ab0), propget, helpcontext(0x00010ab0)]
            long StripeSize();
            [id(0x00000ab0), propput, helpcontext(0x00010ab0)]
            void StripeSize([in] long rhs);
            [id(0x0000006f), helpcontext(0x0001006f)]
            void Clear();
    };

    [
      uuid(000244A6-0000-0000-C000-000000000046),
      helpcontext(0x0002013c)
    ]
    dispinterface TableStyleElements {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000aa), helpcontext(0x000100aa)]
            TableStyleElement* Item([in] XlTableStyleElementType Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            TableStyleElement* _Default([in] XlTableStyleElementType Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(000244A7-0000-0000-C000-000000000046),
      helpcontext(0x0002013d)
    ]
    dispinterface TableStyle {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(00000000), propget, helpcontext(0x00010000)]
            BSTR _Default();
            [id(0x0000006e), propget, helpcontext(0x0001006e)]
            BSTR Name();
            [id(0x000003a9), propget, helpcontext(0x000103a9)]
            BSTR NameLocal();
            [id(0x00000229), propget, helpcontext(0x00010229)]
            VARIANT_BOOL BuiltIn();
            [id(0x00000ab1), propget, helpcontext(0x00010ab1)]
            TableStyleElements* TableStyleElements();
            [id(0x00000ab2), propget, helpcontext(0x00010ab2)]
            VARIANT_BOOL ShowAsAvailableTableStyle();
            [id(0x00000ab2), propput, helpcontext(0x00010ab2)]
            void ShowAsAvailableTableStyle([in] VARIANT_BOOL rhs);
            [id(0x00000ab3), propget, helpcontext(0x00010ab3)]
            VARIANT_BOOL ShowAsAvailablePivotTableStyle();
            [id(0x00000ab3), propput, helpcontext(0x00010ab3)]
            void ShowAsAvailablePivotTableStyle([in] VARIANT_BOOL rhs);
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x0000040f), helpcontext(0x0001040f)]
            TableStyle* Duplicate([in, optional] VARIANT NewTableStyleName);
    };

    [
      uuid(000244A8-0000-0000-C000-000000000046),
      helpcontext(0x0002013e)
    ]
    dispinterface TableStyles {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000b5), helpcontext(0x000100b5)]
            TableStyle* Add([in] BSTR TableStyleName);
            [id(0x000000aa), helpcontext(0x000100aa)]
            TableStyle* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            TableStyle* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(000244A9-0000-0000-C000-000000000046),
      helpcontext(0x0002013f)
    ]
    dispinterface SortField {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000ab5), propget, helpcontext(0x00010ab5)]
            XlSortOn SortOn();
            [id(0x00000ab5), propput, helpcontext(0x00010ab5)]
            void SortOn([in] XlSortOn rhs);
            [id(0x00000ab6), propget, helpcontext(0x00010ab6)]
            IDispatch* SortOnValue();
            [id(0x0000009b), propget, helpcontext(0x0001009b)]
            Range* Key();
            [id(0x000000c0), propget, helpcontext(0x000100c0)]
            XlSortOrder Order();
            [id(0x000000c0), propput, helpcontext(0x000100c0)]
            void Order([in] XlSortOrder rhs);
            [id(0x00000ab7), propget, helpcontext(0x00010ab7)]
            VARIANT CustomOrder();
            [id(0x00000ab7), propput, helpcontext(0x00010ab7)]
            void CustomOrder([in] VARIANT rhs);
            [id(0x00000ab8), propget, helpcontext(0x00010ab8)]
            XlSortDataOption DataOption();
            [id(0x00000ab8), propput, helpcontext(0x00010ab8)]
            void DataOption([in] XlSortDataOption rhs);
            [id(0x000003d9), propget, helpcontext(0x000103d9)]
            long Priority();
            [id(0x000003d9), propput, helpcontext(0x000103d9)]
            void Priority([in] long rhs);
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000ab9), helpcontext(0x00010ab9)]
            void ModifyKey([in] Range* Key);
            [id(0x00000aba), helpcontext(0x00010aba)]
            void SetIcon([in] Icon* Icon);
    };

    [
      uuid(000244AA-0000-0000-C000-000000000046),
      helpcontext(0x00020140)
    ]
    dispinterface SortFields {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x000000b5), helpcontext(0x000100b5)]
            SortField* Add(
                            [in] Range* Key, 
                            [in, optional] VARIANT SortOn, 
                            [in, optional] VARIANT Order, 
                            [in, optional] VARIANT CustomOrder, 
                            [in, optional] VARIANT DataOption);
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            SortField* Item([in] VARIANT Index);
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x0000006f), helpcontext(0x0001006f)]
            void Clear();
            [id(00000000), propget, helpcontext(0x00010000)]
            SortField* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
    };

    [
      uuid(000244AB-0000-0000-C000-000000000046),
      helpcontext(0x00020141)
    ]
    dispinterface Sort {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000abc), propget, helpcontext(0x00010abc)]
            Range* Rng();
            [id(0x0000037f), propget, helpcontext(0x0001037f)]
            XlYesNoGuess Header();
            [id(0x0000037f), propput, helpcontext(0x0001037f)]
            void Header([in] XlYesNoGuess rhs);
            [id(0x000001aa), propget, helpcontext(0x000101aa)]
            VARIANT_BOOL MatchCase();
            [id(0x000001aa), propput, helpcontext(0x000101aa)]
            void MatchCase([in] VARIANT_BOOL rhs);
            [id(0x00000086), propget, helpcontext(0x00010086)]
            XlSortOrientation Orientation();
            [id(0x00000086), propput, helpcontext(0x00010086)]
            void Orientation([in] XlSortOrientation rhs);
            [id(0x00000381), propget, helpcontext(0x00010381)]
            XlSortMethod SortMethod();
            [id(0x00000381), propput, helpcontext(0x00010381)]
            void SortMethod([in] XlSortMethod rhs);
            [id(0x00000abd), propget, helpcontext(0x00010abd)]
            SortFields* SortFields();
            [id(0x00000abe), helpcontext(0x00010abe)]
            void SetRange([in] Range* Rng);
            [id(0x0000068b), helpcontext(0x0001068b)]
            void Apply();
    };

    [
      uuid(000244AC-0000-0000-C000-000000000046),
      helpcontext(0x00020142)
    ]
    dispinterface Research {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000abf), helpcontext(0x00010abf)]
            VARIANT Query(
                            [in] BSTR ServiceID, 
                            [in, optional] VARIANT QueryString, 
                            [in, optional] VARIANT QueryLanguage, 
                            [in, optional] VARIANT UseSelection, 
                            [in, optional] VARIANT LaunchQuery);
            [id(0x00000ac5), helpcontext(0x00010ac5)]
            VARIANT_BOOL IsResearchService([in] BSTR ServiceID);
            [id(0x00000ac6), helpcontext(0x00010ac6)]
            VARIANT SetLanguagePair(
                            [in] long LanguageFrom, 
                            [in] long LanguageTo);
    };

    [
      uuid(000244AD-0000-0000-C000-000000000046),
      helpcontext(0x00020143)
    ]
    dispinterface ColorStop {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000075), helpcontext(0x00010075)]
            void Delete();
            [id(0x00000063), propget, helpcontext(0x00010063)]
            VARIANT Color();
            [id(0x00000063), propput, helpcontext(0x00010063)]
            void Color([in] VARIANT rhs);
            [id(0x0000093d), propget, helpcontext(0x0001093d)]
            long ThemeColor();
            [id(0x0000093d), propput, helpcontext(0x0001093d)]
            void ThemeColor([in] long rhs);
            [id(0x0000093e), propget, helpcontext(0x0001093e)]
            VARIANT TintAndShade();
            [id(0x0000093e), propput, helpcontext(0x0001093e)]
            void TintAndShade([in] VARIANT rhs);
            [id(0x00000085), propget, helpcontext(0x00010085)]
            double Position();
            [id(0x00000085), propput, helpcontext(0x00010085)]
            void Position([in] double rhs);
    };

    [
      uuid(000244AE-0000-0000-C000-000000000046),
      helpcontext(0x00020144)
    ]
    dispinterface ColorStops {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(0x000000b5), helpcontext(0x000100b5)]
            ColorStop* Add([in] double Position);
            [id(0x000000aa), helpcontext(0x000100aa)]
            ColorStop* Item([in] VARIANT Index);
            [id(00000000), propget, helpcontext(0x00010000)]
            ColorStop* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x0000006f), helpcontext(0x0001006f)]
            void Clear();
    };

    [
      uuid(000244AF-0000-0000-C000-000000000046),
      helpcontext(0x00020145)
    ]
    dispinterface LinearGradient {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000ac9), propget, helpcontext(0x00010ac9)]
            ColorStops* ColorStops();
            [id(0x00000657), propget, helpcontext(0x00010657)]
            double Degree();
            [id(0x00000657), propput, helpcontext(0x00010657)]
            void Degree([in] double rhs);
    };

    [
      uuid(000244B0-0000-0000-C000-000000000046),
      helpcontext(0x00020146)
    ]
    dispinterface RectangularGradient {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000ac9), propget, helpcontext(0x00010ac9)]
            ColorStops* ColorStops();
            [id(0x00000aca), propget, helpcontext(0x00010aca)]
            double RectangleTop();
            [id(0x00000aca), propput, helpcontext(0x00010aca)]
            void RectangleTop([in] double rhs);
            [id(0x00000acb), propget, helpcontext(0x00010acb)]
            double RectangleBottom();
            [id(0x00000acb), propput, helpcontext(0x00010acb)]
            void RectangleBottom([in] double rhs);
            [id(0x00000acc), propget, helpcontext(0x00010acc)]
            double RectangleLeft();
            [id(0x00000acc), propput, helpcontext(0x00010acc)]
            void RectangleLeft([in] double rhs);
            [id(0x00000acd), propget, helpcontext(0x00010acd)]
            double RectangleRight();
            [id(0x00000acd), propput, helpcontext(0x00010acd)]
            void RectangleRight([in] double rhs);
    };

    [
      uuid(000244B1-0000-0000-C000-000000000046),
      helpcontext(0x00020147)
    ]
    dispinterface MultiThreadedCalculation {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000258), propget, helpcontext(0x00010258)]
            VARIANT_BOOL Enabled();
            [id(0x00000258), propput, helpcontext(0x00010258)]
            void Enabled([in] VARIANT_BOOL rhs);
            [id(0x00000ace), propget, helpcontext(0x00010ace)]
            XlThreadMode ThreadMode();
            [id(0x00000ace), propput, helpcontext(0x00010ace)]
            void ThreadMode([in] XlThreadMode rhs);
            [id(0x00000acf), propget, helpcontext(0x00010acf)]
            long ThreadCount();
            [id(0x00000acf), propput, helpcontext(0x00010acf)]
            void ThreadCount([in] long rhs);
    };

    [
      uuid(000244B2-0000-0000-C000-000000000046),
      helpcontext(0x00020148)
    ]
    dispinterface ChartFormat {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x0000067f), propget, helpcontext(0x0001067f)]
            FillFormat* Fill();
            [id(0x00000a67), propget, helpcontext(0x00010a67)]
            GlowFormat* Glow();
            [id(0x00000331), propget, helpcontext(0x00010331)]
            LineFormat* Line();
            [id(0x0000065f), propget, helpcontext(0x0001065f)]
            PictureFormat* PictureFormat();
            [id(0x00000067), propget, helpcontext(0x00010067)]
            ShadowFormat* Shadow();
            [id(0x00000a66), propget, helpcontext(0x00010a66)]
            SoftEdgeFormat* SoftEdge();
            [id(0x00000a63), propget, helpcontext(0x00010a63)]
            TextFrame2* TextFrame2();
            [id(0x000006a7), propget, helpcontext(0x000106a7)]
            ThreeDFormat* ThreeD();
    };

    [
      uuid(000244B3-0000-0000-C000-000000000046),
      helpcontext(0x00020149)
    ]
    dispinterface FileExportConverter {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000ad1), propget, helpcontext(0x00010ad1)]
            BSTR Extensions();
            [id(0x000000da), propget, helpcontext(0x000100da)]
            BSTR Description();
            [id(0x00000120), propget, helpcontext(0x00010120)]
            long FileFormat();
    };

    [
      uuid(000244B4-0000-0000-C000-000000000046),
      helpcontext(0x0002014a)
    ]
    dispinterface FileExportConverters {
        properties:
        methods:
            [id(0x60000000), restricted]
            void QueryInterface(
                            [in] GUID* riid, 
                            [out] void** ppvObj);
            [id(0x60000001), restricted]
            unsigned long AddRef();
            [id(0x60000002), restricted]
            unsigned long Release();
            [id(0x60010000), restricted]
            void GetTypeInfoCount([out] unsigned int* pctinfo);
            [id(0x60010001), restricted]
            void GetTypeInfo(
                            [in] unsigned int itinfo, 
                            [in] unsigned long lcid, 
                            [out] void** pptinfo);
            [id(0x60010002), restricted]
            void GetIDsOfNames(
                            [in] GUID* riid, 
                            [in] char** rgszNames, 
                            [in] unsigned int cNames, 
                            [in] unsigned long lcid, 
                            [out] long* rgdispid);
            [id(0x60010003), restricted]
            void Invoke(
                            [in] long dispidMember, 
                            [in] GUID* riid, 
                            [in] unsigned long lcid, 
                            [in] unsigned short wFlags, 
                            [in] DISPPARAMS* pdispparams, 
                            [out] VARIANT* pvarResult, 
                            [out] EXCEPINFO* pexcepinfo, 
                            [out] unsigned int* puArgErr);
            [id(0x00000094), propget, helpcontext(0x00010094)]
            Application* Application();
            [id(0x00000095), propget, helpcontext(0x00010095)]
            XlCreator Creator();
            [id(0x00000096), propget, helpcontext(0x00010096)]
            IDispatch* Parent();
            [id(0x00000076), propget, helpcontext(0x00010076)]
            long Count();
            [id(00000000), propget, helpcontext(0x00010000)]
            FileExportConverter* _Default([in] VARIANT Index);
            [id(0xfffffffc), propget, helpcontext(0x0000fffc)]
            IUnknown* _NewEnum();
            [id(0x000000aa), propget, helpcontext(0x000100aa)]
            FileExportConverter* Item([in] VARIANT Index);
    };

    [
      odl,
      uuid(0002442E-0001-0000-C000-000000000046),
      helpcontext(0x000200c4),
      hidden
    ]
    interface IDummy : IDispatch {
        [helpcontext(0x00010644)]
        HRESULT _stdcall _ActiveSheetOrChart();
        [helpcontext(0x0001041f)]
        HRESULT _stdcall RGB();
        [helpcontext(0x00010420)]
        HRESULT _stdcall ChDir();
        [helpcontext(0x00010475)]
        HRESULT _stdcall DoScript();
        [helpcontext(0x00010473)]
        HRESULT _stdcall DirectObject();
        [helpcontext(0x00010758)]
        HRESULT _stdcall RefreshDocument();
        [helpcontext(0x00010a48)]
        HRESULT _stdcall AddSignatureLine(
                        [in] VARIANT SigProv, 
                        [out, retval] Signature** RHS);
        [helpcontext(0x00010a4a)]
        HRESULT _stdcall AddNonVisibleSignature(
                        [in] VARIANT SigProv, 
                        [out, retval] Signature** RHS);
        [propget, helpcontext(0x00010a4b)]
        HRESULT _stdcall ShowSignaturesPane([out, retval] VARIANT_BOOL* RHS);
        [propput, helpcontext(0x00010a4b)]
        HRESULT _stdcall ShowSignaturesPane([in] VARIANT_BOOL RHS);
        [helpcontext(0x00010a4c)]
        HRESULT _stdcall ThemeFontScheme();
        [helpcontext(0x00010a4d)]
        HRESULT _stdcall ThemeColorScheme();
        [helpcontext(0x00010a4e)]
        HRESULT _stdcall ThemeEffectScheme();
        [helpcontext(0x00010a4f)]
        HRESULT _stdcall Load();
    };

    [
      odl,
      uuid(0002444F-0001-0000-C000-000000000046),
      helpcontext(0x000200e5),
      hidden
    ]
    interface ICanvasShapes : IDispatch {
    };

    [
      uuid(59191DA1-EA47-11CE-A51F-00AA0061507F),
      helpcontext(0x000200be)
    ]
    coclass QueryTable {
        [default] dispinterface _QueryTable;
        [default, source] dispinterface RefreshEvents;
    };

    [
      uuid(00024500-0000-0000-C000-000000000046),
      helpcontext(0x00020001)
    ]
    coclass Application {
        [default] interface _Application;
        [default, source] dispinterface AppEvents;
    };

    [
      uuid(00020821-0000-0000-C000-000000000046),
      helpcontext(0x00020007)
    ]
    coclass Chart {
        [default] interface _Chart;
        [default, source] dispinterface ChartEvents;
    };

    [
      uuid(00020820-0000-0000-C000-000000000046),
      helpcontext(0x00020010)
    ]
    coclass Worksheet {
        [default] interface _Worksheet;
        [default, source] dispinterface DocEvents;
    };

    [
      uuid(00020812-0000-0000-C000-000000000046),
      helpcontext(0x00020016),
      appobject,
      hidden
    ]
    coclass Global {
        [default] interface _Global;
    };

    [
      uuid(00020819-0000-0000-C000-000000000046),
      helpcontext(0x00020021)
    ]
    coclass Workbook {
        [default] interface _Workbook;
        [default, source] dispinterface WorkbookEvents;
    };

    [
      uuid(00020818-0000-0000-C000-000000000046),
      helpcontext(0x00020062)
    ]
    coclass OLEObject {
        [default] dispinterface _OLEObject;
        [default, source] dispinterface OLEObjectEvents;
    };
};
